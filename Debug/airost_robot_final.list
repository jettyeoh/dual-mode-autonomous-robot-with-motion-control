
airost_robot_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097b4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000494  080098c8  080098c8  000198c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d5c  08009d5c  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  08009d5c  08009d5c  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009d5c  08009d5c  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d5c  08009d5c  00019d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d60  08009d60  00019d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08009d64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  200001d8  08009f3c  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004bc  08009f3c  000204bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020201  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e3e5  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002676  00000000  00000000  0002e629  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dc8  00000000  00000000  00030ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000aac  00000000  00000000  00031a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019238  00000000  00000000  00032514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010c75  00000000  00000000  0004b74c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008cc2b  00000000  00000000  0005c3c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004fe0  00000000  00000000  000e8fec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000edfcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	080098ac 	.word	0x080098ac

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	080098ac 	.word	0x080098ac

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__gesf2>:
 8000b7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b80:	e006      	b.n	8000b90 <__cmpsf2+0x4>
 8000b82:	bf00      	nop

08000b84 <__lesf2>:
 8000b84:	f04f 0c01 	mov.w	ip, #1
 8000b88:	e002      	b.n	8000b90 <__cmpsf2+0x4>
 8000b8a:	bf00      	nop

08000b8c <__cmpsf2>:
 8000b8c:	f04f 0c01 	mov.w	ip, #1
 8000b90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b94:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b98:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b9c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ba0:	bf18      	it	ne
 8000ba2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ba6:	d011      	beq.n	8000bcc <__cmpsf2+0x40>
 8000ba8:	b001      	add	sp, #4
 8000baa:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000bae:	bf18      	it	ne
 8000bb0:	ea90 0f01 	teqne	r0, r1
 8000bb4:	bf58      	it	pl
 8000bb6:	ebb2 0003 	subspl.w	r0, r2, r3
 8000bba:	bf88      	it	hi
 8000bbc:	17c8      	asrhi	r0, r1, #31
 8000bbe:	bf38      	it	cc
 8000bc0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000bc4:	bf18      	it	ne
 8000bc6:	f040 0001 	orrne.w	r0, r0, #1
 8000bca:	4770      	bx	lr
 8000bcc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bd0:	d102      	bne.n	8000bd8 <__cmpsf2+0x4c>
 8000bd2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000bd6:	d105      	bne.n	8000be4 <__cmpsf2+0x58>
 8000bd8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000bdc:	d1e4      	bne.n	8000ba8 <__cmpsf2+0x1c>
 8000bde:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000be2:	d0e1      	beq.n	8000ba8 <__cmpsf2+0x1c>
 8000be4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop

08000bec <__aeabi_cfrcmple>:
 8000bec:	4684      	mov	ip, r0
 8000bee:	4608      	mov	r0, r1
 8000bf0:	4661      	mov	r1, ip
 8000bf2:	e7ff      	b.n	8000bf4 <__aeabi_cfcmpeq>

08000bf4 <__aeabi_cfcmpeq>:
 8000bf4:	b50f      	push	{r0, r1, r2, r3, lr}
 8000bf6:	f7ff ffc9 	bl	8000b8c <__cmpsf2>
 8000bfa:	2800      	cmp	r0, #0
 8000bfc:	bf48      	it	mi
 8000bfe:	f110 0f00 	cmnmi.w	r0, #0
 8000c02:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000c04 <__aeabi_fcmpeq>:
 8000c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c08:	f7ff fff4 	bl	8000bf4 <__aeabi_cfcmpeq>
 8000c0c:	bf0c      	ite	eq
 8000c0e:	2001      	moveq	r0, #1
 8000c10:	2000      	movne	r0, #0
 8000c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c16:	bf00      	nop

08000c18 <__aeabi_fcmplt>:
 8000c18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c1c:	f7ff ffea 	bl	8000bf4 <__aeabi_cfcmpeq>
 8000c20:	bf34      	ite	cc
 8000c22:	2001      	movcc	r0, #1
 8000c24:	2000      	movcs	r0, #0
 8000c26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c2a:	bf00      	nop

08000c2c <__aeabi_fcmple>:
 8000c2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c30:	f7ff ffe0 	bl	8000bf4 <__aeabi_cfcmpeq>
 8000c34:	bf94      	ite	ls
 8000c36:	2001      	movls	r0, #1
 8000c38:	2000      	movhi	r0, #0
 8000c3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c3e:	bf00      	nop

08000c40 <__aeabi_fcmpge>:
 8000c40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c44:	f7ff ffd2 	bl	8000bec <__aeabi_cfrcmple>
 8000c48:	bf94      	ite	ls
 8000c4a:	2001      	movls	r0, #1
 8000c4c:	2000      	movhi	r0, #0
 8000c4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c52:	bf00      	nop

08000c54 <__aeabi_fcmpgt>:
 8000c54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c58:	f7ff ffc8 	bl	8000bec <__aeabi_cfrcmple>
 8000c5c:	bf34      	ite	cc
 8000c5e:	2001      	movcc	r0, #1
 8000c60:	2000      	movcs	r0, #0
 8000c62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c66:	bf00      	nop

08000c68 <__aeabi_d2lz>:
 8000c68:	b538      	push	{r3, r4, r5, lr}
 8000c6a:	4605      	mov	r5, r0
 8000c6c:	460c      	mov	r4, r1
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2300      	movs	r3, #0
 8000c72:	4628      	mov	r0, r5
 8000c74:	4621      	mov	r1, r4
 8000c76:	f7ff feab 	bl	80009d0 <__aeabi_dcmplt>
 8000c7a:	b928      	cbnz	r0, 8000c88 <__aeabi_d2lz+0x20>
 8000c7c:	4628      	mov	r0, r5
 8000c7e:	4621      	mov	r1, r4
 8000c80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c84:	f000 b80a 	b.w	8000c9c <__aeabi_d2ulz>
 8000c88:	4628      	mov	r0, r5
 8000c8a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000c8e:	f000 f805 	bl	8000c9c <__aeabi_d2ulz>
 8000c92:	4240      	negs	r0, r0
 8000c94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c98:	bd38      	pop	{r3, r4, r5, pc}
 8000c9a:	bf00      	nop

08000c9c <__aeabi_d2ulz>:
 8000c9c:	b5d0      	push	{r4, r6, r7, lr}
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <__aeabi_d2ulz+0x34>)
 8000ca2:	4606      	mov	r6, r0
 8000ca4:	460f      	mov	r7, r1
 8000ca6:	f7ff fc21 	bl	80004ec <__aeabi_dmul>
 8000caa:	f7ff fef7 	bl	8000a9c <__aeabi_d2uiz>
 8000cae:	4604      	mov	r4, r0
 8000cb0:	f7ff fba2 	bl	80003f8 <__aeabi_ui2d>
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	4b07      	ldr	r3, [pc, #28]	; (8000cd4 <__aeabi_d2ulz+0x38>)
 8000cb8:	f7ff fc18 	bl	80004ec <__aeabi_dmul>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	460b      	mov	r3, r1
 8000cc0:	4630      	mov	r0, r6
 8000cc2:	4639      	mov	r1, r7
 8000cc4:	f7ff fa5a 	bl	800017c <__aeabi_dsub>
 8000cc8:	f7ff fee8 	bl	8000a9c <__aeabi_d2uiz>
 8000ccc:	4621      	mov	r1, r4
 8000cce:	bdd0      	pop	{r4, r6, r7, pc}
 8000cd0:	3df00000 	.word	0x3df00000
 8000cd4:	41f00000 	.word	0x41f00000

08000cd8 <HAL_UART_RxCpltCallback>:
uint8_t open = 0;
uint8_t arm = 0;
uint8_t following = 0;

//handle received data
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2  && manual == 1) {
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a1e      	ldr	r2, [pc, #120]	; (8000d60 <HAL_UART_RxCpltCallback+0x88>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d135      	bne.n	8000d56 <HAL_UART_RxCpltCallback+0x7e>
 8000cea:	4b1e      	ldr	r3, [pc, #120]	; (8000d64 <HAL_UART_RxCpltCallback+0x8c>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d131      	bne.n	8000d56 <HAL_UART_RxCpltCallback+0x7e>
        char receivedChar = rxBuffer[rxIndex]; // Store the received character
 8000cf2:	4b1d      	ldr	r3, [pc, #116]	; (8000d68 <HAL_UART_RxCpltCallback+0x90>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	4b1c      	ldr	r3, [pc, #112]	; (8000d6c <HAL_UART_RxCpltCallback+0x94>)
 8000cfc:	5c9b      	ldrb	r3, [r3, r2]
 8000cfe:	73fb      	strb	r3, [r7, #15]

        if (receivedChar == '\n') {
 8000d00:	7bfb      	ldrb	r3, [r7, #15]
 8000d02:	2b0a      	cmp	r3, #10
 8000d04:	d10d      	bne.n	8000d22 <HAL_UART_RxCpltCallback+0x4a>
            // Message delimiter detected, null-terminate the string
            rxBuffer[rxIndex] = '\0';
 8000d06:	4b18      	ldr	r3, [pc, #96]	; (8000d68 <HAL_UART_RxCpltCallback+0x90>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	4b17      	ldr	r3, [pc, #92]	; (8000d6c <HAL_UART_RxCpltCallback+0x94>)
 8000d10:	2100      	movs	r1, #0
 8000d12:	5499      	strb	r1, [r3, r2]
            messageReady = 1; // Set flag to process the message
 8000d14:	4b16      	ldr	r3, [pc, #88]	; (8000d70 <HAL_UART_RxCpltCallback+0x98>)
 8000d16:	2201      	movs	r2, #1
 8000d18:	701a      	strb	r2, [r3, #0]
            rxIndex = 0;      // Reset buffer index for the next message
 8000d1a:	4b13      	ldr	r3, [pc, #76]	; (8000d68 <HAL_UART_RxCpltCallback+0x90>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	701a      	strb	r2, [r3, #0]
 8000d20:	e00e      	b.n	8000d40 <HAL_UART_RxCpltCallback+0x68>
        }
        else {
            // Add character to the buffer
            rxIndex++;
 8000d22:	4b11      	ldr	r3, [pc, #68]	; (8000d68 <HAL_UART_RxCpltCallback+0x90>)
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	b2db      	uxtb	r3, r3
 8000d28:	3301      	adds	r3, #1
 8000d2a:	b2da      	uxtb	r2, r3
 8000d2c:	4b0e      	ldr	r3, [pc, #56]	; (8000d68 <HAL_UART_RxCpltCallback+0x90>)
 8000d2e:	701a      	strb	r2, [r3, #0]

            // Handle buffer overflow
            if (rxIndex >= 50) {
 8000d30:	4b0d      	ldr	r3, [pc, #52]	; (8000d68 <HAL_UART_RxCpltCallback+0x90>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	2b31      	cmp	r3, #49	; 0x31
 8000d38:	d902      	bls.n	8000d40 <HAL_UART_RxCpltCallback+0x68>
                rxIndex = 0; // Reset the index to prevent overflow
 8000d3a:	4b0b      	ldr	r3, [pc, #44]	; (8000d68 <HAL_UART_RxCpltCallback+0x90>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	701a      	strb	r2, [r3, #0]
            }
        }

        // Re-enable interrupt to receive the next character
        HAL_UART_Receive_IT(&huart2, (uint8_t *)&rxBuffer[rxIndex], 1);
 8000d40:	4b09      	ldr	r3, [pc, #36]	; (8000d68 <HAL_UART_RxCpltCallback+0x90>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	461a      	mov	r2, r3
 8000d48:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <HAL_UART_RxCpltCallback+0x94>)
 8000d4a:	4413      	add	r3, r2
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4808      	ldr	r0, [pc, #32]	; (8000d74 <HAL_UART_RxCpltCallback+0x9c>)
 8000d52:	f003 f88e 	bl	8003e72 <HAL_UART_Receive_IT>
    }
}
 8000d56:	bf00      	nop
 8000d58:	3710      	adds	r7, #16
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40004400 	.word	0x40004400
 8000d64:	20000001 	.word	0x20000001
 8000d68:	2000035e 	.word	0x2000035e
 8000d6c:	2000032c 	.word	0x2000032c
 8000d70:	2000035f 	.word	0x2000035f
 8000d74:	200002e4 	.word	0x200002e4

08000d78 <ProcessReceivedData>:

//arm control, claw control, motor control, distance follow
void ProcessReceivedData(char *data) {
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af02      	add	r7, sp, #8
 8000d7e:	6078      	str	r0, [r7, #4]
    if ((sscanf(data, "%d %d %d", &pitch, &roll, &yaw) == 3) && (following == 0)){
 8000d80:	4b3d      	ldr	r3, [pc, #244]	; (8000e78 <ProcessReceivedData+0x100>)
 8000d82:	9300      	str	r3, [sp, #0]
 8000d84:	4b3d      	ldr	r3, [pc, #244]	; (8000e7c <ProcessReceivedData+0x104>)
 8000d86:	4a3e      	ldr	r2, [pc, #248]	; (8000e80 <ProcessReceivedData+0x108>)
 8000d88:	493e      	ldr	r1, [pc, #248]	; (8000e84 <ProcessReceivedData+0x10c>)
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f004 fcf6 	bl	800577c <siscanf>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b03      	cmp	r3, #3
 8000d94:	d125      	bne.n	8000de2 <ProcessReceivedData+0x6a>
 8000d96:	4b3c      	ldr	r3, [pc, #240]	; (8000e88 <ProcessReceivedData+0x110>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d121      	bne.n	8000de2 <ProcessReceivedData+0x6a>
    	if(arm == 1){
 8000d9e:	4b3b      	ldr	r3, [pc, #236]	; (8000e8c <ProcessReceivedData+0x114>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d110      	bne.n	8000dc8 <ProcessReceivedData+0x50>
        	Set_FrontBack(-pitch);
 8000da6:	4b36      	ldr	r3, [pc, #216]	; (8000e80 <ProcessReceivedData+0x108>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	425b      	negs	r3, r3
 8000dac:	4618      	mov	r0, r3
 8000dae:	f000 fe21 	bl	80019f4 <Set_FrontBack>
        	Set_LeftRight(yaw);
 8000db2:	4b31      	ldr	r3, [pc, #196]	; (8000e78 <ProcessReceivedData+0x100>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4618      	mov	r0, r3
 8000db8:	f000 fe40 	bl	8001a3c <Set_LeftRight>
        	Set_UpDown(roll);
 8000dbc:	4b2f      	ldr	r3, [pc, #188]	; (8000e7c <ProcessReceivedData+0x104>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f000 fe5d 	bl	8001a80 <Set_UpDown>
    	if(arm == 1){
 8000dc6:	e042      	b.n	8000e4e <ProcessReceivedData+0xd6>
    	}
    	else if(arm == 0){
 8000dc8:	4b30      	ldr	r3, [pc, #192]	; (8000e8c <ProcessReceivedData+0x114>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d13e      	bne.n	8000e4e <ProcessReceivedData+0xd6>
    		Control_Motor(pitch, roll);
 8000dd0:	4b2b      	ldr	r3, [pc, #172]	; (8000e80 <ProcessReceivedData+0x108>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a29      	ldr	r2, [pc, #164]	; (8000e7c <ProcessReceivedData+0x104>)
 8000dd6:	6812      	ldr	r2, [r2, #0]
 8000dd8:	4611      	mov	r1, r2
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f000 fd28 	bl	8001830 <Control_Motor>
    	if(arm == 1){
 8000de0:	e035      	b.n	8000e4e <ProcessReceivedData+0xd6>
    	}
    }
    else if(strcmp(data, "a") == 0){
 8000de2:	492b      	ldr	r1, [pc, #172]	; (8000e90 <ProcessReceivedData+0x118>)
 8000de4:	6878      	ldr	r0, [r7, #4]
 8000de6:	f7ff f9b3 	bl	8000150 <strcmp>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d10a      	bne.n	8000e06 <ProcessReceivedData+0x8e>
    	open = !open;
 8000df0:	4b28      	ldr	r3, [pc, #160]	; (8000e94 <ProcessReceivedData+0x11c>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	bf0c      	ite	eq
 8000df8:	2301      	moveq	r3, #1
 8000dfa:	2300      	movne	r3, #0
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	461a      	mov	r2, r3
 8000e00:	4b24      	ldr	r3, [pc, #144]	; (8000e94 <ProcessReceivedData+0x11c>)
 8000e02:	701a      	strb	r2, [r3, #0]
 8000e04:	e024      	b.n	8000e50 <ProcessReceivedData+0xd8>
    }
    else if(strcmp(data, "b") == 0){
 8000e06:	4924      	ldr	r1, [pc, #144]	; (8000e98 <ProcessReceivedData+0x120>)
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f7ff f9a1 	bl	8000150 <strcmp>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d10a      	bne.n	8000e2a <ProcessReceivedData+0xb2>
    	arm = !arm;
 8000e14:	4b1d      	ldr	r3, [pc, #116]	; (8000e8c <ProcessReceivedData+0x114>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	bf0c      	ite	eq
 8000e1c:	2301      	moveq	r3, #1
 8000e1e:	2300      	movne	r3, #0
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	461a      	mov	r2, r3
 8000e24:	4b19      	ldr	r3, [pc, #100]	; (8000e8c <ProcessReceivedData+0x114>)
 8000e26:	701a      	strb	r2, [r3, #0]
 8000e28:	e012      	b.n	8000e50 <ProcessReceivedData+0xd8>
    }
    else if(strcmp(data, "c") == 0){
 8000e2a:	491c      	ldr	r1, [pc, #112]	; (8000e9c <ProcessReceivedData+0x124>)
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f7ff f98f 	bl	8000150 <strcmp>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d10b      	bne.n	8000e50 <ProcessReceivedData+0xd8>
    	following = !following;
 8000e38:	4b13      	ldr	r3, [pc, #76]	; (8000e88 <ProcessReceivedData+0x110>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	bf0c      	ite	eq
 8000e40:	2301      	moveq	r3, #1
 8000e42:	2300      	movne	r3, #0
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	461a      	mov	r2, r3
 8000e48:	4b0f      	ldr	r3, [pc, #60]	; (8000e88 <ProcessReceivedData+0x110>)
 8000e4a:	701a      	strb	r2, [r3, #0]
 8000e4c:	e000      	b.n	8000e50 <ProcessReceivedData+0xd8>
    	if(arm == 1){
 8000e4e:	bf00      	nop
    }

    if(open == 1){
 8000e50:	4b10      	ldr	r3, [pc, #64]	; (8000e94 <ProcessReceivedData+0x11c>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d102      	bne.n	8000e5e <ProcessReceivedData+0xe6>
    	Open_Claw();
 8000e58:	f000 fe34 	bl	8001ac4 <Open_Claw>
 8000e5c:	e001      	b.n	8000e62 <ProcessReceivedData+0xea>
    }
    else{
    	Close_Claw();
 8000e5e:	f000 fe3f 	bl	8001ae0 <Close_Claw>
    }

    if(following == 1){
 8000e62:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <ProcessReceivedData+0x110>)
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d101      	bne.n	8000e6e <ProcessReceivedData+0xf6>
    	Distance_Follow();
 8000e6a:	f000 fd73 	bl	8001954 <Distance_Follow>
    }
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	200001fc 	.word	0x200001fc
 8000e7c:	200001f8 	.word	0x200001f8
 8000e80:	200001f4 	.word	0x200001f4
 8000e84:	080098c8 	.word	0x080098c8
 8000e88:	20000202 	.word	0x20000202
 8000e8c:	20000201 	.word	0x20000201
 8000e90:	080098d4 	.word	0x080098d4
 8000e94:	20000200 	.word	0x20000200
 8000e98:	080098d8 	.word	0x080098d8
 8000e9c:	080098dc 	.word	0x080098dc

08000ea0 <LineFollowing_Update>:

void Follow_Line(void);
void Turn_Right_Sequence(void);
void Turn_Left_Sequence(void);

void LineFollowing_Update(void) {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
	// Read sensor states
	left_sensor = HAL_GPIO_ReadPin(GPIOB, SENSOR_LEFT);
 8000ea4:	2120      	movs	r1, #32
 8000ea6:	4837      	ldr	r0, [pc, #220]	; (8000f84 <LineFollowing_Update+0xe4>)
 8000ea8:	f001 fc80 	bl	80027ac <HAL_GPIO_ReadPin>
 8000eac:	4603      	mov	r3, r0
 8000eae:	461a      	mov	r2, r3
 8000eb0:	4b35      	ldr	r3, [pc, #212]	; (8000f88 <LineFollowing_Update+0xe8>)
 8000eb2:	701a      	strb	r2, [r3, #0]
	right_sensor = HAL_GPIO_ReadPin(GPIOB, SENSOR_RIGHT);
 8000eb4:	2110      	movs	r1, #16
 8000eb6:	4833      	ldr	r0, [pc, #204]	; (8000f84 <LineFollowing_Update+0xe4>)
 8000eb8:	f001 fc78 	bl	80027ac <HAL_GPIO_ReadPin>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	4b32      	ldr	r3, [pc, #200]	; (8000f8c <LineFollowing_Update+0xec>)
 8000ec2:	701a      	strb	r2, [r3, #0]
	left_junction = HAL_GPIO_ReadPin(GPIOB, SENSOR_LEFT_JUNCTION);
 8000ec4:	2108      	movs	r1, #8
 8000ec6:	482f      	ldr	r0, [pc, #188]	; (8000f84 <LineFollowing_Update+0xe4>)
 8000ec8:	f001 fc70 	bl	80027ac <HAL_GPIO_ReadPin>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	461a      	mov	r2, r3
 8000ed0:	4b2f      	ldr	r3, [pc, #188]	; (8000f90 <LineFollowing_Update+0xf0>)
 8000ed2:	701a      	strb	r2, [r3, #0]
	right_junction = HAL_GPIO_ReadPin(GPIOA, SENSOR_RIGHT_JUNCTION);
 8000ed4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ed8:	482e      	ldr	r0, [pc, #184]	; (8000f94 <LineFollowing_Update+0xf4>)
 8000eda:	f001 fc67 	bl	80027ac <HAL_GPIO_ReadPin>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	4b2d      	ldr	r3, [pc, #180]	; (8000f98 <LineFollowing_Update+0xf8>)
 8000ee4:	701a      	strb	r2, [r3, #0]

	//priority logic, decide the robot follow line or not
	if(left_junction == BLACK && right_junction == BLACK){
 8000ee6:	4b2a      	ldr	r3, [pc, #168]	; (8000f90 <LineFollowing_Update+0xf0>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d10b      	bne.n	8000f06 <LineFollowing_Update+0x66>
 8000eee:	4b2a      	ldr	r3, [pc, #168]	; (8000f98 <LineFollowing_Update+0xf8>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d107      	bne.n	8000f06 <LineFollowing_Update+0x66>
		//stop
		Set_Speed(0,0);
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	2000      	movs	r0, #0
 8000efa:	f000 fc41 	bl	8001780 <Set_Speed>
		follow_line = 0;
 8000efe:	4b27      	ldr	r3, [pc, #156]	; (8000f9c <LineFollowing_Update+0xfc>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	701a      	strb	r2, [r3, #0]
		return;
 8000f04:	e03d      	b.n	8000f82 <LineFollowing_Update+0xe2>
	}
	else if(left_junction == WHITE && right_junction == WHITE){
 8000f06:	4b22      	ldr	r3, [pc, #136]	; (8000f90 <LineFollowing_Update+0xf0>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d106      	bne.n	8000f1c <LineFollowing_Update+0x7c>
 8000f0e:	4b22      	ldr	r3, [pc, #136]	; (8000f98 <LineFollowing_Update+0xf8>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d102      	bne.n	8000f1c <LineFollowing_Update+0x7c>
		//start line following
		follow_line = 1;
 8000f16:	4b21      	ldr	r3, [pc, #132]	; (8000f9c <LineFollowing_Update+0xfc>)
 8000f18:	2201      	movs	r2, #1
 8000f1a:	701a      	strb	r2, [r3, #0]
	}


	if(follow_line == 1){
 8000f1c:	4b1f      	ldr	r3, [pc, #124]	; (8000f9c <LineFollowing_Update+0xfc>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d12e      	bne.n	8000f82 <LineFollowing_Update+0xe2>
		//decide turn left, right or follow line
		if(left_junction == BLACK && right_junction == WHITE && right_turn == 0){
 8000f24:	4b1a      	ldr	r3, [pc, #104]	; (8000f90 <LineFollowing_Update+0xf0>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d10b      	bne.n	8000f44 <LineFollowing_Update+0xa4>
 8000f2c:	4b1a      	ldr	r3, [pc, #104]	; (8000f98 <LineFollowing_Update+0xf8>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d107      	bne.n	8000f44 <LineFollowing_Update+0xa4>
 8000f34:	4b1a      	ldr	r3, [pc, #104]	; (8000fa0 <LineFollowing_Update+0x100>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d103      	bne.n	8000f44 <LineFollowing_Update+0xa4>
			//turn left
			left_turn = 1;
 8000f3c:	4b19      	ldr	r3, [pc, #100]	; (8000fa4 <LineFollowing_Update+0x104>)
 8000f3e:	2201      	movs	r2, #1
 8000f40:	701a      	strb	r2, [r3, #0]
 8000f42:	e00e      	b.n	8000f62 <LineFollowing_Update+0xc2>
		}
		else if(left_junction == WHITE && right_junction == BLACK && left_turn == 0){
 8000f44:	4b12      	ldr	r3, [pc, #72]	; (8000f90 <LineFollowing_Update+0xf0>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d10a      	bne.n	8000f62 <LineFollowing_Update+0xc2>
 8000f4c:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <LineFollowing_Update+0xf8>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d106      	bne.n	8000f62 <LineFollowing_Update+0xc2>
 8000f54:	4b13      	ldr	r3, [pc, #76]	; (8000fa4 <LineFollowing_Update+0x104>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d102      	bne.n	8000f62 <LineFollowing_Update+0xc2>
			//turn right
			right_turn = 1;
 8000f5c:	4b10      	ldr	r3, [pc, #64]	; (8000fa0 <LineFollowing_Update+0x100>)
 8000f5e:	2201      	movs	r2, #1
 8000f60:	701a      	strb	r2, [r3, #0]
		}

		//turn left and turn right action
		if(left_turn == 1){
 8000f62:	4b10      	ldr	r3, [pc, #64]	; (8000fa4 <LineFollowing_Update+0x104>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d102      	bne.n	8000f70 <LineFollowing_Update+0xd0>
			Turn_Left_Sequence();
 8000f6a:	f000 f81d 	bl	8000fa8 <Turn_Left_Sequence>
 8000f6e:	e008      	b.n	8000f82 <LineFollowing_Update+0xe2>
		}
		else if(right_turn == 1){
 8000f70:	4b0b      	ldr	r3, [pc, #44]	; (8000fa0 <LineFollowing_Update+0x100>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d102      	bne.n	8000f7e <LineFollowing_Update+0xde>
			Turn_Right_Sequence();
 8000f78:	f000 f848 	bl	800100c <Turn_Right_Sequence>
 8000f7c:	e001      	b.n	8000f82 <LineFollowing_Update+0xe2>
		}
		else{
			Follow_Line();
 8000f7e:	f000 f877 	bl	8001070 <Follow_Line>
		}
	}


}
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40010c00 	.word	0x40010c00
 8000f88:	20000206 	.word	0x20000206
 8000f8c:	20000207 	.word	0x20000207
 8000f90:	20000208 	.word	0x20000208
 8000f94:	40010800 	.word	0x40010800
 8000f98:	20000209 	.word	0x20000209
 8000f9c:	20000000 	.word	0x20000000
 8000fa0:	20000204 	.word	0x20000204
 8000fa4:	20000203 	.word	0x20000203

08000fa8 <Turn_Left_Sequence>:
//left black then right black
void Turn_Left_Sequence(void){
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
	//left turn sequence
	if(sequence == 0){
 8000fac:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <Turn_Left_Sequence+0x4c>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d10b      	bne.n	8000fcc <Turn_Left_Sequence+0x24>
		if(left_sensor == WHITE){sequence = 1;}
 8000fb4:	4b10      	ldr	r3, [pc, #64]	; (8000ff8 <Turn_Left_Sequence+0x50>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d102      	bne.n	8000fc2 <Turn_Left_Sequence+0x1a>
 8000fbc:	4b0d      	ldr	r3, [pc, #52]	; (8000ff4 <Turn_Left_Sequence+0x4c>)
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	701a      	strb	r2, [r3, #0]
		Set_Speed(-2000, -2000);
 8000fc2:	490e      	ldr	r1, [pc, #56]	; (8000ffc <Turn_Left_Sequence+0x54>)
 8000fc4:	480d      	ldr	r0, [pc, #52]	; (8000ffc <Turn_Left_Sequence+0x54>)
 8000fc6:	f000 fbdb 	bl	8001780 <Set_Speed>
	}
	else if(sequence == 1){
		if(right_sensor == BLACK){sequence = 0; left_turn = 0;}
		Set_Speed(0, -1700);
	}
}
 8000fca:	e011      	b.n	8000ff0 <Turn_Left_Sequence+0x48>
	else if(sequence == 1){
 8000fcc:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <Turn_Left_Sequence+0x4c>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d10d      	bne.n	8000ff0 <Turn_Left_Sequence+0x48>
		if(right_sensor == BLACK){sequence = 0; left_turn = 0;}
 8000fd4:	4b0a      	ldr	r3, [pc, #40]	; (8001000 <Turn_Left_Sequence+0x58>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d105      	bne.n	8000fe8 <Turn_Left_Sequence+0x40>
 8000fdc:	4b05      	ldr	r3, [pc, #20]	; (8000ff4 <Turn_Left_Sequence+0x4c>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	701a      	strb	r2, [r3, #0]
 8000fe2:	4b08      	ldr	r3, [pc, #32]	; (8001004 <Turn_Left_Sequence+0x5c>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	701a      	strb	r2, [r3, #0]
		Set_Speed(0, -1700);
 8000fe8:	4907      	ldr	r1, [pc, #28]	; (8001008 <Turn_Left_Sequence+0x60>)
 8000fea:	2000      	movs	r0, #0
 8000fec:	f000 fbc8 	bl	8001780 <Set_Speed>
}
 8000ff0:	bf00      	nop
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20000205 	.word	0x20000205
 8000ff8:	20000206 	.word	0x20000206
 8000ffc:	fffff830 	.word	0xfffff830
 8001000:	20000207 	.word	0x20000207
 8001004:	20000203 	.word	0x20000203
 8001008:	fffff95c 	.word	0xfffff95c

0800100c <Turn_Right_Sequence>:

void Turn_Right_Sequence(void){
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
	//right turn sequence
	if(sequence == 0){
 8001010:	4b12      	ldr	r3, [pc, #72]	; (800105c <Turn_Right_Sequence+0x50>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d10b      	bne.n	8001030 <Turn_Right_Sequence+0x24>
		if(right_sensor == WHITE){sequence = 1;}
 8001018:	4b11      	ldr	r3, [pc, #68]	; (8001060 <Turn_Right_Sequence+0x54>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d102      	bne.n	8001026 <Turn_Right_Sequence+0x1a>
 8001020:	4b0e      	ldr	r3, [pc, #56]	; (800105c <Turn_Right_Sequence+0x50>)
 8001022:	2201      	movs	r2, #1
 8001024:	701a      	strb	r2, [r3, #0]
		Set_Speed(-2000, -2000);
 8001026:	490f      	ldr	r1, [pc, #60]	; (8001064 <Turn_Right_Sequence+0x58>)
 8001028:	480e      	ldr	r0, [pc, #56]	; (8001064 <Turn_Right_Sequence+0x58>)
 800102a:	f000 fba9 	bl	8001780 <Set_Speed>
	else if(sequence == 1){
		if(left_sensor == BLACK){sequence = 0; right_turn = 0;}
		//turn right
		Set_Speed(-2000, 2000);
	}
}
 800102e:	e012      	b.n	8001056 <Turn_Right_Sequence+0x4a>
	else if(sequence == 1){
 8001030:	4b0a      	ldr	r3, [pc, #40]	; (800105c <Turn_Right_Sequence+0x50>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	2b01      	cmp	r3, #1
 8001036:	d10e      	bne.n	8001056 <Turn_Right_Sequence+0x4a>
		if(left_sensor == BLACK){sequence = 0; right_turn = 0;}
 8001038:	4b0b      	ldr	r3, [pc, #44]	; (8001068 <Turn_Right_Sequence+0x5c>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	2b01      	cmp	r3, #1
 800103e:	d105      	bne.n	800104c <Turn_Right_Sequence+0x40>
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <Turn_Right_Sequence+0x50>)
 8001042:	2200      	movs	r2, #0
 8001044:	701a      	strb	r2, [r3, #0]
 8001046:	4b09      	ldr	r3, [pc, #36]	; (800106c <Turn_Right_Sequence+0x60>)
 8001048:	2200      	movs	r2, #0
 800104a:	701a      	strb	r2, [r3, #0]
		Set_Speed(-2000, 2000);
 800104c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001050:	4804      	ldr	r0, [pc, #16]	; (8001064 <Turn_Right_Sequence+0x58>)
 8001052:	f000 fb95 	bl	8001780 <Set_Speed>
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20000205 	.word	0x20000205
 8001060:	20000207 	.word	0x20000207
 8001064:	fffff830 	.word	0xfffff830
 8001068:	20000206 	.word	0x20000206
 800106c:	20000204 	.word	0x20000204

08001070 <Follow_Line>:

void Follow_Line(void){
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
	if (left_sensor == WHITE && right_sensor == WHITE) {
 8001074:	4b16      	ldr	r3, [pc, #88]	; (80010d0 <Follow_Line+0x60>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d108      	bne.n	800108e <Follow_Line+0x1e>
 800107c:	4b15      	ldr	r3, [pc, #84]	; (80010d4 <Follow_Line+0x64>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d104      	bne.n	800108e <Follow_Line+0x1e>
		// Both sensors on the line
		Set_Speed(-2000, -2000);
 8001084:	4914      	ldr	r1, [pc, #80]	; (80010d8 <Follow_Line+0x68>)
 8001086:	4814      	ldr	r0, [pc, #80]	; (80010d8 <Follow_Line+0x68>)
 8001088:	f000 fb7a 	bl	8001780 <Set_Speed>
 800108c:	e01e      	b.n	80010cc <Follow_Line+0x5c>
	} else if (left_sensor == BLACK && right_sensor == WHITE) {
 800108e:	4b10      	ldr	r3, [pc, #64]	; (80010d0 <Follow_Line+0x60>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	2b01      	cmp	r3, #1
 8001094:	d108      	bne.n	80010a8 <Follow_Line+0x38>
 8001096:	4b0f      	ldr	r3, [pc, #60]	; (80010d4 <Follow_Line+0x64>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d104      	bne.n	80010a8 <Follow_Line+0x38>
		// Turn left when left sensor detects black
		Set_Speed(0, -3000);
 800109e:	490f      	ldr	r1, [pc, #60]	; (80010dc <Follow_Line+0x6c>)
 80010a0:	2000      	movs	r0, #0
 80010a2:	f000 fb6d 	bl	8001780 <Set_Speed>
 80010a6:	e011      	b.n	80010cc <Follow_Line+0x5c>
	} else if (left_sensor == WHITE && right_sensor == BLACK) {
 80010a8:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <Follow_Line+0x60>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d108      	bne.n	80010c2 <Follow_Line+0x52>
 80010b0:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <Follow_Line+0x64>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d104      	bne.n	80010c2 <Follow_Line+0x52>
		// Turn right when right sensor detects black
		Set_Speed(-2000, 0);
 80010b8:	2100      	movs	r1, #0
 80010ba:	4807      	ldr	r0, [pc, #28]	; (80010d8 <Follow_Line+0x68>)
 80010bc:	f000 fb60 	bl	8001780 <Set_Speed>
 80010c0:	e004      	b.n	80010cc <Follow_Line+0x5c>
	} else {
		// Default forward motion
		Set_Speed(0, -2000);
 80010c2:	4905      	ldr	r1, [pc, #20]	; (80010d8 <Follow_Line+0x68>)
 80010c4:	2000      	movs	r0, #0
 80010c6:	f000 fb5b 	bl	8001780 <Set_Speed>
	}
}
 80010ca:	bf00      	nop
 80010cc:	bf00      	nop
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	20000206 	.word	0x20000206
 80010d4:	20000207 	.word	0x20000207
 80010d8:	fffff830 	.word	0xfffff830
 80010dc:	fffff448 	.word	0xfffff448

080010e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010e4:	f000 ffbc 	bl	8002060 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010e8:	f000 f898 	bl	800121c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ec:	f000 fa98 	bl	8001620 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80010f0:	f000 fa6c 	bl	80015cc <MX_USART2_UART_Init>
  MX_TIM4_Init();
 80010f4:	f000 f9d2 	bl	800149c <MX_TIM4_Init>
  MX_TIM1_Init();
 80010f8:	f000 f8d6 	bl	80012a8 <MX_TIM1_Init>
  MX_TIM3_Init();
 80010fc:	f000 f980 	bl	8001400 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
    //initialize motor
	Motor_Init();
 8001100:	f000 fb30 	bl	8001764 <Motor_Init>
	Set_Speed(0, 0);
 8001104:	2100      	movs	r1, #0
 8001106:	2000      	movs	r0, #0
 8001108:	f000 fb3a 	bl	8001780 <Set_Speed>
	//initialize servo
	Servo_Init();
 800110c:	f000 fc5c 	bl	80019c8 <Servo_Init>
	Set_FrontBack(0);
 8001110:	2000      	movs	r0, #0
 8001112:	f000 fc6f 	bl	80019f4 <Set_FrontBack>
	Set_LeftRight(0);
 8001116:	2000      	movs	r0, #0
 8001118:	f000 fc90 	bl	8001a3c <Set_LeftRight>
	Set_UpDown(0);
 800111c:	2000      	movs	r0, #0
 800111e:	f000 fcaf 	bl	8001a80 <Set_UpDown>
	Close_Claw();
 8001122:	f000 fcdd 	bl	8001ae0 <Close_Claw>
	//initialize receiver
	HAL_UART_Receive_IT(&huart2, (uint8_t *)&rxBuffer[rxIndex], 1);
 8001126:	4b34      	ldr	r3, [pc, #208]	; (80011f8 <main+0x118>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	b2db      	uxtb	r3, r3
 800112c:	461a      	mov	r2, r3
 800112e:	4b33      	ldr	r3, [pc, #204]	; (80011fc <main+0x11c>)
 8001130:	4413      	add	r3, r2
 8001132:	2201      	movs	r2, #1
 8001134:	4619      	mov	r1, r3
 8001136:	4832      	ldr	r0, [pc, #200]	; (8001200 <main+0x120>)
 8001138:	f002 fe9b 	bl	8003e72 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		//change operating mode(autonomous to manual)
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) == 1 && pushbutton == 0)
 800113c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001140:	4830      	ldr	r0, [pc, #192]	; (8001204 <main+0x124>)
 8001142:	f001 fb33 	bl	80027ac <HAL_GPIO_ReadPin>
 8001146:	4603      	mov	r3, r0
 8001148:	2b01      	cmp	r3, #1
 800114a:	d119      	bne.n	8001180 <main+0xa0>
 800114c:	4b2e      	ldr	r3, [pc, #184]	; (8001208 <main+0x128>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d115      	bne.n	8001180 <main+0xa0>
		{
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_10);
 8001154:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001158:	482a      	ldr	r0, [pc, #168]	; (8001204 <main+0x124>)
 800115a:	f001 fb56 	bl	800280a <HAL_GPIO_TogglePin>
			pushbutton = 1;
 800115e:	4b2a      	ldr	r3, [pc, #168]	; (8001208 <main+0x128>)
 8001160:	2201      	movs	r2, #1
 8001162:	701a      	strb	r2, [r3, #0]
			manual = !manual;
 8001164:	4b29      	ldr	r3, [pc, #164]	; (800120c <main+0x12c>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	2b00      	cmp	r3, #0
 800116a:	bf0c      	ite	eq
 800116c:	2301      	moveq	r3, #1
 800116e:	2300      	movne	r3, #0
 8001170:	b2db      	uxtb	r3, r3
 8001172:	461a      	mov	r2, r3
 8001174:	4b25      	ldr	r3, [pc, #148]	; (800120c <main+0x12c>)
 8001176:	701a      	strb	r2, [r3, #0]
			Set_Speed(0, 0);
 8001178:	2100      	movs	r1, #0
 800117a:	2000      	movs	r0, #0
 800117c:	f000 fb00 	bl	8001780 <Set_Speed>
		}
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) == 0 && pushbutton == 1)
 8001180:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001184:	481f      	ldr	r0, [pc, #124]	; (8001204 <main+0x124>)
 8001186:	f001 fb11 	bl	80027ac <HAL_GPIO_ReadPin>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d106      	bne.n	800119e <main+0xbe>
 8001190:	4b1d      	ldr	r3, [pc, #116]	; (8001208 <main+0x128>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b01      	cmp	r3, #1
 8001196:	d102      	bne.n	800119e <main+0xbe>
		{
			pushbutton = 0;
 8001198:	4b1b      	ldr	r3, [pc, #108]	; (8001208 <main+0x128>)
 800119a:	2200      	movs	r2, #0
 800119c:	701a      	strb	r2, [r3, #0]
		}

		//get distance from sr04
		GET_Distance();
 800119e:	f000 fcc5 	bl	8001b2c <GET_Distance>

		//line following
		//need to make a source file
		if(manual == 0)
 80011a2:	4b1a      	ldr	r3, [pc, #104]	; (800120c <main+0x12c>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d119      	bne.n	80011de <main+0xfe>
		{
			LineFollowing_Update();
 80011aa:	f7ff fe79 	bl	8000ea0 <LineFollowing_Update>

			//obstacle detection
			if(distance < 10)
 80011ae:	4b18      	ldr	r3, [pc, #96]	; (8001210 <main+0x130>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4918      	ldr	r1, [pc, #96]	; (8001214 <main+0x134>)
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff fd2f 	bl	8000c18 <__aeabi_fcmplt>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d009      	beq.n	80011d4 <main+0xf4>
			{
				Set_Speed(0,0);
 80011c0:	2100      	movs	r1, #0
 80011c2:	2000      	movs	r0, #0
 80011c4:	f000 fadc 	bl	8001780 <Set_Speed>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 80011c8:	2201      	movs	r2, #1
 80011ca:	2102      	movs	r1, #2
 80011cc:	480d      	ldr	r0, [pc, #52]	; (8001204 <main+0x124>)
 80011ce:	f001 fb04 	bl	80027da <HAL_GPIO_WritePin>
 80011d2:	e004      	b.n	80011de <main+0xfe>
			}
			else
			{
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80011d4:	2200      	movs	r2, #0
 80011d6:	2102      	movs	r1, #2
 80011d8:	480a      	ldr	r0, [pc, #40]	; (8001204 <main+0x124>)
 80011da:	f001 fafe 	bl	80027da <HAL_GPIO_WritePin>
			}
		}

		//manual mode
		if (messageReady) {
 80011de:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <main+0x138>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d0a9      	beq.n	800113c <main+0x5c>
			ProcessReceivedData(rxBuffer);
 80011e8:	4804      	ldr	r0, [pc, #16]	; (80011fc <main+0x11c>)
 80011ea:	f7ff fdc5 	bl	8000d78 <ProcessReceivedData>
			messageReady = 0; // Reset the flag after processing
 80011ee:	4b0a      	ldr	r3, [pc, #40]	; (8001218 <main+0x138>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	701a      	strb	r2, [r3, #0]
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) == 1 && pushbutton == 0)
 80011f4:	e7a2      	b.n	800113c <main+0x5c>
 80011f6:	bf00      	nop
 80011f8:	2000035e 	.word	0x2000035e
 80011fc:	2000032c 	.word	0x2000032c
 8001200:	200002e4 	.word	0x200002e4
 8001204:	40010c00 	.word	0x40010c00
 8001208:	20000360 	.word	0x20000360
 800120c:	20000001 	.word	0x20000001
 8001210:	20000364 	.word	0x20000364
 8001214:	41200000 	.word	0x41200000
 8001218:	2000035f 	.word	0x2000035f

0800121c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b090      	sub	sp, #64	; 0x40
 8001220:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001222:	f107 0318 	add.w	r3, r7, #24
 8001226:	2228      	movs	r2, #40	; 0x28
 8001228:	2100      	movs	r1, #0
 800122a:	4618      	mov	r0, r3
 800122c:	f004 fb15 	bl	800585a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001230:	1d3b      	adds	r3, r7, #4
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]
 8001238:	609a      	str	r2, [r3, #8]
 800123a:	60da      	str	r2, [r3, #12]
 800123c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800123e:	2301      	movs	r3, #1
 8001240:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001242:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001246:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001248:	2300      	movs	r3, #0
 800124a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800124c:	2301      	movs	r3, #1
 800124e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001250:	2302      	movs	r3, #2
 8001252:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001254:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001258:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800125a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800125e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001260:	f107 0318 	add.w	r3, r7, #24
 8001264:	4618      	mov	r0, r3
 8001266:	f001 fb01 	bl	800286c <HAL_RCC_OscConfig>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001270:	f000 fa72 	bl	8001758 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001274:	230f      	movs	r3, #15
 8001276:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001278:	2302      	movs	r3, #2
 800127a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800127c:	2300      	movs	r3, #0
 800127e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001280:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001284:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001286:	2300      	movs	r3, #0
 8001288:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800128a:	1d3b      	adds	r3, r7, #4
 800128c:	2102      	movs	r1, #2
 800128e:	4618      	mov	r0, r3
 8001290:	f001 fd6e 	bl	8002d70 <HAL_RCC_ClockConfig>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800129a:	f000 fa5d 	bl	8001758 <Error_Handler>
  }
}
 800129e:	bf00      	nop
 80012a0:	3740      	adds	r7, #64	; 0x40
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
	...

080012a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b096      	sub	sp, #88	; 0x58
 80012ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]
 80012b8:	609a      	str	r2, [r3, #8]
 80012ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]
 80012d0:	609a      	str	r2, [r3, #8]
 80012d2:	60da      	str	r2, [r3, #12]
 80012d4:	611a      	str	r2, [r3, #16]
 80012d6:	615a      	str	r2, [r3, #20]
 80012d8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012da:	1d3b      	adds	r3, r7, #4
 80012dc:	2220      	movs	r2, #32
 80012de:	2100      	movs	r1, #0
 80012e0:	4618      	mov	r0, r3
 80012e2:	f004 faba 	bl	800585a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012e6:	4b44      	ldr	r3, [pc, #272]	; (80013f8 <MX_TIM1_Init+0x150>)
 80012e8:	4a44      	ldr	r2, [pc, #272]	; (80013fc <MX_TIM1_Init+0x154>)
 80012ea:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80012ec:	4b42      	ldr	r3, [pc, #264]	; (80013f8 <MX_TIM1_Init+0x150>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f2:	4b41      	ldr	r3, [pc, #260]	; (80013f8 <MX_TIM1_Init+0x150>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7199;
 80012f8:	4b3f      	ldr	r3, [pc, #252]	; (80013f8 <MX_TIM1_Init+0x150>)
 80012fa:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80012fe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001300:	4b3d      	ldr	r3, [pc, #244]	; (80013f8 <MX_TIM1_Init+0x150>)
 8001302:	2200      	movs	r2, #0
 8001304:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001306:	4b3c      	ldr	r3, [pc, #240]	; (80013f8 <MX_TIM1_Init+0x150>)
 8001308:	2200      	movs	r2, #0
 800130a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800130c:	4b3a      	ldr	r3, [pc, #232]	; (80013f8 <MX_TIM1_Init+0x150>)
 800130e:	2200      	movs	r2, #0
 8001310:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001312:	4839      	ldr	r0, [pc, #228]	; (80013f8 <MX_TIM1_Init+0x150>)
 8001314:	f001 feba 	bl	800308c <HAL_TIM_Base_Init>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800131e:	f000 fa1b 	bl	8001758 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001322:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001326:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001328:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800132c:	4619      	mov	r1, r3
 800132e:	4832      	ldr	r0, [pc, #200]	; (80013f8 <MX_TIM1_Init+0x150>)
 8001330:	f002 f928 	bl	8003584 <HAL_TIM_ConfigClockSource>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800133a:	f000 fa0d 	bl	8001758 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800133e:	482e      	ldr	r0, [pc, #184]	; (80013f8 <MX_TIM1_Init+0x150>)
 8001340:	f001 ff64 	bl	800320c <HAL_TIM_PWM_Init>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800134a:	f000 fa05 	bl	8001758 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800134e:	2300      	movs	r3, #0
 8001350:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001352:	2300      	movs	r3, #0
 8001354:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001356:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800135a:	4619      	mov	r1, r3
 800135c:	4826      	ldr	r0, [pc, #152]	; (80013f8 <MX_TIM1_Init+0x150>)
 800135e:	f002 fc89 	bl	8003c74 <HAL_TIMEx_MasterConfigSynchronization>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001368:	f000 f9f6 	bl	8001758 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800136c:	2360      	movs	r3, #96	; 0x60
 800136e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001370:	2300      	movs	r3, #0
 8001372:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001374:	2300      	movs	r3, #0
 8001376:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001378:	2300      	movs	r3, #0
 800137a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800137c:	2300      	movs	r3, #0
 800137e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001380:	2300      	movs	r3, #0
 8001382:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001384:	2300      	movs	r3, #0
 8001386:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001388:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800138c:	2204      	movs	r2, #4
 800138e:	4619      	mov	r1, r3
 8001390:	4819      	ldr	r0, [pc, #100]	; (80013f8 <MX_TIM1_Init+0x150>)
 8001392:	f002 f835 	bl	8003400 <HAL_TIM_PWM_ConfigChannel>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800139c:	f000 f9dc 	bl	8001758 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a4:	220c      	movs	r2, #12
 80013a6:	4619      	mov	r1, r3
 80013a8:	4813      	ldr	r0, [pc, #76]	; (80013f8 <MX_TIM1_Init+0x150>)
 80013aa:	f002 f829 	bl	8003400 <HAL_TIM_PWM_ConfigChannel>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80013b4:	f000 f9d0 	bl	8001758 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013b8:	2300      	movs	r3, #0
 80013ba:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013bc:	2300      	movs	r3, #0
 80013be:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013c0:	2300      	movs	r3, #0
 80013c2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013c4:	2300      	movs	r3, #0
 80013c6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013c8:	2300      	movs	r3, #0
 80013ca:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013d0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013d2:	2300      	movs	r3, #0
 80013d4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013d6:	1d3b      	adds	r3, r7, #4
 80013d8:	4619      	mov	r1, r3
 80013da:	4807      	ldr	r0, [pc, #28]	; (80013f8 <MX_TIM1_Init+0x150>)
 80013dc:	f002 fca8 	bl	8003d30 <HAL_TIMEx_ConfigBreakDeadTime>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80013e6:	f000 f9b7 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80013ea:	4803      	ldr	r0, [pc, #12]	; (80013f8 <MX_TIM1_Init+0x150>)
 80013ec:	f000 fc6c 	bl	8001cc8 <HAL_TIM_MspPostInit>

}
 80013f0:	bf00      	nop
 80013f2:	3758      	adds	r7, #88	; 0x58
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	2000020c 	.word	0x2000020c
 80013fc:	40012c00 	.word	0x40012c00

08001400 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b086      	sub	sp, #24
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001406:	f107 0308 	add.w	r3, r7, #8
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	605a      	str	r2, [r3, #4]
 8001410:	609a      	str	r2, [r3, #8]
 8001412:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001414:	463b      	mov	r3, r7
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800141c:	4b1d      	ldr	r3, [pc, #116]	; (8001494 <MX_TIM3_Init+0x94>)
 800141e:	4a1e      	ldr	r2, [pc, #120]	; (8001498 <MX_TIM3_Init+0x98>)
 8001420:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8001422:	4b1c      	ldr	r3, [pc, #112]	; (8001494 <MX_TIM3_Init+0x94>)
 8001424:	2247      	movs	r2, #71	; 0x47
 8001426:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001428:	4b1a      	ldr	r3, [pc, #104]	; (8001494 <MX_TIM3_Init+0x94>)
 800142a:	2200      	movs	r2, #0
 800142c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800142e:	4b19      	ldr	r3, [pc, #100]	; (8001494 <MX_TIM3_Init+0x94>)
 8001430:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001434:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001436:	4b17      	ldr	r3, [pc, #92]	; (8001494 <MX_TIM3_Init+0x94>)
 8001438:	2200      	movs	r2, #0
 800143a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800143c:	4b15      	ldr	r3, [pc, #84]	; (8001494 <MX_TIM3_Init+0x94>)
 800143e:	2200      	movs	r2, #0
 8001440:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001442:	4814      	ldr	r0, [pc, #80]	; (8001494 <MX_TIM3_Init+0x94>)
 8001444:	f001 fe22 	bl	800308c <HAL_TIM_Base_Init>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800144e:	f000 f983 	bl	8001758 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001452:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001456:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001458:	f107 0308 	add.w	r3, r7, #8
 800145c:	4619      	mov	r1, r3
 800145e:	480d      	ldr	r0, [pc, #52]	; (8001494 <MX_TIM3_Init+0x94>)
 8001460:	f002 f890 	bl	8003584 <HAL_TIM_ConfigClockSource>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800146a:	f000 f975 	bl	8001758 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800146e:	2300      	movs	r3, #0
 8001470:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001472:	2300      	movs	r3, #0
 8001474:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001476:	463b      	mov	r3, r7
 8001478:	4619      	mov	r1, r3
 800147a:	4806      	ldr	r0, [pc, #24]	; (8001494 <MX_TIM3_Init+0x94>)
 800147c:	f002 fbfa 	bl	8003c74 <HAL_TIMEx_MasterConfigSynchronization>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001486:	f000 f967 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800148a:	bf00      	nop
 800148c:	3718      	adds	r7, #24
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	20000254 	.word	0x20000254
 8001498:	40000400 	.word	0x40000400

0800149c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b08e      	sub	sp, #56	; 0x38
 80014a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	605a      	str	r2, [r3, #4]
 80014ac:	609a      	str	r2, [r3, #8]
 80014ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014b0:	f107 0320 	add.w	r3, r7, #32
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014ba:	1d3b      	adds	r3, r7, #4
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	60da      	str	r2, [r3, #12]
 80014c6:	611a      	str	r2, [r3, #16]
 80014c8:	615a      	str	r2, [r3, #20]
 80014ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80014cc:	4b3d      	ldr	r3, [pc, #244]	; (80015c4 <MX_TIM4_Init+0x128>)
 80014ce:	4a3e      	ldr	r2, [pc, #248]	; (80015c8 <MX_TIM4_Init+0x12c>)
 80014d0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 80014d2:	4b3c      	ldr	r3, [pc, #240]	; (80015c4 <MX_TIM4_Init+0x128>)
 80014d4:	2247      	movs	r2, #71	; 0x47
 80014d6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d8:	4b3a      	ldr	r3, [pc, #232]	; (80015c4 <MX_TIM4_Init+0x128>)
 80014da:	2200      	movs	r2, #0
 80014dc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80014de:	4b39      	ldr	r3, [pc, #228]	; (80015c4 <MX_TIM4_Init+0x128>)
 80014e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014e4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014e6:	4b37      	ldr	r3, [pc, #220]	; (80015c4 <MX_TIM4_Init+0x128>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ec:	4b35      	ldr	r3, [pc, #212]	; (80015c4 <MX_TIM4_Init+0x128>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80014f2:	4834      	ldr	r0, [pc, #208]	; (80015c4 <MX_TIM4_Init+0x128>)
 80014f4:	f001 fdca 	bl	800308c <HAL_TIM_Base_Init>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80014fe:	f000 f92b 	bl	8001758 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001502:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001506:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001508:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800150c:	4619      	mov	r1, r3
 800150e:	482d      	ldr	r0, [pc, #180]	; (80015c4 <MX_TIM4_Init+0x128>)
 8001510:	f002 f838 	bl	8003584 <HAL_TIM_ConfigClockSource>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800151a:	f000 f91d 	bl	8001758 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800151e:	4829      	ldr	r0, [pc, #164]	; (80015c4 <MX_TIM4_Init+0x128>)
 8001520:	f001 fe74 	bl	800320c <HAL_TIM_PWM_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800152a:	f000 f915 	bl	8001758 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800152e:	2300      	movs	r3, #0
 8001530:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001532:	2300      	movs	r3, #0
 8001534:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001536:	f107 0320 	add.w	r3, r7, #32
 800153a:	4619      	mov	r1, r3
 800153c:	4821      	ldr	r0, [pc, #132]	; (80015c4 <MX_TIM4_Init+0x128>)
 800153e:	f002 fb99 	bl	8003c74 <HAL_TIMEx_MasterConfigSynchronization>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001548:	f000 f906 	bl	8001758 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800154c:	2360      	movs	r3, #96	; 0x60
 800154e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001550:	2300      	movs	r3, #0
 8001552:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001554:	2300      	movs	r3, #0
 8001556:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001558:	2300      	movs	r3, #0
 800155a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800155c:	1d3b      	adds	r3, r7, #4
 800155e:	2200      	movs	r2, #0
 8001560:	4619      	mov	r1, r3
 8001562:	4818      	ldr	r0, [pc, #96]	; (80015c4 <MX_TIM4_Init+0x128>)
 8001564:	f001 ff4c 	bl	8003400 <HAL_TIM_PWM_ConfigChannel>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800156e:	f000 f8f3 	bl	8001758 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001572:	1d3b      	adds	r3, r7, #4
 8001574:	2204      	movs	r2, #4
 8001576:	4619      	mov	r1, r3
 8001578:	4812      	ldr	r0, [pc, #72]	; (80015c4 <MX_TIM4_Init+0x128>)
 800157a:	f001 ff41 	bl	8003400 <HAL_TIM_PWM_ConfigChannel>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8001584:	f000 f8e8 	bl	8001758 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001588:	1d3b      	adds	r3, r7, #4
 800158a:	2208      	movs	r2, #8
 800158c:	4619      	mov	r1, r3
 800158e:	480d      	ldr	r0, [pc, #52]	; (80015c4 <MX_TIM4_Init+0x128>)
 8001590:	f001 ff36 	bl	8003400 <HAL_TIM_PWM_ConfigChannel>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 800159a:	f000 f8dd 	bl	8001758 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800159e:	1d3b      	adds	r3, r7, #4
 80015a0:	220c      	movs	r2, #12
 80015a2:	4619      	mov	r1, r3
 80015a4:	4807      	ldr	r0, [pc, #28]	; (80015c4 <MX_TIM4_Init+0x128>)
 80015a6:	f001 ff2b 	bl	8003400 <HAL_TIM_PWM_ConfigChannel>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 80015b0:	f000 f8d2 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80015b4:	4803      	ldr	r0, [pc, #12]	; (80015c4 <MX_TIM4_Init+0x128>)
 80015b6:	f000 fb87 	bl	8001cc8 <HAL_TIM_MspPostInit>

}
 80015ba:	bf00      	nop
 80015bc:	3738      	adds	r7, #56	; 0x38
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	2000029c 	.word	0x2000029c
 80015c8:	40000800 	.word	0x40000800

080015cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015d0:	4b11      	ldr	r3, [pc, #68]	; (8001618 <MX_USART2_UART_Init+0x4c>)
 80015d2:	4a12      	ldr	r2, [pc, #72]	; (800161c <MX_USART2_UART_Init+0x50>)
 80015d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80015d6:	4b10      	ldr	r3, [pc, #64]	; (8001618 <MX_USART2_UART_Init+0x4c>)
 80015d8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80015dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015de:	4b0e      	ldr	r3, [pc, #56]	; (8001618 <MX_USART2_UART_Init+0x4c>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015e4:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <MX_USART2_UART_Init+0x4c>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015ea:	4b0b      	ldr	r3, [pc, #44]	; (8001618 <MX_USART2_UART_Init+0x4c>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015f0:	4b09      	ldr	r3, [pc, #36]	; (8001618 <MX_USART2_UART_Init+0x4c>)
 80015f2:	220c      	movs	r2, #12
 80015f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015f6:	4b08      	ldr	r3, [pc, #32]	; (8001618 <MX_USART2_UART_Init+0x4c>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015fc:	4b06      	ldr	r3, [pc, #24]	; (8001618 <MX_USART2_UART_Init+0x4c>)
 80015fe:	2200      	movs	r2, #0
 8001600:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001602:	4805      	ldr	r0, [pc, #20]	; (8001618 <MX_USART2_UART_Init+0x4c>)
 8001604:	f002 fbe5 	bl	8003dd2 <HAL_UART_Init>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800160e:	f000 f8a3 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	200002e4 	.word	0x200002e4
 800161c:	40004400 	.word	0x40004400

08001620 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b088      	sub	sp, #32
 8001624:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001626:	f107 0310 	add.w	r3, r7, #16
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	605a      	str	r2, [r3, #4]
 8001630:	609a      	str	r2, [r3, #8]
 8001632:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001634:	4b44      	ldr	r3, [pc, #272]	; (8001748 <MX_GPIO_Init+0x128>)
 8001636:	699b      	ldr	r3, [r3, #24]
 8001638:	4a43      	ldr	r2, [pc, #268]	; (8001748 <MX_GPIO_Init+0x128>)
 800163a:	f043 0310 	orr.w	r3, r3, #16
 800163e:	6193      	str	r3, [r2, #24]
 8001640:	4b41      	ldr	r3, [pc, #260]	; (8001748 <MX_GPIO_Init+0x128>)
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	f003 0310 	and.w	r3, r3, #16
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800164c:	4b3e      	ldr	r3, [pc, #248]	; (8001748 <MX_GPIO_Init+0x128>)
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	4a3d      	ldr	r2, [pc, #244]	; (8001748 <MX_GPIO_Init+0x128>)
 8001652:	f043 0320 	orr.w	r3, r3, #32
 8001656:	6193      	str	r3, [r2, #24]
 8001658:	4b3b      	ldr	r3, [pc, #236]	; (8001748 <MX_GPIO_Init+0x128>)
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	f003 0320 	and.w	r3, r3, #32
 8001660:	60bb      	str	r3, [r7, #8]
 8001662:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001664:	4b38      	ldr	r3, [pc, #224]	; (8001748 <MX_GPIO_Init+0x128>)
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	4a37      	ldr	r2, [pc, #220]	; (8001748 <MX_GPIO_Init+0x128>)
 800166a:	f043 0304 	orr.w	r3, r3, #4
 800166e:	6193      	str	r3, [r2, #24]
 8001670:	4b35      	ldr	r3, [pc, #212]	; (8001748 <MX_GPIO_Init+0x128>)
 8001672:	699b      	ldr	r3, [r3, #24]
 8001674:	f003 0304 	and.w	r3, r3, #4
 8001678:	607b      	str	r3, [r7, #4]
 800167a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800167c:	4b32      	ldr	r3, [pc, #200]	; (8001748 <MX_GPIO_Init+0x128>)
 800167e:	699b      	ldr	r3, [r3, #24]
 8001680:	4a31      	ldr	r2, [pc, #196]	; (8001748 <MX_GPIO_Init+0x128>)
 8001682:	f043 0308 	orr.w	r3, r3, #8
 8001686:	6193      	str	r3, [r2, #24]
 8001688:	4b2f      	ldr	r3, [pc, #188]	; (8001748 <MX_GPIO_Init+0x128>)
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	f003 0308 	and.w	r3, r3, #8
 8001690:	603b      	str	r3, [r7, #0]
 8001692:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001694:	2200      	movs	r2, #0
 8001696:	2102      	movs	r1, #2
 8001698:	482c      	ldr	r0, [pc, #176]	; (800174c <MX_GPIO_Init+0x12c>)
 800169a:	f001 f89e 	bl	80027da <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13
 800169e:	2200      	movs	r2, #0
 80016a0:	f24f 4102 	movw	r1, #62466	; 0xf402
 80016a4:	482a      	ldr	r0, [pc, #168]	; (8001750 <MX_GPIO_Init+0x130>)
 80016a6:	f001 f898 	bl	80027da <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016aa:	2301      	movs	r3, #1
 80016ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80016ae:	4b29      	ldr	r3, [pc, #164]	; (8001754 <MX_GPIO_Init+0x134>)
 80016b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b2:	2300      	movs	r3, #0
 80016b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b6:	f107 0310 	add.w	r3, r7, #16
 80016ba:	4619      	mov	r1, r3
 80016bc:	4823      	ldr	r0, [pc, #140]	; (800174c <MX_GPIO_Init+0x12c>)
 80016be:	f000 fef1 	bl	80024a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80016c2:	2302      	movs	r3, #2
 80016c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c6:	2301      	movs	r3, #1
 80016c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016ce:	2303      	movs	r3, #3
 80016d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d2:	f107 0310 	add.w	r3, r7, #16
 80016d6:	4619      	mov	r1, r3
 80016d8:	481c      	ldr	r0, [pc, #112]	; (800174c <MX_GPIO_Init+0x12c>)
 80016da:	f000 fee3 	bl	80024a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB10 PB12 PB13
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13
 80016de:	f24f 4302 	movw	r3, #62466	; 0xf402
 80016e2:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e4:	2301      	movs	r3, #1
 80016e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ec:	2302      	movs	r3, #2
 80016ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f0:	f107 0310 	add.w	r3, r7, #16
 80016f4:	4619      	mov	r1, r3
 80016f6:	4816      	ldr	r0, [pc, #88]	; (8001750 <MX_GPIO_Init+0x130>)
 80016f8:	f000 fed4 	bl	80024a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80016fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001700:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001702:	2300      	movs	r3, #0
 8001704:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001706:	2302      	movs	r3, #2
 8001708:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170a:	f107 0310 	add.w	r3, r7, #16
 800170e:	4619      	mov	r1, r3
 8001710:	480e      	ldr	r0, [pc, #56]	; (800174c <MX_GPIO_Init+0x12c>)
 8001712:	f000 fec7 	bl	80024a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001716:	2338      	movs	r3, #56	; 0x38
 8001718:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800171a:	2300      	movs	r3, #0
 800171c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800171e:	2302      	movs	r3, #2
 8001720:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001722:	f107 0310 	add.w	r3, r7, #16
 8001726:	4619      	mov	r1, r3
 8001728:	4809      	ldr	r0, [pc, #36]	; (8001750 <MX_GPIO_Init+0x130>)
 800172a:	f000 febb 	bl	80024a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800172e:	2200      	movs	r2, #0
 8001730:	2100      	movs	r1, #0
 8001732:	2006      	movs	r0, #6
 8001734:	f000 fdcd 	bl	80022d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001738:	2006      	movs	r0, #6
 800173a:	f000 fde6 	bl	800230a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800173e:	bf00      	nop
 8001740:	3720      	adds	r7, #32
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40021000 	.word	0x40021000
 800174c:	40010800 	.word	0x40010800
 8001750:	40010c00 	.word	0x40010c00
 8001754:	10310000 	.word	0x10310000

08001758 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800175c:	b672      	cpsid	i
}
 800175e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001760:	e7fe      	b.n	8001760 <Error_Handler+0x8>
	...

08001764 <Motor_Init>:
#include "motor.h"

extern float distance;

void Motor_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001768:	2104      	movs	r1, #4
 800176a:	4804      	ldr	r0, [pc, #16]	; (800177c <Motor_Init+0x18>)
 800176c:	f001 fda6 	bl	80032bc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001770:	210c      	movs	r1, #12
 8001772:	4802      	ldr	r0, [pc, #8]	; (800177c <Motor_Init+0x18>)
 8001774:	f001 fda2 	bl	80032bc <HAL_TIM_PWM_Start>
}
 8001778:	bf00      	nop
 800177a:	bd80      	pop	{r7, pc}
 800177c:	2000020c 	.word	0x2000020c

08001780 <Set_Speed>:
	else
		return -p;
}

void Set_Speed(int left, int right) //-7199 ~ 7199
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
	if(left < 0)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2b00      	cmp	r3, #0
 800178e:	da0c      	bge.n	80017aa <Set_Speed+0x2a>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001790:	2201      	movs	r2, #1
 8001792:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001796:	4824      	ldr	r0, [pc, #144]	; (8001828 <Set_Speed+0xa8>)
 8001798:	f001 f81f 	bl	80027da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 800179c:	2200      	movs	r2, #0
 800179e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017a2:	4821      	ldr	r0, [pc, #132]	; (8001828 <Set_Speed+0xa8>)
 80017a4:	f001 f819 	bl	80027da <HAL_GPIO_WritePin>
 80017a8:	e00e      	b.n	80017c8 <Set_Speed+0x48>
	}
	else if(left > 0)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	dd0b      	ble.n	80017c8 <Set_Speed+0x48>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80017b0:	2200      	movs	r2, #0
 80017b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017b6:	481c      	ldr	r0, [pc, #112]	; (8001828 <Set_Speed+0xa8>)
 80017b8:	f001 f80f 	bl	80027da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 80017bc:	2201      	movs	r2, #1
 80017be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017c2:	4819      	ldr	r0, [pc, #100]	; (8001828 <Set_Speed+0xa8>)
 80017c4:	f001 f809 	bl	80027da <HAL_GPIO_WritePin>
	}
	htim1.Instance -> CCR4 = abs(left);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80017ce:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80017d2:	4b16      	ldr	r3, [pc, #88]	; (800182c <Set_Speed+0xac>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	641a      	str	r2, [r3, #64]	; 0x40

	if(right < 0)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	da0c      	bge.n	80017f8 <Set_Speed+0x78>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80017de:	2201      	movs	r2, #1
 80017e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017e4:	4810      	ldr	r0, [pc, #64]	; (8001828 <Set_Speed+0xa8>)
 80017e6:	f000 fff8 	bl	80027da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80017ea:	2200      	movs	r2, #0
 80017ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017f0:	480d      	ldr	r0, [pc, #52]	; (8001828 <Set_Speed+0xa8>)
 80017f2:	f000 fff2 	bl	80027da <HAL_GPIO_WritePin>
 80017f6:	e00b      	b.n	8001810 <Set_Speed+0x90>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80017f8:	2200      	movs	r2, #0
 80017fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017fe:	480a      	ldr	r0, [pc, #40]	; (8001828 <Set_Speed+0xa8>)
 8001800:	f000 ffeb 	bl	80027da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001804:	2201      	movs	r2, #1
 8001806:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800180a:	4807      	ldr	r0, [pc, #28]	; (8001828 <Set_Speed+0xa8>)
 800180c:	f000 ffe5 	bl	80027da <HAL_GPIO_WritePin>
	}
	htim1.Instance -> CCR2 = abs(right);
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001816:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800181a:	4b04      	ldr	r3, [pc, #16]	; (800182c <Set_Speed+0xac>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001820:	bf00      	nop
 8001822:	3708      	adds	r7, #8
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	40010c00 	.word	0x40010c00
 800182c:	2000020c 	.word	0x2000020c

08001830 <Control_Motor>:

void Control_Motor(int pitch, int roll)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	6039      	str	r1, [r7, #0]
	pitch = (pitch > 65) ? 65 : (pitch < -65) ? -65 : (abs(pitch) < 10 ? 0 : pitch);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2b41      	cmp	r3, #65	; 0x41
 800183e:	dc11      	bgt.n	8001864 <Control_Motor+0x34>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f113 0f41 	cmn.w	r3, #65	; 0x41
 8001846:	db0a      	blt.n	800185e <Control_Motor+0x2e>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f113 0f09 	cmn.w	r3, #9
 800184e:	db02      	blt.n	8001856 <Control_Motor+0x26>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2b09      	cmp	r3, #9
 8001854:	dd01      	ble.n	800185a <Control_Motor+0x2a>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	e005      	b.n	8001866 <Control_Motor+0x36>
 800185a:	2300      	movs	r3, #0
 800185c:	e003      	b.n	8001866 <Control_Motor+0x36>
 800185e:	f06f 0340 	mvn.w	r3, #64	; 0x40
 8001862:	e000      	b.n	8001866 <Control_Motor+0x36>
 8001864:	2341      	movs	r3, #65	; 0x41
 8001866:	607b      	str	r3, [r7, #4]
	roll = (roll > 65) ? 65 : (roll < -65) ? -65 : (abs(roll) < 10 ? 0 : roll);
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	2b41      	cmp	r3, #65	; 0x41
 800186c:	dc11      	bgt.n	8001892 <Control_Motor+0x62>
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	f113 0f41 	cmn.w	r3, #65	; 0x41
 8001874:	db0a      	blt.n	800188c <Control_Motor+0x5c>
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	f113 0f09 	cmn.w	r3, #9
 800187c:	db02      	blt.n	8001884 <Control_Motor+0x54>
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	2b09      	cmp	r3, #9
 8001882:	dd01      	ble.n	8001888 <Control_Motor+0x58>
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	e005      	b.n	8001894 <Control_Motor+0x64>
 8001888:	2300      	movs	r3, #0
 800188a:	e003      	b.n	8001894 <Control_Motor+0x64>
 800188c:	f06f 0340 	mvn.w	r3, #64	; 0x40
 8001890:	e000      	b.n	8001894 <Control_Motor+0x64>
 8001892:	2341      	movs	r3, #65	; 0x41
 8001894:	603b      	str	r3, [r7, #0]

	if (pitch == 0 && roll == 0) {
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d106      	bne.n	80018aa <Control_Motor+0x7a>
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d103      	bne.n	80018aa <Control_Motor+0x7a>
	    Set_Speed(0, 0);
 80018a2:	2100      	movs	r1, #0
 80018a4:	2000      	movs	r0, #0
 80018a6:	f7ff ff6b 	bl	8001780 <Set_Speed>
	}

	if (abs(pitch) > abs(roll)) {
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80018b0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	bfb8      	it	lt
 80018ba:	425b      	neglt	r3, r3
 80018bc:	429a      	cmp	r2, r3
 80018be:	dd28      	ble.n	8001912 <Control_Motor+0xe2>
		if (distance < 30) {
 80018c0:	4b22      	ldr	r3, [pc, #136]	; (800194c <Control_Motor+0x11c>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4922      	ldr	r1, [pc, #136]	; (8001950 <Control_Motor+0x120>)
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7ff f9a6 	bl	8000c18 <__aeabi_fcmplt>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d012      	beq.n	80018f8 <Control_Motor+0xc8>
			// Move backward when the distance is smaller than 40 cm
			Set_Speed(100 * abs(pitch), 100 * abs(pitch));
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	bfb8      	it	lt
 80018d8:	425b      	neglt	r3, r3
 80018da:	2264      	movs	r2, #100	; 0x64
 80018dc:	fb03 f202 	mul.w	r2, r3, r2
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	bfb8      	it	lt
 80018e6:	425b      	neglt	r3, r3
 80018e8:	2164      	movs	r1, #100	; 0x64
 80018ea:	fb01 f303 	mul.w	r3, r1, r3
 80018ee:	4619      	mov	r1, r3
 80018f0:	4610      	mov	r0, r2
 80018f2:	f7ff ff45 	bl	8001780 <Set_Speed>
	}
	else if (abs(roll) > abs(pitch)) {
	    // Control left-right
	    Set_Speed(-50 * roll, 50 * roll);
	}
}
 80018f6:	e024      	b.n	8001942 <Control_Motor+0x112>
		    Set_Speed(70 * pitch, 50 * pitch);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2246      	movs	r2, #70	; 0x46
 80018fc:	fb03 f202 	mul.w	r2, r3, r2
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2132      	movs	r1, #50	; 0x32
 8001904:	fb01 f303 	mul.w	r3, r1, r3
 8001908:	4619      	mov	r1, r3
 800190a:	4610      	mov	r0, r2
 800190c:	f7ff ff38 	bl	8001780 <Set_Speed>
}
 8001910:	e017      	b.n	8001942 <Control_Motor+0x112>
	else if (abs(roll) > abs(pitch)) {
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001918:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2b00      	cmp	r3, #0
 8001920:	bfb8      	it	lt
 8001922:	425b      	neglt	r3, r3
 8001924:	429a      	cmp	r2, r3
 8001926:	dd0c      	ble.n	8001942 <Control_Motor+0x112>
	    Set_Speed(-50 * roll, 50 * roll);
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	f06f 0231 	mvn.w	r2, #49	; 0x31
 800192e:	fb03 f202 	mul.w	r2, r3, r2
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	2132      	movs	r1, #50	; 0x32
 8001936:	fb01 f303 	mul.w	r3, r1, r3
 800193a:	4619      	mov	r1, r3
 800193c:	4610      	mov	r0, r2
 800193e:	f7ff ff1f 	bl	8001780 <Set_Speed>
}
 8001942:	bf00      	nop
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	20000364 	.word	0x20000364
 8001950:	41f00000 	.word	0x41f00000

08001954 <Distance_Follow>:

void Distance_Follow(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
	if (distance > 20 && distance < 150)
 8001958:	4b16      	ldr	r3, [pc, #88]	; (80019b4 <Distance_Follow+0x60>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4916      	ldr	r1, [pc, #88]	; (80019b8 <Distance_Follow+0x64>)
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff f978 	bl	8000c54 <__aeabi_fcmpgt>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d00d      	beq.n	8001986 <Distance_Follow+0x32>
 800196a:	4b12      	ldr	r3, [pc, #72]	; (80019b4 <Distance_Follow+0x60>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4913      	ldr	r1, [pc, #76]	; (80019bc <Distance_Follow+0x68>)
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff f951 	bl	8000c18 <__aeabi_fcmplt>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d004      	beq.n	8001986 <Distance_Follow+0x32>
	{
		Set_Speed(-2000, -2000);
 800197c:	4910      	ldr	r1, [pc, #64]	; (80019c0 <Distance_Follow+0x6c>)
 800197e:	4810      	ldr	r0, [pc, #64]	; (80019c0 <Distance_Follow+0x6c>)
 8001980:	f7ff fefe 	bl	8001780 <Set_Speed>
	}
	else
	{
		Set_Speed(0,0);
	}
}
 8001984:	e013      	b.n	80019ae <Distance_Follow+0x5a>
	else if (distance < 15)
 8001986:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <Distance_Follow+0x60>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	490e      	ldr	r1, [pc, #56]	; (80019c4 <Distance_Follow+0x70>)
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff f943 	bl	8000c18 <__aeabi_fcmplt>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d006      	beq.n	80019a6 <Distance_Follow+0x52>
		Set_Speed(2000, 2000);
 8001998:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800199c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80019a0:	f7ff feee 	bl	8001780 <Set_Speed>
}
 80019a4:	e003      	b.n	80019ae <Distance_Follow+0x5a>
		Set_Speed(0,0);
 80019a6:	2100      	movs	r1, #0
 80019a8:	2000      	movs	r0, #0
 80019aa:	f7ff fee9 	bl	8001780 <Set_Speed>
}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20000364 	.word	0x20000364
 80019b8:	41a00000 	.word	0x41a00000
 80019bc:	43160000 	.word	0x43160000
 80019c0:	fffff830 	.word	0xfffff830
 80019c4:	41700000 	.word	0x41700000

080019c8 <Servo_Init>:
#define ARM_FrontBack        htim4.Instance->CCR2
#define ARM_Claw			 htim4.Instance->CCR3
#define ARM_UpDown			 htim4.Instance->CCR4

void Servo_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80019cc:	2100      	movs	r1, #0
 80019ce:	4808      	ldr	r0, [pc, #32]	; (80019f0 <Servo_Init+0x28>)
 80019d0:	f001 fc74 	bl	80032bc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80019d4:	2104      	movs	r1, #4
 80019d6:	4806      	ldr	r0, [pc, #24]	; (80019f0 <Servo_Init+0x28>)
 80019d8:	f001 fc70 	bl	80032bc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80019dc:	2108      	movs	r1, #8
 80019de:	4804      	ldr	r0, [pc, #16]	; (80019f0 <Servo_Init+0x28>)
 80019e0:	f001 fc6c 	bl	80032bc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80019e4:	210c      	movs	r1, #12
 80019e6:	4802      	ldr	r0, [pc, #8]	; (80019f0 <Servo_Init+0x28>)
 80019e8:	f001 fc68 	bl	80032bc <HAL_TIM_PWM_Start>
}
 80019ec:	bf00      	nop
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	2000029c 	.word	0x2000029c

080019f4 <Set_FrontBack>:

//max(forward): 1900
//min(backward): 600
//default: 1000
void Set_FrontBack(int angle)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
	if(angle > 69){angle = 69;}
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2b45      	cmp	r3, #69	; 0x45
 8001a00:	dd02      	ble.n	8001a08 <Set_FrontBack+0x14>
 8001a02:	2345      	movs	r3, #69	; 0x45
 8001a04:	607b      	str	r3, [r7, #4]
 8001a06:	e006      	b.n	8001a16 <Set_FrontBack+0x22>
	else if(angle < -45){angle = -45;}
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f113 0f2d 	cmn.w	r3, #45	; 0x2d
 8001a0e:	da02      	bge.n	8001a16 <Set_FrontBack+0x22>
 8001a10:	f06f 032c 	mvn.w	r3, #44	; 0x2c
 8001a14:	607b      	str	r3, [r7, #4]
	ARM_FrontBack = 1000 + (angle * 13);
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	4613      	mov	r3, r2
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	4413      	add	r3, r2
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	4413      	add	r3, r2
 8001a22:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8001a26:	4b04      	ldr	r3, [pc, #16]	; (8001a38 <Set_FrontBack+0x44>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001a2c:	bf00      	nop
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bc80      	pop	{r7}
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	2000029c 	.word	0x2000029c

08001a3c <Set_LeftRight>:

//max(left): 2400
//min(right): 1200
//default: 1800
void Set_LeftRight(int angle)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
	if(angle > 70){angle = 70;}
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2b46      	cmp	r3, #70	; 0x46
 8001a48:	dd02      	ble.n	8001a50 <Set_LeftRight+0x14>
 8001a4a:	2346      	movs	r3, #70	; 0x46
 8001a4c:	607b      	str	r3, [r7, #4]
 8001a4e:	e006      	b.n	8001a5e <Set_LeftRight+0x22>
	else if(angle < -70){angle = -70;}
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f113 0f46 	cmn.w	r3, #70	; 0x46
 8001a56:	da02      	bge.n	8001a5e <Set_LeftRight+0x22>
 8001a58:	f06f 0345 	mvn.w	r3, #69	; 0x45
 8001a5c:	607b      	str	r3, [r7, #4]
	ARM_LeftRight = 1800 + (angle * 5);
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	4613      	mov	r3, r2
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	4413      	add	r3, r2
 8001a66:	f503 62e1 	add.w	r2, r3, #1800	; 0x708
 8001a6a:	4b04      	ldr	r3, [pc, #16]	; (8001a7c <Set_LeftRight+0x40>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001a70:	bf00      	nop
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bc80      	pop	{r7}
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	2000029c 	.word	0x2000029c

08001a80 <Set_UpDown>:

//max(down): 1500
//min(up): 2500
//default: 2000
void Set_UpDown(int angle)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
	if(angle > 65){angle = 65;}
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2b41      	cmp	r3, #65	; 0x41
 8001a8c:	dd02      	ble.n	8001a94 <Set_UpDown+0x14>
 8001a8e:	2341      	movs	r3, #65	; 0x41
 8001a90:	607b      	str	r3, [r7, #4]
 8001a92:	e006      	b.n	8001aa2 <Set_UpDown+0x22>
	else if(angle < -65){angle = -65;}
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f113 0f41 	cmn.w	r3, #65	; 0x41
 8001a9a:	da02      	bge.n	8001aa2 <Set_UpDown+0x22>
 8001a9c:	f06f 0340 	mvn.w	r3, #64	; 0x40
 8001aa0:	607b      	str	r3, [r7, #4]
	ARM_UpDown = 2000 + (angle * 7);
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	00db      	lsls	r3, r3, #3
 8001aa8:	1a9b      	subs	r3, r3, r2
 8001aaa:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 8001aae:	4b04      	ldr	r3, [pc, #16]	; (8001ac0 <Set_UpDown+0x40>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bc80      	pop	{r7}
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	2000029c 	.word	0x2000029c

08001ac4 <Open_Claw>:

//max(open): 1500
void Open_Claw(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
	ARM_Claw = 1500;
 8001ac8:	4b04      	ldr	r3, [pc, #16]	; (8001adc <Open_Claw+0x18>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001ad0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001ad2:	bf00      	nop
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bc80      	pop	{r7}
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	2000029c 	.word	0x2000029c

08001ae0 <Close_Claw>:

//min(close): 500
void Close_Claw(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
	ARM_Claw = 500;
 8001ae4:	4b04      	ldr	r3, [pc, #16]	; (8001af8 <Close_Claw+0x18>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001aec:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001aee:	bf00      	nop
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bc80      	pop	{r7}
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	2000029c 	.word	0x2000029c

08001afc <RCCdelay_us>:

uint16_t count;
float distance;
extern TIM_HandleTypeDef htim3;

void RCCdelay_us(uint32_t udelay){
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
	__IO uint32_t Delay = udelay * 72 / 8;
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	4613      	mov	r3, r2
 8001b08:	00db      	lsls	r3, r3, #3
 8001b0a:	4413      	add	r3, r2
 8001b0c:	00db      	lsls	r3, r3, #3
 8001b0e:	08db      	lsrs	r3, r3, #3
 8001b10:	60fb      	str	r3, [r7, #12]

	do{
		__NOP();
 8001b12:	bf00      	nop
	}
	while(Delay --);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	1e5a      	subs	r2, r3, #1
 8001b18:	60fa      	str	r2, [r7, #12]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d1f9      	bne.n	8001b12 <RCCdelay_us+0x16>
}
 8001b1e:	bf00      	nop
 8001b20:	bf00      	nop
 8001b22:	3714      	adds	r7, #20
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bc80      	pop	{r7}
 8001b28:	4770      	bx	lr
	...

08001b2c <GET_Distance>:

void GET_Distance(void){
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
	//send trigger signal
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8001b30:	2201      	movs	r2, #1
 8001b32:	2102      	movs	r1, #2
 8001b34:	4806      	ldr	r0, [pc, #24]	; (8001b50 <GET_Distance+0x24>)
 8001b36:	f000 fe50 	bl	80027da <HAL_GPIO_WritePin>
	RCCdelay_us(12);
 8001b3a:	200c      	movs	r0, #12
 8001b3c:	f7ff ffde 	bl	8001afc <RCCdelay_us>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001b40:	2200      	movs	r2, #0
 8001b42:	2102      	movs	r1, #2
 8001b44:	4802      	ldr	r0, [pc, #8]	; (8001b50 <GET_Distance+0x24>)
 8001b46:	f000 fe48 	bl	80027da <HAL_GPIO_WritePin>
}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40010800 	.word	0x40010800
 8001b54:	00000000 	.word	0x00000000

08001b58 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	80fb      	strh	r3, [r7, #6]
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET){
 8001b62:	2101      	movs	r1, #1
 8001b64:	4818      	ldr	r0, [pc, #96]	; (8001bc8 <HAL_GPIO_EXTI_Callback+0x70>)
 8001b66:	f000 fe21 	bl	80027ac <HAL_GPIO_ReadPin>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d107      	bne.n	8001b80 <HAL_GPIO_EXTI_Callback+0x28>
		__HAL_TIM_SetCounter(&htim3, 0);
 8001b70:	4b16      	ldr	r3, [pc, #88]	; (8001bcc <HAL_GPIO_EXTI_Callback+0x74>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2200      	movs	r2, #0
 8001b76:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Base_Start(&htim3);
 8001b78:	4814      	ldr	r0, [pc, #80]	; (8001bcc <HAL_GPIO_EXTI_Callback+0x74>)
 8001b7a:	f001 fad7 	bl	800312c <HAL_TIM_Base_Start>
	else{
		HAL_TIM_Base_Stop(&htim3);
		count = __HAL_TIM_GetCounter(&htim3);
		distance = count * 0.017;
	}
}
 8001b7e:	e01b      	b.n	8001bb8 <HAL_GPIO_EXTI_Callback+0x60>
		HAL_TIM_Base_Stop(&htim3);
 8001b80:	4812      	ldr	r0, [pc, #72]	; (8001bcc <HAL_GPIO_EXTI_Callback+0x74>)
 8001b82:	f001 fb1d 	bl	80031c0 <HAL_TIM_Base_Stop>
		count = __HAL_TIM_GetCounter(&htim3);
 8001b86:	4b11      	ldr	r3, [pc, #68]	; (8001bcc <HAL_GPIO_EXTI_Callback+0x74>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	4b10      	ldr	r3, [pc, #64]	; (8001bd0 <HAL_GPIO_EXTI_Callback+0x78>)
 8001b90:	801a      	strh	r2, [r3, #0]
		distance = count * 0.017;
 8001b92:	4b0f      	ldr	r3, [pc, #60]	; (8001bd0 <HAL_GPIO_EXTI_Callback+0x78>)
 8001b94:	881b      	ldrh	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7fe fc3e 	bl	8000418 <__aeabi_i2d>
 8001b9c:	a308      	add	r3, pc, #32	; (adr r3, 8001bc0 <HAL_GPIO_EXTI_Callback+0x68>)
 8001b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba2:	f7fe fca3 	bl	80004ec <__aeabi_dmul>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	460b      	mov	r3, r1
 8001baa:	4610      	mov	r0, r2
 8001bac:	4619      	mov	r1, r3
 8001bae:	f7fe ff95 	bl	8000adc <__aeabi_d2f>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	4a07      	ldr	r2, [pc, #28]	; (8001bd4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001bb6:	6013      	str	r3, [r2, #0]
}
 8001bb8:	bf00      	nop
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	b020c49c 	.word	0xb020c49c
 8001bc4:	3f916872 	.word	0x3f916872
 8001bc8:	40010800 	.word	0x40010800
 8001bcc:	20000254 	.word	0x20000254
 8001bd0:	20000362 	.word	0x20000362
 8001bd4:	20000364 	.word	0x20000364

08001bd8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001bde:	4b15      	ldr	r3, [pc, #84]	; (8001c34 <HAL_MspInit+0x5c>)
 8001be0:	699b      	ldr	r3, [r3, #24]
 8001be2:	4a14      	ldr	r2, [pc, #80]	; (8001c34 <HAL_MspInit+0x5c>)
 8001be4:	f043 0301 	orr.w	r3, r3, #1
 8001be8:	6193      	str	r3, [r2, #24]
 8001bea:	4b12      	ldr	r3, [pc, #72]	; (8001c34 <HAL_MspInit+0x5c>)
 8001bec:	699b      	ldr	r3, [r3, #24]
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	60bb      	str	r3, [r7, #8]
 8001bf4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bf6:	4b0f      	ldr	r3, [pc, #60]	; (8001c34 <HAL_MspInit+0x5c>)
 8001bf8:	69db      	ldr	r3, [r3, #28]
 8001bfa:	4a0e      	ldr	r2, [pc, #56]	; (8001c34 <HAL_MspInit+0x5c>)
 8001bfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c00:	61d3      	str	r3, [r2, #28]
 8001c02:	4b0c      	ldr	r3, [pc, #48]	; (8001c34 <HAL_MspInit+0x5c>)
 8001c04:	69db      	ldr	r3, [r3, #28]
 8001c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c0a:	607b      	str	r3, [r7, #4]
 8001c0c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c0e:	4b0a      	ldr	r3, [pc, #40]	; (8001c38 <HAL_MspInit+0x60>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	60fb      	str	r3, [r7, #12]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c22:	60fb      	str	r3, [r7, #12]
 8001c24:	4a04      	ldr	r2, [pc, #16]	; (8001c38 <HAL_MspInit+0x60>)
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	3714      	adds	r7, #20
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bc80      	pop	{r7}
 8001c32:	4770      	bx	lr
 8001c34:	40021000 	.word	0x40021000
 8001c38:	40010000 	.word	0x40010000

08001c3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b087      	sub	sp, #28
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a1b      	ldr	r2, [pc, #108]	; (8001cb8 <HAL_TIM_Base_MspInit+0x7c>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d10c      	bne.n	8001c68 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c4e:	4b1b      	ldr	r3, [pc, #108]	; (8001cbc <HAL_TIM_Base_MspInit+0x80>)
 8001c50:	699b      	ldr	r3, [r3, #24]
 8001c52:	4a1a      	ldr	r2, [pc, #104]	; (8001cbc <HAL_TIM_Base_MspInit+0x80>)
 8001c54:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c58:	6193      	str	r3, [r2, #24]
 8001c5a:	4b18      	ldr	r3, [pc, #96]	; (8001cbc <HAL_TIM_Base_MspInit+0x80>)
 8001c5c:	699b      	ldr	r3, [r3, #24]
 8001c5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c62:	617b      	str	r3, [r7, #20]
 8001c64:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001c66:	e022      	b.n	8001cae <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a14      	ldr	r2, [pc, #80]	; (8001cc0 <HAL_TIM_Base_MspInit+0x84>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d10c      	bne.n	8001c8c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c72:	4b12      	ldr	r3, [pc, #72]	; (8001cbc <HAL_TIM_Base_MspInit+0x80>)
 8001c74:	69db      	ldr	r3, [r3, #28]
 8001c76:	4a11      	ldr	r2, [pc, #68]	; (8001cbc <HAL_TIM_Base_MspInit+0x80>)
 8001c78:	f043 0302 	orr.w	r3, r3, #2
 8001c7c:	61d3      	str	r3, [r2, #28]
 8001c7e:	4b0f      	ldr	r3, [pc, #60]	; (8001cbc <HAL_TIM_Base_MspInit+0x80>)
 8001c80:	69db      	ldr	r3, [r3, #28]
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	613b      	str	r3, [r7, #16]
 8001c88:	693b      	ldr	r3, [r7, #16]
}
 8001c8a:	e010      	b.n	8001cae <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM4)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a0c      	ldr	r2, [pc, #48]	; (8001cc4 <HAL_TIM_Base_MspInit+0x88>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d10b      	bne.n	8001cae <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c96:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <HAL_TIM_Base_MspInit+0x80>)
 8001c98:	69db      	ldr	r3, [r3, #28]
 8001c9a:	4a08      	ldr	r2, [pc, #32]	; (8001cbc <HAL_TIM_Base_MspInit+0x80>)
 8001c9c:	f043 0304 	orr.w	r3, r3, #4
 8001ca0:	61d3      	str	r3, [r2, #28]
 8001ca2:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <HAL_TIM_Base_MspInit+0x80>)
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	f003 0304 	and.w	r3, r3, #4
 8001caa:	60fb      	str	r3, [r7, #12]
 8001cac:	68fb      	ldr	r3, [r7, #12]
}
 8001cae:	bf00      	nop
 8001cb0:	371c      	adds	r7, #28
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bc80      	pop	{r7}
 8001cb6:	4770      	bx	lr
 8001cb8:	40012c00 	.word	0x40012c00
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	40000400 	.word	0x40000400
 8001cc4:	40000800 	.word	0x40000800

08001cc8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b088      	sub	sp, #32
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd0:	f107 0310 	add.w	r3, r7, #16
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	605a      	str	r2, [r3, #4]
 8001cda:	609a      	str	r2, [r3, #8]
 8001cdc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a1f      	ldr	r2, [pc, #124]	; (8001d60 <HAL_TIM_MspPostInit+0x98>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d119      	bne.n	8001d1c <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce8:	4b1e      	ldr	r3, [pc, #120]	; (8001d64 <HAL_TIM_MspPostInit+0x9c>)
 8001cea:	699b      	ldr	r3, [r3, #24]
 8001cec:	4a1d      	ldr	r2, [pc, #116]	; (8001d64 <HAL_TIM_MspPostInit+0x9c>)
 8001cee:	f043 0304 	orr.w	r3, r3, #4
 8001cf2:	6193      	str	r3, [r2, #24]
 8001cf4:	4b1b      	ldr	r3, [pc, #108]	; (8001d64 <HAL_TIM_MspPostInit+0x9c>)
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	f003 0304 	and.w	r3, r3, #4
 8001cfc:	60fb      	str	r3, [r7, #12]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001d00:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001d04:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d06:	2302      	movs	r3, #2
 8001d08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d0e:	f107 0310 	add.w	r3, r7, #16
 8001d12:	4619      	mov	r1, r3
 8001d14:	4814      	ldr	r0, [pc, #80]	; (8001d68 <HAL_TIM_MspPostInit+0xa0>)
 8001d16:	f000 fbc5 	bl	80024a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001d1a:	e01d      	b.n	8001d58 <HAL_TIM_MspPostInit+0x90>
  else if(htim->Instance==TIM4)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a12      	ldr	r2, [pc, #72]	; (8001d6c <HAL_TIM_MspPostInit+0xa4>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d118      	bne.n	8001d58 <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d26:	4b0f      	ldr	r3, [pc, #60]	; (8001d64 <HAL_TIM_MspPostInit+0x9c>)
 8001d28:	699b      	ldr	r3, [r3, #24]
 8001d2a:	4a0e      	ldr	r2, [pc, #56]	; (8001d64 <HAL_TIM_MspPostInit+0x9c>)
 8001d2c:	f043 0308 	orr.w	r3, r3, #8
 8001d30:	6193      	str	r3, [r2, #24]
 8001d32:	4b0c      	ldr	r3, [pc, #48]	; (8001d64 <HAL_TIM_MspPostInit+0x9c>)
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	f003 0308 	and.w	r3, r3, #8
 8001d3a:	60bb      	str	r3, [r7, #8]
 8001d3c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001d3e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001d42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d44:	2302      	movs	r3, #2
 8001d46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d48:	2302      	movs	r3, #2
 8001d4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d4c:	f107 0310 	add.w	r3, r7, #16
 8001d50:	4619      	mov	r1, r3
 8001d52:	4807      	ldr	r0, [pc, #28]	; (8001d70 <HAL_TIM_MspPostInit+0xa8>)
 8001d54:	f000 fba6 	bl	80024a4 <HAL_GPIO_Init>
}
 8001d58:	bf00      	nop
 8001d5a:	3720      	adds	r7, #32
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40012c00 	.word	0x40012c00
 8001d64:	40021000 	.word	0x40021000
 8001d68:	40010800 	.word	0x40010800
 8001d6c:	40000800 	.word	0x40000800
 8001d70:	40010c00 	.word	0x40010c00

08001d74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b088      	sub	sp, #32
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d7c:	f107 0310 	add.w	r3, r7, #16
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	605a      	str	r2, [r3, #4]
 8001d86:	609a      	str	r2, [r3, #8]
 8001d88:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a1f      	ldr	r2, [pc, #124]	; (8001e0c <HAL_UART_MspInit+0x98>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d137      	bne.n	8001e04 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d94:	4b1e      	ldr	r3, [pc, #120]	; (8001e10 <HAL_UART_MspInit+0x9c>)
 8001d96:	69db      	ldr	r3, [r3, #28]
 8001d98:	4a1d      	ldr	r2, [pc, #116]	; (8001e10 <HAL_UART_MspInit+0x9c>)
 8001d9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d9e:	61d3      	str	r3, [r2, #28]
 8001da0:	4b1b      	ldr	r3, [pc, #108]	; (8001e10 <HAL_UART_MspInit+0x9c>)
 8001da2:	69db      	ldr	r3, [r3, #28]
 8001da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da8:	60fb      	str	r3, [r7, #12]
 8001daa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dac:	4b18      	ldr	r3, [pc, #96]	; (8001e10 <HAL_UART_MspInit+0x9c>)
 8001dae:	699b      	ldr	r3, [r3, #24]
 8001db0:	4a17      	ldr	r2, [pc, #92]	; (8001e10 <HAL_UART_MspInit+0x9c>)
 8001db2:	f043 0304 	orr.w	r3, r3, #4
 8001db6:	6193      	str	r3, [r2, #24]
 8001db8:	4b15      	ldr	r3, [pc, #84]	; (8001e10 <HAL_UART_MspInit+0x9c>)
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	f003 0304 	and.w	r3, r3, #4
 8001dc0:	60bb      	str	r3, [r7, #8]
 8001dc2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001dc4:	2304      	movs	r3, #4
 8001dc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc8:	2302      	movs	r3, #2
 8001dca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd0:	f107 0310 	add.w	r3, r7, #16
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	480f      	ldr	r0, [pc, #60]	; (8001e14 <HAL_UART_MspInit+0xa0>)
 8001dd8:	f000 fb64 	bl	80024a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ddc:	2308      	movs	r3, #8
 8001dde:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001de0:	2300      	movs	r3, #0
 8001de2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de4:	2300      	movs	r3, #0
 8001de6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de8:	f107 0310 	add.w	r3, r7, #16
 8001dec:	4619      	mov	r1, r3
 8001dee:	4809      	ldr	r0, [pc, #36]	; (8001e14 <HAL_UART_MspInit+0xa0>)
 8001df0:	f000 fb58 	bl	80024a4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001df4:	2200      	movs	r2, #0
 8001df6:	2100      	movs	r1, #0
 8001df8:	2026      	movs	r0, #38	; 0x26
 8001dfa:	f000 fa6a 	bl	80022d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001dfe:	2026      	movs	r0, #38	; 0x26
 8001e00:	f000 fa83 	bl	800230a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e04:	bf00      	nop
 8001e06:	3720      	adds	r7, #32
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40004400 	.word	0x40004400
 8001e10:	40021000 	.word	0x40021000
 8001e14:	40010800 	.word	0x40010800

08001e18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e1c:	e7fe      	b.n	8001e1c <NMI_Handler+0x4>

08001e1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e22:	e7fe      	b.n	8001e22 <HardFault_Handler+0x4>

08001e24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e28:	e7fe      	b.n	8001e28 <MemManage_Handler+0x4>

08001e2a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e2e:	e7fe      	b.n	8001e2e <BusFault_Handler+0x4>

08001e30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e34:	e7fe      	b.n	8001e34 <UsageFault_Handler+0x4>

08001e36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e36:	b480      	push	{r7}
 8001e38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bc80      	pop	{r7}
 8001e40:	4770      	bx	lr

08001e42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e42:	b480      	push	{r7}
 8001e44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e46:	bf00      	nop
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bc80      	pop	{r7}
 8001e4c:	4770      	bx	lr

08001e4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e52:	bf00      	nop
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bc80      	pop	{r7}
 8001e58:	4770      	bx	lr

08001e5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e5e:	f000 f945 	bl	80020ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e62:	bf00      	nop
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001e6a:	2001      	movs	r0, #1
 8001e6c:	f000 fce6 	bl	800283c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001e70:	bf00      	nop
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001e78:	4802      	ldr	r0, [pc, #8]	; (8001e84 <USART2_IRQHandler+0x10>)
 8001e7a:	f002 f81f 	bl	8003ebc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001e7e:	bf00      	nop
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	200002e4 	.word	0x200002e4

08001e88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  return 1;
 8001e8c:	2301      	movs	r3, #1
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bc80      	pop	{r7}
 8001e94:	4770      	bx	lr

08001e96 <_kill>:

int _kill(int pid, int sig)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b082      	sub	sp, #8
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
 8001e9e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ea0:	f003 fd2e 	bl	8005900 <__errno>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2216      	movs	r2, #22
 8001ea8:	601a      	str	r2, [r3, #0]
  return -1;
 8001eaa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <_exit>:

void _exit (int status)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b082      	sub	sp, #8
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ebe:	f04f 31ff 	mov.w	r1, #4294967295
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f7ff ffe7 	bl	8001e96 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ec8:	e7fe      	b.n	8001ec8 <_exit+0x12>

08001eca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b086      	sub	sp, #24
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	60f8      	str	r0, [r7, #12]
 8001ed2:	60b9      	str	r1, [r7, #8]
 8001ed4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	617b      	str	r3, [r7, #20]
 8001eda:	e00a      	b.n	8001ef2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001edc:	f3af 8000 	nop.w
 8001ee0:	4601      	mov	r1, r0
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	1c5a      	adds	r2, r3, #1
 8001ee6:	60ba      	str	r2, [r7, #8]
 8001ee8:	b2ca      	uxtb	r2, r1
 8001eea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	3301      	adds	r3, #1
 8001ef0:	617b      	str	r3, [r7, #20]
 8001ef2:	697a      	ldr	r2, [r7, #20]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	dbf0      	blt.n	8001edc <_read+0x12>
  }

  return len;
 8001efa:	687b      	ldr	r3, [r7, #4]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3718      	adds	r7, #24
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b086      	sub	sp, #24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	60b9      	str	r1, [r7, #8]
 8001f0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f10:	2300      	movs	r3, #0
 8001f12:	617b      	str	r3, [r7, #20]
 8001f14:	e009      	b.n	8001f2a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	1c5a      	adds	r2, r3, #1
 8001f1a:	60ba      	str	r2, [r7, #8]
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	3301      	adds	r3, #1
 8001f28:	617b      	str	r3, [r7, #20]
 8001f2a:	697a      	ldr	r2, [r7, #20]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	dbf1      	blt.n	8001f16 <_write+0x12>
  }
  return len;
 8001f32:	687b      	ldr	r3, [r7, #4]
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3718      	adds	r7, #24
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <_close>:

int _close(int file)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bc80      	pop	{r7}
 8001f50:	4770      	bx	lr

08001f52 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f52:	b480      	push	{r7}
 8001f54:	b083      	sub	sp, #12
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
 8001f5a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f62:	605a      	str	r2, [r3, #4]
  return 0;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bc80      	pop	{r7}
 8001f6e:	4770      	bx	lr

08001f70 <_isatty>:

int _isatty(int file)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f78:	2301      	movs	r3, #1
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bc80      	pop	{r7}
 8001f82:	4770      	bx	lr

08001f84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3714      	adds	r7, #20
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bc80      	pop	{r7}
 8001f9a:	4770      	bx	lr

08001f9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b086      	sub	sp, #24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fa4:	4a14      	ldr	r2, [pc, #80]	; (8001ff8 <_sbrk+0x5c>)
 8001fa6:	4b15      	ldr	r3, [pc, #84]	; (8001ffc <_sbrk+0x60>)
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fb0:	4b13      	ldr	r3, [pc, #76]	; (8002000 <_sbrk+0x64>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d102      	bne.n	8001fbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fb8:	4b11      	ldr	r3, [pc, #68]	; (8002000 <_sbrk+0x64>)
 8001fba:	4a12      	ldr	r2, [pc, #72]	; (8002004 <_sbrk+0x68>)
 8001fbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fbe:	4b10      	ldr	r3, [pc, #64]	; (8002000 <_sbrk+0x64>)
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d207      	bcs.n	8001fdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fcc:	f003 fc98 	bl	8005900 <__errno>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	220c      	movs	r2, #12
 8001fd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8001fda:	e009      	b.n	8001ff0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fdc:	4b08      	ldr	r3, [pc, #32]	; (8002000 <_sbrk+0x64>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fe2:	4b07      	ldr	r3, [pc, #28]	; (8002000 <_sbrk+0x64>)
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4413      	add	r3, r2
 8001fea:	4a05      	ldr	r2, [pc, #20]	; (8002000 <_sbrk+0x64>)
 8001fec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fee:	68fb      	ldr	r3, [r7, #12]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3718      	adds	r7, #24
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	20005000 	.word	0x20005000
 8001ffc:	00000400 	.word	0x00000400
 8002000:	20000368 	.word	0x20000368
 8002004:	200004c0 	.word	0x200004c0

08002008 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800200c:	bf00      	nop
 800200e:	46bd      	mov	sp, r7
 8002010:	bc80      	pop	{r7}
 8002012:	4770      	bx	lr

08002014 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002014:	f7ff fff8 	bl	8002008 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002018:	480b      	ldr	r0, [pc, #44]	; (8002048 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800201a:	490c      	ldr	r1, [pc, #48]	; (800204c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800201c:	4a0c      	ldr	r2, [pc, #48]	; (8002050 <LoopFillZerobss+0x16>)
  movs r3, #0
 800201e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002020:	e002      	b.n	8002028 <LoopCopyDataInit>

08002022 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002022:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002024:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002026:	3304      	adds	r3, #4

08002028 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002028:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800202a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800202c:	d3f9      	bcc.n	8002022 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800202e:	4a09      	ldr	r2, [pc, #36]	; (8002054 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002030:	4c09      	ldr	r4, [pc, #36]	; (8002058 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002032:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002034:	e001      	b.n	800203a <LoopFillZerobss>

08002036 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002036:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002038:	3204      	adds	r2, #4

0800203a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800203a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800203c:	d3fb      	bcc.n	8002036 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800203e:	f003 fc65 	bl	800590c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002042:	f7ff f84d 	bl	80010e0 <main>
  bx lr
 8002046:	4770      	bx	lr
  ldr r0, =_sdata
 8002048:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800204c:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002050:	08009d64 	.word	0x08009d64
  ldr r2, =_sbss
 8002054:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002058:	200004bc 	.word	0x200004bc

0800205c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800205c:	e7fe      	b.n	800205c <ADC1_2_IRQHandler>
	...

08002060 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002064:	4b08      	ldr	r3, [pc, #32]	; (8002088 <HAL_Init+0x28>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a07      	ldr	r2, [pc, #28]	; (8002088 <HAL_Init+0x28>)
 800206a:	f043 0310 	orr.w	r3, r3, #16
 800206e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002070:	2003      	movs	r0, #3
 8002072:	f000 f923 	bl	80022bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002076:	200f      	movs	r0, #15
 8002078:	f000 f808 	bl	800208c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800207c:	f7ff fdac 	bl	8001bd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	40022000 	.word	0x40022000

0800208c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002094:	4b12      	ldr	r3, [pc, #72]	; (80020e0 <HAL_InitTick+0x54>)
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	4b12      	ldr	r3, [pc, #72]	; (80020e4 <HAL_InitTick+0x58>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	4619      	mov	r1, r3
 800209e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80020a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020aa:	4618      	mov	r0, r3
 80020ac:	f000 f93b 	bl	8002326 <HAL_SYSTICK_Config>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e00e      	b.n	80020d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2b0f      	cmp	r3, #15
 80020be:	d80a      	bhi.n	80020d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020c0:	2200      	movs	r2, #0
 80020c2:	6879      	ldr	r1, [r7, #4]
 80020c4:	f04f 30ff 	mov.w	r0, #4294967295
 80020c8:	f000 f903 	bl	80022d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020cc:	4a06      	ldr	r2, [pc, #24]	; (80020e8 <HAL_InitTick+0x5c>)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020d2:	2300      	movs	r3, #0
 80020d4:	e000      	b.n	80020d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3708      	adds	r7, #8
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	20000004 	.word	0x20000004
 80020e4:	2000000c 	.word	0x2000000c
 80020e8:	20000008 	.word	0x20000008

080020ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020f0:	4b05      	ldr	r3, [pc, #20]	; (8002108 <HAL_IncTick+0x1c>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	461a      	mov	r2, r3
 80020f6:	4b05      	ldr	r3, [pc, #20]	; (800210c <HAL_IncTick+0x20>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4413      	add	r3, r2
 80020fc:	4a03      	ldr	r2, [pc, #12]	; (800210c <HAL_IncTick+0x20>)
 80020fe:	6013      	str	r3, [r2, #0]
}
 8002100:	bf00      	nop
 8002102:	46bd      	mov	sp, r7
 8002104:	bc80      	pop	{r7}
 8002106:	4770      	bx	lr
 8002108:	2000000c 	.word	0x2000000c
 800210c:	2000036c 	.word	0x2000036c

08002110 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  return uwTick;
 8002114:	4b02      	ldr	r3, [pc, #8]	; (8002120 <HAL_GetTick+0x10>)
 8002116:	681b      	ldr	r3, [r3, #0]
}
 8002118:	4618      	mov	r0, r3
 800211a:	46bd      	mov	sp, r7
 800211c:	bc80      	pop	{r7}
 800211e:	4770      	bx	lr
 8002120:	2000036c 	.word	0x2000036c

08002124 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f003 0307 	and.w	r3, r3, #7
 8002132:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002134:	4b0c      	ldr	r3, [pc, #48]	; (8002168 <__NVIC_SetPriorityGrouping+0x44>)
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800213a:	68ba      	ldr	r2, [r7, #8]
 800213c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002140:	4013      	ands	r3, r2
 8002142:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800214c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002150:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002154:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002156:	4a04      	ldr	r2, [pc, #16]	; (8002168 <__NVIC_SetPriorityGrouping+0x44>)
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	60d3      	str	r3, [r2, #12]
}
 800215c:	bf00      	nop
 800215e:	3714      	adds	r7, #20
 8002160:	46bd      	mov	sp, r7
 8002162:	bc80      	pop	{r7}
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	e000ed00 	.word	0xe000ed00

0800216c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002170:	4b04      	ldr	r3, [pc, #16]	; (8002184 <__NVIC_GetPriorityGrouping+0x18>)
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	0a1b      	lsrs	r3, r3, #8
 8002176:	f003 0307 	and.w	r3, r3, #7
}
 800217a:	4618      	mov	r0, r3
 800217c:	46bd      	mov	sp, r7
 800217e:	bc80      	pop	{r7}
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	e000ed00 	.word	0xe000ed00

08002188 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	4603      	mov	r3, r0
 8002190:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002196:	2b00      	cmp	r3, #0
 8002198:	db0b      	blt.n	80021b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800219a:	79fb      	ldrb	r3, [r7, #7]
 800219c:	f003 021f 	and.w	r2, r3, #31
 80021a0:	4906      	ldr	r1, [pc, #24]	; (80021bc <__NVIC_EnableIRQ+0x34>)
 80021a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a6:	095b      	lsrs	r3, r3, #5
 80021a8:	2001      	movs	r0, #1
 80021aa:	fa00 f202 	lsl.w	r2, r0, r2
 80021ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021b2:	bf00      	nop
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bc80      	pop	{r7}
 80021ba:	4770      	bx	lr
 80021bc:	e000e100 	.word	0xe000e100

080021c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	4603      	mov	r3, r0
 80021c8:	6039      	str	r1, [r7, #0]
 80021ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	db0a      	blt.n	80021ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	b2da      	uxtb	r2, r3
 80021d8:	490c      	ldr	r1, [pc, #48]	; (800220c <__NVIC_SetPriority+0x4c>)
 80021da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021de:	0112      	lsls	r2, r2, #4
 80021e0:	b2d2      	uxtb	r2, r2
 80021e2:	440b      	add	r3, r1
 80021e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021e8:	e00a      	b.n	8002200 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	b2da      	uxtb	r2, r3
 80021ee:	4908      	ldr	r1, [pc, #32]	; (8002210 <__NVIC_SetPriority+0x50>)
 80021f0:	79fb      	ldrb	r3, [r7, #7]
 80021f2:	f003 030f 	and.w	r3, r3, #15
 80021f6:	3b04      	subs	r3, #4
 80021f8:	0112      	lsls	r2, r2, #4
 80021fa:	b2d2      	uxtb	r2, r2
 80021fc:	440b      	add	r3, r1
 80021fe:	761a      	strb	r2, [r3, #24]
}
 8002200:	bf00      	nop
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	bc80      	pop	{r7}
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	e000e100 	.word	0xe000e100
 8002210:	e000ed00 	.word	0xe000ed00

08002214 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002214:	b480      	push	{r7}
 8002216:	b089      	sub	sp, #36	; 0x24
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f003 0307 	and.w	r3, r3, #7
 8002226:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	f1c3 0307 	rsb	r3, r3, #7
 800222e:	2b04      	cmp	r3, #4
 8002230:	bf28      	it	cs
 8002232:	2304      	movcs	r3, #4
 8002234:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	3304      	adds	r3, #4
 800223a:	2b06      	cmp	r3, #6
 800223c:	d902      	bls.n	8002244 <NVIC_EncodePriority+0x30>
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	3b03      	subs	r3, #3
 8002242:	e000      	b.n	8002246 <NVIC_EncodePriority+0x32>
 8002244:	2300      	movs	r3, #0
 8002246:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002248:	f04f 32ff 	mov.w	r2, #4294967295
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	43da      	mvns	r2, r3
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	401a      	ands	r2, r3
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800225c:	f04f 31ff 	mov.w	r1, #4294967295
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	fa01 f303 	lsl.w	r3, r1, r3
 8002266:	43d9      	mvns	r1, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800226c:	4313      	orrs	r3, r2
         );
}
 800226e:	4618      	mov	r0, r3
 8002270:	3724      	adds	r7, #36	; 0x24
 8002272:	46bd      	mov	sp, r7
 8002274:	bc80      	pop	{r7}
 8002276:	4770      	bx	lr

08002278 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	3b01      	subs	r3, #1
 8002284:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002288:	d301      	bcc.n	800228e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800228a:	2301      	movs	r3, #1
 800228c:	e00f      	b.n	80022ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800228e:	4a0a      	ldr	r2, [pc, #40]	; (80022b8 <SysTick_Config+0x40>)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	3b01      	subs	r3, #1
 8002294:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002296:	210f      	movs	r1, #15
 8002298:	f04f 30ff 	mov.w	r0, #4294967295
 800229c:	f7ff ff90 	bl	80021c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022a0:	4b05      	ldr	r3, [pc, #20]	; (80022b8 <SysTick_Config+0x40>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022a6:	4b04      	ldr	r3, [pc, #16]	; (80022b8 <SysTick_Config+0x40>)
 80022a8:	2207      	movs	r2, #7
 80022aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	e000e010 	.word	0xe000e010

080022bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f7ff ff2d 	bl	8002124 <__NVIC_SetPriorityGrouping>
}
 80022ca:	bf00      	nop
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b086      	sub	sp, #24
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	4603      	mov	r3, r0
 80022da:	60b9      	str	r1, [r7, #8]
 80022dc:	607a      	str	r2, [r7, #4]
 80022de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022e0:	2300      	movs	r3, #0
 80022e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022e4:	f7ff ff42 	bl	800216c <__NVIC_GetPriorityGrouping>
 80022e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	68b9      	ldr	r1, [r7, #8]
 80022ee:	6978      	ldr	r0, [r7, #20]
 80022f0:	f7ff ff90 	bl	8002214 <NVIC_EncodePriority>
 80022f4:	4602      	mov	r2, r0
 80022f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022fa:	4611      	mov	r1, r2
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7ff ff5f 	bl	80021c0 <__NVIC_SetPriority>
}
 8002302:	bf00      	nop
 8002304:	3718      	adds	r7, #24
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800230a:	b580      	push	{r7, lr}
 800230c:	b082      	sub	sp, #8
 800230e:	af00      	add	r7, sp, #0
 8002310:	4603      	mov	r3, r0
 8002312:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff ff35 	bl	8002188 <__NVIC_EnableIRQ>
}
 800231e:	bf00      	nop
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b082      	sub	sp, #8
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f7ff ffa2 	bl	8002278 <SysTick_Config>
 8002334:	4603      	mov	r3, r0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800233e:	b480      	push	{r7}
 8002340:	b085      	sub	sp, #20
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002346:	2300      	movs	r3, #0
 8002348:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b02      	cmp	r3, #2
 8002354:	d008      	beq.n	8002368 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2204      	movs	r2, #4
 800235a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e020      	b.n	80023aa <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f022 020e 	bic.w	r2, r2, #14
 8002376:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f022 0201 	bic.w	r2, r2, #1
 8002386:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002390:	2101      	movs	r1, #1
 8002392:	fa01 f202 	lsl.w	r2, r1, r2
 8002396:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2201      	movs	r2, #1
 800239c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80023a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3714      	adds	r7, #20
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bc80      	pop	{r7}
 80023b2:	4770      	bx	lr

080023b4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023bc:	2300      	movs	r3, #0
 80023be:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d005      	beq.n	80023d8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2204      	movs	r2, #4
 80023d0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	73fb      	strb	r3, [r7, #15]
 80023d6:	e051      	b.n	800247c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f022 020e 	bic.w	r2, r2, #14
 80023e6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f022 0201 	bic.w	r2, r2, #1
 80023f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a22      	ldr	r2, [pc, #136]	; (8002488 <HAL_DMA_Abort_IT+0xd4>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d029      	beq.n	8002456 <HAL_DMA_Abort_IT+0xa2>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a21      	ldr	r2, [pc, #132]	; (800248c <HAL_DMA_Abort_IT+0xd8>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d022      	beq.n	8002452 <HAL_DMA_Abort_IT+0x9e>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a1f      	ldr	r2, [pc, #124]	; (8002490 <HAL_DMA_Abort_IT+0xdc>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d01a      	beq.n	800244c <HAL_DMA_Abort_IT+0x98>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a1e      	ldr	r2, [pc, #120]	; (8002494 <HAL_DMA_Abort_IT+0xe0>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d012      	beq.n	8002446 <HAL_DMA_Abort_IT+0x92>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a1c      	ldr	r2, [pc, #112]	; (8002498 <HAL_DMA_Abort_IT+0xe4>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d00a      	beq.n	8002440 <HAL_DMA_Abort_IT+0x8c>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a1b      	ldr	r2, [pc, #108]	; (800249c <HAL_DMA_Abort_IT+0xe8>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d102      	bne.n	800243a <HAL_DMA_Abort_IT+0x86>
 8002434:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002438:	e00e      	b.n	8002458 <HAL_DMA_Abort_IT+0xa4>
 800243a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800243e:	e00b      	b.n	8002458 <HAL_DMA_Abort_IT+0xa4>
 8002440:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002444:	e008      	b.n	8002458 <HAL_DMA_Abort_IT+0xa4>
 8002446:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800244a:	e005      	b.n	8002458 <HAL_DMA_Abort_IT+0xa4>
 800244c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002450:	e002      	b.n	8002458 <HAL_DMA_Abort_IT+0xa4>
 8002452:	2310      	movs	r3, #16
 8002454:	e000      	b.n	8002458 <HAL_DMA_Abort_IT+0xa4>
 8002456:	2301      	movs	r3, #1
 8002458:	4a11      	ldr	r2, [pc, #68]	; (80024a0 <HAL_DMA_Abort_IT+0xec>)
 800245a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002470:	2b00      	cmp	r3, #0
 8002472:	d003      	beq.n	800247c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	4798      	blx	r3
    } 
  }
  return status;
 800247c:	7bfb      	ldrb	r3, [r7, #15]
}
 800247e:	4618      	mov	r0, r3
 8002480:	3710      	adds	r7, #16
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	40020008 	.word	0x40020008
 800248c:	4002001c 	.word	0x4002001c
 8002490:	40020030 	.word	0x40020030
 8002494:	40020044 	.word	0x40020044
 8002498:	40020058 	.word	0x40020058
 800249c:	4002006c 	.word	0x4002006c
 80024a0:	40020000 	.word	0x40020000

080024a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b08b      	sub	sp, #44	; 0x2c
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024ae:	2300      	movs	r3, #0
 80024b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80024b2:	2300      	movs	r3, #0
 80024b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024b6:	e169      	b.n	800278c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80024b8:	2201      	movs	r2, #1
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	69fa      	ldr	r2, [r7, #28]
 80024c8:	4013      	ands	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	f040 8158 	bne.w	8002786 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	4a9a      	ldr	r2, [pc, #616]	; (8002744 <HAL_GPIO_Init+0x2a0>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d05e      	beq.n	800259e <HAL_GPIO_Init+0xfa>
 80024e0:	4a98      	ldr	r2, [pc, #608]	; (8002744 <HAL_GPIO_Init+0x2a0>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d875      	bhi.n	80025d2 <HAL_GPIO_Init+0x12e>
 80024e6:	4a98      	ldr	r2, [pc, #608]	; (8002748 <HAL_GPIO_Init+0x2a4>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d058      	beq.n	800259e <HAL_GPIO_Init+0xfa>
 80024ec:	4a96      	ldr	r2, [pc, #600]	; (8002748 <HAL_GPIO_Init+0x2a4>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d86f      	bhi.n	80025d2 <HAL_GPIO_Init+0x12e>
 80024f2:	4a96      	ldr	r2, [pc, #600]	; (800274c <HAL_GPIO_Init+0x2a8>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d052      	beq.n	800259e <HAL_GPIO_Init+0xfa>
 80024f8:	4a94      	ldr	r2, [pc, #592]	; (800274c <HAL_GPIO_Init+0x2a8>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d869      	bhi.n	80025d2 <HAL_GPIO_Init+0x12e>
 80024fe:	4a94      	ldr	r2, [pc, #592]	; (8002750 <HAL_GPIO_Init+0x2ac>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d04c      	beq.n	800259e <HAL_GPIO_Init+0xfa>
 8002504:	4a92      	ldr	r2, [pc, #584]	; (8002750 <HAL_GPIO_Init+0x2ac>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d863      	bhi.n	80025d2 <HAL_GPIO_Init+0x12e>
 800250a:	4a92      	ldr	r2, [pc, #584]	; (8002754 <HAL_GPIO_Init+0x2b0>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d046      	beq.n	800259e <HAL_GPIO_Init+0xfa>
 8002510:	4a90      	ldr	r2, [pc, #576]	; (8002754 <HAL_GPIO_Init+0x2b0>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d85d      	bhi.n	80025d2 <HAL_GPIO_Init+0x12e>
 8002516:	2b12      	cmp	r3, #18
 8002518:	d82a      	bhi.n	8002570 <HAL_GPIO_Init+0xcc>
 800251a:	2b12      	cmp	r3, #18
 800251c:	d859      	bhi.n	80025d2 <HAL_GPIO_Init+0x12e>
 800251e:	a201      	add	r2, pc, #4	; (adr r2, 8002524 <HAL_GPIO_Init+0x80>)
 8002520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002524:	0800259f 	.word	0x0800259f
 8002528:	08002579 	.word	0x08002579
 800252c:	0800258b 	.word	0x0800258b
 8002530:	080025cd 	.word	0x080025cd
 8002534:	080025d3 	.word	0x080025d3
 8002538:	080025d3 	.word	0x080025d3
 800253c:	080025d3 	.word	0x080025d3
 8002540:	080025d3 	.word	0x080025d3
 8002544:	080025d3 	.word	0x080025d3
 8002548:	080025d3 	.word	0x080025d3
 800254c:	080025d3 	.word	0x080025d3
 8002550:	080025d3 	.word	0x080025d3
 8002554:	080025d3 	.word	0x080025d3
 8002558:	080025d3 	.word	0x080025d3
 800255c:	080025d3 	.word	0x080025d3
 8002560:	080025d3 	.word	0x080025d3
 8002564:	080025d3 	.word	0x080025d3
 8002568:	08002581 	.word	0x08002581
 800256c:	08002595 	.word	0x08002595
 8002570:	4a79      	ldr	r2, [pc, #484]	; (8002758 <HAL_GPIO_Init+0x2b4>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d013      	beq.n	800259e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002576:	e02c      	b.n	80025d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	623b      	str	r3, [r7, #32]
          break;
 800257e:	e029      	b.n	80025d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	3304      	adds	r3, #4
 8002586:	623b      	str	r3, [r7, #32]
          break;
 8002588:	e024      	b.n	80025d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	3308      	adds	r3, #8
 8002590:	623b      	str	r3, [r7, #32]
          break;
 8002592:	e01f      	b.n	80025d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	330c      	adds	r3, #12
 800259a:	623b      	str	r3, [r7, #32]
          break;
 800259c:	e01a      	b.n	80025d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d102      	bne.n	80025ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80025a6:	2304      	movs	r3, #4
 80025a8:	623b      	str	r3, [r7, #32]
          break;
 80025aa:	e013      	b.n	80025d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d105      	bne.n	80025c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025b4:	2308      	movs	r3, #8
 80025b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	69fa      	ldr	r2, [r7, #28]
 80025bc:	611a      	str	r2, [r3, #16]
          break;
 80025be:	e009      	b.n	80025d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025c0:	2308      	movs	r3, #8
 80025c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	69fa      	ldr	r2, [r7, #28]
 80025c8:	615a      	str	r2, [r3, #20]
          break;
 80025ca:	e003      	b.n	80025d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80025cc:	2300      	movs	r3, #0
 80025ce:	623b      	str	r3, [r7, #32]
          break;
 80025d0:	e000      	b.n	80025d4 <HAL_GPIO_Init+0x130>
          break;
 80025d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	2bff      	cmp	r3, #255	; 0xff
 80025d8:	d801      	bhi.n	80025de <HAL_GPIO_Init+0x13a>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	e001      	b.n	80025e2 <HAL_GPIO_Init+0x13e>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	3304      	adds	r3, #4
 80025e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	2bff      	cmp	r3, #255	; 0xff
 80025e8:	d802      	bhi.n	80025f0 <HAL_GPIO_Init+0x14c>
 80025ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	e002      	b.n	80025f6 <HAL_GPIO_Init+0x152>
 80025f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f2:	3b08      	subs	r3, #8
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	210f      	movs	r1, #15
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	fa01 f303 	lsl.w	r3, r1, r3
 8002604:	43db      	mvns	r3, r3
 8002606:	401a      	ands	r2, r3
 8002608:	6a39      	ldr	r1, [r7, #32]
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	fa01 f303 	lsl.w	r3, r1, r3
 8002610:	431a      	orrs	r2, r3
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800261e:	2b00      	cmp	r3, #0
 8002620:	f000 80b1 	beq.w	8002786 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002624:	4b4d      	ldr	r3, [pc, #308]	; (800275c <HAL_GPIO_Init+0x2b8>)
 8002626:	699b      	ldr	r3, [r3, #24]
 8002628:	4a4c      	ldr	r2, [pc, #304]	; (800275c <HAL_GPIO_Init+0x2b8>)
 800262a:	f043 0301 	orr.w	r3, r3, #1
 800262e:	6193      	str	r3, [r2, #24]
 8002630:	4b4a      	ldr	r3, [pc, #296]	; (800275c <HAL_GPIO_Init+0x2b8>)
 8002632:	699b      	ldr	r3, [r3, #24]
 8002634:	f003 0301 	and.w	r3, r3, #1
 8002638:	60bb      	str	r3, [r7, #8]
 800263a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800263c:	4a48      	ldr	r2, [pc, #288]	; (8002760 <HAL_GPIO_Init+0x2bc>)
 800263e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002640:	089b      	lsrs	r3, r3, #2
 8002642:	3302      	adds	r3, #2
 8002644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002648:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264c:	f003 0303 	and.w	r3, r3, #3
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	220f      	movs	r2, #15
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	43db      	mvns	r3, r3
 800265a:	68fa      	ldr	r2, [r7, #12]
 800265c:	4013      	ands	r3, r2
 800265e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	4a40      	ldr	r2, [pc, #256]	; (8002764 <HAL_GPIO_Init+0x2c0>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d013      	beq.n	8002690 <HAL_GPIO_Init+0x1ec>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4a3f      	ldr	r2, [pc, #252]	; (8002768 <HAL_GPIO_Init+0x2c4>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d00d      	beq.n	800268c <HAL_GPIO_Init+0x1e8>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a3e      	ldr	r2, [pc, #248]	; (800276c <HAL_GPIO_Init+0x2c8>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d007      	beq.n	8002688 <HAL_GPIO_Init+0x1e4>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4a3d      	ldr	r2, [pc, #244]	; (8002770 <HAL_GPIO_Init+0x2cc>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d101      	bne.n	8002684 <HAL_GPIO_Init+0x1e0>
 8002680:	2303      	movs	r3, #3
 8002682:	e006      	b.n	8002692 <HAL_GPIO_Init+0x1ee>
 8002684:	2304      	movs	r3, #4
 8002686:	e004      	b.n	8002692 <HAL_GPIO_Init+0x1ee>
 8002688:	2302      	movs	r3, #2
 800268a:	e002      	b.n	8002692 <HAL_GPIO_Init+0x1ee>
 800268c:	2301      	movs	r3, #1
 800268e:	e000      	b.n	8002692 <HAL_GPIO_Init+0x1ee>
 8002690:	2300      	movs	r3, #0
 8002692:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002694:	f002 0203 	and.w	r2, r2, #3
 8002698:	0092      	lsls	r2, r2, #2
 800269a:	4093      	lsls	r3, r2
 800269c:	68fa      	ldr	r2, [r7, #12]
 800269e:	4313      	orrs	r3, r2
 80026a0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80026a2:	492f      	ldr	r1, [pc, #188]	; (8002760 <HAL_GPIO_Init+0x2bc>)
 80026a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a6:	089b      	lsrs	r3, r3, #2
 80026a8:	3302      	adds	r3, #2
 80026aa:	68fa      	ldr	r2, [r7, #12]
 80026ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d006      	beq.n	80026ca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80026bc:	4b2d      	ldr	r3, [pc, #180]	; (8002774 <HAL_GPIO_Init+0x2d0>)
 80026be:	689a      	ldr	r2, [r3, #8]
 80026c0:	492c      	ldr	r1, [pc, #176]	; (8002774 <HAL_GPIO_Init+0x2d0>)
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	608b      	str	r3, [r1, #8]
 80026c8:	e006      	b.n	80026d8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80026ca:	4b2a      	ldr	r3, [pc, #168]	; (8002774 <HAL_GPIO_Init+0x2d0>)
 80026cc:	689a      	ldr	r2, [r3, #8]
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	43db      	mvns	r3, r3
 80026d2:	4928      	ldr	r1, [pc, #160]	; (8002774 <HAL_GPIO_Init+0x2d0>)
 80026d4:	4013      	ands	r3, r2
 80026d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d006      	beq.n	80026f2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80026e4:	4b23      	ldr	r3, [pc, #140]	; (8002774 <HAL_GPIO_Init+0x2d0>)
 80026e6:	68da      	ldr	r2, [r3, #12]
 80026e8:	4922      	ldr	r1, [pc, #136]	; (8002774 <HAL_GPIO_Init+0x2d0>)
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	60cb      	str	r3, [r1, #12]
 80026f0:	e006      	b.n	8002700 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80026f2:	4b20      	ldr	r3, [pc, #128]	; (8002774 <HAL_GPIO_Init+0x2d0>)
 80026f4:	68da      	ldr	r2, [r3, #12]
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	43db      	mvns	r3, r3
 80026fa:	491e      	ldr	r1, [pc, #120]	; (8002774 <HAL_GPIO_Init+0x2d0>)
 80026fc:	4013      	ands	r3, r2
 80026fe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d006      	beq.n	800271a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800270c:	4b19      	ldr	r3, [pc, #100]	; (8002774 <HAL_GPIO_Init+0x2d0>)
 800270e:	685a      	ldr	r2, [r3, #4]
 8002710:	4918      	ldr	r1, [pc, #96]	; (8002774 <HAL_GPIO_Init+0x2d0>)
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	4313      	orrs	r3, r2
 8002716:	604b      	str	r3, [r1, #4]
 8002718:	e006      	b.n	8002728 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800271a:	4b16      	ldr	r3, [pc, #88]	; (8002774 <HAL_GPIO_Init+0x2d0>)
 800271c:	685a      	ldr	r2, [r3, #4]
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	43db      	mvns	r3, r3
 8002722:	4914      	ldr	r1, [pc, #80]	; (8002774 <HAL_GPIO_Init+0x2d0>)
 8002724:	4013      	ands	r3, r2
 8002726:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d021      	beq.n	8002778 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002734:	4b0f      	ldr	r3, [pc, #60]	; (8002774 <HAL_GPIO_Init+0x2d0>)
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	490e      	ldr	r1, [pc, #56]	; (8002774 <HAL_GPIO_Init+0x2d0>)
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	4313      	orrs	r3, r2
 800273e:	600b      	str	r3, [r1, #0]
 8002740:	e021      	b.n	8002786 <HAL_GPIO_Init+0x2e2>
 8002742:	bf00      	nop
 8002744:	10320000 	.word	0x10320000
 8002748:	10310000 	.word	0x10310000
 800274c:	10220000 	.word	0x10220000
 8002750:	10210000 	.word	0x10210000
 8002754:	10120000 	.word	0x10120000
 8002758:	10110000 	.word	0x10110000
 800275c:	40021000 	.word	0x40021000
 8002760:	40010000 	.word	0x40010000
 8002764:	40010800 	.word	0x40010800
 8002768:	40010c00 	.word	0x40010c00
 800276c:	40011000 	.word	0x40011000
 8002770:	40011400 	.word	0x40011400
 8002774:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002778:	4b0b      	ldr	r3, [pc, #44]	; (80027a8 <HAL_GPIO_Init+0x304>)
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	43db      	mvns	r3, r3
 8002780:	4909      	ldr	r1, [pc, #36]	; (80027a8 <HAL_GPIO_Init+0x304>)
 8002782:	4013      	ands	r3, r2
 8002784:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002788:	3301      	adds	r3, #1
 800278a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002792:	fa22 f303 	lsr.w	r3, r2, r3
 8002796:	2b00      	cmp	r3, #0
 8002798:	f47f ae8e 	bne.w	80024b8 <HAL_GPIO_Init+0x14>
  }
}
 800279c:	bf00      	nop
 800279e:	bf00      	nop
 80027a0:	372c      	adds	r7, #44	; 0x2c
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bc80      	pop	{r7}
 80027a6:	4770      	bx	lr
 80027a8:	40010400 	.word	0x40010400

080027ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	460b      	mov	r3, r1
 80027b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689a      	ldr	r2, [r3, #8]
 80027bc:	887b      	ldrh	r3, [r7, #2]
 80027be:	4013      	ands	r3, r2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d002      	beq.n	80027ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027c4:	2301      	movs	r3, #1
 80027c6:	73fb      	strb	r3, [r7, #15]
 80027c8:	e001      	b.n	80027ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027ca:	2300      	movs	r3, #0
 80027cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3714      	adds	r7, #20
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bc80      	pop	{r7}
 80027d8:	4770      	bx	lr

080027da <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027da:	b480      	push	{r7}
 80027dc:	b083      	sub	sp, #12
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
 80027e2:	460b      	mov	r3, r1
 80027e4:	807b      	strh	r3, [r7, #2]
 80027e6:	4613      	mov	r3, r2
 80027e8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027ea:	787b      	ldrb	r3, [r7, #1]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d003      	beq.n	80027f8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027f0:	887a      	ldrh	r2, [r7, #2]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80027f6:	e003      	b.n	8002800 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80027f8:	887b      	ldrh	r3, [r7, #2]
 80027fa:	041a      	lsls	r2, r3, #16
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	611a      	str	r2, [r3, #16]
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	bc80      	pop	{r7}
 8002808:	4770      	bx	lr

0800280a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800280a:	b480      	push	{r7}
 800280c:	b085      	sub	sp, #20
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
 8002812:	460b      	mov	r3, r1
 8002814:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800281c:	887a      	ldrh	r2, [r7, #2]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	4013      	ands	r3, r2
 8002822:	041a      	lsls	r2, r3, #16
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	43d9      	mvns	r1, r3
 8002828:	887b      	ldrh	r3, [r7, #2]
 800282a:	400b      	ands	r3, r1
 800282c:	431a      	orrs	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	611a      	str	r2, [r3, #16]
}
 8002832:	bf00      	nop
 8002834:	3714      	adds	r7, #20
 8002836:	46bd      	mov	sp, r7
 8002838:	bc80      	pop	{r7}
 800283a:	4770      	bx	lr

0800283c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	4603      	mov	r3, r0
 8002844:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002846:	4b08      	ldr	r3, [pc, #32]	; (8002868 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002848:	695a      	ldr	r2, [r3, #20]
 800284a:	88fb      	ldrh	r3, [r7, #6]
 800284c:	4013      	ands	r3, r2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d006      	beq.n	8002860 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002852:	4a05      	ldr	r2, [pc, #20]	; (8002868 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002854:	88fb      	ldrh	r3, [r7, #6]
 8002856:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002858:	88fb      	ldrh	r3, [r7, #6]
 800285a:	4618      	mov	r0, r3
 800285c:	f7ff f97c 	bl	8001b58 <HAL_GPIO_EXTI_Callback>
  }
}
 8002860:	bf00      	nop
 8002862:	3708      	adds	r7, #8
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	40010400 	.word	0x40010400

0800286c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b086      	sub	sp, #24
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d101      	bne.n	800287e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e272      	b.n	8002d64 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	2b00      	cmp	r3, #0
 8002888:	f000 8087 	beq.w	800299a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800288c:	4b92      	ldr	r3, [pc, #584]	; (8002ad8 <HAL_RCC_OscConfig+0x26c>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f003 030c 	and.w	r3, r3, #12
 8002894:	2b04      	cmp	r3, #4
 8002896:	d00c      	beq.n	80028b2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002898:	4b8f      	ldr	r3, [pc, #572]	; (8002ad8 <HAL_RCC_OscConfig+0x26c>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f003 030c 	and.w	r3, r3, #12
 80028a0:	2b08      	cmp	r3, #8
 80028a2:	d112      	bne.n	80028ca <HAL_RCC_OscConfig+0x5e>
 80028a4:	4b8c      	ldr	r3, [pc, #560]	; (8002ad8 <HAL_RCC_OscConfig+0x26c>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028b0:	d10b      	bne.n	80028ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028b2:	4b89      	ldr	r3, [pc, #548]	; (8002ad8 <HAL_RCC_OscConfig+0x26c>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d06c      	beq.n	8002998 <HAL_RCC_OscConfig+0x12c>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d168      	bne.n	8002998 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e24c      	b.n	8002d64 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028d2:	d106      	bne.n	80028e2 <HAL_RCC_OscConfig+0x76>
 80028d4:	4b80      	ldr	r3, [pc, #512]	; (8002ad8 <HAL_RCC_OscConfig+0x26c>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a7f      	ldr	r2, [pc, #508]	; (8002ad8 <HAL_RCC_OscConfig+0x26c>)
 80028da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028de:	6013      	str	r3, [r2, #0]
 80028e0:	e02e      	b.n	8002940 <HAL_RCC_OscConfig+0xd4>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d10c      	bne.n	8002904 <HAL_RCC_OscConfig+0x98>
 80028ea:	4b7b      	ldr	r3, [pc, #492]	; (8002ad8 <HAL_RCC_OscConfig+0x26c>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a7a      	ldr	r2, [pc, #488]	; (8002ad8 <HAL_RCC_OscConfig+0x26c>)
 80028f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028f4:	6013      	str	r3, [r2, #0]
 80028f6:	4b78      	ldr	r3, [pc, #480]	; (8002ad8 <HAL_RCC_OscConfig+0x26c>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a77      	ldr	r2, [pc, #476]	; (8002ad8 <HAL_RCC_OscConfig+0x26c>)
 80028fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002900:	6013      	str	r3, [r2, #0]
 8002902:	e01d      	b.n	8002940 <HAL_RCC_OscConfig+0xd4>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800290c:	d10c      	bne.n	8002928 <HAL_RCC_OscConfig+0xbc>
 800290e:	4b72      	ldr	r3, [pc, #456]	; (8002ad8 <HAL_RCC_OscConfig+0x26c>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a71      	ldr	r2, [pc, #452]	; (8002ad8 <HAL_RCC_OscConfig+0x26c>)
 8002914:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002918:	6013      	str	r3, [r2, #0]
 800291a:	4b6f      	ldr	r3, [pc, #444]	; (8002ad8 <HAL_RCC_OscConfig+0x26c>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a6e      	ldr	r2, [pc, #440]	; (8002ad8 <HAL_RCC_OscConfig+0x26c>)
 8002920:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002924:	6013      	str	r3, [r2, #0]
 8002926:	e00b      	b.n	8002940 <HAL_RCC_OscConfig+0xd4>
 8002928:	4b6b      	ldr	r3, [pc, #428]	; (8002ad8 <HAL_RCC_OscConfig+0x26c>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a6a      	ldr	r2, [pc, #424]	; (8002ad8 <HAL_RCC_OscConfig+0x26c>)
 800292e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002932:	6013      	str	r3, [r2, #0]
 8002934:	4b68      	ldr	r3, [pc, #416]	; (8002ad8 <HAL_RCC_OscConfig+0x26c>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a67      	ldr	r2, [pc, #412]	; (8002ad8 <HAL_RCC_OscConfig+0x26c>)
 800293a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800293e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d013      	beq.n	8002970 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002948:	f7ff fbe2 	bl	8002110 <HAL_GetTick>
 800294c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800294e:	e008      	b.n	8002962 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002950:	f7ff fbde 	bl	8002110 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b64      	cmp	r3, #100	; 0x64
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e200      	b.n	8002d64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002962:	4b5d      	ldr	r3, [pc, #372]	; (8002ad8 <HAL_RCC_OscConfig+0x26c>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d0f0      	beq.n	8002950 <HAL_RCC_OscConfig+0xe4>
 800296e:	e014      	b.n	800299a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002970:	f7ff fbce 	bl	8002110 <HAL_GetTick>
 8002974:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002976:	e008      	b.n	800298a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002978:	f7ff fbca 	bl	8002110 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b64      	cmp	r3, #100	; 0x64
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e1ec      	b.n	8002d64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800298a:	4b53      	ldr	r3, [pc, #332]	; (8002ad8 <HAL_RCC_OscConfig+0x26c>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d1f0      	bne.n	8002978 <HAL_RCC_OscConfig+0x10c>
 8002996:	e000      	b.n	800299a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002998:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d063      	beq.n	8002a6e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029a6:	4b4c      	ldr	r3, [pc, #304]	; (8002ad8 <HAL_RCC_OscConfig+0x26c>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f003 030c 	and.w	r3, r3, #12
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d00b      	beq.n	80029ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80029b2:	4b49      	ldr	r3, [pc, #292]	; (8002ad8 <HAL_RCC_OscConfig+0x26c>)
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f003 030c 	and.w	r3, r3, #12
 80029ba:	2b08      	cmp	r3, #8
 80029bc:	d11c      	bne.n	80029f8 <HAL_RCC_OscConfig+0x18c>
 80029be:	4b46      	ldr	r3, [pc, #280]	; (8002ad8 <HAL_RCC_OscConfig+0x26c>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d116      	bne.n	80029f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ca:	4b43      	ldr	r3, [pc, #268]	; (8002ad8 <HAL_RCC_OscConfig+0x26c>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d005      	beq.n	80029e2 <HAL_RCC_OscConfig+0x176>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d001      	beq.n	80029e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e1c0      	b.n	8002d64 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029e2:	4b3d      	ldr	r3, [pc, #244]	; (8002ad8 <HAL_RCC_OscConfig+0x26c>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	695b      	ldr	r3, [r3, #20]
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	4939      	ldr	r1, [pc, #228]	; (8002ad8 <HAL_RCC_OscConfig+0x26c>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029f6:	e03a      	b.n	8002a6e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d020      	beq.n	8002a42 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a00:	4b36      	ldr	r3, [pc, #216]	; (8002adc <HAL_RCC_OscConfig+0x270>)
 8002a02:	2201      	movs	r2, #1
 8002a04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a06:	f7ff fb83 	bl	8002110 <HAL_GetTick>
 8002a0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a0c:	e008      	b.n	8002a20 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a0e:	f7ff fb7f 	bl	8002110 <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d901      	bls.n	8002a20 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e1a1      	b.n	8002d64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a20:	4b2d      	ldr	r3, [pc, #180]	; (8002ad8 <HAL_RCC_OscConfig+0x26c>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0302 	and.w	r3, r3, #2
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d0f0      	beq.n	8002a0e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a2c:	4b2a      	ldr	r3, [pc, #168]	; (8002ad8 <HAL_RCC_OscConfig+0x26c>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	695b      	ldr	r3, [r3, #20]
 8002a38:	00db      	lsls	r3, r3, #3
 8002a3a:	4927      	ldr	r1, [pc, #156]	; (8002ad8 <HAL_RCC_OscConfig+0x26c>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	600b      	str	r3, [r1, #0]
 8002a40:	e015      	b.n	8002a6e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a42:	4b26      	ldr	r3, [pc, #152]	; (8002adc <HAL_RCC_OscConfig+0x270>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a48:	f7ff fb62 	bl	8002110 <HAL_GetTick>
 8002a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a4e:	e008      	b.n	8002a62 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a50:	f7ff fb5e 	bl	8002110 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e180      	b.n	8002d64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a62:	4b1d      	ldr	r3, [pc, #116]	; (8002ad8 <HAL_RCC_OscConfig+0x26c>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d1f0      	bne.n	8002a50 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0308 	and.w	r3, r3, #8
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d03a      	beq.n	8002af0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d019      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a82:	4b17      	ldr	r3, [pc, #92]	; (8002ae0 <HAL_RCC_OscConfig+0x274>)
 8002a84:	2201      	movs	r2, #1
 8002a86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a88:	f7ff fb42 	bl	8002110 <HAL_GetTick>
 8002a8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a8e:	e008      	b.n	8002aa2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a90:	f7ff fb3e 	bl	8002110 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e160      	b.n	8002d64 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aa2:	4b0d      	ldr	r3, [pc, #52]	; (8002ad8 <HAL_RCC_OscConfig+0x26c>)
 8002aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d0f0      	beq.n	8002a90 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002aae:	2001      	movs	r0, #1
 8002ab0:	f000 face 	bl	8003050 <RCC_Delay>
 8002ab4:	e01c      	b.n	8002af0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ab6:	4b0a      	ldr	r3, [pc, #40]	; (8002ae0 <HAL_RCC_OscConfig+0x274>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002abc:	f7ff fb28 	bl	8002110 <HAL_GetTick>
 8002ac0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ac2:	e00f      	b.n	8002ae4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ac4:	f7ff fb24 	bl	8002110 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d908      	bls.n	8002ae4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e146      	b.n	8002d64 <HAL_RCC_OscConfig+0x4f8>
 8002ad6:	bf00      	nop
 8002ad8:	40021000 	.word	0x40021000
 8002adc:	42420000 	.word	0x42420000
 8002ae0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ae4:	4b92      	ldr	r3, [pc, #584]	; (8002d30 <HAL_RCC_OscConfig+0x4c4>)
 8002ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae8:	f003 0302 	and.w	r3, r3, #2
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d1e9      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0304 	and.w	r3, r3, #4
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f000 80a6 	beq.w	8002c4a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002afe:	2300      	movs	r3, #0
 8002b00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b02:	4b8b      	ldr	r3, [pc, #556]	; (8002d30 <HAL_RCC_OscConfig+0x4c4>)
 8002b04:	69db      	ldr	r3, [r3, #28]
 8002b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d10d      	bne.n	8002b2a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b0e:	4b88      	ldr	r3, [pc, #544]	; (8002d30 <HAL_RCC_OscConfig+0x4c4>)
 8002b10:	69db      	ldr	r3, [r3, #28]
 8002b12:	4a87      	ldr	r2, [pc, #540]	; (8002d30 <HAL_RCC_OscConfig+0x4c4>)
 8002b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b18:	61d3      	str	r3, [r2, #28]
 8002b1a:	4b85      	ldr	r3, [pc, #532]	; (8002d30 <HAL_RCC_OscConfig+0x4c4>)
 8002b1c:	69db      	ldr	r3, [r3, #28]
 8002b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b22:	60bb      	str	r3, [r7, #8]
 8002b24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b26:	2301      	movs	r3, #1
 8002b28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b2a:	4b82      	ldr	r3, [pc, #520]	; (8002d34 <HAL_RCC_OscConfig+0x4c8>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d118      	bne.n	8002b68 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b36:	4b7f      	ldr	r3, [pc, #508]	; (8002d34 <HAL_RCC_OscConfig+0x4c8>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a7e      	ldr	r2, [pc, #504]	; (8002d34 <HAL_RCC_OscConfig+0x4c8>)
 8002b3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b42:	f7ff fae5 	bl	8002110 <HAL_GetTick>
 8002b46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b48:	e008      	b.n	8002b5c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b4a:	f7ff fae1 	bl	8002110 <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b64      	cmp	r3, #100	; 0x64
 8002b56:	d901      	bls.n	8002b5c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e103      	b.n	8002d64 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b5c:	4b75      	ldr	r3, [pc, #468]	; (8002d34 <HAL_RCC_OscConfig+0x4c8>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d0f0      	beq.n	8002b4a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d106      	bne.n	8002b7e <HAL_RCC_OscConfig+0x312>
 8002b70:	4b6f      	ldr	r3, [pc, #444]	; (8002d30 <HAL_RCC_OscConfig+0x4c4>)
 8002b72:	6a1b      	ldr	r3, [r3, #32]
 8002b74:	4a6e      	ldr	r2, [pc, #440]	; (8002d30 <HAL_RCC_OscConfig+0x4c4>)
 8002b76:	f043 0301 	orr.w	r3, r3, #1
 8002b7a:	6213      	str	r3, [r2, #32]
 8002b7c:	e02d      	b.n	8002bda <HAL_RCC_OscConfig+0x36e>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d10c      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x334>
 8002b86:	4b6a      	ldr	r3, [pc, #424]	; (8002d30 <HAL_RCC_OscConfig+0x4c4>)
 8002b88:	6a1b      	ldr	r3, [r3, #32]
 8002b8a:	4a69      	ldr	r2, [pc, #420]	; (8002d30 <HAL_RCC_OscConfig+0x4c4>)
 8002b8c:	f023 0301 	bic.w	r3, r3, #1
 8002b90:	6213      	str	r3, [r2, #32]
 8002b92:	4b67      	ldr	r3, [pc, #412]	; (8002d30 <HAL_RCC_OscConfig+0x4c4>)
 8002b94:	6a1b      	ldr	r3, [r3, #32]
 8002b96:	4a66      	ldr	r2, [pc, #408]	; (8002d30 <HAL_RCC_OscConfig+0x4c4>)
 8002b98:	f023 0304 	bic.w	r3, r3, #4
 8002b9c:	6213      	str	r3, [r2, #32]
 8002b9e:	e01c      	b.n	8002bda <HAL_RCC_OscConfig+0x36e>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	2b05      	cmp	r3, #5
 8002ba6:	d10c      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x356>
 8002ba8:	4b61      	ldr	r3, [pc, #388]	; (8002d30 <HAL_RCC_OscConfig+0x4c4>)
 8002baa:	6a1b      	ldr	r3, [r3, #32]
 8002bac:	4a60      	ldr	r2, [pc, #384]	; (8002d30 <HAL_RCC_OscConfig+0x4c4>)
 8002bae:	f043 0304 	orr.w	r3, r3, #4
 8002bb2:	6213      	str	r3, [r2, #32]
 8002bb4:	4b5e      	ldr	r3, [pc, #376]	; (8002d30 <HAL_RCC_OscConfig+0x4c4>)
 8002bb6:	6a1b      	ldr	r3, [r3, #32]
 8002bb8:	4a5d      	ldr	r2, [pc, #372]	; (8002d30 <HAL_RCC_OscConfig+0x4c4>)
 8002bba:	f043 0301 	orr.w	r3, r3, #1
 8002bbe:	6213      	str	r3, [r2, #32]
 8002bc0:	e00b      	b.n	8002bda <HAL_RCC_OscConfig+0x36e>
 8002bc2:	4b5b      	ldr	r3, [pc, #364]	; (8002d30 <HAL_RCC_OscConfig+0x4c4>)
 8002bc4:	6a1b      	ldr	r3, [r3, #32]
 8002bc6:	4a5a      	ldr	r2, [pc, #360]	; (8002d30 <HAL_RCC_OscConfig+0x4c4>)
 8002bc8:	f023 0301 	bic.w	r3, r3, #1
 8002bcc:	6213      	str	r3, [r2, #32]
 8002bce:	4b58      	ldr	r3, [pc, #352]	; (8002d30 <HAL_RCC_OscConfig+0x4c4>)
 8002bd0:	6a1b      	ldr	r3, [r3, #32]
 8002bd2:	4a57      	ldr	r2, [pc, #348]	; (8002d30 <HAL_RCC_OscConfig+0x4c4>)
 8002bd4:	f023 0304 	bic.w	r3, r3, #4
 8002bd8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d015      	beq.n	8002c0e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002be2:	f7ff fa95 	bl	8002110 <HAL_GetTick>
 8002be6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002be8:	e00a      	b.n	8002c00 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bea:	f7ff fa91 	bl	8002110 <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d901      	bls.n	8002c00 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e0b1      	b.n	8002d64 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c00:	4b4b      	ldr	r3, [pc, #300]	; (8002d30 <HAL_RCC_OscConfig+0x4c4>)
 8002c02:	6a1b      	ldr	r3, [r3, #32]
 8002c04:	f003 0302 	and.w	r3, r3, #2
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d0ee      	beq.n	8002bea <HAL_RCC_OscConfig+0x37e>
 8002c0c:	e014      	b.n	8002c38 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c0e:	f7ff fa7f 	bl	8002110 <HAL_GetTick>
 8002c12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c14:	e00a      	b.n	8002c2c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c16:	f7ff fa7b 	bl	8002110 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d901      	bls.n	8002c2c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e09b      	b.n	8002d64 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c2c:	4b40      	ldr	r3, [pc, #256]	; (8002d30 <HAL_RCC_OscConfig+0x4c4>)
 8002c2e:	6a1b      	ldr	r3, [r3, #32]
 8002c30:	f003 0302 	and.w	r3, r3, #2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d1ee      	bne.n	8002c16 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c38:	7dfb      	ldrb	r3, [r7, #23]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d105      	bne.n	8002c4a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c3e:	4b3c      	ldr	r3, [pc, #240]	; (8002d30 <HAL_RCC_OscConfig+0x4c4>)
 8002c40:	69db      	ldr	r3, [r3, #28]
 8002c42:	4a3b      	ldr	r2, [pc, #236]	; (8002d30 <HAL_RCC_OscConfig+0x4c4>)
 8002c44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c48:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	69db      	ldr	r3, [r3, #28]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	f000 8087 	beq.w	8002d62 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c54:	4b36      	ldr	r3, [pc, #216]	; (8002d30 <HAL_RCC_OscConfig+0x4c4>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f003 030c 	and.w	r3, r3, #12
 8002c5c:	2b08      	cmp	r3, #8
 8002c5e:	d061      	beq.n	8002d24 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	69db      	ldr	r3, [r3, #28]
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d146      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c68:	4b33      	ldr	r3, [pc, #204]	; (8002d38 <HAL_RCC_OscConfig+0x4cc>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c6e:	f7ff fa4f 	bl	8002110 <HAL_GetTick>
 8002c72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c74:	e008      	b.n	8002c88 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c76:	f7ff fa4b 	bl	8002110 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d901      	bls.n	8002c88 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e06d      	b.n	8002d64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c88:	4b29      	ldr	r3, [pc, #164]	; (8002d30 <HAL_RCC_OscConfig+0x4c4>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d1f0      	bne.n	8002c76 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a1b      	ldr	r3, [r3, #32]
 8002c98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c9c:	d108      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c9e:	4b24      	ldr	r3, [pc, #144]	; (8002d30 <HAL_RCC_OscConfig+0x4c4>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	4921      	ldr	r1, [pc, #132]	; (8002d30 <HAL_RCC_OscConfig+0x4c4>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cb0:	4b1f      	ldr	r3, [pc, #124]	; (8002d30 <HAL_RCC_OscConfig+0x4c4>)
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a19      	ldr	r1, [r3, #32]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc0:	430b      	orrs	r3, r1
 8002cc2:	491b      	ldr	r1, [pc, #108]	; (8002d30 <HAL_RCC_OscConfig+0x4c4>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cc8:	4b1b      	ldr	r3, [pc, #108]	; (8002d38 <HAL_RCC_OscConfig+0x4cc>)
 8002cca:	2201      	movs	r2, #1
 8002ccc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cce:	f7ff fa1f 	bl	8002110 <HAL_GetTick>
 8002cd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cd4:	e008      	b.n	8002ce8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cd6:	f7ff fa1b 	bl	8002110 <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d901      	bls.n	8002ce8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e03d      	b.n	8002d64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ce8:	4b11      	ldr	r3, [pc, #68]	; (8002d30 <HAL_RCC_OscConfig+0x4c4>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d0f0      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x46a>
 8002cf4:	e035      	b.n	8002d62 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cf6:	4b10      	ldr	r3, [pc, #64]	; (8002d38 <HAL_RCC_OscConfig+0x4cc>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cfc:	f7ff fa08 	bl	8002110 <HAL_GetTick>
 8002d00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d02:	e008      	b.n	8002d16 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d04:	f7ff fa04 	bl	8002110 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e026      	b.n	8002d64 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d16:	4b06      	ldr	r3, [pc, #24]	; (8002d30 <HAL_RCC_OscConfig+0x4c4>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1f0      	bne.n	8002d04 <HAL_RCC_OscConfig+0x498>
 8002d22:	e01e      	b.n	8002d62 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	69db      	ldr	r3, [r3, #28]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d107      	bne.n	8002d3c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e019      	b.n	8002d64 <HAL_RCC_OscConfig+0x4f8>
 8002d30:	40021000 	.word	0x40021000
 8002d34:	40007000 	.word	0x40007000
 8002d38:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d3c:	4b0b      	ldr	r3, [pc, #44]	; (8002d6c <HAL_RCC_OscConfig+0x500>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a1b      	ldr	r3, [r3, #32]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d106      	bne.n	8002d5e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d001      	beq.n	8002d62 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e000      	b.n	8002d64 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3718      	adds	r7, #24
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	40021000 	.word	0x40021000

08002d70 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d101      	bne.n	8002d84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e0d0      	b.n	8002f26 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d84:	4b6a      	ldr	r3, [pc, #424]	; (8002f30 <HAL_RCC_ClockConfig+0x1c0>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0307 	and.w	r3, r3, #7
 8002d8c:	683a      	ldr	r2, [r7, #0]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d910      	bls.n	8002db4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d92:	4b67      	ldr	r3, [pc, #412]	; (8002f30 <HAL_RCC_ClockConfig+0x1c0>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f023 0207 	bic.w	r2, r3, #7
 8002d9a:	4965      	ldr	r1, [pc, #404]	; (8002f30 <HAL_RCC_ClockConfig+0x1c0>)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002da2:	4b63      	ldr	r3, [pc, #396]	; (8002f30 <HAL_RCC_ClockConfig+0x1c0>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0307 	and.w	r3, r3, #7
 8002daa:	683a      	ldr	r2, [r7, #0]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d001      	beq.n	8002db4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e0b8      	b.n	8002f26 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d020      	beq.n	8002e02 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0304 	and.w	r3, r3, #4
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d005      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dcc:	4b59      	ldr	r3, [pc, #356]	; (8002f34 <HAL_RCC_ClockConfig+0x1c4>)
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	4a58      	ldr	r2, [pc, #352]	; (8002f34 <HAL_RCC_ClockConfig+0x1c4>)
 8002dd2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002dd6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0308 	and.w	r3, r3, #8
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d005      	beq.n	8002df0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002de4:	4b53      	ldr	r3, [pc, #332]	; (8002f34 <HAL_RCC_ClockConfig+0x1c4>)
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	4a52      	ldr	r2, [pc, #328]	; (8002f34 <HAL_RCC_ClockConfig+0x1c4>)
 8002dea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002dee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002df0:	4b50      	ldr	r3, [pc, #320]	; (8002f34 <HAL_RCC_ClockConfig+0x1c4>)
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	494d      	ldr	r1, [pc, #308]	; (8002f34 <HAL_RCC_ClockConfig+0x1c4>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d040      	beq.n	8002e90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d107      	bne.n	8002e26 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e16:	4b47      	ldr	r3, [pc, #284]	; (8002f34 <HAL_RCC_ClockConfig+0x1c4>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d115      	bne.n	8002e4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e07f      	b.n	8002f26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d107      	bne.n	8002e3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e2e:	4b41      	ldr	r3, [pc, #260]	; (8002f34 <HAL_RCC_ClockConfig+0x1c4>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d109      	bne.n	8002e4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e073      	b.n	8002f26 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e3e:	4b3d      	ldr	r3, [pc, #244]	; (8002f34 <HAL_RCC_ClockConfig+0x1c4>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e06b      	b.n	8002f26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e4e:	4b39      	ldr	r3, [pc, #228]	; (8002f34 <HAL_RCC_ClockConfig+0x1c4>)
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f023 0203 	bic.w	r2, r3, #3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	4936      	ldr	r1, [pc, #216]	; (8002f34 <HAL_RCC_ClockConfig+0x1c4>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e60:	f7ff f956 	bl	8002110 <HAL_GetTick>
 8002e64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e66:	e00a      	b.n	8002e7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e68:	f7ff f952 	bl	8002110 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e053      	b.n	8002f26 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e7e:	4b2d      	ldr	r3, [pc, #180]	; (8002f34 <HAL_RCC_ClockConfig+0x1c4>)
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f003 020c 	and.w	r2, r3, #12
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d1eb      	bne.n	8002e68 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e90:	4b27      	ldr	r3, [pc, #156]	; (8002f30 <HAL_RCC_ClockConfig+0x1c0>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0307 	and.w	r3, r3, #7
 8002e98:	683a      	ldr	r2, [r7, #0]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d210      	bcs.n	8002ec0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e9e:	4b24      	ldr	r3, [pc, #144]	; (8002f30 <HAL_RCC_ClockConfig+0x1c0>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f023 0207 	bic.w	r2, r3, #7
 8002ea6:	4922      	ldr	r1, [pc, #136]	; (8002f30 <HAL_RCC_ClockConfig+0x1c0>)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eae:	4b20      	ldr	r3, [pc, #128]	; (8002f30 <HAL_RCC_ClockConfig+0x1c0>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0307 	and.w	r3, r3, #7
 8002eb6:	683a      	ldr	r2, [r7, #0]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d001      	beq.n	8002ec0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e032      	b.n	8002f26 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0304 	and.w	r3, r3, #4
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d008      	beq.n	8002ede <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ecc:	4b19      	ldr	r3, [pc, #100]	; (8002f34 <HAL_RCC_ClockConfig+0x1c4>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	4916      	ldr	r1, [pc, #88]	; (8002f34 <HAL_RCC_ClockConfig+0x1c4>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0308 	and.w	r3, r3, #8
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d009      	beq.n	8002efe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002eea:	4b12      	ldr	r3, [pc, #72]	; (8002f34 <HAL_RCC_ClockConfig+0x1c4>)
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	00db      	lsls	r3, r3, #3
 8002ef8:	490e      	ldr	r1, [pc, #56]	; (8002f34 <HAL_RCC_ClockConfig+0x1c4>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002efe:	f000 f821 	bl	8002f44 <HAL_RCC_GetSysClockFreq>
 8002f02:	4602      	mov	r2, r0
 8002f04:	4b0b      	ldr	r3, [pc, #44]	; (8002f34 <HAL_RCC_ClockConfig+0x1c4>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	091b      	lsrs	r3, r3, #4
 8002f0a:	f003 030f 	and.w	r3, r3, #15
 8002f0e:	490a      	ldr	r1, [pc, #40]	; (8002f38 <HAL_RCC_ClockConfig+0x1c8>)
 8002f10:	5ccb      	ldrb	r3, [r1, r3]
 8002f12:	fa22 f303 	lsr.w	r3, r2, r3
 8002f16:	4a09      	ldr	r2, [pc, #36]	; (8002f3c <HAL_RCC_ClockConfig+0x1cc>)
 8002f18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f1a:	4b09      	ldr	r3, [pc, #36]	; (8002f40 <HAL_RCC_ClockConfig+0x1d0>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7ff f8b4 	bl	800208c <HAL_InitTick>

  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	40022000 	.word	0x40022000
 8002f34:	40021000 	.word	0x40021000
 8002f38:	080098ec 	.word	0x080098ec
 8002f3c:	20000004 	.word	0x20000004
 8002f40:	20000008 	.word	0x20000008

08002f44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b087      	sub	sp, #28
 8002f48:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	60fb      	str	r3, [r7, #12]
 8002f4e:	2300      	movs	r3, #0
 8002f50:	60bb      	str	r3, [r7, #8]
 8002f52:	2300      	movs	r3, #0
 8002f54:	617b      	str	r3, [r7, #20]
 8002f56:	2300      	movs	r3, #0
 8002f58:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f5e:	4b1e      	ldr	r3, [pc, #120]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f003 030c 	and.w	r3, r3, #12
 8002f6a:	2b04      	cmp	r3, #4
 8002f6c:	d002      	beq.n	8002f74 <HAL_RCC_GetSysClockFreq+0x30>
 8002f6e:	2b08      	cmp	r3, #8
 8002f70:	d003      	beq.n	8002f7a <HAL_RCC_GetSysClockFreq+0x36>
 8002f72:	e027      	b.n	8002fc4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f74:	4b19      	ldr	r3, [pc, #100]	; (8002fdc <HAL_RCC_GetSysClockFreq+0x98>)
 8002f76:	613b      	str	r3, [r7, #16]
      break;
 8002f78:	e027      	b.n	8002fca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	0c9b      	lsrs	r3, r3, #18
 8002f7e:	f003 030f 	and.w	r3, r3, #15
 8002f82:	4a17      	ldr	r2, [pc, #92]	; (8002fe0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f84:	5cd3      	ldrb	r3, [r2, r3]
 8002f86:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d010      	beq.n	8002fb4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f92:	4b11      	ldr	r3, [pc, #68]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	0c5b      	lsrs	r3, r3, #17
 8002f98:	f003 0301 	and.w	r3, r3, #1
 8002f9c:	4a11      	ldr	r2, [pc, #68]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002f9e:	5cd3      	ldrb	r3, [r2, r3]
 8002fa0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a0d      	ldr	r2, [pc, #52]	; (8002fdc <HAL_RCC_GetSysClockFreq+0x98>)
 8002fa6:	fb03 f202 	mul.w	r2, r3, r2
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fb0:	617b      	str	r3, [r7, #20]
 8002fb2:	e004      	b.n	8002fbe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a0c      	ldr	r2, [pc, #48]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002fb8:	fb02 f303 	mul.w	r3, r2, r3
 8002fbc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	613b      	str	r3, [r7, #16]
      break;
 8002fc2:	e002      	b.n	8002fca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002fc4:	4b05      	ldr	r3, [pc, #20]	; (8002fdc <HAL_RCC_GetSysClockFreq+0x98>)
 8002fc6:	613b      	str	r3, [r7, #16]
      break;
 8002fc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fca:	693b      	ldr	r3, [r7, #16]
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	371c      	adds	r7, #28
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bc80      	pop	{r7}
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	40021000 	.word	0x40021000
 8002fdc:	007a1200 	.word	0x007a1200
 8002fe0:	08009904 	.word	0x08009904
 8002fe4:	08009914 	.word	0x08009914
 8002fe8:	003d0900 	.word	0x003d0900

08002fec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ff0:	4b02      	ldr	r3, [pc, #8]	; (8002ffc <HAL_RCC_GetHCLKFreq+0x10>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bc80      	pop	{r7}
 8002ffa:	4770      	bx	lr
 8002ffc:	20000004 	.word	0x20000004

08003000 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003004:	f7ff fff2 	bl	8002fec <HAL_RCC_GetHCLKFreq>
 8003008:	4602      	mov	r2, r0
 800300a:	4b05      	ldr	r3, [pc, #20]	; (8003020 <HAL_RCC_GetPCLK1Freq+0x20>)
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	0a1b      	lsrs	r3, r3, #8
 8003010:	f003 0307 	and.w	r3, r3, #7
 8003014:	4903      	ldr	r1, [pc, #12]	; (8003024 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003016:	5ccb      	ldrb	r3, [r1, r3]
 8003018:	fa22 f303 	lsr.w	r3, r2, r3
}
 800301c:	4618      	mov	r0, r3
 800301e:	bd80      	pop	{r7, pc}
 8003020:	40021000 	.word	0x40021000
 8003024:	080098fc 	.word	0x080098fc

08003028 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800302c:	f7ff ffde 	bl	8002fec <HAL_RCC_GetHCLKFreq>
 8003030:	4602      	mov	r2, r0
 8003032:	4b05      	ldr	r3, [pc, #20]	; (8003048 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	0adb      	lsrs	r3, r3, #11
 8003038:	f003 0307 	and.w	r3, r3, #7
 800303c:	4903      	ldr	r1, [pc, #12]	; (800304c <HAL_RCC_GetPCLK2Freq+0x24>)
 800303e:	5ccb      	ldrb	r3, [r1, r3]
 8003040:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003044:	4618      	mov	r0, r3
 8003046:	bd80      	pop	{r7, pc}
 8003048:	40021000 	.word	0x40021000
 800304c:	080098fc 	.word	0x080098fc

08003050 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003050:	b480      	push	{r7}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003058:	4b0a      	ldr	r3, [pc, #40]	; (8003084 <RCC_Delay+0x34>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a0a      	ldr	r2, [pc, #40]	; (8003088 <RCC_Delay+0x38>)
 800305e:	fba2 2303 	umull	r2, r3, r2, r3
 8003062:	0a5b      	lsrs	r3, r3, #9
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	fb02 f303 	mul.w	r3, r2, r3
 800306a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800306c:	bf00      	nop
  }
  while (Delay --);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	1e5a      	subs	r2, r3, #1
 8003072:	60fa      	str	r2, [r7, #12]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d1f9      	bne.n	800306c <RCC_Delay+0x1c>
}
 8003078:	bf00      	nop
 800307a:	bf00      	nop
 800307c:	3714      	adds	r7, #20
 800307e:	46bd      	mov	sp, r7
 8003080:	bc80      	pop	{r7}
 8003082:	4770      	bx	lr
 8003084:	20000004 	.word	0x20000004
 8003088:	10624dd3 	.word	0x10624dd3

0800308c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d101      	bne.n	800309e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e041      	b.n	8003122 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d106      	bne.n	80030b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f7fe fdc2 	bl	8001c3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2202      	movs	r2, #2
 80030bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	3304      	adds	r3, #4
 80030c8:	4619      	mov	r1, r3
 80030ca:	4610      	mov	r0, r2
 80030cc:	f000 fb22 	bl	8003714 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3708      	adds	r7, #8
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
	...

0800312c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800312c:	b480      	push	{r7}
 800312e:	b085      	sub	sp, #20
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800313a:	b2db      	uxtb	r3, r3
 800313c:	2b01      	cmp	r3, #1
 800313e:	d001      	beq.n	8003144 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e032      	b.n	80031aa <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2202      	movs	r2, #2
 8003148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a18      	ldr	r2, [pc, #96]	; (80031b4 <HAL_TIM_Base_Start+0x88>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d00e      	beq.n	8003174 <HAL_TIM_Base_Start+0x48>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800315e:	d009      	beq.n	8003174 <HAL_TIM_Base_Start+0x48>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a14      	ldr	r2, [pc, #80]	; (80031b8 <HAL_TIM_Base_Start+0x8c>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d004      	beq.n	8003174 <HAL_TIM_Base_Start+0x48>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a13      	ldr	r2, [pc, #76]	; (80031bc <HAL_TIM_Base_Start+0x90>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d111      	bne.n	8003198 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f003 0307 	and.w	r3, r3, #7
 800317e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2b06      	cmp	r3, #6
 8003184:	d010      	beq.n	80031a8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f042 0201 	orr.w	r2, r2, #1
 8003194:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003196:	e007      	b.n	80031a8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f042 0201 	orr.w	r2, r2, #1
 80031a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3714      	adds	r7, #20
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bc80      	pop	{r7}
 80031b2:	4770      	bx	lr
 80031b4:	40012c00 	.word	0x40012c00
 80031b8:	40000400 	.word	0x40000400
 80031bc:	40000800 	.word	0x40000800

080031c0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	6a1a      	ldr	r2, [r3, #32]
 80031ce:	f241 1311 	movw	r3, #4369	; 0x1111
 80031d2:	4013      	ands	r3, r2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d10f      	bne.n	80031f8 <HAL_TIM_Base_Stop+0x38>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	6a1a      	ldr	r2, [r3, #32]
 80031de:	f240 4344 	movw	r3, #1092	; 0x444
 80031e2:	4013      	ands	r3, r2
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d107      	bne.n	80031f8 <HAL_TIM_Base_Stop+0x38>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f022 0201 	bic.w	r2, r2, #1
 80031f6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	bc80      	pop	{r7}
 800320a:	4770      	bx	lr

0800320c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d101      	bne.n	800321e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e041      	b.n	80032a2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2b00      	cmp	r3, #0
 8003228:	d106      	bne.n	8003238 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 f839 	bl	80032aa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2202      	movs	r2, #2
 800323c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	3304      	adds	r3, #4
 8003248:	4619      	mov	r1, r3
 800324a:	4610      	mov	r0, r2
 800324c:	f000 fa62 	bl	8003714 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80032aa:	b480      	push	{r7}
 80032ac:	b083      	sub	sp, #12
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80032b2:	bf00      	nop
 80032b4:	370c      	adds	r7, #12
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bc80      	pop	{r7}
 80032ba:	4770      	bx	lr

080032bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d109      	bne.n	80032e0 <HAL_TIM_PWM_Start+0x24>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	bf14      	ite	ne
 80032d8:	2301      	movne	r3, #1
 80032da:	2300      	moveq	r3, #0
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	e022      	b.n	8003326 <HAL_TIM_PWM_Start+0x6a>
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	2b04      	cmp	r3, #4
 80032e4:	d109      	bne.n	80032fa <HAL_TIM_PWM_Start+0x3e>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	bf14      	ite	ne
 80032f2:	2301      	movne	r3, #1
 80032f4:	2300      	moveq	r3, #0
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	e015      	b.n	8003326 <HAL_TIM_PWM_Start+0x6a>
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	2b08      	cmp	r3, #8
 80032fe:	d109      	bne.n	8003314 <HAL_TIM_PWM_Start+0x58>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003306:	b2db      	uxtb	r3, r3
 8003308:	2b01      	cmp	r3, #1
 800330a:	bf14      	ite	ne
 800330c:	2301      	movne	r3, #1
 800330e:	2300      	moveq	r3, #0
 8003310:	b2db      	uxtb	r3, r3
 8003312:	e008      	b.n	8003326 <HAL_TIM_PWM_Start+0x6a>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800331a:	b2db      	uxtb	r3, r3
 800331c:	2b01      	cmp	r3, #1
 800331e:	bf14      	ite	ne
 8003320:	2301      	movne	r3, #1
 8003322:	2300      	moveq	r3, #0
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e05e      	b.n	80033ec <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d104      	bne.n	800333e <HAL_TIM_PWM_Start+0x82>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2202      	movs	r2, #2
 8003338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800333c:	e013      	b.n	8003366 <HAL_TIM_PWM_Start+0xaa>
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	2b04      	cmp	r3, #4
 8003342:	d104      	bne.n	800334e <HAL_TIM_PWM_Start+0x92>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2202      	movs	r2, #2
 8003348:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800334c:	e00b      	b.n	8003366 <HAL_TIM_PWM_Start+0xaa>
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	2b08      	cmp	r3, #8
 8003352:	d104      	bne.n	800335e <HAL_TIM_PWM_Start+0xa2>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2202      	movs	r2, #2
 8003358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800335c:	e003      	b.n	8003366 <HAL_TIM_PWM_Start+0xaa>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2202      	movs	r2, #2
 8003362:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2201      	movs	r2, #1
 800336c:	6839      	ldr	r1, [r7, #0]
 800336e:	4618      	mov	r0, r3
 8003370:	f000 fc5c 	bl	8003c2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a1e      	ldr	r2, [pc, #120]	; (80033f4 <HAL_TIM_PWM_Start+0x138>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d107      	bne.n	800338e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800338c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a18      	ldr	r2, [pc, #96]	; (80033f4 <HAL_TIM_PWM_Start+0x138>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d00e      	beq.n	80033b6 <HAL_TIM_PWM_Start+0xfa>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033a0:	d009      	beq.n	80033b6 <HAL_TIM_PWM_Start+0xfa>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a14      	ldr	r2, [pc, #80]	; (80033f8 <HAL_TIM_PWM_Start+0x13c>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d004      	beq.n	80033b6 <HAL_TIM_PWM_Start+0xfa>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a12      	ldr	r2, [pc, #72]	; (80033fc <HAL_TIM_PWM_Start+0x140>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d111      	bne.n	80033da <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f003 0307 	and.w	r3, r3, #7
 80033c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2b06      	cmp	r3, #6
 80033c6:	d010      	beq.n	80033ea <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f042 0201 	orr.w	r2, r2, #1
 80033d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033d8:	e007      	b.n	80033ea <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f042 0201 	orr.w	r2, r2, #1
 80033e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033ea:	2300      	movs	r3, #0
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3710      	adds	r7, #16
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	40012c00 	.word	0x40012c00
 80033f8:	40000400 	.word	0x40000400
 80033fc:	40000800 	.word	0x40000800

08003400 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b086      	sub	sp, #24
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800340c:	2300      	movs	r3, #0
 800340e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003416:	2b01      	cmp	r3, #1
 8003418:	d101      	bne.n	800341e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800341a:	2302      	movs	r3, #2
 800341c:	e0ae      	b.n	800357c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2201      	movs	r2, #1
 8003422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2b0c      	cmp	r3, #12
 800342a:	f200 809f 	bhi.w	800356c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800342e:	a201      	add	r2, pc, #4	; (adr r2, 8003434 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003434:	08003469 	.word	0x08003469
 8003438:	0800356d 	.word	0x0800356d
 800343c:	0800356d 	.word	0x0800356d
 8003440:	0800356d 	.word	0x0800356d
 8003444:	080034a9 	.word	0x080034a9
 8003448:	0800356d 	.word	0x0800356d
 800344c:	0800356d 	.word	0x0800356d
 8003450:	0800356d 	.word	0x0800356d
 8003454:	080034eb 	.word	0x080034eb
 8003458:	0800356d 	.word	0x0800356d
 800345c:	0800356d 	.word	0x0800356d
 8003460:	0800356d 	.word	0x0800356d
 8003464:	0800352b 	.word	0x0800352b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68b9      	ldr	r1, [r7, #8]
 800346e:	4618      	mov	r0, r3
 8003470:	f000 f9be 	bl	80037f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	699a      	ldr	r2, [r3, #24]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f042 0208 	orr.w	r2, r2, #8
 8003482:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	699a      	ldr	r2, [r3, #24]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f022 0204 	bic.w	r2, r2, #4
 8003492:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	6999      	ldr	r1, [r3, #24]
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	691a      	ldr	r2, [r3, #16]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	430a      	orrs	r2, r1
 80034a4:	619a      	str	r2, [r3, #24]
      break;
 80034a6:	e064      	b.n	8003572 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68b9      	ldr	r1, [r7, #8]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f000 fa04 	bl	80038bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	699a      	ldr	r2, [r3, #24]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	699a      	ldr	r2, [r3, #24]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	6999      	ldr	r1, [r3, #24]
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	021a      	lsls	r2, r3, #8
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	430a      	orrs	r2, r1
 80034e6:	619a      	str	r2, [r3, #24]
      break;
 80034e8:	e043      	b.n	8003572 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	68b9      	ldr	r1, [r7, #8]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f000 fa4d 	bl	8003990 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	69da      	ldr	r2, [r3, #28]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f042 0208 	orr.w	r2, r2, #8
 8003504:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	69da      	ldr	r2, [r3, #28]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f022 0204 	bic.w	r2, r2, #4
 8003514:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	69d9      	ldr	r1, [r3, #28]
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	691a      	ldr	r2, [r3, #16]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	430a      	orrs	r2, r1
 8003526:	61da      	str	r2, [r3, #28]
      break;
 8003528:	e023      	b.n	8003572 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68b9      	ldr	r1, [r7, #8]
 8003530:	4618      	mov	r0, r3
 8003532:	f000 fa97 	bl	8003a64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	69da      	ldr	r2, [r3, #28]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003544:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	69da      	ldr	r2, [r3, #28]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003554:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	69d9      	ldr	r1, [r3, #28]
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	691b      	ldr	r3, [r3, #16]
 8003560:	021a      	lsls	r2, r3, #8
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	430a      	orrs	r2, r1
 8003568:	61da      	str	r2, [r3, #28]
      break;
 800356a:	e002      	b.n	8003572 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	75fb      	strb	r3, [r7, #23]
      break;
 8003570:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800357a:	7dfb      	ldrb	r3, [r7, #23]
}
 800357c:	4618      	mov	r0, r3
 800357e:	3718      	adds	r7, #24
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800358e:	2300      	movs	r3, #0
 8003590:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003598:	2b01      	cmp	r3, #1
 800359a:	d101      	bne.n	80035a0 <HAL_TIM_ConfigClockSource+0x1c>
 800359c:	2302      	movs	r3, #2
 800359e:	e0b4      	b.n	800370a <HAL_TIM_ConfigClockSource+0x186>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2202      	movs	r2, #2
 80035ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80035be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68ba      	ldr	r2, [r7, #8]
 80035ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035d8:	d03e      	beq.n	8003658 <HAL_TIM_ConfigClockSource+0xd4>
 80035da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035de:	f200 8087 	bhi.w	80036f0 <HAL_TIM_ConfigClockSource+0x16c>
 80035e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035e6:	f000 8086 	beq.w	80036f6 <HAL_TIM_ConfigClockSource+0x172>
 80035ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035ee:	d87f      	bhi.n	80036f0 <HAL_TIM_ConfigClockSource+0x16c>
 80035f0:	2b70      	cmp	r3, #112	; 0x70
 80035f2:	d01a      	beq.n	800362a <HAL_TIM_ConfigClockSource+0xa6>
 80035f4:	2b70      	cmp	r3, #112	; 0x70
 80035f6:	d87b      	bhi.n	80036f0 <HAL_TIM_ConfigClockSource+0x16c>
 80035f8:	2b60      	cmp	r3, #96	; 0x60
 80035fa:	d050      	beq.n	800369e <HAL_TIM_ConfigClockSource+0x11a>
 80035fc:	2b60      	cmp	r3, #96	; 0x60
 80035fe:	d877      	bhi.n	80036f0 <HAL_TIM_ConfigClockSource+0x16c>
 8003600:	2b50      	cmp	r3, #80	; 0x50
 8003602:	d03c      	beq.n	800367e <HAL_TIM_ConfigClockSource+0xfa>
 8003604:	2b50      	cmp	r3, #80	; 0x50
 8003606:	d873      	bhi.n	80036f0 <HAL_TIM_ConfigClockSource+0x16c>
 8003608:	2b40      	cmp	r3, #64	; 0x40
 800360a:	d058      	beq.n	80036be <HAL_TIM_ConfigClockSource+0x13a>
 800360c:	2b40      	cmp	r3, #64	; 0x40
 800360e:	d86f      	bhi.n	80036f0 <HAL_TIM_ConfigClockSource+0x16c>
 8003610:	2b30      	cmp	r3, #48	; 0x30
 8003612:	d064      	beq.n	80036de <HAL_TIM_ConfigClockSource+0x15a>
 8003614:	2b30      	cmp	r3, #48	; 0x30
 8003616:	d86b      	bhi.n	80036f0 <HAL_TIM_ConfigClockSource+0x16c>
 8003618:	2b20      	cmp	r3, #32
 800361a:	d060      	beq.n	80036de <HAL_TIM_ConfigClockSource+0x15a>
 800361c:	2b20      	cmp	r3, #32
 800361e:	d867      	bhi.n	80036f0 <HAL_TIM_ConfigClockSource+0x16c>
 8003620:	2b00      	cmp	r3, #0
 8003622:	d05c      	beq.n	80036de <HAL_TIM_ConfigClockSource+0x15a>
 8003624:	2b10      	cmp	r3, #16
 8003626:	d05a      	beq.n	80036de <HAL_TIM_ConfigClockSource+0x15a>
 8003628:	e062      	b.n	80036f0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800363a:	f000 fad8 	bl	8003bee <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800364c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68ba      	ldr	r2, [r7, #8]
 8003654:	609a      	str	r2, [r3, #8]
      break;
 8003656:	e04f      	b.n	80036f8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003668:	f000 fac1 	bl	8003bee <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	689a      	ldr	r2, [r3, #8]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800367a:	609a      	str	r2, [r3, #8]
      break;
 800367c:	e03c      	b.n	80036f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800368a:	461a      	mov	r2, r3
 800368c:	f000 fa38 	bl	8003b00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2150      	movs	r1, #80	; 0x50
 8003696:	4618      	mov	r0, r3
 8003698:	f000 fa8f 	bl	8003bba <TIM_ITRx_SetConfig>
      break;
 800369c:	e02c      	b.n	80036f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80036aa:	461a      	mov	r2, r3
 80036ac:	f000 fa56 	bl	8003b5c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2160      	movs	r1, #96	; 0x60
 80036b6:	4618      	mov	r0, r3
 80036b8:	f000 fa7f 	bl	8003bba <TIM_ITRx_SetConfig>
      break;
 80036bc:	e01c      	b.n	80036f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036ca:	461a      	mov	r2, r3
 80036cc:	f000 fa18 	bl	8003b00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2140      	movs	r1, #64	; 0x40
 80036d6:	4618      	mov	r0, r3
 80036d8:	f000 fa6f 	bl	8003bba <TIM_ITRx_SetConfig>
      break;
 80036dc:	e00c      	b.n	80036f8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4619      	mov	r1, r3
 80036e8:	4610      	mov	r0, r2
 80036ea:	f000 fa66 	bl	8003bba <TIM_ITRx_SetConfig>
      break;
 80036ee:	e003      	b.n	80036f8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	73fb      	strb	r3, [r7, #15]
      break;
 80036f4:	e000      	b.n	80036f8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80036f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003708:	7bfb      	ldrb	r3, [r7, #15]
}
 800370a:	4618      	mov	r0, r3
 800370c:	3710      	adds	r7, #16
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
	...

08003714 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003714:	b480      	push	{r7}
 8003716:	b085      	sub	sp, #20
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a2f      	ldr	r2, [pc, #188]	; (80037e4 <TIM_Base_SetConfig+0xd0>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d00b      	beq.n	8003744 <TIM_Base_SetConfig+0x30>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003732:	d007      	beq.n	8003744 <TIM_Base_SetConfig+0x30>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a2c      	ldr	r2, [pc, #176]	; (80037e8 <TIM_Base_SetConfig+0xd4>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d003      	beq.n	8003744 <TIM_Base_SetConfig+0x30>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a2b      	ldr	r2, [pc, #172]	; (80037ec <TIM_Base_SetConfig+0xd8>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d108      	bne.n	8003756 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800374a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	68fa      	ldr	r2, [r7, #12]
 8003752:	4313      	orrs	r3, r2
 8003754:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a22      	ldr	r2, [pc, #136]	; (80037e4 <TIM_Base_SetConfig+0xd0>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d00b      	beq.n	8003776 <TIM_Base_SetConfig+0x62>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003764:	d007      	beq.n	8003776 <TIM_Base_SetConfig+0x62>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a1f      	ldr	r2, [pc, #124]	; (80037e8 <TIM_Base_SetConfig+0xd4>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d003      	beq.n	8003776 <TIM_Base_SetConfig+0x62>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a1e      	ldr	r2, [pc, #120]	; (80037ec <TIM_Base_SetConfig+0xd8>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d108      	bne.n	8003788 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800377c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	68fa      	ldr	r2, [r7, #12]
 8003784:	4313      	orrs	r3, r2
 8003786:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	4313      	orrs	r3, r2
 8003794:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	689a      	ldr	r2, [r3, #8]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	4a0d      	ldr	r2, [pc, #52]	; (80037e4 <TIM_Base_SetConfig+0xd0>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d103      	bne.n	80037bc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	691a      	ldr	r2, [r3, #16]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	f003 0301 	and.w	r3, r3, #1
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d005      	beq.n	80037da <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	f023 0201 	bic.w	r2, r3, #1
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	611a      	str	r2, [r3, #16]
  }
}
 80037da:	bf00      	nop
 80037dc:	3714      	adds	r7, #20
 80037de:	46bd      	mov	sp, r7
 80037e0:	bc80      	pop	{r7}
 80037e2:	4770      	bx	lr
 80037e4:	40012c00 	.word	0x40012c00
 80037e8:	40000400 	.word	0x40000400
 80037ec:	40000800 	.word	0x40000800

080037f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b087      	sub	sp, #28
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a1b      	ldr	r3, [r3, #32]
 80037fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a1b      	ldr	r3, [r3, #32]
 8003804:	f023 0201 	bic.w	r2, r3, #1
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800381e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f023 0303 	bic.w	r3, r3, #3
 8003826:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68fa      	ldr	r2, [r7, #12]
 800382e:	4313      	orrs	r3, r2
 8003830:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	f023 0302 	bic.w	r3, r3, #2
 8003838:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	697a      	ldr	r2, [r7, #20]
 8003840:	4313      	orrs	r3, r2
 8003842:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4a1c      	ldr	r2, [pc, #112]	; (80038b8 <TIM_OC1_SetConfig+0xc8>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d10c      	bne.n	8003866 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	f023 0308 	bic.w	r3, r3, #8
 8003852:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	697a      	ldr	r2, [r7, #20]
 800385a:	4313      	orrs	r3, r2
 800385c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	f023 0304 	bic.w	r3, r3, #4
 8003864:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a13      	ldr	r2, [pc, #76]	; (80038b8 <TIM_OC1_SetConfig+0xc8>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d111      	bne.n	8003892 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003874:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800387c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	693a      	ldr	r2, [r7, #16]
 8003884:	4313      	orrs	r3, r2
 8003886:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	4313      	orrs	r3, r2
 8003890:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	693a      	ldr	r2, [r7, #16]
 8003896:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	685a      	ldr	r2, [r3, #4]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	697a      	ldr	r2, [r7, #20]
 80038aa:	621a      	str	r2, [r3, #32]
}
 80038ac:	bf00      	nop
 80038ae:	371c      	adds	r7, #28
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bc80      	pop	{r7}
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	40012c00 	.word	0x40012c00

080038bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038bc:	b480      	push	{r7}
 80038be:	b087      	sub	sp, #28
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a1b      	ldr	r3, [r3, #32]
 80038ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a1b      	ldr	r3, [r3, #32]
 80038d0:	f023 0210 	bic.w	r2, r3, #16
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	021b      	lsls	r3, r3, #8
 80038fa:	68fa      	ldr	r2, [r7, #12]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	f023 0320 	bic.w	r3, r3, #32
 8003906:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	011b      	lsls	r3, r3, #4
 800390e:	697a      	ldr	r2, [r7, #20]
 8003910:	4313      	orrs	r3, r2
 8003912:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a1d      	ldr	r2, [pc, #116]	; (800398c <TIM_OC2_SetConfig+0xd0>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d10d      	bne.n	8003938 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003922:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	011b      	lsls	r3, r3, #4
 800392a:	697a      	ldr	r2, [r7, #20]
 800392c:	4313      	orrs	r3, r2
 800392e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003936:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4a14      	ldr	r2, [pc, #80]	; (800398c <TIM_OC2_SetConfig+0xd0>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d113      	bne.n	8003968 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003946:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800394e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	695b      	ldr	r3, [r3, #20]
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	693a      	ldr	r2, [r7, #16]
 8003958:	4313      	orrs	r3, r2
 800395a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	699b      	ldr	r3, [r3, #24]
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	693a      	ldr	r2, [r7, #16]
 8003964:	4313      	orrs	r3, r2
 8003966:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	693a      	ldr	r2, [r7, #16]
 800396c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	685a      	ldr	r2, [r3, #4]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	697a      	ldr	r2, [r7, #20]
 8003980:	621a      	str	r2, [r3, #32]
}
 8003982:	bf00      	nop
 8003984:	371c      	adds	r7, #28
 8003986:	46bd      	mov	sp, r7
 8003988:	bc80      	pop	{r7}
 800398a:	4770      	bx	lr
 800398c:	40012c00 	.word	0x40012c00

08003990 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003990:	b480      	push	{r7}
 8003992:	b087      	sub	sp, #28
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a1b      	ldr	r3, [r3, #32]
 800399e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a1b      	ldr	r3, [r3, #32]
 80039a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	69db      	ldr	r3, [r3, #28]
 80039b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f023 0303 	bic.w	r3, r3, #3
 80039c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68fa      	ldr	r2, [r7, #12]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80039d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	021b      	lsls	r3, r3, #8
 80039e0:	697a      	ldr	r2, [r7, #20]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a1d      	ldr	r2, [pc, #116]	; (8003a60 <TIM_OC3_SetConfig+0xd0>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d10d      	bne.n	8003a0a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	021b      	lsls	r3, r3, #8
 80039fc:	697a      	ldr	r2, [r7, #20]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a14      	ldr	r2, [pc, #80]	; (8003a60 <TIM_OC3_SetConfig+0xd0>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d113      	bne.n	8003a3a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	695b      	ldr	r3, [r3, #20]
 8003a26:	011b      	lsls	r3, r3, #4
 8003a28:	693a      	ldr	r2, [r7, #16]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	699b      	ldr	r3, [r3, #24]
 8003a32:	011b      	lsls	r3, r3, #4
 8003a34:	693a      	ldr	r2, [r7, #16]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	693a      	ldr	r2, [r7, #16]
 8003a3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	685a      	ldr	r2, [r3, #4]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	697a      	ldr	r2, [r7, #20]
 8003a52:	621a      	str	r2, [r3, #32]
}
 8003a54:	bf00      	nop
 8003a56:	371c      	adds	r7, #28
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bc80      	pop	{r7}
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	40012c00 	.word	0x40012c00

08003a64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b087      	sub	sp, #28
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a1b      	ldr	r3, [r3, #32]
 8003a72:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a1b      	ldr	r3, [r3, #32]
 8003a78:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	69db      	ldr	r3, [r3, #28]
 8003a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	021b      	lsls	r3, r3, #8
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003aae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	031b      	lsls	r3, r3, #12
 8003ab6:	693a      	ldr	r2, [r7, #16]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4a0f      	ldr	r2, [pc, #60]	; (8003afc <TIM_OC4_SetConfig+0x98>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d109      	bne.n	8003ad8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003aca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	695b      	ldr	r3, [r3, #20]
 8003ad0:	019b      	lsls	r3, r3, #6
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	697a      	ldr	r2, [r7, #20]
 8003adc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	68fa      	ldr	r2, [r7, #12]
 8003ae2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	685a      	ldr	r2, [r3, #4]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	693a      	ldr	r2, [r7, #16]
 8003af0:	621a      	str	r2, [r3, #32]
}
 8003af2:	bf00      	nop
 8003af4:	371c      	adds	r7, #28
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bc80      	pop	{r7}
 8003afa:	4770      	bx	lr
 8003afc:	40012c00 	.word	0x40012c00

08003b00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b087      	sub	sp, #28
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6a1b      	ldr	r3, [r3, #32]
 8003b10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6a1b      	ldr	r3, [r3, #32]
 8003b16:	f023 0201 	bic.w	r2, r3, #1
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	011b      	lsls	r3, r3, #4
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	f023 030a 	bic.w	r3, r3, #10
 8003b3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	697a      	ldr	r2, [r7, #20]
 8003b50:	621a      	str	r2, [r3, #32]
}
 8003b52:	bf00      	nop
 8003b54:	371c      	adds	r7, #28
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bc80      	pop	{r7}
 8003b5a:	4770      	bx	lr

08003b5c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b087      	sub	sp, #28
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6a1b      	ldr	r3, [r3, #32]
 8003b6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6a1b      	ldr	r3, [r3, #32]
 8003b72:	f023 0210 	bic.w	r2, r3, #16
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	031b      	lsls	r3, r3, #12
 8003b8c:	693a      	ldr	r2, [r7, #16]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b98:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	011b      	lsls	r3, r3, #4
 8003b9e:	697a      	ldr	r2, [r7, #20]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	693a      	ldr	r2, [r7, #16]
 8003ba8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	697a      	ldr	r2, [r7, #20]
 8003bae:	621a      	str	r2, [r3, #32]
}
 8003bb0:	bf00      	nop
 8003bb2:	371c      	adds	r7, #28
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bc80      	pop	{r7}
 8003bb8:	4770      	bx	lr

08003bba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003bba:	b480      	push	{r7}
 8003bbc:	b085      	sub	sp, #20
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
 8003bc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bd0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003bd2:	683a      	ldr	r2, [r7, #0]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	f043 0307 	orr.w	r3, r3, #7
 8003bdc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	609a      	str	r2, [r3, #8]
}
 8003be4:	bf00      	nop
 8003be6:	3714      	adds	r7, #20
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bc80      	pop	{r7}
 8003bec:	4770      	bx	lr

08003bee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003bee:	b480      	push	{r7}
 8003bf0:	b087      	sub	sp, #28
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	60f8      	str	r0, [r7, #12]
 8003bf6:	60b9      	str	r1, [r7, #8]
 8003bf8:	607a      	str	r2, [r7, #4]
 8003bfa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c08:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	021a      	lsls	r2, r3, #8
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	431a      	orrs	r2, r3
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	609a      	str	r2, [r3, #8]
}
 8003c22:	bf00      	nop
 8003c24:	371c      	adds	r7, #28
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bc80      	pop	{r7}
 8003c2a:	4770      	bx	lr

08003c2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b087      	sub	sp, #28
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	f003 031f 	and.w	r3, r3, #31
 8003c3e:	2201      	movs	r2, #1
 8003c40:	fa02 f303 	lsl.w	r3, r2, r3
 8003c44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6a1a      	ldr	r2, [r3, #32]
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	43db      	mvns	r3, r3
 8003c4e:	401a      	ands	r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6a1a      	ldr	r2, [r3, #32]
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	f003 031f 	and.w	r3, r3, #31
 8003c5e:	6879      	ldr	r1, [r7, #4]
 8003c60:	fa01 f303 	lsl.w	r3, r1, r3
 8003c64:	431a      	orrs	r2, r3
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	621a      	str	r2, [r3, #32]
}
 8003c6a:	bf00      	nop
 8003c6c:	371c      	adds	r7, #28
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bc80      	pop	{r7}
 8003c72:	4770      	bx	lr

08003c74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b085      	sub	sp, #20
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d101      	bne.n	8003c8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c88:	2302      	movs	r3, #2
 8003c8a:	e046      	b.n	8003d1a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2202      	movs	r2, #2
 8003c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68fa      	ldr	r2, [r7, #12]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a16      	ldr	r2, [pc, #88]	; (8003d24 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d00e      	beq.n	8003cee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cd8:	d009      	beq.n	8003cee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a12      	ldr	r2, [pc, #72]	; (8003d28 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d004      	beq.n	8003cee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a10      	ldr	r2, [pc, #64]	; (8003d2c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d10c      	bne.n	8003d08 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cf4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	68ba      	ldr	r2, [r7, #8]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68ba      	ldr	r2, [r7, #8]
 8003d06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3714      	adds	r7, #20
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bc80      	pop	{r7}
 8003d22:	4770      	bx	lr
 8003d24:	40012c00 	.word	0x40012c00
 8003d28:	40000400 	.word	0x40000400
 8003d2c:	40000800 	.word	0x40000800

08003d30 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d101      	bne.n	8003d4c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003d48:	2302      	movs	r3, #2
 8003d4a:	e03d      	b.n	8003dc8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	695b      	ldr	r3, [r3, #20]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	69db      	ldr	r3, [r3, #28]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3714      	adds	r7, #20
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bc80      	pop	{r7}
 8003dd0:	4770      	bx	lr

08003dd2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003dd2:	b580      	push	{r7, lr}
 8003dd4:	b082      	sub	sp, #8
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d101      	bne.n	8003de4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e042      	b.n	8003e6a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d106      	bne.n	8003dfe <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f7fd ffbb 	bl	8001d74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2224      	movs	r2, #36	; 0x24
 8003e02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68da      	ldr	r2, [r3, #12]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e14:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 fcd4 	bl	80047c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	691a      	ldr	r2, [r3, #16]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e2a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	695a      	ldr	r2, [r3, #20]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e3a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	68da      	ldr	r2, [r3, #12]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e4a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2220      	movs	r2, #32
 8003e56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2220      	movs	r2, #32
 8003e5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3708      	adds	r7, #8
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}

08003e72 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e72:	b580      	push	{r7, lr}
 8003e74:	b084      	sub	sp, #16
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	60f8      	str	r0, [r7, #12]
 8003e7a:	60b9      	str	r1, [r7, #8]
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	2b20      	cmp	r3, #32
 8003e8a:	d112      	bne.n	8003eb2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d002      	beq.n	8003e98 <HAL_UART_Receive_IT+0x26>
 8003e92:	88fb      	ldrh	r3, [r7, #6]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d101      	bne.n	8003e9c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e00b      	b.n	8003eb4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003ea2:	88fb      	ldrh	r3, [r7, #6]
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	68b9      	ldr	r1, [r7, #8]
 8003ea8:	68f8      	ldr	r0, [r7, #12]
 8003eaa:	f000 fab6 	bl	800441a <UART_Start_Receive_IT>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	e000      	b.n	8003eb4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003eb2:	2302      	movs	r3, #2
  }
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3710      	adds	r7, #16
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b0ba      	sub	sp, #232	; 0xe8
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003eee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ef2:	f003 030f 	and.w	r3, r3, #15
 8003ef6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003efa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d10f      	bne.n	8003f22 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f06:	f003 0320 	and.w	r3, r3, #32
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d009      	beq.n	8003f22 <HAL_UART_IRQHandler+0x66>
 8003f0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f12:	f003 0320 	and.w	r3, r3, #32
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d003      	beq.n	8003f22 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 fb93 	bl	8004646 <UART_Receive_IT>
      return;
 8003f20:	e25b      	b.n	80043da <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003f22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	f000 80de 	beq.w	80040e8 <HAL_UART_IRQHandler+0x22c>
 8003f2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f30:	f003 0301 	and.w	r3, r3, #1
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d106      	bne.n	8003f46 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003f38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f3c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	f000 80d1 	beq.w	80040e8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003f46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00b      	beq.n	8003f6a <HAL_UART_IRQHandler+0xae>
 8003f52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d005      	beq.n	8003f6a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f62:	f043 0201 	orr.w	r2, r3, #1
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f6e:	f003 0304 	and.w	r3, r3, #4
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00b      	beq.n	8003f8e <HAL_UART_IRQHandler+0xd2>
 8003f76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d005      	beq.n	8003f8e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f86:	f043 0202 	orr.w	r2, r3, #2
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d00b      	beq.n	8003fb2 <HAL_UART_IRQHandler+0xf6>
 8003f9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d005      	beq.n	8003fb2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003faa:	f043 0204 	orr.w	r2, r3, #4
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003fb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fb6:	f003 0308 	and.w	r3, r3, #8
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d011      	beq.n	8003fe2 <HAL_UART_IRQHandler+0x126>
 8003fbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fc2:	f003 0320 	and.w	r3, r3, #32
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d105      	bne.n	8003fd6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003fca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fce:	f003 0301 	and.w	r3, r3, #1
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d005      	beq.n	8003fe2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fda:	f043 0208 	orr.w	r2, r3, #8
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	f000 81f2 	beq.w	80043d0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003fec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ff0:	f003 0320 	and.w	r3, r3, #32
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d008      	beq.n	800400a <HAL_UART_IRQHandler+0x14e>
 8003ff8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ffc:	f003 0320 	and.w	r3, r3, #32
 8004000:	2b00      	cmp	r3, #0
 8004002:	d002      	beq.n	800400a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f000 fb1e 	bl	8004646 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	695b      	ldr	r3, [r3, #20]
 8004010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004014:	2b00      	cmp	r3, #0
 8004016:	bf14      	ite	ne
 8004018:	2301      	movne	r3, #1
 800401a:	2300      	moveq	r3, #0
 800401c:	b2db      	uxtb	r3, r3
 800401e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004026:	f003 0308 	and.w	r3, r3, #8
 800402a:	2b00      	cmp	r3, #0
 800402c:	d103      	bne.n	8004036 <HAL_UART_IRQHandler+0x17a>
 800402e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004032:	2b00      	cmp	r3, #0
 8004034:	d04f      	beq.n	80040d6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 fa28 	bl	800448c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004046:	2b00      	cmp	r3, #0
 8004048:	d041      	beq.n	80040ce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	3314      	adds	r3, #20
 8004050:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004054:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004058:	e853 3f00 	ldrex	r3, [r3]
 800405c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004060:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004064:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004068:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	3314      	adds	r3, #20
 8004072:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004076:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800407a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800407e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004082:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004086:	e841 2300 	strex	r3, r2, [r1]
 800408a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800408e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d1d9      	bne.n	800404a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800409a:	2b00      	cmp	r3, #0
 800409c:	d013      	beq.n	80040c6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040a2:	4a7e      	ldr	r2, [pc, #504]	; (800429c <HAL_UART_IRQHandler+0x3e0>)
 80040a4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7fe f982 	bl	80023b4 <HAL_DMA_Abort_IT>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d016      	beq.n	80040e4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80040c0:	4610      	mov	r0, r2
 80040c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040c4:	e00e      	b.n	80040e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 f993 	bl	80043f2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040cc:	e00a      	b.n	80040e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 f98f 	bl	80043f2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040d4:	e006      	b.n	80040e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 f98b 	bl	80043f2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80040e2:	e175      	b.n	80043d0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040e4:	bf00      	nop
    return;
 80040e6:	e173      	b.n	80043d0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	f040 814f 	bne.w	8004390 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80040f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040f6:	f003 0310 	and.w	r3, r3, #16
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	f000 8148 	beq.w	8004390 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004100:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004104:	f003 0310 	and.w	r3, r3, #16
 8004108:	2b00      	cmp	r3, #0
 800410a:	f000 8141 	beq.w	8004390 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800410e:	2300      	movs	r3, #0
 8004110:	60bb      	str	r3, [r7, #8]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	60bb      	str	r3, [r7, #8]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	60bb      	str	r3, [r7, #8]
 8004122:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	695b      	ldr	r3, [r3, #20]
 800412a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800412e:	2b00      	cmp	r3, #0
 8004130:	f000 80b6 	beq.w	80042a0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004140:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004144:	2b00      	cmp	r3, #0
 8004146:	f000 8145 	beq.w	80043d4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800414e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004152:	429a      	cmp	r2, r3
 8004154:	f080 813e 	bcs.w	80043d4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800415e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	2b20      	cmp	r3, #32
 8004168:	f000 8088 	beq.w	800427c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	330c      	adds	r3, #12
 8004172:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004176:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800417a:	e853 3f00 	ldrex	r3, [r3]
 800417e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004182:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004186:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800418a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	330c      	adds	r3, #12
 8004194:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004198:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800419c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80041a4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80041a8:	e841 2300 	strex	r3, r2, [r1]
 80041ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80041b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d1d9      	bne.n	800416c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	3314      	adds	r3, #20
 80041be:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041c2:	e853 3f00 	ldrex	r3, [r3]
 80041c6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80041c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041ca:	f023 0301 	bic.w	r3, r3, #1
 80041ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	3314      	adds	r3, #20
 80041d8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80041dc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80041e0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80041e4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80041e8:	e841 2300 	strex	r3, r2, [r1]
 80041ec:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80041ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d1e1      	bne.n	80041b8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	3314      	adds	r3, #20
 80041fa:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041fe:	e853 3f00 	ldrex	r3, [r3]
 8004202:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004204:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004206:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800420a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	3314      	adds	r3, #20
 8004214:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004218:	66fa      	str	r2, [r7, #108]	; 0x6c
 800421a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800421c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800421e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004220:	e841 2300 	strex	r3, r2, [r1]
 8004224:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004226:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004228:	2b00      	cmp	r3, #0
 800422a:	d1e3      	bne.n	80041f4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2220      	movs	r2, #32
 8004230:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	330c      	adds	r3, #12
 8004240:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004242:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004244:	e853 3f00 	ldrex	r3, [r3]
 8004248:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800424a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800424c:	f023 0310 	bic.w	r3, r3, #16
 8004250:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	330c      	adds	r3, #12
 800425a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800425e:	65ba      	str	r2, [r7, #88]	; 0x58
 8004260:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004262:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004264:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004266:	e841 2300 	strex	r3, r2, [r1]
 800426a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800426c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800426e:	2b00      	cmp	r3, #0
 8004270:	d1e3      	bne.n	800423a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004276:	4618      	mov	r0, r3
 8004278:	f7fe f861 	bl	800233e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2202      	movs	r2, #2
 8004280:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800428a:	b29b      	uxth	r3, r3
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	b29b      	uxth	r3, r3
 8004290:	4619      	mov	r1, r3
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 f8b6 	bl	8004404 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004298:	e09c      	b.n	80043d4 <HAL_UART_IRQHandler+0x518>
 800429a:	bf00      	nop
 800429c:	08004551 	.word	0x08004551
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	f000 808e 	beq.w	80043d8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80042bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	f000 8089 	beq.w	80043d8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	330c      	adds	r3, #12
 80042cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042d0:	e853 3f00 	ldrex	r3, [r3]
 80042d4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80042d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	330c      	adds	r3, #12
 80042e6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80042ea:	647a      	str	r2, [r7, #68]	; 0x44
 80042ec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80042f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042f2:	e841 2300 	strex	r3, r2, [r1]
 80042f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80042f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d1e3      	bne.n	80042c6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	3314      	adds	r3, #20
 8004304:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004308:	e853 3f00 	ldrex	r3, [r3]
 800430c:	623b      	str	r3, [r7, #32]
   return(result);
 800430e:	6a3b      	ldr	r3, [r7, #32]
 8004310:	f023 0301 	bic.w	r3, r3, #1
 8004314:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	3314      	adds	r3, #20
 800431e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004322:	633a      	str	r2, [r7, #48]	; 0x30
 8004324:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004326:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004328:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800432a:	e841 2300 	strex	r3, r2, [r1]
 800432e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004332:	2b00      	cmp	r3, #0
 8004334:	d1e3      	bne.n	80042fe <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2220      	movs	r2, #32
 800433a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	330c      	adds	r3, #12
 800434a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	e853 3f00 	ldrex	r3, [r3]
 8004352:	60fb      	str	r3, [r7, #12]
   return(result);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f023 0310 	bic.w	r3, r3, #16
 800435a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	330c      	adds	r3, #12
 8004364:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004368:	61fa      	str	r2, [r7, #28]
 800436a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800436c:	69b9      	ldr	r1, [r7, #24]
 800436e:	69fa      	ldr	r2, [r7, #28]
 8004370:	e841 2300 	strex	r3, r2, [r1]
 8004374:	617b      	str	r3, [r7, #20]
   return(result);
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d1e3      	bne.n	8004344 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2202      	movs	r2, #2
 8004380:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004382:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004386:	4619      	mov	r1, r3
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f000 f83b 	bl	8004404 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800438e:	e023      	b.n	80043d8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004390:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004394:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004398:	2b00      	cmp	r3, #0
 800439a:	d009      	beq.n	80043b0 <HAL_UART_IRQHandler+0x4f4>
 800439c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d003      	beq.n	80043b0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f000 f8e5 	bl	8004578 <UART_Transmit_IT>
    return;
 80043ae:	e014      	b.n	80043da <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80043b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d00e      	beq.n	80043da <HAL_UART_IRQHandler+0x51e>
 80043bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d008      	beq.n	80043da <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f000 f924 	bl	8004616 <UART_EndTransmit_IT>
    return;
 80043ce:	e004      	b.n	80043da <HAL_UART_IRQHandler+0x51e>
    return;
 80043d0:	bf00      	nop
 80043d2:	e002      	b.n	80043da <HAL_UART_IRQHandler+0x51e>
      return;
 80043d4:	bf00      	nop
 80043d6:	e000      	b.n	80043da <HAL_UART_IRQHandler+0x51e>
      return;
 80043d8:	bf00      	nop
  }
}
 80043da:	37e8      	adds	r7, #232	; 0xe8
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80043e8:	bf00      	nop
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bc80      	pop	{r7}
 80043f0:	4770      	bx	lr

080043f2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80043f2:	b480      	push	{r7}
 80043f4:	b083      	sub	sp, #12
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80043fa:	bf00      	nop
 80043fc:	370c      	adds	r7, #12
 80043fe:	46bd      	mov	sp, r7
 8004400:	bc80      	pop	{r7}
 8004402:	4770      	bx	lr

08004404 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	460b      	mov	r3, r1
 800440e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004410:	bf00      	nop
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	bc80      	pop	{r7}
 8004418:	4770      	bx	lr

0800441a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800441a:	b480      	push	{r7}
 800441c:	b085      	sub	sp, #20
 800441e:	af00      	add	r7, sp, #0
 8004420:	60f8      	str	r0, [r7, #12]
 8004422:	60b9      	str	r1, [r7, #8]
 8004424:	4613      	mov	r3, r2
 8004426:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	68ba      	ldr	r2, [r7, #8]
 800442c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	88fa      	ldrh	r2, [r7, #6]
 8004432:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	88fa      	ldrh	r2, [r7, #6]
 8004438:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2200      	movs	r2, #0
 800443e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2222      	movs	r2, #34	; 0x22
 8004444:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d007      	beq.n	8004460 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68da      	ldr	r2, [r3, #12]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800445e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	695a      	ldr	r2, [r3, #20]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f042 0201 	orr.w	r2, r2, #1
 800446e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68da      	ldr	r2, [r3, #12]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f042 0220 	orr.w	r2, r2, #32
 800447e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3714      	adds	r7, #20
 8004486:	46bd      	mov	sp, r7
 8004488:	bc80      	pop	{r7}
 800448a:	4770      	bx	lr

0800448c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800448c:	b480      	push	{r7}
 800448e:	b095      	sub	sp, #84	; 0x54
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	330c      	adds	r3, #12
 800449a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800449c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800449e:	e853 3f00 	ldrex	r3, [r3]
 80044a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80044a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	330c      	adds	r3, #12
 80044b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044b4:	643a      	str	r2, [r7, #64]	; 0x40
 80044b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80044ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80044bc:	e841 2300 	strex	r3, r2, [r1]
 80044c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80044c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d1e5      	bne.n	8004494 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	3314      	adds	r3, #20
 80044ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d0:	6a3b      	ldr	r3, [r7, #32]
 80044d2:	e853 3f00 	ldrex	r3, [r3]
 80044d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	f023 0301 	bic.w	r3, r3, #1
 80044de:	64bb      	str	r3, [r7, #72]	; 0x48
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	3314      	adds	r3, #20
 80044e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044f0:	e841 2300 	strex	r3, r2, [r1]
 80044f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d1e5      	bne.n	80044c8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004500:	2b01      	cmp	r3, #1
 8004502:	d119      	bne.n	8004538 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	330c      	adds	r3, #12
 800450a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	e853 3f00 	ldrex	r3, [r3]
 8004512:	60bb      	str	r3, [r7, #8]
   return(result);
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	f023 0310 	bic.w	r3, r3, #16
 800451a:	647b      	str	r3, [r7, #68]	; 0x44
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	330c      	adds	r3, #12
 8004522:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004524:	61ba      	str	r2, [r7, #24]
 8004526:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004528:	6979      	ldr	r1, [r7, #20]
 800452a:	69ba      	ldr	r2, [r7, #24]
 800452c:	e841 2300 	strex	r3, r2, [r1]
 8004530:	613b      	str	r3, [r7, #16]
   return(result);
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d1e5      	bne.n	8004504 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2220      	movs	r2, #32
 800453c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004546:	bf00      	nop
 8004548:	3754      	adds	r7, #84	; 0x54
 800454a:	46bd      	mov	sp, r7
 800454c:	bc80      	pop	{r7}
 800454e:	4770      	bx	lr

08004550 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2200      	movs	r2, #0
 8004562:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2200      	movs	r2, #0
 8004568:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800456a:	68f8      	ldr	r0, [r7, #12]
 800456c:	f7ff ff41 	bl	80043f2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004570:	bf00      	nop
 8004572:	3710      	adds	r7, #16
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004578:	b480      	push	{r7}
 800457a:	b085      	sub	sp, #20
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004586:	b2db      	uxtb	r3, r3
 8004588:	2b21      	cmp	r3, #33	; 0x21
 800458a:	d13e      	bne.n	800460a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004594:	d114      	bne.n	80045c0 <UART_Transmit_IT+0x48>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d110      	bne.n	80045c0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a1b      	ldr	r3, [r3, #32]
 80045a2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	881b      	ldrh	r3, [r3, #0]
 80045a8:	461a      	mov	r2, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045b2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a1b      	ldr	r3, [r3, #32]
 80045b8:	1c9a      	adds	r2, r3, #2
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	621a      	str	r2, [r3, #32]
 80045be:	e008      	b.n	80045d2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a1b      	ldr	r3, [r3, #32]
 80045c4:	1c59      	adds	r1, r3, #1
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	6211      	str	r1, [r2, #32]
 80045ca:	781a      	ldrb	r2, [r3, #0]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	3b01      	subs	r3, #1
 80045da:	b29b      	uxth	r3, r3
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	4619      	mov	r1, r3
 80045e0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d10f      	bne.n	8004606 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	68da      	ldr	r2, [r3, #12]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045f4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68da      	ldr	r2, [r3, #12]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004604:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004606:	2300      	movs	r3, #0
 8004608:	e000      	b.n	800460c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800460a:	2302      	movs	r3, #2
  }
}
 800460c:	4618      	mov	r0, r3
 800460e:	3714      	adds	r7, #20
 8004610:	46bd      	mov	sp, r7
 8004612:	bc80      	pop	{r7}
 8004614:	4770      	bx	lr

08004616 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004616:	b580      	push	{r7, lr}
 8004618:	b082      	sub	sp, #8
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	68da      	ldr	r2, [r3, #12]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800462c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2220      	movs	r2, #32
 8004632:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f7ff fed2 	bl	80043e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3708      	adds	r7, #8
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}

08004646 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004646:	b580      	push	{r7, lr}
 8004648:	b08c      	sub	sp, #48	; 0x30
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004654:	b2db      	uxtb	r3, r3
 8004656:	2b22      	cmp	r3, #34	; 0x22
 8004658:	f040 80ae 	bne.w	80047b8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004664:	d117      	bne.n	8004696 <UART_Receive_IT+0x50>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d113      	bne.n	8004696 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800466e:	2300      	movs	r3, #0
 8004670:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004676:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	b29b      	uxth	r3, r3
 8004680:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004684:	b29a      	uxth	r2, r3
 8004686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004688:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800468e:	1c9a      	adds	r2, r3, #2
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	629a      	str	r2, [r3, #40]	; 0x28
 8004694:	e026      	b.n	80046e4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800469a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800469c:	2300      	movs	r3, #0
 800469e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046a8:	d007      	beq.n	80046ba <UART_Receive_IT+0x74>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d10a      	bne.n	80046c8 <UART_Receive_IT+0x82>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d106      	bne.n	80046c8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	b2da      	uxtb	r2, r3
 80046c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c4:	701a      	strb	r2, [r3, #0]
 80046c6:	e008      	b.n	80046da <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046d4:	b2da      	uxtb	r2, r3
 80046d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046de:	1c5a      	adds	r2, r3, #1
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	3b01      	subs	r3, #1
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	4619      	mov	r1, r3
 80046f2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d15d      	bne.n	80047b4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68da      	ldr	r2, [r3, #12]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f022 0220 	bic.w	r2, r2, #32
 8004706:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68da      	ldr	r2, [r3, #12]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004716:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	695a      	ldr	r2, [r3, #20]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f022 0201 	bic.w	r2, r2, #1
 8004726:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2220      	movs	r2, #32
 800472c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473a:	2b01      	cmp	r3, #1
 800473c:	d135      	bne.n	80047aa <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	330c      	adds	r3, #12
 800474a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	e853 3f00 	ldrex	r3, [r3]
 8004752:	613b      	str	r3, [r7, #16]
   return(result);
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	f023 0310 	bic.w	r3, r3, #16
 800475a:	627b      	str	r3, [r7, #36]	; 0x24
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	330c      	adds	r3, #12
 8004762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004764:	623a      	str	r2, [r7, #32]
 8004766:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004768:	69f9      	ldr	r1, [r7, #28]
 800476a:	6a3a      	ldr	r2, [r7, #32]
 800476c:	e841 2300 	strex	r3, r2, [r1]
 8004770:	61bb      	str	r3, [r7, #24]
   return(result);
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d1e5      	bne.n	8004744 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0310 	and.w	r3, r3, #16
 8004782:	2b10      	cmp	r3, #16
 8004784:	d10a      	bne.n	800479c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004786:	2300      	movs	r3, #0
 8004788:	60fb      	str	r3, [r7, #12]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	60fb      	str	r3, [r7, #12]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	60fb      	str	r3, [r7, #12]
 800479a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80047a0:	4619      	mov	r1, r3
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f7ff fe2e 	bl	8004404 <HAL_UARTEx_RxEventCallback>
 80047a8:	e002      	b.n	80047b0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f7fc fa94 	bl	8000cd8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80047b0:	2300      	movs	r3, #0
 80047b2:	e002      	b.n	80047ba <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80047b4:	2300      	movs	r3, #0
 80047b6:	e000      	b.n	80047ba <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80047b8:	2302      	movs	r3, #2
  }
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3730      	adds	r7, #48	; 0x30
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
	...

080047c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	68da      	ldr	r2, [r3, #12]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	430a      	orrs	r2, r1
 80047e0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	689a      	ldr	r2, [r3, #8]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	431a      	orrs	r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	695b      	ldr	r3, [r3, #20]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80047fe:	f023 030c 	bic.w	r3, r3, #12
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	6812      	ldr	r2, [r2, #0]
 8004806:	68b9      	ldr	r1, [r7, #8]
 8004808:	430b      	orrs	r3, r1
 800480a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	695b      	ldr	r3, [r3, #20]
 8004812:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	699a      	ldr	r2, [r3, #24]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	430a      	orrs	r2, r1
 8004820:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a2c      	ldr	r2, [pc, #176]	; (80048d8 <UART_SetConfig+0x114>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d103      	bne.n	8004834 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800482c:	f7fe fbfc 	bl	8003028 <HAL_RCC_GetPCLK2Freq>
 8004830:	60f8      	str	r0, [r7, #12]
 8004832:	e002      	b.n	800483a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004834:	f7fe fbe4 	bl	8003000 <HAL_RCC_GetPCLK1Freq>
 8004838:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800483a:	68fa      	ldr	r2, [r7, #12]
 800483c:	4613      	mov	r3, r2
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	4413      	add	r3, r2
 8004842:	009a      	lsls	r2, r3, #2
 8004844:	441a      	add	r2, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004850:	4a22      	ldr	r2, [pc, #136]	; (80048dc <UART_SetConfig+0x118>)
 8004852:	fba2 2303 	umull	r2, r3, r2, r3
 8004856:	095b      	lsrs	r3, r3, #5
 8004858:	0119      	lsls	r1, r3, #4
 800485a:	68fa      	ldr	r2, [r7, #12]
 800485c:	4613      	mov	r3, r2
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	4413      	add	r3, r2
 8004862:	009a      	lsls	r2, r3, #2
 8004864:	441a      	add	r2, r3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004870:	4b1a      	ldr	r3, [pc, #104]	; (80048dc <UART_SetConfig+0x118>)
 8004872:	fba3 0302 	umull	r0, r3, r3, r2
 8004876:	095b      	lsrs	r3, r3, #5
 8004878:	2064      	movs	r0, #100	; 0x64
 800487a:	fb00 f303 	mul.w	r3, r0, r3
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	011b      	lsls	r3, r3, #4
 8004882:	3332      	adds	r3, #50	; 0x32
 8004884:	4a15      	ldr	r2, [pc, #84]	; (80048dc <UART_SetConfig+0x118>)
 8004886:	fba2 2303 	umull	r2, r3, r2, r3
 800488a:	095b      	lsrs	r3, r3, #5
 800488c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004890:	4419      	add	r1, r3
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	4613      	mov	r3, r2
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	4413      	add	r3, r2
 800489a:	009a      	lsls	r2, r3, #2
 800489c:	441a      	add	r2, r3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80048a8:	4b0c      	ldr	r3, [pc, #48]	; (80048dc <UART_SetConfig+0x118>)
 80048aa:	fba3 0302 	umull	r0, r3, r3, r2
 80048ae:	095b      	lsrs	r3, r3, #5
 80048b0:	2064      	movs	r0, #100	; 0x64
 80048b2:	fb00 f303 	mul.w	r3, r0, r3
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	011b      	lsls	r3, r3, #4
 80048ba:	3332      	adds	r3, #50	; 0x32
 80048bc:	4a07      	ldr	r2, [pc, #28]	; (80048dc <UART_SetConfig+0x118>)
 80048be:	fba2 2303 	umull	r2, r3, r2, r3
 80048c2:	095b      	lsrs	r3, r3, #5
 80048c4:	f003 020f 	and.w	r2, r3, #15
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	440a      	add	r2, r1
 80048ce:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80048d0:	bf00      	nop
 80048d2:	3710      	adds	r7, #16
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	40013800 	.word	0x40013800
 80048dc:	51eb851f 	.word	0x51eb851f

080048e0 <__cvt>:
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048e6:	461f      	mov	r7, r3
 80048e8:	bfbb      	ittet	lt
 80048ea:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80048ee:	461f      	movlt	r7, r3
 80048f0:	2300      	movge	r3, #0
 80048f2:	232d      	movlt	r3, #45	; 0x2d
 80048f4:	b088      	sub	sp, #32
 80048f6:	4614      	mov	r4, r2
 80048f8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80048fa:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80048fc:	7013      	strb	r3, [r2, #0]
 80048fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004900:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004904:	f023 0820 	bic.w	r8, r3, #32
 8004908:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800490c:	d005      	beq.n	800491a <__cvt+0x3a>
 800490e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004912:	d100      	bne.n	8004916 <__cvt+0x36>
 8004914:	3501      	adds	r5, #1
 8004916:	2302      	movs	r3, #2
 8004918:	e000      	b.n	800491c <__cvt+0x3c>
 800491a:	2303      	movs	r3, #3
 800491c:	aa07      	add	r2, sp, #28
 800491e:	9204      	str	r2, [sp, #16]
 8004920:	aa06      	add	r2, sp, #24
 8004922:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004926:	e9cd 3500 	strd	r3, r5, [sp]
 800492a:	4622      	mov	r2, r4
 800492c:	463b      	mov	r3, r7
 800492e:	f001 f8b3 	bl	8005a98 <_dtoa_r>
 8004932:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004936:	4606      	mov	r6, r0
 8004938:	d102      	bne.n	8004940 <__cvt+0x60>
 800493a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800493c:	07db      	lsls	r3, r3, #31
 800493e:	d522      	bpl.n	8004986 <__cvt+0xa6>
 8004940:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004944:	eb06 0905 	add.w	r9, r6, r5
 8004948:	d110      	bne.n	800496c <__cvt+0x8c>
 800494a:	7833      	ldrb	r3, [r6, #0]
 800494c:	2b30      	cmp	r3, #48	; 0x30
 800494e:	d10a      	bne.n	8004966 <__cvt+0x86>
 8004950:	2200      	movs	r2, #0
 8004952:	2300      	movs	r3, #0
 8004954:	4620      	mov	r0, r4
 8004956:	4639      	mov	r1, r7
 8004958:	f7fc f830 	bl	80009bc <__aeabi_dcmpeq>
 800495c:	b918      	cbnz	r0, 8004966 <__cvt+0x86>
 800495e:	f1c5 0501 	rsb	r5, r5, #1
 8004962:	f8ca 5000 	str.w	r5, [sl]
 8004966:	f8da 3000 	ldr.w	r3, [sl]
 800496a:	4499      	add	r9, r3
 800496c:	2200      	movs	r2, #0
 800496e:	2300      	movs	r3, #0
 8004970:	4620      	mov	r0, r4
 8004972:	4639      	mov	r1, r7
 8004974:	f7fc f822 	bl	80009bc <__aeabi_dcmpeq>
 8004978:	b108      	cbz	r0, 800497e <__cvt+0x9e>
 800497a:	f8cd 901c 	str.w	r9, [sp, #28]
 800497e:	2230      	movs	r2, #48	; 0x30
 8004980:	9b07      	ldr	r3, [sp, #28]
 8004982:	454b      	cmp	r3, r9
 8004984:	d307      	bcc.n	8004996 <__cvt+0xb6>
 8004986:	4630      	mov	r0, r6
 8004988:	9b07      	ldr	r3, [sp, #28]
 800498a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800498c:	1b9b      	subs	r3, r3, r6
 800498e:	6013      	str	r3, [r2, #0]
 8004990:	b008      	add	sp, #32
 8004992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004996:	1c59      	adds	r1, r3, #1
 8004998:	9107      	str	r1, [sp, #28]
 800499a:	701a      	strb	r2, [r3, #0]
 800499c:	e7f0      	b.n	8004980 <__cvt+0xa0>

0800499e <__exponent>:
 800499e:	4603      	mov	r3, r0
 80049a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80049a2:	2900      	cmp	r1, #0
 80049a4:	f803 2b02 	strb.w	r2, [r3], #2
 80049a8:	bfb6      	itet	lt
 80049aa:	222d      	movlt	r2, #45	; 0x2d
 80049ac:	222b      	movge	r2, #43	; 0x2b
 80049ae:	4249      	neglt	r1, r1
 80049b0:	2909      	cmp	r1, #9
 80049b2:	7042      	strb	r2, [r0, #1]
 80049b4:	dd2a      	ble.n	8004a0c <__exponent+0x6e>
 80049b6:	f10d 0207 	add.w	r2, sp, #7
 80049ba:	4617      	mov	r7, r2
 80049bc:	260a      	movs	r6, #10
 80049be:	fb91 f5f6 	sdiv	r5, r1, r6
 80049c2:	4694      	mov	ip, r2
 80049c4:	fb06 1415 	mls	r4, r6, r5, r1
 80049c8:	3430      	adds	r4, #48	; 0x30
 80049ca:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80049ce:	460c      	mov	r4, r1
 80049d0:	2c63      	cmp	r4, #99	; 0x63
 80049d2:	4629      	mov	r1, r5
 80049d4:	f102 32ff 	add.w	r2, r2, #4294967295
 80049d8:	dcf1      	bgt.n	80049be <__exponent+0x20>
 80049da:	3130      	adds	r1, #48	; 0x30
 80049dc:	f1ac 0402 	sub.w	r4, ip, #2
 80049e0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80049e4:	4622      	mov	r2, r4
 80049e6:	1c41      	adds	r1, r0, #1
 80049e8:	42ba      	cmp	r2, r7
 80049ea:	d30a      	bcc.n	8004a02 <__exponent+0x64>
 80049ec:	f10d 0209 	add.w	r2, sp, #9
 80049f0:	eba2 020c 	sub.w	r2, r2, ip
 80049f4:	42bc      	cmp	r4, r7
 80049f6:	bf88      	it	hi
 80049f8:	2200      	movhi	r2, #0
 80049fa:	4413      	add	r3, r2
 80049fc:	1a18      	subs	r0, r3, r0
 80049fe:	b003      	add	sp, #12
 8004a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a02:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004a06:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004a0a:	e7ed      	b.n	80049e8 <__exponent+0x4a>
 8004a0c:	2330      	movs	r3, #48	; 0x30
 8004a0e:	3130      	adds	r1, #48	; 0x30
 8004a10:	7083      	strb	r3, [r0, #2]
 8004a12:	70c1      	strb	r1, [r0, #3]
 8004a14:	1d03      	adds	r3, r0, #4
 8004a16:	e7f1      	b.n	80049fc <__exponent+0x5e>

08004a18 <_printf_float>:
 8004a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a1c:	b091      	sub	sp, #68	; 0x44
 8004a1e:	460c      	mov	r4, r1
 8004a20:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004a24:	4616      	mov	r6, r2
 8004a26:	461f      	mov	r7, r3
 8004a28:	4605      	mov	r5, r0
 8004a2a:	f000 ff1f 	bl	800586c <_localeconv_r>
 8004a2e:	6803      	ldr	r3, [r0, #0]
 8004a30:	4618      	mov	r0, r3
 8004a32:	9309      	str	r3, [sp, #36]	; 0x24
 8004a34:	f7fb fb96 	bl	8000164 <strlen>
 8004a38:	2300      	movs	r3, #0
 8004a3a:	930e      	str	r3, [sp, #56]	; 0x38
 8004a3c:	f8d8 3000 	ldr.w	r3, [r8]
 8004a40:	900a      	str	r0, [sp, #40]	; 0x28
 8004a42:	3307      	adds	r3, #7
 8004a44:	f023 0307 	bic.w	r3, r3, #7
 8004a48:	f103 0208 	add.w	r2, r3, #8
 8004a4c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004a50:	f8d4 b000 	ldr.w	fp, [r4]
 8004a54:	f8c8 2000 	str.w	r2, [r8]
 8004a58:	e9d3 a800 	ldrd	sl, r8, [r3]
 8004a5c:	4652      	mov	r2, sl
 8004a5e:	4643      	mov	r3, r8
 8004a60:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004a64:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8004a68:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8004a6e:	4650      	mov	r0, sl
 8004a70:	4b9c      	ldr	r3, [pc, #624]	; (8004ce4 <_printf_float+0x2cc>)
 8004a72:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a74:	f7fb ffd4 	bl	8000a20 <__aeabi_dcmpun>
 8004a78:	bb70      	cbnz	r0, 8004ad8 <_printf_float+0xc0>
 8004a7a:	f04f 32ff 	mov.w	r2, #4294967295
 8004a7e:	4650      	mov	r0, sl
 8004a80:	4b98      	ldr	r3, [pc, #608]	; (8004ce4 <_printf_float+0x2cc>)
 8004a82:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a84:	f7fb ffae 	bl	80009e4 <__aeabi_dcmple>
 8004a88:	bb30      	cbnz	r0, 8004ad8 <_printf_float+0xc0>
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	4650      	mov	r0, sl
 8004a90:	4641      	mov	r1, r8
 8004a92:	f7fb ff9d 	bl	80009d0 <__aeabi_dcmplt>
 8004a96:	b110      	cbz	r0, 8004a9e <_printf_float+0x86>
 8004a98:	232d      	movs	r3, #45	; 0x2d
 8004a9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a9e:	4a92      	ldr	r2, [pc, #584]	; (8004ce8 <_printf_float+0x2d0>)
 8004aa0:	4b92      	ldr	r3, [pc, #584]	; (8004cec <_printf_float+0x2d4>)
 8004aa2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004aa6:	bf94      	ite	ls
 8004aa8:	4690      	movls	r8, r2
 8004aaa:	4698      	movhi	r8, r3
 8004aac:	2303      	movs	r3, #3
 8004aae:	f04f 0a00 	mov.w	sl, #0
 8004ab2:	6123      	str	r3, [r4, #16]
 8004ab4:	f02b 0304 	bic.w	r3, fp, #4
 8004ab8:	6023      	str	r3, [r4, #0]
 8004aba:	4633      	mov	r3, r6
 8004abc:	4621      	mov	r1, r4
 8004abe:	4628      	mov	r0, r5
 8004ac0:	9700      	str	r7, [sp, #0]
 8004ac2:	aa0f      	add	r2, sp, #60	; 0x3c
 8004ac4:	f000 f9d6 	bl	8004e74 <_printf_common>
 8004ac8:	3001      	adds	r0, #1
 8004aca:	f040 8090 	bne.w	8004bee <_printf_float+0x1d6>
 8004ace:	f04f 30ff 	mov.w	r0, #4294967295
 8004ad2:	b011      	add	sp, #68	; 0x44
 8004ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ad8:	4652      	mov	r2, sl
 8004ada:	4643      	mov	r3, r8
 8004adc:	4650      	mov	r0, sl
 8004ade:	4641      	mov	r1, r8
 8004ae0:	f7fb ff9e 	bl	8000a20 <__aeabi_dcmpun>
 8004ae4:	b148      	cbz	r0, 8004afa <_printf_float+0xe2>
 8004ae6:	f1b8 0f00 	cmp.w	r8, #0
 8004aea:	bfb8      	it	lt
 8004aec:	232d      	movlt	r3, #45	; 0x2d
 8004aee:	4a80      	ldr	r2, [pc, #512]	; (8004cf0 <_printf_float+0x2d8>)
 8004af0:	bfb8      	it	lt
 8004af2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004af6:	4b7f      	ldr	r3, [pc, #508]	; (8004cf4 <_printf_float+0x2dc>)
 8004af8:	e7d3      	b.n	8004aa2 <_printf_float+0x8a>
 8004afa:	6863      	ldr	r3, [r4, #4]
 8004afc:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004b00:	1c5a      	adds	r2, r3, #1
 8004b02:	d142      	bne.n	8004b8a <_printf_float+0x172>
 8004b04:	2306      	movs	r3, #6
 8004b06:	6063      	str	r3, [r4, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	9206      	str	r2, [sp, #24]
 8004b0c:	aa0e      	add	r2, sp, #56	; 0x38
 8004b0e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004b12:	aa0d      	add	r2, sp, #52	; 0x34
 8004b14:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004b18:	9203      	str	r2, [sp, #12]
 8004b1a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004b1e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004b22:	6023      	str	r3, [r4, #0]
 8004b24:	6863      	ldr	r3, [r4, #4]
 8004b26:	4652      	mov	r2, sl
 8004b28:	9300      	str	r3, [sp, #0]
 8004b2a:	4628      	mov	r0, r5
 8004b2c:	4643      	mov	r3, r8
 8004b2e:	910b      	str	r1, [sp, #44]	; 0x2c
 8004b30:	f7ff fed6 	bl	80048e0 <__cvt>
 8004b34:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004b36:	4680      	mov	r8, r0
 8004b38:	2947      	cmp	r1, #71	; 0x47
 8004b3a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004b3c:	d108      	bne.n	8004b50 <_printf_float+0x138>
 8004b3e:	1cc8      	adds	r0, r1, #3
 8004b40:	db02      	blt.n	8004b48 <_printf_float+0x130>
 8004b42:	6863      	ldr	r3, [r4, #4]
 8004b44:	4299      	cmp	r1, r3
 8004b46:	dd40      	ble.n	8004bca <_printf_float+0x1b2>
 8004b48:	f1a9 0902 	sub.w	r9, r9, #2
 8004b4c:	fa5f f989 	uxtb.w	r9, r9
 8004b50:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004b54:	d81f      	bhi.n	8004b96 <_printf_float+0x17e>
 8004b56:	464a      	mov	r2, r9
 8004b58:	3901      	subs	r1, #1
 8004b5a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004b5e:	910d      	str	r1, [sp, #52]	; 0x34
 8004b60:	f7ff ff1d 	bl	800499e <__exponent>
 8004b64:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004b66:	4682      	mov	sl, r0
 8004b68:	1813      	adds	r3, r2, r0
 8004b6a:	2a01      	cmp	r2, #1
 8004b6c:	6123      	str	r3, [r4, #16]
 8004b6e:	dc02      	bgt.n	8004b76 <_printf_float+0x15e>
 8004b70:	6822      	ldr	r2, [r4, #0]
 8004b72:	07d2      	lsls	r2, r2, #31
 8004b74:	d501      	bpl.n	8004b7a <_printf_float+0x162>
 8004b76:	3301      	adds	r3, #1
 8004b78:	6123      	str	r3, [r4, #16]
 8004b7a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d09b      	beq.n	8004aba <_printf_float+0xa2>
 8004b82:	232d      	movs	r3, #45	; 0x2d
 8004b84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b88:	e797      	b.n	8004aba <_printf_float+0xa2>
 8004b8a:	2947      	cmp	r1, #71	; 0x47
 8004b8c:	d1bc      	bne.n	8004b08 <_printf_float+0xf0>
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d1ba      	bne.n	8004b08 <_printf_float+0xf0>
 8004b92:	2301      	movs	r3, #1
 8004b94:	e7b7      	b.n	8004b06 <_printf_float+0xee>
 8004b96:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004b9a:	d118      	bne.n	8004bce <_printf_float+0x1b6>
 8004b9c:	2900      	cmp	r1, #0
 8004b9e:	6863      	ldr	r3, [r4, #4]
 8004ba0:	dd0b      	ble.n	8004bba <_printf_float+0x1a2>
 8004ba2:	6121      	str	r1, [r4, #16]
 8004ba4:	b913      	cbnz	r3, 8004bac <_printf_float+0x194>
 8004ba6:	6822      	ldr	r2, [r4, #0]
 8004ba8:	07d0      	lsls	r0, r2, #31
 8004baa:	d502      	bpl.n	8004bb2 <_printf_float+0x19a>
 8004bac:	3301      	adds	r3, #1
 8004bae:	440b      	add	r3, r1
 8004bb0:	6123      	str	r3, [r4, #16]
 8004bb2:	f04f 0a00 	mov.w	sl, #0
 8004bb6:	65a1      	str	r1, [r4, #88]	; 0x58
 8004bb8:	e7df      	b.n	8004b7a <_printf_float+0x162>
 8004bba:	b913      	cbnz	r3, 8004bc2 <_printf_float+0x1aa>
 8004bbc:	6822      	ldr	r2, [r4, #0]
 8004bbe:	07d2      	lsls	r2, r2, #31
 8004bc0:	d501      	bpl.n	8004bc6 <_printf_float+0x1ae>
 8004bc2:	3302      	adds	r3, #2
 8004bc4:	e7f4      	b.n	8004bb0 <_printf_float+0x198>
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e7f2      	b.n	8004bb0 <_printf_float+0x198>
 8004bca:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004bce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004bd0:	4299      	cmp	r1, r3
 8004bd2:	db05      	blt.n	8004be0 <_printf_float+0x1c8>
 8004bd4:	6823      	ldr	r3, [r4, #0]
 8004bd6:	6121      	str	r1, [r4, #16]
 8004bd8:	07d8      	lsls	r0, r3, #31
 8004bda:	d5ea      	bpl.n	8004bb2 <_printf_float+0x19a>
 8004bdc:	1c4b      	adds	r3, r1, #1
 8004bde:	e7e7      	b.n	8004bb0 <_printf_float+0x198>
 8004be0:	2900      	cmp	r1, #0
 8004be2:	bfcc      	ite	gt
 8004be4:	2201      	movgt	r2, #1
 8004be6:	f1c1 0202 	rsble	r2, r1, #2
 8004bea:	4413      	add	r3, r2
 8004bec:	e7e0      	b.n	8004bb0 <_printf_float+0x198>
 8004bee:	6823      	ldr	r3, [r4, #0]
 8004bf0:	055a      	lsls	r2, r3, #21
 8004bf2:	d407      	bmi.n	8004c04 <_printf_float+0x1ec>
 8004bf4:	6923      	ldr	r3, [r4, #16]
 8004bf6:	4642      	mov	r2, r8
 8004bf8:	4631      	mov	r1, r6
 8004bfa:	4628      	mov	r0, r5
 8004bfc:	47b8      	blx	r7
 8004bfe:	3001      	adds	r0, #1
 8004c00:	d12b      	bne.n	8004c5a <_printf_float+0x242>
 8004c02:	e764      	b.n	8004ace <_printf_float+0xb6>
 8004c04:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004c08:	f240 80dd 	bls.w	8004dc6 <_printf_float+0x3ae>
 8004c0c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004c10:	2200      	movs	r2, #0
 8004c12:	2300      	movs	r3, #0
 8004c14:	f7fb fed2 	bl	80009bc <__aeabi_dcmpeq>
 8004c18:	2800      	cmp	r0, #0
 8004c1a:	d033      	beq.n	8004c84 <_printf_float+0x26c>
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	4631      	mov	r1, r6
 8004c20:	4628      	mov	r0, r5
 8004c22:	4a35      	ldr	r2, [pc, #212]	; (8004cf8 <_printf_float+0x2e0>)
 8004c24:	47b8      	blx	r7
 8004c26:	3001      	adds	r0, #1
 8004c28:	f43f af51 	beq.w	8004ace <_printf_float+0xb6>
 8004c2c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004c30:	429a      	cmp	r2, r3
 8004c32:	db02      	blt.n	8004c3a <_printf_float+0x222>
 8004c34:	6823      	ldr	r3, [r4, #0]
 8004c36:	07d8      	lsls	r0, r3, #31
 8004c38:	d50f      	bpl.n	8004c5a <_printf_float+0x242>
 8004c3a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c3e:	4631      	mov	r1, r6
 8004c40:	4628      	mov	r0, r5
 8004c42:	47b8      	blx	r7
 8004c44:	3001      	adds	r0, #1
 8004c46:	f43f af42 	beq.w	8004ace <_printf_float+0xb6>
 8004c4a:	f04f 0800 	mov.w	r8, #0
 8004c4e:	f104 091a 	add.w	r9, r4, #26
 8004c52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c54:	3b01      	subs	r3, #1
 8004c56:	4543      	cmp	r3, r8
 8004c58:	dc09      	bgt.n	8004c6e <_printf_float+0x256>
 8004c5a:	6823      	ldr	r3, [r4, #0]
 8004c5c:	079b      	lsls	r3, r3, #30
 8004c5e:	f100 8104 	bmi.w	8004e6a <_printf_float+0x452>
 8004c62:	68e0      	ldr	r0, [r4, #12]
 8004c64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004c66:	4298      	cmp	r0, r3
 8004c68:	bfb8      	it	lt
 8004c6a:	4618      	movlt	r0, r3
 8004c6c:	e731      	b.n	8004ad2 <_printf_float+0xba>
 8004c6e:	2301      	movs	r3, #1
 8004c70:	464a      	mov	r2, r9
 8004c72:	4631      	mov	r1, r6
 8004c74:	4628      	mov	r0, r5
 8004c76:	47b8      	blx	r7
 8004c78:	3001      	adds	r0, #1
 8004c7a:	f43f af28 	beq.w	8004ace <_printf_float+0xb6>
 8004c7e:	f108 0801 	add.w	r8, r8, #1
 8004c82:	e7e6      	b.n	8004c52 <_printf_float+0x23a>
 8004c84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	dc38      	bgt.n	8004cfc <_printf_float+0x2e4>
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	4631      	mov	r1, r6
 8004c8e:	4628      	mov	r0, r5
 8004c90:	4a19      	ldr	r2, [pc, #100]	; (8004cf8 <_printf_float+0x2e0>)
 8004c92:	47b8      	blx	r7
 8004c94:	3001      	adds	r0, #1
 8004c96:	f43f af1a 	beq.w	8004ace <_printf_float+0xb6>
 8004c9a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	d102      	bne.n	8004ca8 <_printf_float+0x290>
 8004ca2:	6823      	ldr	r3, [r4, #0]
 8004ca4:	07d9      	lsls	r1, r3, #31
 8004ca6:	d5d8      	bpl.n	8004c5a <_printf_float+0x242>
 8004ca8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004cac:	4631      	mov	r1, r6
 8004cae:	4628      	mov	r0, r5
 8004cb0:	47b8      	blx	r7
 8004cb2:	3001      	adds	r0, #1
 8004cb4:	f43f af0b 	beq.w	8004ace <_printf_float+0xb6>
 8004cb8:	f04f 0900 	mov.w	r9, #0
 8004cbc:	f104 0a1a 	add.w	sl, r4, #26
 8004cc0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004cc2:	425b      	negs	r3, r3
 8004cc4:	454b      	cmp	r3, r9
 8004cc6:	dc01      	bgt.n	8004ccc <_printf_float+0x2b4>
 8004cc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004cca:	e794      	b.n	8004bf6 <_printf_float+0x1de>
 8004ccc:	2301      	movs	r3, #1
 8004cce:	4652      	mov	r2, sl
 8004cd0:	4631      	mov	r1, r6
 8004cd2:	4628      	mov	r0, r5
 8004cd4:	47b8      	blx	r7
 8004cd6:	3001      	adds	r0, #1
 8004cd8:	f43f aef9 	beq.w	8004ace <_printf_float+0xb6>
 8004cdc:	f109 0901 	add.w	r9, r9, #1
 8004ce0:	e7ee      	b.n	8004cc0 <_printf_float+0x2a8>
 8004ce2:	bf00      	nop
 8004ce4:	7fefffff 	.word	0x7fefffff
 8004ce8:	08009916 	.word	0x08009916
 8004cec:	0800991a 	.word	0x0800991a
 8004cf0:	0800991e 	.word	0x0800991e
 8004cf4:	08009922 	.word	0x08009922
 8004cf8:	08009cb0 	.word	0x08009cb0
 8004cfc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004cfe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004d00:	429a      	cmp	r2, r3
 8004d02:	bfa8      	it	ge
 8004d04:	461a      	movge	r2, r3
 8004d06:	2a00      	cmp	r2, #0
 8004d08:	4691      	mov	r9, r2
 8004d0a:	dc37      	bgt.n	8004d7c <_printf_float+0x364>
 8004d0c:	f04f 0b00 	mov.w	fp, #0
 8004d10:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d14:	f104 021a 	add.w	r2, r4, #26
 8004d18:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004d1c:	ebaa 0309 	sub.w	r3, sl, r9
 8004d20:	455b      	cmp	r3, fp
 8004d22:	dc33      	bgt.n	8004d8c <_printf_float+0x374>
 8004d24:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	db3b      	blt.n	8004da4 <_printf_float+0x38c>
 8004d2c:	6823      	ldr	r3, [r4, #0]
 8004d2e:	07da      	lsls	r2, r3, #31
 8004d30:	d438      	bmi.n	8004da4 <_printf_float+0x38c>
 8004d32:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004d36:	eba2 0903 	sub.w	r9, r2, r3
 8004d3a:	eba2 020a 	sub.w	r2, r2, sl
 8004d3e:	4591      	cmp	r9, r2
 8004d40:	bfa8      	it	ge
 8004d42:	4691      	movge	r9, r2
 8004d44:	f1b9 0f00 	cmp.w	r9, #0
 8004d48:	dc34      	bgt.n	8004db4 <_printf_float+0x39c>
 8004d4a:	f04f 0800 	mov.w	r8, #0
 8004d4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d52:	f104 0a1a 	add.w	sl, r4, #26
 8004d56:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004d5a:	1a9b      	subs	r3, r3, r2
 8004d5c:	eba3 0309 	sub.w	r3, r3, r9
 8004d60:	4543      	cmp	r3, r8
 8004d62:	f77f af7a 	ble.w	8004c5a <_printf_float+0x242>
 8004d66:	2301      	movs	r3, #1
 8004d68:	4652      	mov	r2, sl
 8004d6a:	4631      	mov	r1, r6
 8004d6c:	4628      	mov	r0, r5
 8004d6e:	47b8      	blx	r7
 8004d70:	3001      	adds	r0, #1
 8004d72:	f43f aeac 	beq.w	8004ace <_printf_float+0xb6>
 8004d76:	f108 0801 	add.w	r8, r8, #1
 8004d7a:	e7ec      	b.n	8004d56 <_printf_float+0x33e>
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	4631      	mov	r1, r6
 8004d80:	4642      	mov	r2, r8
 8004d82:	4628      	mov	r0, r5
 8004d84:	47b8      	blx	r7
 8004d86:	3001      	adds	r0, #1
 8004d88:	d1c0      	bne.n	8004d0c <_printf_float+0x2f4>
 8004d8a:	e6a0      	b.n	8004ace <_printf_float+0xb6>
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	4631      	mov	r1, r6
 8004d90:	4628      	mov	r0, r5
 8004d92:	920b      	str	r2, [sp, #44]	; 0x2c
 8004d94:	47b8      	blx	r7
 8004d96:	3001      	adds	r0, #1
 8004d98:	f43f ae99 	beq.w	8004ace <_printf_float+0xb6>
 8004d9c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004d9e:	f10b 0b01 	add.w	fp, fp, #1
 8004da2:	e7b9      	b.n	8004d18 <_printf_float+0x300>
 8004da4:	4631      	mov	r1, r6
 8004da6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004daa:	4628      	mov	r0, r5
 8004dac:	47b8      	blx	r7
 8004dae:	3001      	adds	r0, #1
 8004db0:	d1bf      	bne.n	8004d32 <_printf_float+0x31a>
 8004db2:	e68c      	b.n	8004ace <_printf_float+0xb6>
 8004db4:	464b      	mov	r3, r9
 8004db6:	4631      	mov	r1, r6
 8004db8:	4628      	mov	r0, r5
 8004dba:	eb08 020a 	add.w	r2, r8, sl
 8004dbe:	47b8      	blx	r7
 8004dc0:	3001      	adds	r0, #1
 8004dc2:	d1c2      	bne.n	8004d4a <_printf_float+0x332>
 8004dc4:	e683      	b.n	8004ace <_printf_float+0xb6>
 8004dc6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004dc8:	2a01      	cmp	r2, #1
 8004dca:	dc01      	bgt.n	8004dd0 <_printf_float+0x3b8>
 8004dcc:	07db      	lsls	r3, r3, #31
 8004dce:	d539      	bpl.n	8004e44 <_printf_float+0x42c>
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	4642      	mov	r2, r8
 8004dd4:	4631      	mov	r1, r6
 8004dd6:	4628      	mov	r0, r5
 8004dd8:	47b8      	blx	r7
 8004dda:	3001      	adds	r0, #1
 8004ddc:	f43f ae77 	beq.w	8004ace <_printf_float+0xb6>
 8004de0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004de4:	4631      	mov	r1, r6
 8004de6:	4628      	mov	r0, r5
 8004de8:	47b8      	blx	r7
 8004dea:	3001      	adds	r0, #1
 8004dec:	f43f ae6f 	beq.w	8004ace <_printf_float+0xb6>
 8004df0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004df4:	2200      	movs	r2, #0
 8004df6:	2300      	movs	r3, #0
 8004df8:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8004dfc:	f7fb fdde 	bl	80009bc <__aeabi_dcmpeq>
 8004e00:	b9d8      	cbnz	r0, 8004e3a <_printf_float+0x422>
 8004e02:	f109 33ff 	add.w	r3, r9, #4294967295
 8004e06:	f108 0201 	add.w	r2, r8, #1
 8004e0a:	4631      	mov	r1, r6
 8004e0c:	4628      	mov	r0, r5
 8004e0e:	47b8      	blx	r7
 8004e10:	3001      	adds	r0, #1
 8004e12:	d10e      	bne.n	8004e32 <_printf_float+0x41a>
 8004e14:	e65b      	b.n	8004ace <_printf_float+0xb6>
 8004e16:	2301      	movs	r3, #1
 8004e18:	464a      	mov	r2, r9
 8004e1a:	4631      	mov	r1, r6
 8004e1c:	4628      	mov	r0, r5
 8004e1e:	47b8      	blx	r7
 8004e20:	3001      	adds	r0, #1
 8004e22:	f43f ae54 	beq.w	8004ace <_printf_float+0xb6>
 8004e26:	f108 0801 	add.w	r8, r8, #1
 8004e2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e2c:	3b01      	subs	r3, #1
 8004e2e:	4543      	cmp	r3, r8
 8004e30:	dcf1      	bgt.n	8004e16 <_printf_float+0x3fe>
 8004e32:	4653      	mov	r3, sl
 8004e34:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004e38:	e6de      	b.n	8004bf8 <_printf_float+0x1e0>
 8004e3a:	f04f 0800 	mov.w	r8, #0
 8004e3e:	f104 091a 	add.w	r9, r4, #26
 8004e42:	e7f2      	b.n	8004e2a <_printf_float+0x412>
 8004e44:	2301      	movs	r3, #1
 8004e46:	4642      	mov	r2, r8
 8004e48:	e7df      	b.n	8004e0a <_printf_float+0x3f2>
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	464a      	mov	r2, r9
 8004e4e:	4631      	mov	r1, r6
 8004e50:	4628      	mov	r0, r5
 8004e52:	47b8      	blx	r7
 8004e54:	3001      	adds	r0, #1
 8004e56:	f43f ae3a 	beq.w	8004ace <_printf_float+0xb6>
 8004e5a:	f108 0801 	add.w	r8, r8, #1
 8004e5e:	68e3      	ldr	r3, [r4, #12]
 8004e60:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004e62:	1a5b      	subs	r3, r3, r1
 8004e64:	4543      	cmp	r3, r8
 8004e66:	dcf0      	bgt.n	8004e4a <_printf_float+0x432>
 8004e68:	e6fb      	b.n	8004c62 <_printf_float+0x24a>
 8004e6a:	f04f 0800 	mov.w	r8, #0
 8004e6e:	f104 0919 	add.w	r9, r4, #25
 8004e72:	e7f4      	b.n	8004e5e <_printf_float+0x446>

08004e74 <_printf_common>:
 8004e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e78:	4616      	mov	r6, r2
 8004e7a:	4699      	mov	r9, r3
 8004e7c:	688a      	ldr	r2, [r1, #8]
 8004e7e:	690b      	ldr	r3, [r1, #16]
 8004e80:	4607      	mov	r7, r0
 8004e82:	4293      	cmp	r3, r2
 8004e84:	bfb8      	it	lt
 8004e86:	4613      	movlt	r3, r2
 8004e88:	6033      	str	r3, [r6, #0]
 8004e8a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e8e:	460c      	mov	r4, r1
 8004e90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e94:	b10a      	cbz	r2, 8004e9a <_printf_common+0x26>
 8004e96:	3301      	adds	r3, #1
 8004e98:	6033      	str	r3, [r6, #0]
 8004e9a:	6823      	ldr	r3, [r4, #0]
 8004e9c:	0699      	lsls	r1, r3, #26
 8004e9e:	bf42      	ittt	mi
 8004ea0:	6833      	ldrmi	r3, [r6, #0]
 8004ea2:	3302      	addmi	r3, #2
 8004ea4:	6033      	strmi	r3, [r6, #0]
 8004ea6:	6825      	ldr	r5, [r4, #0]
 8004ea8:	f015 0506 	ands.w	r5, r5, #6
 8004eac:	d106      	bne.n	8004ebc <_printf_common+0x48>
 8004eae:	f104 0a19 	add.w	sl, r4, #25
 8004eb2:	68e3      	ldr	r3, [r4, #12]
 8004eb4:	6832      	ldr	r2, [r6, #0]
 8004eb6:	1a9b      	subs	r3, r3, r2
 8004eb8:	42ab      	cmp	r3, r5
 8004eba:	dc2b      	bgt.n	8004f14 <_printf_common+0xa0>
 8004ebc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ec0:	1e13      	subs	r3, r2, #0
 8004ec2:	6822      	ldr	r2, [r4, #0]
 8004ec4:	bf18      	it	ne
 8004ec6:	2301      	movne	r3, #1
 8004ec8:	0692      	lsls	r2, r2, #26
 8004eca:	d430      	bmi.n	8004f2e <_printf_common+0xba>
 8004ecc:	4649      	mov	r1, r9
 8004ece:	4638      	mov	r0, r7
 8004ed0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ed4:	47c0      	blx	r8
 8004ed6:	3001      	adds	r0, #1
 8004ed8:	d023      	beq.n	8004f22 <_printf_common+0xae>
 8004eda:	6823      	ldr	r3, [r4, #0]
 8004edc:	6922      	ldr	r2, [r4, #16]
 8004ede:	f003 0306 	and.w	r3, r3, #6
 8004ee2:	2b04      	cmp	r3, #4
 8004ee4:	bf14      	ite	ne
 8004ee6:	2500      	movne	r5, #0
 8004ee8:	6833      	ldreq	r3, [r6, #0]
 8004eea:	f04f 0600 	mov.w	r6, #0
 8004eee:	bf08      	it	eq
 8004ef0:	68e5      	ldreq	r5, [r4, #12]
 8004ef2:	f104 041a 	add.w	r4, r4, #26
 8004ef6:	bf08      	it	eq
 8004ef8:	1aed      	subeq	r5, r5, r3
 8004efa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004efe:	bf08      	it	eq
 8004f00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f04:	4293      	cmp	r3, r2
 8004f06:	bfc4      	itt	gt
 8004f08:	1a9b      	subgt	r3, r3, r2
 8004f0a:	18ed      	addgt	r5, r5, r3
 8004f0c:	42b5      	cmp	r5, r6
 8004f0e:	d11a      	bne.n	8004f46 <_printf_common+0xd2>
 8004f10:	2000      	movs	r0, #0
 8004f12:	e008      	b.n	8004f26 <_printf_common+0xb2>
 8004f14:	2301      	movs	r3, #1
 8004f16:	4652      	mov	r2, sl
 8004f18:	4649      	mov	r1, r9
 8004f1a:	4638      	mov	r0, r7
 8004f1c:	47c0      	blx	r8
 8004f1e:	3001      	adds	r0, #1
 8004f20:	d103      	bne.n	8004f2a <_printf_common+0xb6>
 8004f22:	f04f 30ff 	mov.w	r0, #4294967295
 8004f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f2a:	3501      	adds	r5, #1
 8004f2c:	e7c1      	b.n	8004eb2 <_printf_common+0x3e>
 8004f2e:	2030      	movs	r0, #48	; 0x30
 8004f30:	18e1      	adds	r1, r4, r3
 8004f32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f36:	1c5a      	adds	r2, r3, #1
 8004f38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f3c:	4422      	add	r2, r4
 8004f3e:	3302      	adds	r3, #2
 8004f40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f44:	e7c2      	b.n	8004ecc <_printf_common+0x58>
 8004f46:	2301      	movs	r3, #1
 8004f48:	4622      	mov	r2, r4
 8004f4a:	4649      	mov	r1, r9
 8004f4c:	4638      	mov	r0, r7
 8004f4e:	47c0      	blx	r8
 8004f50:	3001      	adds	r0, #1
 8004f52:	d0e6      	beq.n	8004f22 <_printf_common+0xae>
 8004f54:	3601      	adds	r6, #1
 8004f56:	e7d9      	b.n	8004f0c <_printf_common+0x98>

08004f58 <_printf_i>:
 8004f58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f5c:	7e0f      	ldrb	r7, [r1, #24]
 8004f5e:	4691      	mov	r9, r2
 8004f60:	2f78      	cmp	r7, #120	; 0x78
 8004f62:	4680      	mov	r8, r0
 8004f64:	460c      	mov	r4, r1
 8004f66:	469a      	mov	sl, r3
 8004f68:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004f6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004f6e:	d807      	bhi.n	8004f80 <_printf_i+0x28>
 8004f70:	2f62      	cmp	r7, #98	; 0x62
 8004f72:	d80a      	bhi.n	8004f8a <_printf_i+0x32>
 8004f74:	2f00      	cmp	r7, #0
 8004f76:	f000 80d5 	beq.w	8005124 <_printf_i+0x1cc>
 8004f7a:	2f58      	cmp	r7, #88	; 0x58
 8004f7c:	f000 80c1 	beq.w	8005102 <_printf_i+0x1aa>
 8004f80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f88:	e03a      	b.n	8005000 <_printf_i+0xa8>
 8004f8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f8e:	2b15      	cmp	r3, #21
 8004f90:	d8f6      	bhi.n	8004f80 <_printf_i+0x28>
 8004f92:	a101      	add	r1, pc, #4	; (adr r1, 8004f98 <_printf_i+0x40>)
 8004f94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f98:	08004ff1 	.word	0x08004ff1
 8004f9c:	08005005 	.word	0x08005005
 8004fa0:	08004f81 	.word	0x08004f81
 8004fa4:	08004f81 	.word	0x08004f81
 8004fa8:	08004f81 	.word	0x08004f81
 8004fac:	08004f81 	.word	0x08004f81
 8004fb0:	08005005 	.word	0x08005005
 8004fb4:	08004f81 	.word	0x08004f81
 8004fb8:	08004f81 	.word	0x08004f81
 8004fbc:	08004f81 	.word	0x08004f81
 8004fc0:	08004f81 	.word	0x08004f81
 8004fc4:	0800510b 	.word	0x0800510b
 8004fc8:	08005031 	.word	0x08005031
 8004fcc:	080050c5 	.word	0x080050c5
 8004fd0:	08004f81 	.word	0x08004f81
 8004fd4:	08004f81 	.word	0x08004f81
 8004fd8:	0800512d 	.word	0x0800512d
 8004fdc:	08004f81 	.word	0x08004f81
 8004fe0:	08005031 	.word	0x08005031
 8004fe4:	08004f81 	.word	0x08004f81
 8004fe8:	08004f81 	.word	0x08004f81
 8004fec:	080050cd 	.word	0x080050cd
 8004ff0:	682b      	ldr	r3, [r5, #0]
 8004ff2:	1d1a      	adds	r2, r3, #4
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	602a      	str	r2, [r5, #0]
 8004ff8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ffc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005000:	2301      	movs	r3, #1
 8005002:	e0a0      	b.n	8005146 <_printf_i+0x1ee>
 8005004:	6820      	ldr	r0, [r4, #0]
 8005006:	682b      	ldr	r3, [r5, #0]
 8005008:	0607      	lsls	r7, r0, #24
 800500a:	f103 0104 	add.w	r1, r3, #4
 800500e:	6029      	str	r1, [r5, #0]
 8005010:	d501      	bpl.n	8005016 <_printf_i+0xbe>
 8005012:	681e      	ldr	r6, [r3, #0]
 8005014:	e003      	b.n	800501e <_printf_i+0xc6>
 8005016:	0646      	lsls	r6, r0, #25
 8005018:	d5fb      	bpl.n	8005012 <_printf_i+0xba>
 800501a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800501e:	2e00      	cmp	r6, #0
 8005020:	da03      	bge.n	800502a <_printf_i+0xd2>
 8005022:	232d      	movs	r3, #45	; 0x2d
 8005024:	4276      	negs	r6, r6
 8005026:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800502a:	230a      	movs	r3, #10
 800502c:	4859      	ldr	r0, [pc, #356]	; (8005194 <_printf_i+0x23c>)
 800502e:	e012      	b.n	8005056 <_printf_i+0xfe>
 8005030:	682b      	ldr	r3, [r5, #0]
 8005032:	6820      	ldr	r0, [r4, #0]
 8005034:	1d19      	adds	r1, r3, #4
 8005036:	6029      	str	r1, [r5, #0]
 8005038:	0605      	lsls	r5, r0, #24
 800503a:	d501      	bpl.n	8005040 <_printf_i+0xe8>
 800503c:	681e      	ldr	r6, [r3, #0]
 800503e:	e002      	b.n	8005046 <_printf_i+0xee>
 8005040:	0641      	lsls	r1, r0, #25
 8005042:	d5fb      	bpl.n	800503c <_printf_i+0xe4>
 8005044:	881e      	ldrh	r6, [r3, #0]
 8005046:	2f6f      	cmp	r7, #111	; 0x6f
 8005048:	bf0c      	ite	eq
 800504a:	2308      	moveq	r3, #8
 800504c:	230a      	movne	r3, #10
 800504e:	4851      	ldr	r0, [pc, #324]	; (8005194 <_printf_i+0x23c>)
 8005050:	2100      	movs	r1, #0
 8005052:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005056:	6865      	ldr	r5, [r4, #4]
 8005058:	2d00      	cmp	r5, #0
 800505a:	bfa8      	it	ge
 800505c:	6821      	ldrge	r1, [r4, #0]
 800505e:	60a5      	str	r5, [r4, #8]
 8005060:	bfa4      	itt	ge
 8005062:	f021 0104 	bicge.w	r1, r1, #4
 8005066:	6021      	strge	r1, [r4, #0]
 8005068:	b90e      	cbnz	r6, 800506e <_printf_i+0x116>
 800506a:	2d00      	cmp	r5, #0
 800506c:	d04b      	beq.n	8005106 <_printf_i+0x1ae>
 800506e:	4615      	mov	r5, r2
 8005070:	fbb6 f1f3 	udiv	r1, r6, r3
 8005074:	fb03 6711 	mls	r7, r3, r1, r6
 8005078:	5dc7      	ldrb	r7, [r0, r7]
 800507a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800507e:	4637      	mov	r7, r6
 8005080:	42bb      	cmp	r3, r7
 8005082:	460e      	mov	r6, r1
 8005084:	d9f4      	bls.n	8005070 <_printf_i+0x118>
 8005086:	2b08      	cmp	r3, #8
 8005088:	d10b      	bne.n	80050a2 <_printf_i+0x14a>
 800508a:	6823      	ldr	r3, [r4, #0]
 800508c:	07de      	lsls	r6, r3, #31
 800508e:	d508      	bpl.n	80050a2 <_printf_i+0x14a>
 8005090:	6923      	ldr	r3, [r4, #16]
 8005092:	6861      	ldr	r1, [r4, #4]
 8005094:	4299      	cmp	r1, r3
 8005096:	bfde      	ittt	le
 8005098:	2330      	movle	r3, #48	; 0x30
 800509a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800509e:	f105 35ff 	addle.w	r5, r5, #4294967295
 80050a2:	1b52      	subs	r2, r2, r5
 80050a4:	6122      	str	r2, [r4, #16]
 80050a6:	464b      	mov	r3, r9
 80050a8:	4621      	mov	r1, r4
 80050aa:	4640      	mov	r0, r8
 80050ac:	f8cd a000 	str.w	sl, [sp]
 80050b0:	aa03      	add	r2, sp, #12
 80050b2:	f7ff fedf 	bl	8004e74 <_printf_common>
 80050b6:	3001      	adds	r0, #1
 80050b8:	d14a      	bne.n	8005150 <_printf_i+0x1f8>
 80050ba:	f04f 30ff 	mov.w	r0, #4294967295
 80050be:	b004      	add	sp, #16
 80050c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050c4:	6823      	ldr	r3, [r4, #0]
 80050c6:	f043 0320 	orr.w	r3, r3, #32
 80050ca:	6023      	str	r3, [r4, #0]
 80050cc:	2778      	movs	r7, #120	; 0x78
 80050ce:	4832      	ldr	r0, [pc, #200]	; (8005198 <_printf_i+0x240>)
 80050d0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80050d4:	6823      	ldr	r3, [r4, #0]
 80050d6:	6829      	ldr	r1, [r5, #0]
 80050d8:	061f      	lsls	r7, r3, #24
 80050da:	f851 6b04 	ldr.w	r6, [r1], #4
 80050de:	d402      	bmi.n	80050e6 <_printf_i+0x18e>
 80050e0:	065f      	lsls	r7, r3, #25
 80050e2:	bf48      	it	mi
 80050e4:	b2b6      	uxthmi	r6, r6
 80050e6:	07df      	lsls	r7, r3, #31
 80050e8:	bf48      	it	mi
 80050ea:	f043 0320 	orrmi.w	r3, r3, #32
 80050ee:	6029      	str	r1, [r5, #0]
 80050f0:	bf48      	it	mi
 80050f2:	6023      	strmi	r3, [r4, #0]
 80050f4:	b91e      	cbnz	r6, 80050fe <_printf_i+0x1a6>
 80050f6:	6823      	ldr	r3, [r4, #0]
 80050f8:	f023 0320 	bic.w	r3, r3, #32
 80050fc:	6023      	str	r3, [r4, #0]
 80050fe:	2310      	movs	r3, #16
 8005100:	e7a6      	b.n	8005050 <_printf_i+0xf8>
 8005102:	4824      	ldr	r0, [pc, #144]	; (8005194 <_printf_i+0x23c>)
 8005104:	e7e4      	b.n	80050d0 <_printf_i+0x178>
 8005106:	4615      	mov	r5, r2
 8005108:	e7bd      	b.n	8005086 <_printf_i+0x12e>
 800510a:	682b      	ldr	r3, [r5, #0]
 800510c:	6826      	ldr	r6, [r4, #0]
 800510e:	1d18      	adds	r0, r3, #4
 8005110:	6961      	ldr	r1, [r4, #20]
 8005112:	6028      	str	r0, [r5, #0]
 8005114:	0635      	lsls	r5, r6, #24
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	d501      	bpl.n	800511e <_printf_i+0x1c6>
 800511a:	6019      	str	r1, [r3, #0]
 800511c:	e002      	b.n	8005124 <_printf_i+0x1cc>
 800511e:	0670      	lsls	r0, r6, #25
 8005120:	d5fb      	bpl.n	800511a <_printf_i+0x1c2>
 8005122:	8019      	strh	r1, [r3, #0]
 8005124:	2300      	movs	r3, #0
 8005126:	4615      	mov	r5, r2
 8005128:	6123      	str	r3, [r4, #16]
 800512a:	e7bc      	b.n	80050a6 <_printf_i+0x14e>
 800512c:	682b      	ldr	r3, [r5, #0]
 800512e:	2100      	movs	r1, #0
 8005130:	1d1a      	adds	r2, r3, #4
 8005132:	602a      	str	r2, [r5, #0]
 8005134:	681d      	ldr	r5, [r3, #0]
 8005136:	6862      	ldr	r2, [r4, #4]
 8005138:	4628      	mov	r0, r5
 800513a:	f000 fc0e 	bl	800595a <memchr>
 800513e:	b108      	cbz	r0, 8005144 <_printf_i+0x1ec>
 8005140:	1b40      	subs	r0, r0, r5
 8005142:	6060      	str	r0, [r4, #4]
 8005144:	6863      	ldr	r3, [r4, #4]
 8005146:	6123      	str	r3, [r4, #16]
 8005148:	2300      	movs	r3, #0
 800514a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800514e:	e7aa      	b.n	80050a6 <_printf_i+0x14e>
 8005150:	462a      	mov	r2, r5
 8005152:	4649      	mov	r1, r9
 8005154:	4640      	mov	r0, r8
 8005156:	6923      	ldr	r3, [r4, #16]
 8005158:	47d0      	blx	sl
 800515a:	3001      	adds	r0, #1
 800515c:	d0ad      	beq.n	80050ba <_printf_i+0x162>
 800515e:	6823      	ldr	r3, [r4, #0]
 8005160:	079b      	lsls	r3, r3, #30
 8005162:	d413      	bmi.n	800518c <_printf_i+0x234>
 8005164:	68e0      	ldr	r0, [r4, #12]
 8005166:	9b03      	ldr	r3, [sp, #12]
 8005168:	4298      	cmp	r0, r3
 800516a:	bfb8      	it	lt
 800516c:	4618      	movlt	r0, r3
 800516e:	e7a6      	b.n	80050be <_printf_i+0x166>
 8005170:	2301      	movs	r3, #1
 8005172:	4632      	mov	r2, r6
 8005174:	4649      	mov	r1, r9
 8005176:	4640      	mov	r0, r8
 8005178:	47d0      	blx	sl
 800517a:	3001      	adds	r0, #1
 800517c:	d09d      	beq.n	80050ba <_printf_i+0x162>
 800517e:	3501      	adds	r5, #1
 8005180:	68e3      	ldr	r3, [r4, #12]
 8005182:	9903      	ldr	r1, [sp, #12]
 8005184:	1a5b      	subs	r3, r3, r1
 8005186:	42ab      	cmp	r3, r5
 8005188:	dcf2      	bgt.n	8005170 <_printf_i+0x218>
 800518a:	e7eb      	b.n	8005164 <_printf_i+0x20c>
 800518c:	2500      	movs	r5, #0
 800518e:	f104 0619 	add.w	r6, r4, #25
 8005192:	e7f5      	b.n	8005180 <_printf_i+0x228>
 8005194:	08009926 	.word	0x08009926
 8005198:	08009937 	.word	0x08009937

0800519c <_scanf_float>:
 800519c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051a0:	b087      	sub	sp, #28
 80051a2:	9303      	str	r3, [sp, #12]
 80051a4:	688b      	ldr	r3, [r1, #8]
 80051a6:	4617      	mov	r7, r2
 80051a8:	1e5a      	subs	r2, r3, #1
 80051aa:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80051ae:	bf85      	ittet	hi
 80051b0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80051b4:	195b      	addhi	r3, r3, r5
 80051b6:	2300      	movls	r3, #0
 80051b8:	9302      	strhi	r3, [sp, #8]
 80051ba:	bf88      	it	hi
 80051bc:	f240 135d 	movwhi	r3, #349	; 0x15d
 80051c0:	468b      	mov	fp, r1
 80051c2:	f04f 0500 	mov.w	r5, #0
 80051c6:	bf8c      	ite	hi
 80051c8:	608b      	strhi	r3, [r1, #8]
 80051ca:	9302      	strls	r3, [sp, #8]
 80051cc:	680b      	ldr	r3, [r1, #0]
 80051ce:	4680      	mov	r8, r0
 80051d0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80051d4:	f84b 3b1c 	str.w	r3, [fp], #28
 80051d8:	460c      	mov	r4, r1
 80051da:	465e      	mov	r6, fp
 80051dc:	46aa      	mov	sl, r5
 80051de:	46a9      	mov	r9, r5
 80051e0:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80051e4:	9501      	str	r5, [sp, #4]
 80051e6:	68a2      	ldr	r2, [r4, #8]
 80051e8:	b152      	cbz	r2, 8005200 <_scanf_float+0x64>
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	781b      	ldrb	r3, [r3, #0]
 80051ee:	2b4e      	cmp	r3, #78	; 0x4e
 80051f0:	d864      	bhi.n	80052bc <_scanf_float+0x120>
 80051f2:	2b40      	cmp	r3, #64	; 0x40
 80051f4:	d83c      	bhi.n	8005270 <_scanf_float+0xd4>
 80051f6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80051fa:	b2c8      	uxtb	r0, r1
 80051fc:	280e      	cmp	r0, #14
 80051fe:	d93a      	bls.n	8005276 <_scanf_float+0xda>
 8005200:	f1b9 0f00 	cmp.w	r9, #0
 8005204:	d003      	beq.n	800520e <_scanf_float+0x72>
 8005206:	6823      	ldr	r3, [r4, #0]
 8005208:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800520c:	6023      	str	r3, [r4, #0]
 800520e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005212:	f1ba 0f01 	cmp.w	sl, #1
 8005216:	f200 8113 	bhi.w	8005440 <_scanf_float+0x2a4>
 800521a:	455e      	cmp	r6, fp
 800521c:	f200 8105 	bhi.w	800542a <_scanf_float+0x28e>
 8005220:	2501      	movs	r5, #1
 8005222:	4628      	mov	r0, r5
 8005224:	b007      	add	sp, #28
 8005226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800522a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800522e:	2a0d      	cmp	r2, #13
 8005230:	d8e6      	bhi.n	8005200 <_scanf_float+0x64>
 8005232:	a101      	add	r1, pc, #4	; (adr r1, 8005238 <_scanf_float+0x9c>)
 8005234:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005238:	08005377 	.word	0x08005377
 800523c:	08005201 	.word	0x08005201
 8005240:	08005201 	.word	0x08005201
 8005244:	08005201 	.word	0x08005201
 8005248:	080053d7 	.word	0x080053d7
 800524c:	080053af 	.word	0x080053af
 8005250:	08005201 	.word	0x08005201
 8005254:	08005201 	.word	0x08005201
 8005258:	08005385 	.word	0x08005385
 800525c:	08005201 	.word	0x08005201
 8005260:	08005201 	.word	0x08005201
 8005264:	08005201 	.word	0x08005201
 8005268:	08005201 	.word	0x08005201
 800526c:	0800533d 	.word	0x0800533d
 8005270:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005274:	e7db      	b.n	800522e <_scanf_float+0x92>
 8005276:	290e      	cmp	r1, #14
 8005278:	d8c2      	bhi.n	8005200 <_scanf_float+0x64>
 800527a:	a001      	add	r0, pc, #4	; (adr r0, 8005280 <_scanf_float+0xe4>)
 800527c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005280:	0800532f 	.word	0x0800532f
 8005284:	08005201 	.word	0x08005201
 8005288:	0800532f 	.word	0x0800532f
 800528c:	080053c3 	.word	0x080053c3
 8005290:	08005201 	.word	0x08005201
 8005294:	080052dd 	.word	0x080052dd
 8005298:	08005319 	.word	0x08005319
 800529c:	08005319 	.word	0x08005319
 80052a0:	08005319 	.word	0x08005319
 80052a4:	08005319 	.word	0x08005319
 80052a8:	08005319 	.word	0x08005319
 80052ac:	08005319 	.word	0x08005319
 80052b0:	08005319 	.word	0x08005319
 80052b4:	08005319 	.word	0x08005319
 80052b8:	08005319 	.word	0x08005319
 80052bc:	2b6e      	cmp	r3, #110	; 0x6e
 80052be:	d809      	bhi.n	80052d4 <_scanf_float+0x138>
 80052c0:	2b60      	cmp	r3, #96	; 0x60
 80052c2:	d8b2      	bhi.n	800522a <_scanf_float+0x8e>
 80052c4:	2b54      	cmp	r3, #84	; 0x54
 80052c6:	d077      	beq.n	80053b8 <_scanf_float+0x21c>
 80052c8:	2b59      	cmp	r3, #89	; 0x59
 80052ca:	d199      	bne.n	8005200 <_scanf_float+0x64>
 80052cc:	2d07      	cmp	r5, #7
 80052ce:	d197      	bne.n	8005200 <_scanf_float+0x64>
 80052d0:	2508      	movs	r5, #8
 80052d2:	e029      	b.n	8005328 <_scanf_float+0x18c>
 80052d4:	2b74      	cmp	r3, #116	; 0x74
 80052d6:	d06f      	beq.n	80053b8 <_scanf_float+0x21c>
 80052d8:	2b79      	cmp	r3, #121	; 0x79
 80052da:	e7f6      	b.n	80052ca <_scanf_float+0x12e>
 80052dc:	6821      	ldr	r1, [r4, #0]
 80052de:	05c8      	lsls	r0, r1, #23
 80052e0:	d51a      	bpl.n	8005318 <_scanf_float+0x17c>
 80052e2:	9b02      	ldr	r3, [sp, #8]
 80052e4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80052e8:	6021      	str	r1, [r4, #0]
 80052ea:	f109 0901 	add.w	r9, r9, #1
 80052ee:	b11b      	cbz	r3, 80052f8 <_scanf_float+0x15c>
 80052f0:	3b01      	subs	r3, #1
 80052f2:	3201      	adds	r2, #1
 80052f4:	9302      	str	r3, [sp, #8]
 80052f6:	60a2      	str	r2, [r4, #8]
 80052f8:	68a3      	ldr	r3, [r4, #8]
 80052fa:	3b01      	subs	r3, #1
 80052fc:	60a3      	str	r3, [r4, #8]
 80052fe:	6923      	ldr	r3, [r4, #16]
 8005300:	3301      	adds	r3, #1
 8005302:	6123      	str	r3, [r4, #16]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	3b01      	subs	r3, #1
 8005308:	2b00      	cmp	r3, #0
 800530a:	607b      	str	r3, [r7, #4]
 800530c:	f340 8084 	ble.w	8005418 <_scanf_float+0x27c>
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	3301      	adds	r3, #1
 8005314:	603b      	str	r3, [r7, #0]
 8005316:	e766      	b.n	80051e6 <_scanf_float+0x4a>
 8005318:	eb1a 0f05 	cmn.w	sl, r5
 800531c:	f47f af70 	bne.w	8005200 <_scanf_float+0x64>
 8005320:	6822      	ldr	r2, [r4, #0]
 8005322:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005326:	6022      	str	r2, [r4, #0]
 8005328:	f806 3b01 	strb.w	r3, [r6], #1
 800532c:	e7e4      	b.n	80052f8 <_scanf_float+0x15c>
 800532e:	6822      	ldr	r2, [r4, #0]
 8005330:	0610      	lsls	r0, r2, #24
 8005332:	f57f af65 	bpl.w	8005200 <_scanf_float+0x64>
 8005336:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800533a:	e7f4      	b.n	8005326 <_scanf_float+0x18a>
 800533c:	f1ba 0f00 	cmp.w	sl, #0
 8005340:	d10e      	bne.n	8005360 <_scanf_float+0x1c4>
 8005342:	f1b9 0f00 	cmp.w	r9, #0
 8005346:	d10e      	bne.n	8005366 <_scanf_float+0x1ca>
 8005348:	6822      	ldr	r2, [r4, #0]
 800534a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800534e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005352:	d108      	bne.n	8005366 <_scanf_float+0x1ca>
 8005354:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005358:	f04f 0a01 	mov.w	sl, #1
 800535c:	6022      	str	r2, [r4, #0]
 800535e:	e7e3      	b.n	8005328 <_scanf_float+0x18c>
 8005360:	f1ba 0f02 	cmp.w	sl, #2
 8005364:	d055      	beq.n	8005412 <_scanf_float+0x276>
 8005366:	2d01      	cmp	r5, #1
 8005368:	d002      	beq.n	8005370 <_scanf_float+0x1d4>
 800536a:	2d04      	cmp	r5, #4
 800536c:	f47f af48 	bne.w	8005200 <_scanf_float+0x64>
 8005370:	3501      	adds	r5, #1
 8005372:	b2ed      	uxtb	r5, r5
 8005374:	e7d8      	b.n	8005328 <_scanf_float+0x18c>
 8005376:	f1ba 0f01 	cmp.w	sl, #1
 800537a:	f47f af41 	bne.w	8005200 <_scanf_float+0x64>
 800537e:	f04f 0a02 	mov.w	sl, #2
 8005382:	e7d1      	b.n	8005328 <_scanf_float+0x18c>
 8005384:	b97d      	cbnz	r5, 80053a6 <_scanf_float+0x20a>
 8005386:	f1b9 0f00 	cmp.w	r9, #0
 800538a:	f47f af3c 	bne.w	8005206 <_scanf_float+0x6a>
 800538e:	6822      	ldr	r2, [r4, #0]
 8005390:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005394:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005398:	f47f af39 	bne.w	800520e <_scanf_float+0x72>
 800539c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80053a0:	2501      	movs	r5, #1
 80053a2:	6022      	str	r2, [r4, #0]
 80053a4:	e7c0      	b.n	8005328 <_scanf_float+0x18c>
 80053a6:	2d03      	cmp	r5, #3
 80053a8:	d0e2      	beq.n	8005370 <_scanf_float+0x1d4>
 80053aa:	2d05      	cmp	r5, #5
 80053ac:	e7de      	b.n	800536c <_scanf_float+0x1d0>
 80053ae:	2d02      	cmp	r5, #2
 80053b0:	f47f af26 	bne.w	8005200 <_scanf_float+0x64>
 80053b4:	2503      	movs	r5, #3
 80053b6:	e7b7      	b.n	8005328 <_scanf_float+0x18c>
 80053b8:	2d06      	cmp	r5, #6
 80053ba:	f47f af21 	bne.w	8005200 <_scanf_float+0x64>
 80053be:	2507      	movs	r5, #7
 80053c0:	e7b2      	b.n	8005328 <_scanf_float+0x18c>
 80053c2:	6822      	ldr	r2, [r4, #0]
 80053c4:	0591      	lsls	r1, r2, #22
 80053c6:	f57f af1b 	bpl.w	8005200 <_scanf_float+0x64>
 80053ca:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80053ce:	6022      	str	r2, [r4, #0]
 80053d0:	f8cd 9004 	str.w	r9, [sp, #4]
 80053d4:	e7a8      	b.n	8005328 <_scanf_float+0x18c>
 80053d6:	6822      	ldr	r2, [r4, #0]
 80053d8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80053dc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80053e0:	d006      	beq.n	80053f0 <_scanf_float+0x254>
 80053e2:	0550      	lsls	r0, r2, #21
 80053e4:	f57f af0c 	bpl.w	8005200 <_scanf_float+0x64>
 80053e8:	f1b9 0f00 	cmp.w	r9, #0
 80053ec:	f43f af0f 	beq.w	800520e <_scanf_float+0x72>
 80053f0:	0591      	lsls	r1, r2, #22
 80053f2:	bf58      	it	pl
 80053f4:	9901      	ldrpl	r1, [sp, #4]
 80053f6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80053fa:	bf58      	it	pl
 80053fc:	eba9 0101 	subpl.w	r1, r9, r1
 8005400:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005404:	f04f 0900 	mov.w	r9, #0
 8005408:	bf58      	it	pl
 800540a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800540e:	6022      	str	r2, [r4, #0]
 8005410:	e78a      	b.n	8005328 <_scanf_float+0x18c>
 8005412:	f04f 0a03 	mov.w	sl, #3
 8005416:	e787      	b.n	8005328 <_scanf_float+0x18c>
 8005418:	4639      	mov	r1, r7
 800541a:	4640      	mov	r0, r8
 800541c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005420:	4798      	blx	r3
 8005422:	2800      	cmp	r0, #0
 8005424:	f43f aedf 	beq.w	80051e6 <_scanf_float+0x4a>
 8005428:	e6ea      	b.n	8005200 <_scanf_float+0x64>
 800542a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800542e:	463a      	mov	r2, r7
 8005430:	4640      	mov	r0, r8
 8005432:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005436:	4798      	blx	r3
 8005438:	6923      	ldr	r3, [r4, #16]
 800543a:	3b01      	subs	r3, #1
 800543c:	6123      	str	r3, [r4, #16]
 800543e:	e6ec      	b.n	800521a <_scanf_float+0x7e>
 8005440:	1e6b      	subs	r3, r5, #1
 8005442:	2b06      	cmp	r3, #6
 8005444:	d825      	bhi.n	8005492 <_scanf_float+0x2f6>
 8005446:	2d02      	cmp	r5, #2
 8005448:	d836      	bhi.n	80054b8 <_scanf_float+0x31c>
 800544a:	455e      	cmp	r6, fp
 800544c:	f67f aee8 	bls.w	8005220 <_scanf_float+0x84>
 8005450:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005454:	463a      	mov	r2, r7
 8005456:	4640      	mov	r0, r8
 8005458:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800545c:	4798      	blx	r3
 800545e:	6923      	ldr	r3, [r4, #16]
 8005460:	3b01      	subs	r3, #1
 8005462:	6123      	str	r3, [r4, #16]
 8005464:	e7f1      	b.n	800544a <_scanf_float+0x2ae>
 8005466:	9802      	ldr	r0, [sp, #8]
 8005468:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800546c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005470:	463a      	mov	r2, r7
 8005472:	9002      	str	r0, [sp, #8]
 8005474:	4640      	mov	r0, r8
 8005476:	4798      	blx	r3
 8005478:	6923      	ldr	r3, [r4, #16]
 800547a:	3b01      	subs	r3, #1
 800547c:	6123      	str	r3, [r4, #16]
 800547e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005482:	fa5f fa8a 	uxtb.w	sl, sl
 8005486:	f1ba 0f02 	cmp.w	sl, #2
 800548a:	d1ec      	bne.n	8005466 <_scanf_float+0x2ca>
 800548c:	3d03      	subs	r5, #3
 800548e:	b2ed      	uxtb	r5, r5
 8005490:	1b76      	subs	r6, r6, r5
 8005492:	6823      	ldr	r3, [r4, #0]
 8005494:	05da      	lsls	r2, r3, #23
 8005496:	d52f      	bpl.n	80054f8 <_scanf_float+0x35c>
 8005498:	055b      	lsls	r3, r3, #21
 800549a:	d510      	bpl.n	80054be <_scanf_float+0x322>
 800549c:	455e      	cmp	r6, fp
 800549e:	f67f aebf 	bls.w	8005220 <_scanf_float+0x84>
 80054a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80054a6:	463a      	mov	r2, r7
 80054a8:	4640      	mov	r0, r8
 80054aa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80054ae:	4798      	blx	r3
 80054b0:	6923      	ldr	r3, [r4, #16]
 80054b2:	3b01      	subs	r3, #1
 80054b4:	6123      	str	r3, [r4, #16]
 80054b6:	e7f1      	b.n	800549c <_scanf_float+0x300>
 80054b8:	46aa      	mov	sl, r5
 80054ba:	9602      	str	r6, [sp, #8]
 80054bc:	e7df      	b.n	800547e <_scanf_float+0x2e2>
 80054be:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80054c2:	6923      	ldr	r3, [r4, #16]
 80054c4:	2965      	cmp	r1, #101	; 0x65
 80054c6:	f103 33ff 	add.w	r3, r3, #4294967295
 80054ca:	f106 35ff 	add.w	r5, r6, #4294967295
 80054ce:	6123      	str	r3, [r4, #16]
 80054d0:	d00c      	beq.n	80054ec <_scanf_float+0x350>
 80054d2:	2945      	cmp	r1, #69	; 0x45
 80054d4:	d00a      	beq.n	80054ec <_scanf_float+0x350>
 80054d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80054da:	463a      	mov	r2, r7
 80054dc:	4640      	mov	r0, r8
 80054de:	4798      	blx	r3
 80054e0:	6923      	ldr	r3, [r4, #16]
 80054e2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80054e6:	3b01      	subs	r3, #1
 80054e8:	1eb5      	subs	r5, r6, #2
 80054ea:	6123      	str	r3, [r4, #16]
 80054ec:	463a      	mov	r2, r7
 80054ee:	4640      	mov	r0, r8
 80054f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80054f4:	4798      	blx	r3
 80054f6:	462e      	mov	r6, r5
 80054f8:	6825      	ldr	r5, [r4, #0]
 80054fa:	f015 0510 	ands.w	r5, r5, #16
 80054fe:	d155      	bne.n	80055ac <_scanf_float+0x410>
 8005500:	7035      	strb	r5, [r6, #0]
 8005502:	6823      	ldr	r3, [r4, #0]
 8005504:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005508:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800550c:	d11d      	bne.n	800554a <_scanf_float+0x3ae>
 800550e:	9b01      	ldr	r3, [sp, #4]
 8005510:	454b      	cmp	r3, r9
 8005512:	eba3 0209 	sub.w	r2, r3, r9
 8005516:	d125      	bne.n	8005564 <_scanf_float+0x3c8>
 8005518:	2200      	movs	r2, #0
 800551a:	4659      	mov	r1, fp
 800551c:	4640      	mov	r0, r8
 800551e:	f002 fc4f 	bl	8007dc0 <_strtod_r>
 8005522:	9b03      	ldr	r3, [sp, #12]
 8005524:	f8d4 c000 	ldr.w	ip, [r4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f01c 0f02 	tst.w	ip, #2
 800552e:	4606      	mov	r6, r0
 8005530:	460f      	mov	r7, r1
 8005532:	f103 0204 	add.w	r2, r3, #4
 8005536:	d020      	beq.n	800557a <_scanf_float+0x3de>
 8005538:	9903      	ldr	r1, [sp, #12]
 800553a:	600a      	str	r2, [r1, #0]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	e9c3 6700 	strd	r6, r7, [r3]
 8005542:	68e3      	ldr	r3, [r4, #12]
 8005544:	3301      	adds	r3, #1
 8005546:	60e3      	str	r3, [r4, #12]
 8005548:	e66b      	b.n	8005222 <_scanf_float+0x86>
 800554a:	9b04      	ldr	r3, [sp, #16]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d0e3      	beq.n	8005518 <_scanf_float+0x37c>
 8005550:	9905      	ldr	r1, [sp, #20]
 8005552:	230a      	movs	r3, #10
 8005554:	462a      	mov	r2, r5
 8005556:	4640      	mov	r0, r8
 8005558:	3101      	adds	r1, #1
 800555a:	f002 fcb5 	bl	8007ec8 <_strtol_r>
 800555e:	9b04      	ldr	r3, [sp, #16]
 8005560:	9e05      	ldr	r6, [sp, #20]
 8005562:	1ac2      	subs	r2, r0, r3
 8005564:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005568:	429e      	cmp	r6, r3
 800556a:	bf28      	it	cs
 800556c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005570:	4630      	mov	r0, r6
 8005572:	490f      	ldr	r1, [pc, #60]	; (80055b0 <_scanf_float+0x414>)
 8005574:	f000 f8e2 	bl	800573c <siprintf>
 8005578:	e7ce      	b.n	8005518 <_scanf_float+0x37c>
 800557a:	f01c 0f04 	tst.w	ip, #4
 800557e:	d1db      	bne.n	8005538 <_scanf_float+0x39c>
 8005580:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8005584:	f8cc 2000 	str.w	r2, [ip]
 8005588:	f8d3 8000 	ldr.w	r8, [r3]
 800558c:	4602      	mov	r2, r0
 800558e:	460b      	mov	r3, r1
 8005590:	f7fb fa46 	bl	8000a20 <__aeabi_dcmpun>
 8005594:	b128      	cbz	r0, 80055a2 <_scanf_float+0x406>
 8005596:	4807      	ldr	r0, [pc, #28]	; (80055b4 <_scanf_float+0x418>)
 8005598:	f000 f9ee 	bl	8005978 <nanf>
 800559c:	f8c8 0000 	str.w	r0, [r8]
 80055a0:	e7cf      	b.n	8005542 <_scanf_float+0x3a6>
 80055a2:	4630      	mov	r0, r6
 80055a4:	4639      	mov	r1, r7
 80055a6:	f7fb fa99 	bl	8000adc <__aeabi_d2f>
 80055aa:	e7f7      	b.n	800559c <_scanf_float+0x400>
 80055ac:	2500      	movs	r5, #0
 80055ae:	e638      	b.n	8005222 <_scanf_float+0x86>
 80055b0:	08009948 	.word	0x08009948
 80055b4:	08009cf8 	.word	0x08009cf8

080055b8 <std>:
 80055b8:	2300      	movs	r3, #0
 80055ba:	b510      	push	{r4, lr}
 80055bc:	4604      	mov	r4, r0
 80055be:	e9c0 3300 	strd	r3, r3, [r0]
 80055c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80055c6:	6083      	str	r3, [r0, #8]
 80055c8:	8181      	strh	r1, [r0, #12]
 80055ca:	6643      	str	r3, [r0, #100]	; 0x64
 80055cc:	81c2      	strh	r2, [r0, #14]
 80055ce:	6183      	str	r3, [r0, #24]
 80055d0:	4619      	mov	r1, r3
 80055d2:	2208      	movs	r2, #8
 80055d4:	305c      	adds	r0, #92	; 0x5c
 80055d6:	f000 f940 	bl	800585a <memset>
 80055da:	4b0d      	ldr	r3, [pc, #52]	; (8005610 <std+0x58>)
 80055dc:	6224      	str	r4, [r4, #32]
 80055de:	6263      	str	r3, [r4, #36]	; 0x24
 80055e0:	4b0c      	ldr	r3, [pc, #48]	; (8005614 <std+0x5c>)
 80055e2:	62a3      	str	r3, [r4, #40]	; 0x28
 80055e4:	4b0c      	ldr	r3, [pc, #48]	; (8005618 <std+0x60>)
 80055e6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80055e8:	4b0c      	ldr	r3, [pc, #48]	; (800561c <std+0x64>)
 80055ea:	6323      	str	r3, [r4, #48]	; 0x30
 80055ec:	4b0c      	ldr	r3, [pc, #48]	; (8005620 <std+0x68>)
 80055ee:	429c      	cmp	r4, r3
 80055f0:	d006      	beq.n	8005600 <std+0x48>
 80055f2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80055f6:	4294      	cmp	r4, r2
 80055f8:	d002      	beq.n	8005600 <std+0x48>
 80055fa:	33d0      	adds	r3, #208	; 0xd0
 80055fc:	429c      	cmp	r4, r3
 80055fe:	d105      	bne.n	800560c <std+0x54>
 8005600:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005608:	f000 b9a4 	b.w	8005954 <__retarget_lock_init_recursive>
 800560c:	bd10      	pop	{r4, pc}
 800560e:	bf00      	nop
 8005610:	080057d1 	.word	0x080057d1
 8005614:	080057f7 	.word	0x080057f7
 8005618:	0800582f 	.word	0x0800582f
 800561c:	08005853 	.word	0x08005853
 8005620:	20000370 	.word	0x20000370

08005624 <stdio_exit_handler>:
 8005624:	4a02      	ldr	r2, [pc, #8]	; (8005630 <stdio_exit_handler+0xc>)
 8005626:	4903      	ldr	r1, [pc, #12]	; (8005634 <stdio_exit_handler+0x10>)
 8005628:	4803      	ldr	r0, [pc, #12]	; (8005638 <stdio_exit_handler+0x14>)
 800562a:	f000 b869 	b.w	8005700 <_fwalk_sglue>
 800562e:	bf00      	nop
 8005630:	20000010 	.word	0x20000010
 8005634:	080088bd 	.word	0x080088bd
 8005638:	2000001c 	.word	0x2000001c

0800563c <cleanup_stdio>:
 800563c:	6841      	ldr	r1, [r0, #4]
 800563e:	4b0c      	ldr	r3, [pc, #48]	; (8005670 <cleanup_stdio+0x34>)
 8005640:	b510      	push	{r4, lr}
 8005642:	4299      	cmp	r1, r3
 8005644:	4604      	mov	r4, r0
 8005646:	d001      	beq.n	800564c <cleanup_stdio+0x10>
 8005648:	f003 f938 	bl	80088bc <_fflush_r>
 800564c:	68a1      	ldr	r1, [r4, #8]
 800564e:	4b09      	ldr	r3, [pc, #36]	; (8005674 <cleanup_stdio+0x38>)
 8005650:	4299      	cmp	r1, r3
 8005652:	d002      	beq.n	800565a <cleanup_stdio+0x1e>
 8005654:	4620      	mov	r0, r4
 8005656:	f003 f931 	bl	80088bc <_fflush_r>
 800565a:	68e1      	ldr	r1, [r4, #12]
 800565c:	4b06      	ldr	r3, [pc, #24]	; (8005678 <cleanup_stdio+0x3c>)
 800565e:	4299      	cmp	r1, r3
 8005660:	d004      	beq.n	800566c <cleanup_stdio+0x30>
 8005662:	4620      	mov	r0, r4
 8005664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005668:	f003 b928 	b.w	80088bc <_fflush_r>
 800566c:	bd10      	pop	{r4, pc}
 800566e:	bf00      	nop
 8005670:	20000370 	.word	0x20000370
 8005674:	200003d8 	.word	0x200003d8
 8005678:	20000440 	.word	0x20000440

0800567c <global_stdio_init.part.0>:
 800567c:	b510      	push	{r4, lr}
 800567e:	4b0b      	ldr	r3, [pc, #44]	; (80056ac <global_stdio_init.part.0+0x30>)
 8005680:	4c0b      	ldr	r4, [pc, #44]	; (80056b0 <global_stdio_init.part.0+0x34>)
 8005682:	4a0c      	ldr	r2, [pc, #48]	; (80056b4 <global_stdio_init.part.0+0x38>)
 8005684:	4620      	mov	r0, r4
 8005686:	601a      	str	r2, [r3, #0]
 8005688:	2104      	movs	r1, #4
 800568a:	2200      	movs	r2, #0
 800568c:	f7ff ff94 	bl	80055b8 <std>
 8005690:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005694:	2201      	movs	r2, #1
 8005696:	2109      	movs	r1, #9
 8005698:	f7ff ff8e 	bl	80055b8 <std>
 800569c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80056a0:	2202      	movs	r2, #2
 80056a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056a6:	2112      	movs	r1, #18
 80056a8:	f7ff bf86 	b.w	80055b8 <std>
 80056ac:	200004a8 	.word	0x200004a8
 80056b0:	20000370 	.word	0x20000370
 80056b4:	08005625 	.word	0x08005625

080056b8 <__sfp_lock_acquire>:
 80056b8:	4801      	ldr	r0, [pc, #4]	; (80056c0 <__sfp_lock_acquire+0x8>)
 80056ba:	f000 b94c 	b.w	8005956 <__retarget_lock_acquire_recursive>
 80056be:	bf00      	nop
 80056c0:	200004b1 	.word	0x200004b1

080056c4 <__sfp_lock_release>:
 80056c4:	4801      	ldr	r0, [pc, #4]	; (80056cc <__sfp_lock_release+0x8>)
 80056c6:	f000 b947 	b.w	8005958 <__retarget_lock_release_recursive>
 80056ca:	bf00      	nop
 80056cc:	200004b1 	.word	0x200004b1

080056d0 <__sinit>:
 80056d0:	b510      	push	{r4, lr}
 80056d2:	4604      	mov	r4, r0
 80056d4:	f7ff fff0 	bl	80056b8 <__sfp_lock_acquire>
 80056d8:	6a23      	ldr	r3, [r4, #32]
 80056da:	b11b      	cbz	r3, 80056e4 <__sinit+0x14>
 80056dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056e0:	f7ff bff0 	b.w	80056c4 <__sfp_lock_release>
 80056e4:	4b04      	ldr	r3, [pc, #16]	; (80056f8 <__sinit+0x28>)
 80056e6:	6223      	str	r3, [r4, #32]
 80056e8:	4b04      	ldr	r3, [pc, #16]	; (80056fc <__sinit+0x2c>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d1f5      	bne.n	80056dc <__sinit+0xc>
 80056f0:	f7ff ffc4 	bl	800567c <global_stdio_init.part.0>
 80056f4:	e7f2      	b.n	80056dc <__sinit+0xc>
 80056f6:	bf00      	nop
 80056f8:	0800563d 	.word	0x0800563d
 80056fc:	200004a8 	.word	0x200004a8

08005700 <_fwalk_sglue>:
 8005700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005704:	4607      	mov	r7, r0
 8005706:	4688      	mov	r8, r1
 8005708:	4614      	mov	r4, r2
 800570a:	2600      	movs	r6, #0
 800570c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005710:	f1b9 0901 	subs.w	r9, r9, #1
 8005714:	d505      	bpl.n	8005722 <_fwalk_sglue+0x22>
 8005716:	6824      	ldr	r4, [r4, #0]
 8005718:	2c00      	cmp	r4, #0
 800571a:	d1f7      	bne.n	800570c <_fwalk_sglue+0xc>
 800571c:	4630      	mov	r0, r6
 800571e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005722:	89ab      	ldrh	r3, [r5, #12]
 8005724:	2b01      	cmp	r3, #1
 8005726:	d907      	bls.n	8005738 <_fwalk_sglue+0x38>
 8005728:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800572c:	3301      	adds	r3, #1
 800572e:	d003      	beq.n	8005738 <_fwalk_sglue+0x38>
 8005730:	4629      	mov	r1, r5
 8005732:	4638      	mov	r0, r7
 8005734:	47c0      	blx	r8
 8005736:	4306      	orrs	r6, r0
 8005738:	3568      	adds	r5, #104	; 0x68
 800573a:	e7e9      	b.n	8005710 <_fwalk_sglue+0x10>

0800573c <siprintf>:
 800573c:	b40e      	push	{r1, r2, r3}
 800573e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005742:	b500      	push	{lr}
 8005744:	b09c      	sub	sp, #112	; 0x70
 8005746:	ab1d      	add	r3, sp, #116	; 0x74
 8005748:	9002      	str	r0, [sp, #8]
 800574a:	9006      	str	r0, [sp, #24]
 800574c:	9107      	str	r1, [sp, #28]
 800574e:	9104      	str	r1, [sp, #16]
 8005750:	4808      	ldr	r0, [pc, #32]	; (8005774 <siprintf+0x38>)
 8005752:	4909      	ldr	r1, [pc, #36]	; (8005778 <siprintf+0x3c>)
 8005754:	f853 2b04 	ldr.w	r2, [r3], #4
 8005758:	9105      	str	r1, [sp, #20]
 800575a:	6800      	ldr	r0, [r0, #0]
 800575c:	a902      	add	r1, sp, #8
 800575e:	9301      	str	r3, [sp, #4]
 8005760:	f002 fc0e 	bl	8007f80 <_svfiprintf_r>
 8005764:	2200      	movs	r2, #0
 8005766:	9b02      	ldr	r3, [sp, #8]
 8005768:	701a      	strb	r2, [r3, #0]
 800576a:	b01c      	add	sp, #112	; 0x70
 800576c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005770:	b003      	add	sp, #12
 8005772:	4770      	bx	lr
 8005774:	20000068 	.word	0x20000068
 8005778:	ffff0208 	.word	0xffff0208

0800577c <siscanf>:
 800577c:	b40e      	push	{r1, r2, r3}
 800577e:	f44f 7201 	mov.w	r2, #516	; 0x204
 8005782:	b530      	push	{r4, r5, lr}
 8005784:	b09c      	sub	sp, #112	; 0x70
 8005786:	ac1f      	add	r4, sp, #124	; 0x7c
 8005788:	f854 5b04 	ldr.w	r5, [r4], #4
 800578c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8005790:	9002      	str	r0, [sp, #8]
 8005792:	9006      	str	r0, [sp, #24]
 8005794:	f7fa fce6 	bl	8000164 <strlen>
 8005798:	4b0b      	ldr	r3, [pc, #44]	; (80057c8 <siscanf+0x4c>)
 800579a:	9003      	str	r0, [sp, #12]
 800579c:	930b      	str	r3, [sp, #44]	; 0x2c
 800579e:	2300      	movs	r3, #0
 80057a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80057a2:	9314      	str	r3, [sp, #80]	; 0x50
 80057a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80057a8:	9007      	str	r0, [sp, #28]
 80057aa:	4808      	ldr	r0, [pc, #32]	; (80057cc <siscanf+0x50>)
 80057ac:	f8ad 3016 	strh.w	r3, [sp, #22]
 80057b0:	462a      	mov	r2, r5
 80057b2:	4623      	mov	r3, r4
 80057b4:	a902      	add	r1, sp, #8
 80057b6:	6800      	ldr	r0, [r0, #0]
 80057b8:	9401      	str	r4, [sp, #4]
 80057ba:	f002 fd39 	bl	8008230 <__ssvfiscanf_r>
 80057be:	b01c      	add	sp, #112	; 0x70
 80057c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80057c4:	b003      	add	sp, #12
 80057c6:	4770      	bx	lr
 80057c8:	080057f3 	.word	0x080057f3
 80057cc:	20000068 	.word	0x20000068

080057d0 <__sread>:
 80057d0:	b510      	push	{r4, lr}
 80057d2:	460c      	mov	r4, r1
 80057d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057d8:	f000 f86e 	bl	80058b8 <_read_r>
 80057dc:	2800      	cmp	r0, #0
 80057de:	bfab      	itete	ge
 80057e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80057e2:	89a3      	ldrhlt	r3, [r4, #12]
 80057e4:	181b      	addge	r3, r3, r0
 80057e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80057ea:	bfac      	ite	ge
 80057ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80057ee:	81a3      	strhlt	r3, [r4, #12]
 80057f0:	bd10      	pop	{r4, pc}

080057f2 <__seofread>:
 80057f2:	2000      	movs	r0, #0
 80057f4:	4770      	bx	lr

080057f6 <__swrite>:
 80057f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057fa:	461f      	mov	r7, r3
 80057fc:	898b      	ldrh	r3, [r1, #12]
 80057fe:	4605      	mov	r5, r0
 8005800:	05db      	lsls	r3, r3, #23
 8005802:	460c      	mov	r4, r1
 8005804:	4616      	mov	r6, r2
 8005806:	d505      	bpl.n	8005814 <__swrite+0x1e>
 8005808:	2302      	movs	r3, #2
 800580a:	2200      	movs	r2, #0
 800580c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005810:	f000 f840 	bl	8005894 <_lseek_r>
 8005814:	89a3      	ldrh	r3, [r4, #12]
 8005816:	4632      	mov	r2, r6
 8005818:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800581c:	81a3      	strh	r3, [r4, #12]
 800581e:	4628      	mov	r0, r5
 8005820:	463b      	mov	r3, r7
 8005822:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005826:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800582a:	f000 b857 	b.w	80058dc <_write_r>

0800582e <__sseek>:
 800582e:	b510      	push	{r4, lr}
 8005830:	460c      	mov	r4, r1
 8005832:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005836:	f000 f82d 	bl	8005894 <_lseek_r>
 800583a:	1c43      	adds	r3, r0, #1
 800583c:	89a3      	ldrh	r3, [r4, #12]
 800583e:	bf15      	itete	ne
 8005840:	6560      	strne	r0, [r4, #84]	; 0x54
 8005842:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005846:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800584a:	81a3      	strheq	r3, [r4, #12]
 800584c:	bf18      	it	ne
 800584e:	81a3      	strhne	r3, [r4, #12]
 8005850:	bd10      	pop	{r4, pc}

08005852 <__sclose>:
 8005852:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005856:	f000 b80d 	b.w	8005874 <_close_r>

0800585a <memset>:
 800585a:	4603      	mov	r3, r0
 800585c:	4402      	add	r2, r0
 800585e:	4293      	cmp	r3, r2
 8005860:	d100      	bne.n	8005864 <memset+0xa>
 8005862:	4770      	bx	lr
 8005864:	f803 1b01 	strb.w	r1, [r3], #1
 8005868:	e7f9      	b.n	800585e <memset+0x4>
	...

0800586c <_localeconv_r>:
 800586c:	4800      	ldr	r0, [pc, #0]	; (8005870 <_localeconv_r+0x4>)
 800586e:	4770      	bx	lr
 8005870:	2000015c 	.word	0x2000015c

08005874 <_close_r>:
 8005874:	b538      	push	{r3, r4, r5, lr}
 8005876:	2300      	movs	r3, #0
 8005878:	4d05      	ldr	r5, [pc, #20]	; (8005890 <_close_r+0x1c>)
 800587a:	4604      	mov	r4, r0
 800587c:	4608      	mov	r0, r1
 800587e:	602b      	str	r3, [r5, #0]
 8005880:	f7fc fb5c 	bl	8001f3c <_close>
 8005884:	1c43      	adds	r3, r0, #1
 8005886:	d102      	bne.n	800588e <_close_r+0x1a>
 8005888:	682b      	ldr	r3, [r5, #0]
 800588a:	b103      	cbz	r3, 800588e <_close_r+0x1a>
 800588c:	6023      	str	r3, [r4, #0]
 800588e:	bd38      	pop	{r3, r4, r5, pc}
 8005890:	200004ac 	.word	0x200004ac

08005894 <_lseek_r>:
 8005894:	b538      	push	{r3, r4, r5, lr}
 8005896:	4604      	mov	r4, r0
 8005898:	4608      	mov	r0, r1
 800589a:	4611      	mov	r1, r2
 800589c:	2200      	movs	r2, #0
 800589e:	4d05      	ldr	r5, [pc, #20]	; (80058b4 <_lseek_r+0x20>)
 80058a0:	602a      	str	r2, [r5, #0]
 80058a2:	461a      	mov	r2, r3
 80058a4:	f7fc fb6e 	bl	8001f84 <_lseek>
 80058a8:	1c43      	adds	r3, r0, #1
 80058aa:	d102      	bne.n	80058b2 <_lseek_r+0x1e>
 80058ac:	682b      	ldr	r3, [r5, #0]
 80058ae:	b103      	cbz	r3, 80058b2 <_lseek_r+0x1e>
 80058b0:	6023      	str	r3, [r4, #0]
 80058b2:	bd38      	pop	{r3, r4, r5, pc}
 80058b4:	200004ac 	.word	0x200004ac

080058b8 <_read_r>:
 80058b8:	b538      	push	{r3, r4, r5, lr}
 80058ba:	4604      	mov	r4, r0
 80058bc:	4608      	mov	r0, r1
 80058be:	4611      	mov	r1, r2
 80058c0:	2200      	movs	r2, #0
 80058c2:	4d05      	ldr	r5, [pc, #20]	; (80058d8 <_read_r+0x20>)
 80058c4:	602a      	str	r2, [r5, #0]
 80058c6:	461a      	mov	r2, r3
 80058c8:	f7fc faff 	bl	8001eca <_read>
 80058cc:	1c43      	adds	r3, r0, #1
 80058ce:	d102      	bne.n	80058d6 <_read_r+0x1e>
 80058d0:	682b      	ldr	r3, [r5, #0]
 80058d2:	b103      	cbz	r3, 80058d6 <_read_r+0x1e>
 80058d4:	6023      	str	r3, [r4, #0]
 80058d6:	bd38      	pop	{r3, r4, r5, pc}
 80058d8:	200004ac 	.word	0x200004ac

080058dc <_write_r>:
 80058dc:	b538      	push	{r3, r4, r5, lr}
 80058de:	4604      	mov	r4, r0
 80058e0:	4608      	mov	r0, r1
 80058e2:	4611      	mov	r1, r2
 80058e4:	2200      	movs	r2, #0
 80058e6:	4d05      	ldr	r5, [pc, #20]	; (80058fc <_write_r+0x20>)
 80058e8:	602a      	str	r2, [r5, #0]
 80058ea:	461a      	mov	r2, r3
 80058ec:	f7fc fb0a 	bl	8001f04 <_write>
 80058f0:	1c43      	adds	r3, r0, #1
 80058f2:	d102      	bne.n	80058fa <_write_r+0x1e>
 80058f4:	682b      	ldr	r3, [r5, #0]
 80058f6:	b103      	cbz	r3, 80058fa <_write_r+0x1e>
 80058f8:	6023      	str	r3, [r4, #0]
 80058fa:	bd38      	pop	{r3, r4, r5, pc}
 80058fc:	200004ac 	.word	0x200004ac

08005900 <__errno>:
 8005900:	4b01      	ldr	r3, [pc, #4]	; (8005908 <__errno+0x8>)
 8005902:	6818      	ldr	r0, [r3, #0]
 8005904:	4770      	bx	lr
 8005906:	bf00      	nop
 8005908:	20000068 	.word	0x20000068

0800590c <__libc_init_array>:
 800590c:	b570      	push	{r4, r5, r6, lr}
 800590e:	2600      	movs	r6, #0
 8005910:	4d0c      	ldr	r5, [pc, #48]	; (8005944 <__libc_init_array+0x38>)
 8005912:	4c0d      	ldr	r4, [pc, #52]	; (8005948 <__libc_init_array+0x3c>)
 8005914:	1b64      	subs	r4, r4, r5
 8005916:	10a4      	asrs	r4, r4, #2
 8005918:	42a6      	cmp	r6, r4
 800591a:	d109      	bne.n	8005930 <__libc_init_array+0x24>
 800591c:	f003 ffc6 	bl	80098ac <_init>
 8005920:	2600      	movs	r6, #0
 8005922:	4d0a      	ldr	r5, [pc, #40]	; (800594c <__libc_init_array+0x40>)
 8005924:	4c0a      	ldr	r4, [pc, #40]	; (8005950 <__libc_init_array+0x44>)
 8005926:	1b64      	subs	r4, r4, r5
 8005928:	10a4      	asrs	r4, r4, #2
 800592a:	42a6      	cmp	r6, r4
 800592c:	d105      	bne.n	800593a <__libc_init_array+0x2e>
 800592e:	bd70      	pop	{r4, r5, r6, pc}
 8005930:	f855 3b04 	ldr.w	r3, [r5], #4
 8005934:	4798      	blx	r3
 8005936:	3601      	adds	r6, #1
 8005938:	e7ee      	b.n	8005918 <__libc_init_array+0xc>
 800593a:	f855 3b04 	ldr.w	r3, [r5], #4
 800593e:	4798      	blx	r3
 8005940:	3601      	adds	r6, #1
 8005942:	e7f2      	b.n	800592a <__libc_init_array+0x1e>
 8005944:	08009d5c 	.word	0x08009d5c
 8005948:	08009d5c 	.word	0x08009d5c
 800594c:	08009d5c 	.word	0x08009d5c
 8005950:	08009d60 	.word	0x08009d60

08005954 <__retarget_lock_init_recursive>:
 8005954:	4770      	bx	lr

08005956 <__retarget_lock_acquire_recursive>:
 8005956:	4770      	bx	lr

08005958 <__retarget_lock_release_recursive>:
 8005958:	4770      	bx	lr

0800595a <memchr>:
 800595a:	4603      	mov	r3, r0
 800595c:	b510      	push	{r4, lr}
 800595e:	b2c9      	uxtb	r1, r1
 8005960:	4402      	add	r2, r0
 8005962:	4293      	cmp	r3, r2
 8005964:	4618      	mov	r0, r3
 8005966:	d101      	bne.n	800596c <memchr+0x12>
 8005968:	2000      	movs	r0, #0
 800596a:	e003      	b.n	8005974 <memchr+0x1a>
 800596c:	7804      	ldrb	r4, [r0, #0]
 800596e:	3301      	adds	r3, #1
 8005970:	428c      	cmp	r4, r1
 8005972:	d1f6      	bne.n	8005962 <memchr+0x8>
 8005974:	bd10      	pop	{r4, pc}
	...

08005978 <nanf>:
 8005978:	4800      	ldr	r0, [pc, #0]	; (800597c <nanf+0x4>)
 800597a:	4770      	bx	lr
 800597c:	7fc00000 	.word	0x7fc00000

08005980 <quorem>:
 8005980:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005984:	6903      	ldr	r3, [r0, #16]
 8005986:	690c      	ldr	r4, [r1, #16]
 8005988:	4607      	mov	r7, r0
 800598a:	42a3      	cmp	r3, r4
 800598c:	db7f      	blt.n	8005a8e <quorem+0x10e>
 800598e:	3c01      	subs	r4, #1
 8005990:	f100 0514 	add.w	r5, r0, #20
 8005994:	f101 0814 	add.w	r8, r1, #20
 8005998:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800599c:	9301      	str	r3, [sp, #4]
 800599e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80059a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80059a6:	3301      	adds	r3, #1
 80059a8:	429a      	cmp	r2, r3
 80059aa:	fbb2 f6f3 	udiv	r6, r2, r3
 80059ae:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80059b2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80059b6:	d331      	bcc.n	8005a1c <quorem+0x9c>
 80059b8:	f04f 0e00 	mov.w	lr, #0
 80059bc:	4640      	mov	r0, r8
 80059be:	46ac      	mov	ip, r5
 80059c0:	46f2      	mov	sl, lr
 80059c2:	f850 2b04 	ldr.w	r2, [r0], #4
 80059c6:	b293      	uxth	r3, r2
 80059c8:	fb06 e303 	mla	r3, r6, r3, lr
 80059cc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80059d0:	0c1a      	lsrs	r2, r3, #16
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	fb06 220e 	mla	r2, r6, lr, r2
 80059d8:	ebaa 0303 	sub.w	r3, sl, r3
 80059dc:	f8dc a000 	ldr.w	sl, [ip]
 80059e0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80059e4:	fa1f fa8a 	uxth.w	sl, sl
 80059e8:	4453      	add	r3, sl
 80059ea:	f8dc a000 	ldr.w	sl, [ip]
 80059ee:	b292      	uxth	r2, r2
 80059f0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80059f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80059fe:	4581      	cmp	r9, r0
 8005a00:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005a04:	f84c 3b04 	str.w	r3, [ip], #4
 8005a08:	d2db      	bcs.n	80059c2 <quorem+0x42>
 8005a0a:	f855 300b 	ldr.w	r3, [r5, fp]
 8005a0e:	b92b      	cbnz	r3, 8005a1c <quorem+0x9c>
 8005a10:	9b01      	ldr	r3, [sp, #4]
 8005a12:	3b04      	subs	r3, #4
 8005a14:	429d      	cmp	r5, r3
 8005a16:	461a      	mov	r2, r3
 8005a18:	d32d      	bcc.n	8005a76 <quorem+0xf6>
 8005a1a:	613c      	str	r4, [r7, #16]
 8005a1c:	4638      	mov	r0, r7
 8005a1e:	f001 f9df 	bl	8006de0 <__mcmp>
 8005a22:	2800      	cmp	r0, #0
 8005a24:	db23      	blt.n	8005a6e <quorem+0xee>
 8005a26:	4629      	mov	r1, r5
 8005a28:	2000      	movs	r0, #0
 8005a2a:	3601      	adds	r6, #1
 8005a2c:	f858 2b04 	ldr.w	r2, [r8], #4
 8005a30:	f8d1 c000 	ldr.w	ip, [r1]
 8005a34:	b293      	uxth	r3, r2
 8005a36:	1ac3      	subs	r3, r0, r3
 8005a38:	0c12      	lsrs	r2, r2, #16
 8005a3a:	fa1f f08c 	uxth.w	r0, ip
 8005a3e:	4403      	add	r3, r0
 8005a40:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005a44:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a4e:	45c1      	cmp	r9, r8
 8005a50:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005a54:	f841 3b04 	str.w	r3, [r1], #4
 8005a58:	d2e8      	bcs.n	8005a2c <quorem+0xac>
 8005a5a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005a5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005a62:	b922      	cbnz	r2, 8005a6e <quorem+0xee>
 8005a64:	3b04      	subs	r3, #4
 8005a66:	429d      	cmp	r5, r3
 8005a68:	461a      	mov	r2, r3
 8005a6a:	d30a      	bcc.n	8005a82 <quorem+0x102>
 8005a6c:	613c      	str	r4, [r7, #16]
 8005a6e:	4630      	mov	r0, r6
 8005a70:	b003      	add	sp, #12
 8005a72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a76:	6812      	ldr	r2, [r2, #0]
 8005a78:	3b04      	subs	r3, #4
 8005a7a:	2a00      	cmp	r2, #0
 8005a7c:	d1cd      	bne.n	8005a1a <quorem+0x9a>
 8005a7e:	3c01      	subs	r4, #1
 8005a80:	e7c8      	b.n	8005a14 <quorem+0x94>
 8005a82:	6812      	ldr	r2, [r2, #0]
 8005a84:	3b04      	subs	r3, #4
 8005a86:	2a00      	cmp	r2, #0
 8005a88:	d1f0      	bne.n	8005a6c <quorem+0xec>
 8005a8a:	3c01      	subs	r4, #1
 8005a8c:	e7eb      	b.n	8005a66 <quorem+0xe6>
 8005a8e:	2000      	movs	r0, #0
 8005a90:	e7ee      	b.n	8005a70 <quorem+0xf0>
 8005a92:	0000      	movs	r0, r0
 8005a94:	0000      	movs	r0, r0
	...

08005a98 <_dtoa_r>:
 8005a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a9c:	4616      	mov	r6, r2
 8005a9e:	461f      	mov	r7, r3
 8005aa0:	69c4      	ldr	r4, [r0, #28]
 8005aa2:	b099      	sub	sp, #100	; 0x64
 8005aa4:	4605      	mov	r5, r0
 8005aa6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005aaa:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005aae:	b974      	cbnz	r4, 8005ace <_dtoa_r+0x36>
 8005ab0:	2010      	movs	r0, #16
 8005ab2:	f000 fe1d 	bl	80066f0 <malloc>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	61e8      	str	r0, [r5, #28]
 8005aba:	b920      	cbnz	r0, 8005ac6 <_dtoa_r+0x2e>
 8005abc:	21ef      	movs	r1, #239	; 0xef
 8005abe:	4bac      	ldr	r3, [pc, #688]	; (8005d70 <_dtoa_r+0x2d8>)
 8005ac0:	48ac      	ldr	r0, [pc, #688]	; (8005d74 <_dtoa_r+0x2dc>)
 8005ac2:	f002 ffe5 	bl	8008a90 <__assert_func>
 8005ac6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005aca:	6004      	str	r4, [r0, #0]
 8005acc:	60c4      	str	r4, [r0, #12]
 8005ace:	69eb      	ldr	r3, [r5, #28]
 8005ad0:	6819      	ldr	r1, [r3, #0]
 8005ad2:	b151      	cbz	r1, 8005aea <_dtoa_r+0x52>
 8005ad4:	685a      	ldr	r2, [r3, #4]
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	4093      	lsls	r3, r2
 8005ada:	604a      	str	r2, [r1, #4]
 8005adc:	608b      	str	r3, [r1, #8]
 8005ade:	4628      	mov	r0, r5
 8005ae0:	f000 fefa 	bl	80068d8 <_Bfree>
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	69eb      	ldr	r3, [r5, #28]
 8005ae8:	601a      	str	r2, [r3, #0]
 8005aea:	1e3b      	subs	r3, r7, #0
 8005aec:	bfaf      	iteee	ge
 8005aee:	2300      	movge	r3, #0
 8005af0:	2201      	movlt	r2, #1
 8005af2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005af6:	9305      	strlt	r3, [sp, #20]
 8005af8:	bfa8      	it	ge
 8005afa:	f8c8 3000 	strge.w	r3, [r8]
 8005afe:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005b02:	4b9d      	ldr	r3, [pc, #628]	; (8005d78 <_dtoa_r+0x2e0>)
 8005b04:	bfb8      	it	lt
 8005b06:	f8c8 2000 	strlt.w	r2, [r8]
 8005b0a:	ea33 0309 	bics.w	r3, r3, r9
 8005b0e:	d119      	bne.n	8005b44 <_dtoa_r+0xac>
 8005b10:	f242 730f 	movw	r3, #9999	; 0x270f
 8005b14:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005b16:	6013      	str	r3, [r2, #0]
 8005b18:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005b1c:	4333      	orrs	r3, r6
 8005b1e:	f000 8589 	beq.w	8006634 <_dtoa_r+0xb9c>
 8005b22:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005b24:	b953      	cbnz	r3, 8005b3c <_dtoa_r+0xa4>
 8005b26:	4b95      	ldr	r3, [pc, #596]	; (8005d7c <_dtoa_r+0x2e4>)
 8005b28:	e023      	b.n	8005b72 <_dtoa_r+0xda>
 8005b2a:	4b95      	ldr	r3, [pc, #596]	; (8005d80 <_dtoa_r+0x2e8>)
 8005b2c:	9303      	str	r3, [sp, #12]
 8005b2e:	3308      	adds	r3, #8
 8005b30:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005b32:	6013      	str	r3, [r2, #0]
 8005b34:	9803      	ldr	r0, [sp, #12]
 8005b36:	b019      	add	sp, #100	; 0x64
 8005b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b3c:	4b8f      	ldr	r3, [pc, #572]	; (8005d7c <_dtoa_r+0x2e4>)
 8005b3e:	9303      	str	r3, [sp, #12]
 8005b40:	3303      	adds	r3, #3
 8005b42:	e7f5      	b.n	8005b30 <_dtoa_r+0x98>
 8005b44:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005b48:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005b4c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005b50:	2200      	movs	r2, #0
 8005b52:	2300      	movs	r3, #0
 8005b54:	f7fa ff32 	bl	80009bc <__aeabi_dcmpeq>
 8005b58:	4680      	mov	r8, r0
 8005b5a:	b160      	cbz	r0, 8005b76 <_dtoa_r+0xde>
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005b60:	6013      	str	r3, [r2, #0]
 8005b62:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	f000 8562 	beq.w	800662e <_dtoa_r+0xb96>
 8005b6a:	4b86      	ldr	r3, [pc, #536]	; (8005d84 <_dtoa_r+0x2ec>)
 8005b6c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005b6e:	6013      	str	r3, [r2, #0]
 8005b70:	3b01      	subs	r3, #1
 8005b72:	9303      	str	r3, [sp, #12]
 8005b74:	e7de      	b.n	8005b34 <_dtoa_r+0x9c>
 8005b76:	ab16      	add	r3, sp, #88	; 0x58
 8005b78:	9301      	str	r3, [sp, #4]
 8005b7a:	ab17      	add	r3, sp, #92	; 0x5c
 8005b7c:	9300      	str	r3, [sp, #0]
 8005b7e:	4628      	mov	r0, r5
 8005b80:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005b84:	f001 fa3c 	bl	8007000 <__d2b>
 8005b88:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005b8c:	4682      	mov	sl, r0
 8005b8e:	2c00      	cmp	r4, #0
 8005b90:	d07e      	beq.n	8005c90 <_dtoa_r+0x1f8>
 8005b92:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005b96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b98:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005b9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ba0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005ba4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005ba8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005bac:	4619      	mov	r1, r3
 8005bae:	2200      	movs	r2, #0
 8005bb0:	4b75      	ldr	r3, [pc, #468]	; (8005d88 <_dtoa_r+0x2f0>)
 8005bb2:	f7fa fae3 	bl	800017c <__aeabi_dsub>
 8005bb6:	a368      	add	r3, pc, #416	; (adr r3, 8005d58 <_dtoa_r+0x2c0>)
 8005bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bbc:	f7fa fc96 	bl	80004ec <__aeabi_dmul>
 8005bc0:	a367      	add	r3, pc, #412	; (adr r3, 8005d60 <_dtoa_r+0x2c8>)
 8005bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc6:	f7fa fadb 	bl	8000180 <__adddf3>
 8005bca:	4606      	mov	r6, r0
 8005bcc:	4620      	mov	r0, r4
 8005bce:	460f      	mov	r7, r1
 8005bd0:	f7fa fc22 	bl	8000418 <__aeabi_i2d>
 8005bd4:	a364      	add	r3, pc, #400	; (adr r3, 8005d68 <_dtoa_r+0x2d0>)
 8005bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bda:	f7fa fc87 	bl	80004ec <__aeabi_dmul>
 8005bde:	4602      	mov	r2, r0
 8005be0:	460b      	mov	r3, r1
 8005be2:	4630      	mov	r0, r6
 8005be4:	4639      	mov	r1, r7
 8005be6:	f7fa facb 	bl	8000180 <__adddf3>
 8005bea:	4606      	mov	r6, r0
 8005bec:	460f      	mov	r7, r1
 8005bee:	f7fa ff2d 	bl	8000a4c <__aeabi_d2iz>
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	4683      	mov	fp, r0
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	4630      	mov	r0, r6
 8005bfa:	4639      	mov	r1, r7
 8005bfc:	f7fa fee8 	bl	80009d0 <__aeabi_dcmplt>
 8005c00:	b148      	cbz	r0, 8005c16 <_dtoa_r+0x17e>
 8005c02:	4658      	mov	r0, fp
 8005c04:	f7fa fc08 	bl	8000418 <__aeabi_i2d>
 8005c08:	4632      	mov	r2, r6
 8005c0a:	463b      	mov	r3, r7
 8005c0c:	f7fa fed6 	bl	80009bc <__aeabi_dcmpeq>
 8005c10:	b908      	cbnz	r0, 8005c16 <_dtoa_r+0x17e>
 8005c12:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005c16:	f1bb 0f16 	cmp.w	fp, #22
 8005c1a:	d857      	bhi.n	8005ccc <_dtoa_r+0x234>
 8005c1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005c20:	4b5a      	ldr	r3, [pc, #360]	; (8005d8c <_dtoa_r+0x2f4>)
 8005c22:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c2a:	f7fa fed1 	bl	80009d0 <__aeabi_dcmplt>
 8005c2e:	2800      	cmp	r0, #0
 8005c30:	d04e      	beq.n	8005cd0 <_dtoa_r+0x238>
 8005c32:	2300      	movs	r3, #0
 8005c34:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005c38:	930f      	str	r3, [sp, #60]	; 0x3c
 8005c3a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005c3c:	1b1b      	subs	r3, r3, r4
 8005c3e:	1e5a      	subs	r2, r3, #1
 8005c40:	bf46      	itte	mi
 8005c42:	f1c3 0901 	rsbmi	r9, r3, #1
 8005c46:	2300      	movmi	r3, #0
 8005c48:	f04f 0900 	movpl.w	r9, #0
 8005c4c:	9209      	str	r2, [sp, #36]	; 0x24
 8005c4e:	bf48      	it	mi
 8005c50:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005c52:	f1bb 0f00 	cmp.w	fp, #0
 8005c56:	db3d      	blt.n	8005cd4 <_dtoa_r+0x23c>
 8005c58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c5a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8005c5e:	445b      	add	r3, fp
 8005c60:	9309      	str	r3, [sp, #36]	; 0x24
 8005c62:	2300      	movs	r3, #0
 8005c64:	930a      	str	r3, [sp, #40]	; 0x28
 8005c66:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005c68:	2b09      	cmp	r3, #9
 8005c6a:	d867      	bhi.n	8005d3c <_dtoa_r+0x2a4>
 8005c6c:	2b05      	cmp	r3, #5
 8005c6e:	bfc4      	itt	gt
 8005c70:	3b04      	subgt	r3, #4
 8005c72:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005c74:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005c76:	bfc8      	it	gt
 8005c78:	2400      	movgt	r4, #0
 8005c7a:	f1a3 0302 	sub.w	r3, r3, #2
 8005c7e:	bfd8      	it	le
 8005c80:	2401      	movle	r4, #1
 8005c82:	2b03      	cmp	r3, #3
 8005c84:	f200 8086 	bhi.w	8005d94 <_dtoa_r+0x2fc>
 8005c88:	e8df f003 	tbb	[pc, r3]
 8005c8c:	5637392c 	.word	0x5637392c
 8005c90:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005c94:	441c      	add	r4, r3
 8005c96:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005c9a:	2b20      	cmp	r3, #32
 8005c9c:	bfc1      	itttt	gt
 8005c9e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005ca2:	fa09 f903 	lslgt.w	r9, r9, r3
 8005ca6:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8005caa:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005cae:	bfd6      	itet	le
 8005cb0:	f1c3 0320 	rsble	r3, r3, #32
 8005cb4:	ea49 0003 	orrgt.w	r0, r9, r3
 8005cb8:	fa06 f003 	lslle.w	r0, r6, r3
 8005cbc:	f7fa fb9c 	bl	80003f8 <__aeabi_ui2d>
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005cc6:	3c01      	subs	r4, #1
 8005cc8:	9213      	str	r2, [sp, #76]	; 0x4c
 8005cca:	e76f      	b.n	8005bac <_dtoa_r+0x114>
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e7b3      	b.n	8005c38 <_dtoa_r+0x1a0>
 8005cd0:	900f      	str	r0, [sp, #60]	; 0x3c
 8005cd2:	e7b2      	b.n	8005c3a <_dtoa_r+0x1a2>
 8005cd4:	f1cb 0300 	rsb	r3, fp, #0
 8005cd8:	930a      	str	r3, [sp, #40]	; 0x28
 8005cda:	2300      	movs	r3, #0
 8005cdc:	eba9 090b 	sub.w	r9, r9, fp
 8005ce0:	930e      	str	r3, [sp, #56]	; 0x38
 8005ce2:	e7c0      	b.n	8005c66 <_dtoa_r+0x1ce>
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ce8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	dc55      	bgt.n	8005d9a <_dtoa_r+0x302>
 8005cee:	2301      	movs	r3, #1
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	9306      	str	r3, [sp, #24]
 8005cf4:	9308      	str	r3, [sp, #32]
 8005cf6:	9223      	str	r2, [sp, #140]	; 0x8c
 8005cf8:	e00b      	b.n	8005d12 <_dtoa_r+0x27a>
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e7f3      	b.n	8005ce6 <_dtoa_r+0x24e>
 8005cfe:	2300      	movs	r3, #0
 8005d00:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d02:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005d04:	445b      	add	r3, fp
 8005d06:	9306      	str	r3, [sp, #24]
 8005d08:	3301      	adds	r3, #1
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	9308      	str	r3, [sp, #32]
 8005d0e:	bfb8      	it	lt
 8005d10:	2301      	movlt	r3, #1
 8005d12:	2100      	movs	r1, #0
 8005d14:	2204      	movs	r2, #4
 8005d16:	69e8      	ldr	r0, [r5, #28]
 8005d18:	f102 0614 	add.w	r6, r2, #20
 8005d1c:	429e      	cmp	r6, r3
 8005d1e:	d940      	bls.n	8005da2 <_dtoa_r+0x30a>
 8005d20:	6041      	str	r1, [r0, #4]
 8005d22:	4628      	mov	r0, r5
 8005d24:	f000 fd98 	bl	8006858 <_Balloc>
 8005d28:	9003      	str	r0, [sp, #12]
 8005d2a:	2800      	cmp	r0, #0
 8005d2c:	d13c      	bne.n	8005da8 <_dtoa_r+0x310>
 8005d2e:	4602      	mov	r2, r0
 8005d30:	f240 11af 	movw	r1, #431	; 0x1af
 8005d34:	4b16      	ldr	r3, [pc, #88]	; (8005d90 <_dtoa_r+0x2f8>)
 8005d36:	e6c3      	b.n	8005ac0 <_dtoa_r+0x28>
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e7e1      	b.n	8005d00 <_dtoa_r+0x268>
 8005d3c:	2401      	movs	r4, #1
 8005d3e:	2300      	movs	r3, #0
 8005d40:	940b      	str	r4, [sp, #44]	; 0x2c
 8005d42:	9322      	str	r3, [sp, #136]	; 0x88
 8005d44:	f04f 33ff 	mov.w	r3, #4294967295
 8005d48:	2200      	movs	r2, #0
 8005d4a:	9306      	str	r3, [sp, #24]
 8005d4c:	9308      	str	r3, [sp, #32]
 8005d4e:	2312      	movs	r3, #18
 8005d50:	e7d1      	b.n	8005cf6 <_dtoa_r+0x25e>
 8005d52:	bf00      	nop
 8005d54:	f3af 8000 	nop.w
 8005d58:	636f4361 	.word	0x636f4361
 8005d5c:	3fd287a7 	.word	0x3fd287a7
 8005d60:	8b60c8b3 	.word	0x8b60c8b3
 8005d64:	3fc68a28 	.word	0x3fc68a28
 8005d68:	509f79fb 	.word	0x509f79fb
 8005d6c:	3fd34413 	.word	0x3fd34413
 8005d70:	0800995a 	.word	0x0800995a
 8005d74:	08009971 	.word	0x08009971
 8005d78:	7ff00000 	.word	0x7ff00000
 8005d7c:	08009956 	.word	0x08009956
 8005d80:	0800994d 	.word	0x0800994d
 8005d84:	08009cb1 	.word	0x08009cb1
 8005d88:	3ff80000 	.word	0x3ff80000
 8005d8c:	08009a60 	.word	0x08009a60
 8005d90:	080099c9 	.word	0x080099c9
 8005d94:	2301      	movs	r3, #1
 8005d96:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d98:	e7d4      	b.n	8005d44 <_dtoa_r+0x2ac>
 8005d9a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005d9c:	9306      	str	r3, [sp, #24]
 8005d9e:	9308      	str	r3, [sp, #32]
 8005da0:	e7b7      	b.n	8005d12 <_dtoa_r+0x27a>
 8005da2:	3101      	adds	r1, #1
 8005da4:	0052      	lsls	r2, r2, #1
 8005da6:	e7b7      	b.n	8005d18 <_dtoa_r+0x280>
 8005da8:	69eb      	ldr	r3, [r5, #28]
 8005daa:	9a03      	ldr	r2, [sp, #12]
 8005dac:	601a      	str	r2, [r3, #0]
 8005dae:	9b08      	ldr	r3, [sp, #32]
 8005db0:	2b0e      	cmp	r3, #14
 8005db2:	f200 80a8 	bhi.w	8005f06 <_dtoa_r+0x46e>
 8005db6:	2c00      	cmp	r4, #0
 8005db8:	f000 80a5 	beq.w	8005f06 <_dtoa_r+0x46e>
 8005dbc:	f1bb 0f00 	cmp.w	fp, #0
 8005dc0:	dd34      	ble.n	8005e2c <_dtoa_r+0x394>
 8005dc2:	4b9a      	ldr	r3, [pc, #616]	; (800602c <_dtoa_r+0x594>)
 8005dc4:	f00b 020f 	and.w	r2, fp, #15
 8005dc8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005dcc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005dd0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005dd4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005dd8:	ea4f 142b 	mov.w	r4, fp, asr #4
 8005ddc:	d016      	beq.n	8005e0c <_dtoa_r+0x374>
 8005dde:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005de2:	4b93      	ldr	r3, [pc, #588]	; (8006030 <_dtoa_r+0x598>)
 8005de4:	2703      	movs	r7, #3
 8005de6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005dea:	f7fa fca9 	bl	8000740 <__aeabi_ddiv>
 8005dee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005df2:	f004 040f 	and.w	r4, r4, #15
 8005df6:	4e8e      	ldr	r6, [pc, #568]	; (8006030 <_dtoa_r+0x598>)
 8005df8:	b954      	cbnz	r4, 8005e10 <_dtoa_r+0x378>
 8005dfa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005dfe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e02:	f7fa fc9d 	bl	8000740 <__aeabi_ddiv>
 8005e06:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e0a:	e029      	b.n	8005e60 <_dtoa_r+0x3c8>
 8005e0c:	2702      	movs	r7, #2
 8005e0e:	e7f2      	b.n	8005df6 <_dtoa_r+0x35e>
 8005e10:	07e1      	lsls	r1, r4, #31
 8005e12:	d508      	bpl.n	8005e26 <_dtoa_r+0x38e>
 8005e14:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005e18:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005e1c:	f7fa fb66 	bl	80004ec <__aeabi_dmul>
 8005e20:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005e24:	3701      	adds	r7, #1
 8005e26:	1064      	asrs	r4, r4, #1
 8005e28:	3608      	adds	r6, #8
 8005e2a:	e7e5      	b.n	8005df8 <_dtoa_r+0x360>
 8005e2c:	f000 80a5 	beq.w	8005f7a <_dtoa_r+0x4e2>
 8005e30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005e34:	f1cb 0400 	rsb	r4, fp, #0
 8005e38:	4b7c      	ldr	r3, [pc, #496]	; (800602c <_dtoa_r+0x594>)
 8005e3a:	f004 020f 	and.w	r2, r4, #15
 8005e3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e46:	f7fa fb51 	bl	80004ec <__aeabi_dmul>
 8005e4a:	2702      	movs	r7, #2
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e52:	4e77      	ldr	r6, [pc, #476]	; (8006030 <_dtoa_r+0x598>)
 8005e54:	1124      	asrs	r4, r4, #4
 8005e56:	2c00      	cmp	r4, #0
 8005e58:	f040 8084 	bne.w	8005f64 <_dtoa_r+0x4cc>
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d1d2      	bne.n	8005e06 <_dtoa_r+0x36e>
 8005e60:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005e64:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005e68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	f000 8087 	beq.w	8005f7e <_dtoa_r+0x4e6>
 8005e70:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005e74:	2200      	movs	r2, #0
 8005e76:	4b6f      	ldr	r3, [pc, #444]	; (8006034 <_dtoa_r+0x59c>)
 8005e78:	f7fa fdaa 	bl	80009d0 <__aeabi_dcmplt>
 8005e7c:	2800      	cmp	r0, #0
 8005e7e:	d07e      	beq.n	8005f7e <_dtoa_r+0x4e6>
 8005e80:	9b08      	ldr	r3, [sp, #32]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d07b      	beq.n	8005f7e <_dtoa_r+0x4e6>
 8005e86:	9b06      	ldr	r3, [sp, #24]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	dd38      	ble.n	8005efe <_dtoa_r+0x466>
 8005e8c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005e90:	2200      	movs	r2, #0
 8005e92:	4b69      	ldr	r3, [pc, #420]	; (8006038 <_dtoa_r+0x5a0>)
 8005e94:	f7fa fb2a 	bl	80004ec <__aeabi_dmul>
 8005e98:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e9c:	9c06      	ldr	r4, [sp, #24]
 8005e9e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8005ea2:	3701      	adds	r7, #1
 8005ea4:	4638      	mov	r0, r7
 8005ea6:	f7fa fab7 	bl	8000418 <__aeabi_i2d>
 8005eaa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005eae:	f7fa fb1d 	bl	80004ec <__aeabi_dmul>
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	4b61      	ldr	r3, [pc, #388]	; (800603c <_dtoa_r+0x5a4>)
 8005eb6:	f7fa f963 	bl	8000180 <__adddf3>
 8005eba:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005ebe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005ec2:	9611      	str	r6, [sp, #68]	; 0x44
 8005ec4:	2c00      	cmp	r4, #0
 8005ec6:	d15d      	bne.n	8005f84 <_dtoa_r+0x4ec>
 8005ec8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	4b5c      	ldr	r3, [pc, #368]	; (8006040 <_dtoa_r+0x5a8>)
 8005ed0:	f7fa f954 	bl	800017c <__aeabi_dsub>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	460b      	mov	r3, r1
 8005ed8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005edc:	4633      	mov	r3, r6
 8005ede:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005ee0:	f7fa fd94 	bl	8000a0c <__aeabi_dcmpgt>
 8005ee4:	2800      	cmp	r0, #0
 8005ee6:	f040 8295 	bne.w	8006414 <_dtoa_r+0x97c>
 8005eea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005eee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005ef0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005ef4:	f7fa fd6c 	bl	80009d0 <__aeabi_dcmplt>
 8005ef8:	2800      	cmp	r0, #0
 8005efa:	f040 8289 	bne.w	8006410 <_dtoa_r+0x978>
 8005efe:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005f02:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005f06:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	f2c0 8151 	blt.w	80061b0 <_dtoa_r+0x718>
 8005f0e:	f1bb 0f0e 	cmp.w	fp, #14
 8005f12:	f300 814d 	bgt.w	80061b0 <_dtoa_r+0x718>
 8005f16:	4b45      	ldr	r3, [pc, #276]	; (800602c <_dtoa_r+0x594>)
 8005f18:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005f1c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005f20:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005f24:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	f280 80da 	bge.w	80060e0 <_dtoa_r+0x648>
 8005f2c:	9b08      	ldr	r3, [sp, #32]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	f300 80d6 	bgt.w	80060e0 <_dtoa_r+0x648>
 8005f34:	f040 826b 	bne.w	800640e <_dtoa_r+0x976>
 8005f38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	4b40      	ldr	r3, [pc, #256]	; (8006040 <_dtoa_r+0x5a8>)
 8005f40:	f7fa fad4 	bl	80004ec <__aeabi_dmul>
 8005f44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f48:	f7fa fd56 	bl	80009f8 <__aeabi_dcmpge>
 8005f4c:	9c08      	ldr	r4, [sp, #32]
 8005f4e:	4626      	mov	r6, r4
 8005f50:	2800      	cmp	r0, #0
 8005f52:	f040 8241 	bne.w	80063d8 <_dtoa_r+0x940>
 8005f56:	2331      	movs	r3, #49	; 0x31
 8005f58:	9f03      	ldr	r7, [sp, #12]
 8005f5a:	f10b 0b01 	add.w	fp, fp, #1
 8005f5e:	f807 3b01 	strb.w	r3, [r7], #1
 8005f62:	e23d      	b.n	80063e0 <_dtoa_r+0x948>
 8005f64:	07e2      	lsls	r2, r4, #31
 8005f66:	d505      	bpl.n	8005f74 <_dtoa_r+0x4dc>
 8005f68:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005f6c:	f7fa fabe 	bl	80004ec <__aeabi_dmul>
 8005f70:	2301      	movs	r3, #1
 8005f72:	3701      	adds	r7, #1
 8005f74:	1064      	asrs	r4, r4, #1
 8005f76:	3608      	adds	r6, #8
 8005f78:	e76d      	b.n	8005e56 <_dtoa_r+0x3be>
 8005f7a:	2702      	movs	r7, #2
 8005f7c:	e770      	b.n	8005e60 <_dtoa_r+0x3c8>
 8005f7e:	46d8      	mov	r8, fp
 8005f80:	9c08      	ldr	r4, [sp, #32]
 8005f82:	e78f      	b.n	8005ea4 <_dtoa_r+0x40c>
 8005f84:	9903      	ldr	r1, [sp, #12]
 8005f86:	4b29      	ldr	r3, [pc, #164]	; (800602c <_dtoa_r+0x594>)
 8005f88:	4421      	add	r1, r4
 8005f8a:	9112      	str	r1, [sp, #72]	; 0x48
 8005f8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005f8e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005f92:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005f96:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005f9a:	2900      	cmp	r1, #0
 8005f9c:	d054      	beq.n	8006048 <_dtoa_r+0x5b0>
 8005f9e:	2000      	movs	r0, #0
 8005fa0:	4928      	ldr	r1, [pc, #160]	; (8006044 <_dtoa_r+0x5ac>)
 8005fa2:	f7fa fbcd 	bl	8000740 <__aeabi_ddiv>
 8005fa6:	463b      	mov	r3, r7
 8005fa8:	4632      	mov	r2, r6
 8005faa:	f7fa f8e7 	bl	800017c <__aeabi_dsub>
 8005fae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005fb2:	9f03      	ldr	r7, [sp, #12]
 8005fb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005fb8:	f7fa fd48 	bl	8000a4c <__aeabi_d2iz>
 8005fbc:	4604      	mov	r4, r0
 8005fbe:	f7fa fa2b 	bl	8000418 <__aeabi_i2d>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	460b      	mov	r3, r1
 8005fc6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005fca:	f7fa f8d7 	bl	800017c <__aeabi_dsub>
 8005fce:	4602      	mov	r2, r0
 8005fd0:	460b      	mov	r3, r1
 8005fd2:	3430      	adds	r4, #48	; 0x30
 8005fd4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005fd8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005fdc:	f807 4b01 	strb.w	r4, [r7], #1
 8005fe0:	f7fa fcf6 	bl	80009d0 <__aeabi_dcmplt>
 8005fe4:	2800      	cmp	r0, #0
 8005fe6:	d173      	bne.n	80060d0 <_dtoa_r+0x638>
 8005fe8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005fec:	2000      	movs	r0, #0
 8005fee:	4911      	ldr	r1, [pc, #68]	; (8006034 <_dtoa_r+0x59c>)
 8005ff0:	f7fa f8c4 	bl	800017c <__aeabi_dsub>
 8005ff4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005ff8:	f7fa fcea 	bl	80009d0 <__aeabi_dcmplt>
 8005ffc:	2800      	cmp	r0, #0
 8005ffe:	f040 80b6 	bne.w	800616e <_dtoa_r+0x6d6>
 8006002:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006004:	429f      	cmp	r7, r3
 8006006:	f43f af7a 	beq.w	8005efe <_dtoa_r+0x466>
 800600a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800600e:	2200      	movs	r2, #0
 8006010:	4b09      	ldr	r3, [pc, #36]	; (8006038 <_dtoa_r+0x5a0>)
 8006012:	f7fa fa6b 	bl	80004ec <__aeabi_dmul>
 8006016:	2200      	movs	r2, #0
 8006018:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800601c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006020:	4b05      	ldr	r3, [pc, #20]	; (8006038 <_dtoa_r+0x5a0>)
 8006022:	f7fa fa63 	bl	80004ec <__aeabi_dmul>
 8006026:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800602a:	e7c3      	b.n	8005fb4 <_dtoa_r+0x51c>
 800602c:	08009a60 	.word	0x08009a60
 8006030:	08009a38 	.word	0x08009a38
 8006034:	3ff00000 	.word	0x3ff00000
 8006038:	40240000 	.word	0x40240000
 800603c:	401c0000 	.word	0x401c0000
 8006040:	40140000 	.word	0x40140000
 8006044:	3fe00000 	.word	0x3fe00000
 8006048:	4630      	mov	r0, r6
 800604a:	4639      	mov	r1, r7
 800604c:	f7fa fa4e 	bl	80004ec <__aeabi_dmul>
 8006050:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006052:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006056:	9c03      	ldr	r4, [sp, #12]
 8006058:	9314      	str	r3, [sp, #80]	; 0x50
 800605a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800605e:	f7fa fcf5 	bl	8000a4c <__aeabi_d2iz>
 8006062:	9015      	str	r0, [sp, #84]	; 0x54
 8006064:	f7fa f9d8 	bl	8000418 <__aeabi_i2d>
 8006068:	4602      	mov	r2, r0
 800606a:	460b      	mov	r3, r1
 800606c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006070:	f7fa f884 	bl	800017c <__aeabi_dsub>
 8006074:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006076:	4606      	mov	r6, r0
 8006078:	3330      	adds	r3, #48	; 0x30
 800607a:	f804 3b01 	strb.w	r3, [r4], #1
 800607e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006080:	460f      	mov	r7, r1
 8006082:	429c      	cmp	r4, r3
 8006084:	f04f 0200 	mov.w	r2, #0
 8006088:	d124      	bne.n	80060d4 <_dtoa_r+0x63c>
 800608a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800608e:	4baf      	ldr	r3, [pc, #700]	; (800634c <_dtoa_r+0x8b4>)
 8006090:	f7fa f876 	bl	8000180 <__adddf3>
 8006094:	4602      	mov	r2, r0
 8006096:	460b      	mov	r3, r1
 8006098:	4630      	mov	r0, r6
 800609a:	4639      	mov	r1, r7
 800609c:	f7fa fcb6 	bl	8000a0c <__aeabi_dcmpgt>
 80060a0:	2800      	cmp	r0, #0
 80060a2:	d163      	bne.n	800616c <_dtoa_r+0x6d4>
 80060a4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80060a8:	2000      	movs	r0, #0
 80060aa:	49a8      	ldr	r1, [pc, #672]	; (800634c <_dtoa_r+0x8b4>)
 80060ac:	f7fa f866 	bl	800017c <__aeabi_dsub>
 80060b0:	4602      	mov	r2, r0
 80060b2:	460b      	mov	r3, r1
 80060b4:	4630      	mov	r0, r6
 80060b6:	4639      	mov	r1, r7
 80060b8:	f7fa fc8a 	bl	80009d0 <__aeabi_dcmplt>
 80060bc:	2800      	cmp	r0, #0
 80060be:	f43f af1e 	beq.w	8005efe <_dtoa_r+0x466>
 80060c2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80060c4:	1e7b      	subs	r3, r7, #1
 80060c6:	9314      	str	r3, [sp, #80]	; 0x50
 80060c8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80060cc:	2b30      	cmp	r3, #48	; 0x30
 80060ce:	d0f8      	beq.n	80060c2 <_dtoa_r+0x62a>
 80060d0:	46c3      	mov	fp, r8
 80060d2:	e03b      	b.n	800614c <_dtoa_r+0x6b4>
 80060d4:	4b9e      	ldr	r3, [pc, #632]	; (8006350 <_dtoa_r+0x8b8>)
 80060d6:	f7fa fa09 	bl	80004ec <__aeabi_dmul>
 80060da:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80060de:	e7bc      	b.n	800605a <_dtoa_r+0x5c2>
 80060e0:	9f03      	ldr	r7, [sp, #12]
 80060e2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80060e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80060ea:	4640      	mov	r0, r8
 80060ec:	4649      	mov	r1, r9
 80060ee:	f7fa fb27 	bl	8000740 <__aeabi_ddiv>
 80060f2:	f7fa fcab 	bl	8000a4c <__aeabi_d2iz>
 80060f6:	4604      	mov	r4, r0
 80060f8:	f7fa f98e 	bl	8000418 <__aeabi_i2d>
 80060fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006100:	f7fa f9f4 	bl	80004ec <__aeabi_dmul>
 8006104:	4602      	mov	r2, r0
 8006106:	460b      	mov	r3, r1
 8006108:	4640      	mov	r0, r8
 800610a:	4649      	mov	r1, r9
 800610c:	f7fa f836 	bl	800017c <__aeabi_dsub>
 8006110:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006114:	f807 6b01 	strb.w	r6, [r7], #1
 8006118:	9e03      	ldr	r6, [sp, #12]
 800611a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800611e:	1bbe      	subs	r6, r7, r6
 8006120:	45b4      	cmp	ip, r6
 8006122:	4602      	mov	r2, r0
 8006124:	460b      	mov	r3, r1
 8006126:	d136      	bne.n	8006196 <_dtoa_r+0x6fe>
 8006128:	f7fa f82a 	bl	8000180 <__adddf3>
 800612c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006130:	4680      	mov	r8, r0
 8006132:	4689      	mov	r9, r1
 8006134:	f7fa fc6a 	bl	8000a0c <__aeabi_dcmpgt>
 8006138:	bb58      	cbnz	r0, 8006192 <_dtoa_r+0x6fa>
 800613a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800613e:	4640      	mov	r0, r8
 8006140:	4649      	mov	r1, r9
 8006142:	f7fa fc3b 	bl	80009bc <__aeabi_dcmpeq>
 8006146:	b108      	cbz	r0, 800614c <_dtoa_r+0x6b4>
 8006148:	07e3      	lsls	r3, r4, #31
 800614a:	d422      	bmi.n	8006192 <_dtoa_r+0x6fa>
 800614c:	4651      	mov	r1, sl
 800614e:	4628      	mov	r0, r5
 8006150:	f000 fbc2 	bl	80068d8 <_Bfree>
 8006154:	2300      	movs	r3, #0
 8006156:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006158:	703b      	strb	r3, [r7, #0]
 800615a:	f10b 0301 	add.w	r3, fp, #1
 800615e:	6013      	str	r3, [r2, #0]
 8006160:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006162:	2b00      	cmp	r3, #0
 8006164:	f43f ace6 	beq.w	8005b34 <_dtoa_r+0x9c>
 8006168:	601f      	str	r7, [r3, #0]
 800616a:	e4e3      	b.n	8005b34 <_dtoa_r+0x9c>
 800616c:	4627      	mov	r7, r4
 800616e:	463b      	mov	r3, r7
 8006170:	461f      	mov	r7, r3
 8006172:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006176:	2a39      	cmp	r2, #57	; 0x39
 8006178:	d107      	bne.n	800618a <_dtoa_r+0x6f2>
 800617a:	9a03      	ldr	r2, [sp, #12]
 800617c:	429a      	cmp	r2, r3
 800617e:	d1f7      	bne.n	8006170 <_dtoa_r+0x6d8>
 8006180:	2230      	movs	r2, #48	; 0x30
 8006182:	9903      	ldr	r1, [sp, #12]
 8006184:	f108 0801 	add.w	r8, r8, #1
 8006188:	700a      	strb	r2, [r1, #0]
 800618a:	781a      	ldrb	r2, [r3, #0]
 800618c:	3201      	adds	r2, #1
 800618e:	701a      	strb	r2, [r3, #0]
 8006190:	e79e      	b.n	80060d0 <_dtoa_r+0x638>
 8006192:	46d8      	mov	r8, fp
 8006194:	e7eb      	b.n	800616e <_dtoa_r+0x6d6>
 8006196:	2200      	movs	r2, #0
 8006198:	4b6d      	ldr	r3, [pc, #436]	; (8006350 <_dtoa_r+0x8b8>)
 800619a:	f7fa f9a7 	bl	80004ec <__aeabi_dmul>
 800619e:	2200      	movs	r2, #0
 80061a0:	2300      	movs	r3, #0
 80061a2:	4680      	mov	r8, r0
 80061a4:	4689      	mov	r9, r1
 80061a6:	f7fa fc09 	bl	80009bc <__aeabi_dcmpeq>
 80061aa:	2800      	cmp	r0, #0
 80061ac:	d09b      	beq.n	80060e6 <_dtoa_r+0x64e>
 80061ae:	e7cd      	b.n	800614c <_dtoa_r+0x6b4>
 80061b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80061b2:	2a00      	cmp	r2, #0
 80061b4:	f000 80c4 	beq.w	8006340 <_dtoa_r+0x8a8>
 80061b8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80061ba:	2a01      	cmp	r2, #1
 80061bc:	f300 80a8 	bgt.w	8006310 <_dtoa_r+0x878>
 80061c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80061c2:	2a00      	cmp	r2, #0
 80061c4:	f000 80a0 	beq.w	8006308 <_dtoa_r+0x870>
 80061c8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80061cc:	464f      	mov	r7, r9
 80061ce:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80061d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061d2:	2101      	movs	r1, #1
 80061d4:	441a      	add	r2, r3
 80061d6:	4628      	mov	r0, r5
 80061d8:	4499      	add	r9, r3
 80061da:	9209      	str	r2, [sp, #36]	; 0x24
 80061dc:	f000 fc7c 	bl	8006ad8 <__i2b>
 80061e0:	4606      	mov	r6, r0
 80061e2:	b15f      	cbz	r7, 80061fc <_dtoa_r+0x764>
 80061e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	dd08      	ble.n	80061fc <_dtoa_r+0x764>
 80061ea:	42bb      	cmp	r3, r7
 80061ec:	bfa8      	it	ge
 80061ee:	463b      	movge	r3, r7
 80061f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061f2:	eba9 0903 	sub.w	r9, r9, r3
 80061f6:	1aff      	subs	r7, r7, r3
 80061f8:	1ad3      	subs	r3, r2, r3
 80061fa:	9309      	str	r3, [sp, #36]	; 0x24
 80061fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061fe:	b1f3      	cbz	r3, 800623e <_dtoa_r+0x7a6>
 8006200:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006202:	2b00      	cmp	r3, #0
 8006204:	f000 80a0 	beq.w	8006348 <_dtoa_r+0x8b0>
 8006208:	2c00      	cmp	r4, #0
 800620a:	dd10      	ble.n	800622e <_dtoa_r+0x796>
 800620c:	4631      	mov	r1, r6
 800620e:	4622      	mov	r2, r4
 8006210:	4628      	mov	r0, r5
 8006212:	f000 fd1f 	bl	8006c54 <__pow5mult>
 8006216:	4652      	mov	r2, sl
 8006218:	4601      	mov	r1, r0
 800621a:	4606      	mov	r6, r0
 800621c:	4628      	mov	r0, r5
 800621e:	f000 fc71 	bl	8006b04 <__multiply>
 8006222:	4680      	mov	r8, r0
 8006224:	4651      	mov	r1, sl
 8006226:	4628      	mov	r0, r5
 8006228:	f000 fb56 	bl	80068d8 <_Bfree>
 800622c:	46c2      	mov	sl, r8
 800622e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006230:	1b1a      	subs	r2, r3, r4
 8006232:	d004      	beq.n	800623e <_dtoa_r+0x7a6>
 8006234:	4651      	mov	r1, sl
 8006236:	4628      	mov	r0, r5
 8006238:	f000 fd0c 	bl	8006c54 <__pow5mult>
 800623c:	4682      	mov	sl, r0
 800623e:	2101      	movs	r1, #1
 8006240:	4628      	mov	r0, r5
 8006242:	f000 fc49 	bl	8006ad8 <__i2b>
 8006246:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006248:	4604      	mov	r4, r0
 800624a:	2b00      	cmp	r3, #0
 800624c:	f340 8082 	ble.w	8006354 <_dtoa_r+0x8bc>
 8006250:	461a      	mov	r2, r3
 8006252:	4601      	mov	r1, r0
 8006254:	4628      	mov	r0, r5
 8006256:	f000 fcfd 	bl	8006c54 <__pow5mult>
 800625a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800625c:	4604      	mov	r4, r0
 800625e:	2b01      	cmp	r3, #1
 8006260:	dd7b      	ble.n	800635a <_dtoa_r+0x8c2>
 8006262:	f04f 0800 	mov.w	r8, #0
 8006266:	6923      	ldr	r3, [r4, #16]
 8006268:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800626c:	6918      	ldr	r0, [r3, #16]
 800626e:	f000 fbe5 	bl	8006a3c <__hi0bits>
 8006272:	f1c0 0020 	rsb	r0, r0, #32
 8006276:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006278:	4418      	add	r0, r3
 800627a:	f010 001f 	ands.w	r0, r0, #31
 800627e:	f000 8092 	beq.w	80063a6 <_dtoa_r+0x90e>
 8006282:	f1c0 0320 	rsb	r3, r0, #32
 8006286:	2b04      	cmp	r3, #4
 8006288:	f340 8085 	ble.w	8006396 <_dtoa_r+0x8fe>
 800628c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800628e:	f1c0 001c 	rsb	r0, r0, #28
 8006292:	4403      	add	r3, r0
 8006294:	4481      	add	r9, r0
 8006296:	4407      	add	r7, r0
 8006298:	9309      	str	r3, [sp, #36]	; 0x24
 800629a:	f1b9 0f00 	cmp.w	r9, #0
 800629e:	dd05      	ble.n	80062ac <_dtoa_r+0x814>
 80062a0:	4651      	mov	r1, sl
 80062a2:	464a      	mov	r2, r9
 80062a4:	4628      	mov	r0, r5
 80062a6:	f000 fd2f 	bl	8006d08 <__lshift>
 80062aa:	4682      	mov	sl, r0
 80062ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	dd05      	ble.n	80062be <_dtoa_r+0x826>
 80062b2:	4621      	mov	r1, r4
 80062b4:	461a      	mov	r2, r3
 80062b6:	4628      	mov	r0, r5
 80062b8:	f000 fd26 	bl	8006d08 <__lshift>
 80062bc:	4604      	mov	r4, r0
 80062be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d072      	beq.n	80063aa <_dtoa_r+0x912>
 80062c4:	4621      	mov	r1, r4
 80062c6:	4650      	mov	r0, sl
 80062c8:	f000 fd8a 	bl	8006de0 <__mcmp>
 80062cc:	2800      	cmp	r0, #0
 80062ce:	da6c      	bge.n	80063aa <_dtoa_r+0x912>
 80062d0:	2300      	movs	r3, #0
 80062d2:	4651      	mov	r1, sl
 80062d4:	220a      	movs	r2, #10
 80062d6:	4628      	mov	r0, r5
 80062d8:	f000 fb20 	bl	800691c <__multadd>
 80062dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062de:	4682      	mov	sl, r0
 80062e0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	f000 81ac 	beq.w	8006642 <_dtoa_r+0xbaa>
 80062ea:	2300      	movs	r3, #0
 80062ec:	4631      	mov	r1, r6
 80062ee:	220a      	movs	r2, #10
 80062f0:	4628      	mov	r0, r5
 80062f2:	f000 fb13 	bl	800691c <__multadd>
 80062f6:	9b06      	ldr	r3, [sp, #24]
 80062f8:	4606      	mov	r6, r0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	f300 8093 	bgt.w	8006426 <_dtoa_r+0x98e>
 8006300:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006302:	2b02      	cmp	r3, #2
 8006304:	dc59      	bgt.n	80063ba <_dtoa_r+0x922>
 8006306:	e08e      	b.n	8006426 <_dtoa_r+0x98e>
 8006308:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800630a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800630e:	e75d      	b.n	80061cc <_dtoa_r+0x734>
 8006310:	9b08      	ldr	r3, [sp, #32]
 8006312:	1e5c      	subs	r4, r3, #1
 8006314:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006316:	42a3      	cmp	r3, r4
 8006318:	bfbf      	itttt	lt
 800631a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800631c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800631e:	1ae3      	sublt	r3, r4, r3
 8006320:	18d2      	addlt	r2, r2, r3
 8006322:	bfa8      	it	ge
 8006324:	1b1c      	subge	r4, r3, r4
 8006326:	9b08      	ldr	r3, [sp, #32]
 8006328:	bfbe      	ittt	lt
 800632a:	940a      	strlt	r4, [sp, #40]	; 0x28
 800632c:	920e      	strlt	r2, [sp, #56]	; 0x38
 800632e:	2400      	movlt	r4, #0
 8006330:	2b00      	cmp	r3, #0
 8006332:	bfb5      	itete	lt
 8006334:	eba9 0703 	sublt.w	r7, r9, r3
 8006338:	464f      	movge	r7, r9
 800633a:	2300      	movlt	r3, #0
 800633c:	9b08      	ldrge	r3, [sp, #32]
 800633e:	e747      	b.n	80061d0 <_dtoa_r+0x738>
 8006340:	464f      	mov	r7, r9
 8006342:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006344:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006346:	e74c      	b.n	80061e2 <_dtoa_r+0x74a>
 8006348:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800634a:	e773      	b.n	8006234 <_dtoa_r+0x79c>
 800634c:	3fe00000 	.word	0x3fe00000
 8006350:	40240000 	.word	0x40240000
 8006354:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006356:	2b01      	cmp	r3, #1
 8006358:	dc18      	bgt.n	800638c <_dtoa_r+0x8f4>
 800635a:	9b04      	ldr	r3, [sp, #16]
 800635c:	b9b3      	cbnz	r3, 800638c <_dtoa_r+0x8f4>
 800635e:	9b05      	ldr	r3, [sp, #20]
 8006360:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006364:	b993      	cbnz	r3, 800638c <_dtoa_r+0x8f4>
 8006366:	9b05      	ldr	r3, [sp, #20]
 8006368:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800636c:	0d1b      	lsrs	r3, r3, #20
 800636e:	051b      	lsls	r3, r3, #20
 8006370:	b17b      	cbz	r3, 8006392 <_dtoa_r+0x8fa>
 8006372:	f04f 0801 	mov.w	r8, #1
 8006376:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006378:	f109 0901 	add.w	r9, r9, #1
 800637c:	3301      	adds	r3, #1
 800637e:	9309      	str	r3, [sp, #36]	; 0x24
 8006380:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006382:	2b00      	cmp	r3, #0
 8006384:	f47f af6f 	bne.w	8006266 <_dtoa_r+0x7ce>
 8006388:	2001      	movs	r0, #1
 800638a:	e774      	b.n	8006276 <_dtoa_r+0x7de>
 800638c:	f04f 0800 	mov.w	r8, #0
 8006390:	e7f6      	b.n	8006380 <_dtoa_r+0x8e8>
 8006392:	4698      	mov	r8, r3
 8006394:	e7f4      	b.n	8006380 <_dtoa_r+0x8e8>
 8006396:	d080      	beq.n	800629a <_dtoa_r+0x802>
 8006398:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800639a:	331c      	adds	r3, #28
 800639c:	441a      	add	r2, r3
 800639e:	4499      	add	r9, r3
 80063a0:	441f      	add	r7, r3
 80063a2:	9209      	str	r2, [sp, #36]	; 0x24
 80063a4:	e779      	b.n	800629a <_dtoa_r+0x802>
 80063a6:	4603      	mov	r3, r0
 80063a8:	e7f6      	b.n	8006398 <_dtoa_r+0x900>
 80063aa:	9b08      	ldr	r3, [sp, #32]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	dc34      	bgt.n	800641a <_dtoa_r+0x982>
 80063b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80063b2:	2b02      	cmp	r3, #2
 80063b4:	dd31      	ble.n	800641a <_dtoa_r+0x982>
 80063b6:	9b08      	ldr	r3, [sp, #32]
 80063b8:	9306      	str	r3, [sp, #24]
 80063ba:	9b06      	ldr	r3, [sp, #24]
 80063bc:	b963      	cbnz	r3, 80063d8 <_dtoa_r+0x940>
 80063be:	4621      	mov	r1, r4
 80063c0:	2205      	movs	r2, #5
 80063c2:	4628      	mov	r0, r5
 80063c4:	f000 faaa 	bl	800691c <__multadd>
 80063c8:	4601      	mov	r1, r0
 80063ca:	4604      	mov	r4, r0
 80063cc:	4650      	mov	r0, sl
 80063ce:	f000 fd07 	bl	8006de0 <__mcmp>
 80063d2:	2800      	cmp	r0, #0
 80063d4:	f73f adbf 	bgt.w	8005f56 <_dtoa_r+0x4be>
 80063d8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80063da:	9f03      	ldr	r7, [sp, #12]
 80063dc:	ea6f 0b03 	mvn.w	fp, r3
 80063e0:	f04f 0800 	mov.w	r8, #0
 80063e4:	4621      	mov	r1, r4
 80063e6:	4628      	mov	r0, r5
 80063e8:	f000 fa76 	bl	80068d8 <_Bfree>
 80063ec:	2e00      	cmp	r6, #0
 80063ee:	f43f aead 	beq.w	800614c <_dtoa_r+0x6b4>
 80063f2:	f1b8 0f00 	cmp.w	r8, #0
 80063f6:	d005      	beq.n	8006404 <_dtoa_r+0x96c>
 80063f8:	45b0      	cmp	r8, r6
 80063fa:	d003      	beq.n	8006404 <_dtoa_r+0x96c>
 80063fc:	4641      	mov	r1, r8
 80063fe:	4628      	mov	r0, r5
 8006400:	f000 fa6a 	bl	80068d8 <_Bfree>
 8006404:	4631      	mov	r1, r6
 8006406:	4628      	mov	r0, r5
 8006408:	f000 fa66 	bl	80068d8 <_Bfree>
 800640c:	e69e      	b.n	800614c <_dtoa_r+0x6b4>
 800640e:	2400      	movs	r4, #0
 8006410:	4626      	mov	r6, r4
 8006412:	e7e1      	b.n	80063d8 <_dtoa_r+0x940>
 8006414:	46c3      	mov	fp, r8
 8006416:	4626      	mov	r6, r4
 8006418:	e59d      	b.n	8005f56 <_dtoa_r+0x4be>
 800641a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800641c:	2b00      	cmp	r3, #0
 800641e:	f000 80c8 	beq.w	80065b2 <_dtoa_r+0xb1a>
 8006422:	9b08      	ldr	r3, [sp, #32]
 8006424:	9306      	str	r3, [sp, #24]
 8006426:	2f00      	cmp	r7, #0
 8006428:	dd05      	ble.n	8006436 <_dtoa_r+0x99e>
 800642a:	4631      	mov	r1, r6
 800642c:	463a      	mov	r2, r7
 800642e:	4628      	mov	r0, r5
 8006430:	f000 fc6a 	bl	8006d08 <__lshift>
 8006434:	4606      	mov	r6, r0
 8006436:	f1b8 0f00 	cmp.w	r8, #0
 800643a:	d05b      	beq.n	80064f4 <_dtoa_r+0xa5c>
 800643c:	4628      	mov	r0, r5
 800643e:	6871      	ldr	r1, [r6, #4]
 8006440:	f000 fa0a 	bl	8006858 <_Balloc>
 8006444:	4607      	mov	r7, r0
 8006446:	b928      	cbnz	r0, 8006454 <_dtoa_r+0x9bc>
 8006448:	4602      	mov	r2, r0
 800644a:	f240 21ef 	movw	r1, #751	; 0x2ef
 800644e:	4b81      	ldr	r3, [pc, #516]	; (8006654 <_dtoa_r+0xbbc>)
 8006450:	f7ff bb36 	b.w	8005ac0 <_dtoa_r+0x28>
 8006454:	6932      	ldr	r2, [r6, #16]
 8006456:	f106 010c 	add.w	r1, r6, #12
 800645a:	3202      	adds	r2, #2
 800645c:	0092      	lsls	r2, r2, #2
 800645e:	300c      	adds	r0, #12
 8006460:	f002 fb02 	bl	8008a68 <memcpy>
 8006464:	2201      	movs	r2, #1
 8006466:	4639      	mov	r1, r7
 8006468:	4628      	mov	r0, r5
 800646a:	f000 fc4d 	bl	8006d08 <__lshift>
 800646e:	46b0      	mov	r8, r6
 8006470:	4606      	mov	r6, r0
 8006472:	9b03      	ldr	r3, [sp, #12]
 8006474:	9a03      	ldr	r2, [sp, #12]
 8006476:	3301      	adds	r3, #1
 8006478:	9308      	str	r3, [sp, #32]
 800647a:	9b06      	ldr	r3, [sp, #24]
 800647c:	4413      	add	r3, r2
 800647e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006480:	9b04      	ldr	r3, [sp, #16]
 8006482:	f003 0301 	and.w	r3, r3, #1
 8006486:	930a      	str	r3, [sp, #40]	; 0x28
 8006488:	9b08      	ldr	r3, [sp, #32]
 800648a:	4621      	mov	r1, r4
 800648c:	3b01      	subs	r3, #1
 800648e:	4650      	mov	r0, sl
 8006490:	9304      	str	r3, [sp, #16]
 8006492:	f7ff fa75 	bl	8005980 <quorem>
 8006496:	4641      	mov	r1, r8
 8006498:	9006      	str	r0, [sp, #24]
 800649a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800649e:	4650      	mov	r0, sl
 80064a0:	f000 fc9e 	bl	8006de0 <__mcmp>
 80064a4:	4632      	mov	r2, r6
 80064a6:	9009      	str	r0, [sp, #36]	; 0x24
 80064a8:	4621      	mov	r1, r4
 80064aa:	4628      	mov	r0, r5
 80064ac:	f000 fcb4 	bl	8006e18 <__mdiff>
 80064b0:	68c2      	ldr	r2, [r0, #12]
 80064b2:	4607      	mov	r7, r0
 80064b4:	bb02      	cbnz	r2, 80064f8 <_dtoa_r+0xa60>
 80064b6:	4601      	mov	r1, r0
 80064b8:	4650      	mov	r0, sl
 80064ba:	f000 fc91 	bl	8006de0 <__mcmp>
 80064be:	4602      	mov	r2, r0
 80064c0:	4639      	mov	r1, r7
 80064c2:	4628      	mov	r0, r5
 80064c4:	920c      	str	r2, [sp, #48]	; 0x30
 80064c6:	f000 fa07 	bl	80068d8 <_Bfree>
 80064ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80064cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80064ce:	9f08      	ldr	r7, [sp, #32]
 80064d0:	ea43 0102 	orr.w	r1, r3, r2
 80064d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064d6:	4319      	orrs	r1, r3
 80064d8:	d110      	bne.n	80064fc <_dtoa_r+0xa64>
 80064da:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80064de:	d029      	beq.n	8006534 <_dtoa_r+0xa9c>
 80064e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	dd02      	ble.n	80064ec <_dtoa_r+0xa54>
 80064e6:	9b06      	ldr	r3, [sp, #24]
 80064e8:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80064ec:	9b04      	ldr	r3, [sp, #16]
 80064ee:	f883 9000 	strb.w	r9, [r3]
 80064f2:	e777      	b.n	80063e4 <_dtoa_r+0x94c>
 80064f4:	4630      	mov	r0, r6
 80064f6:	e7ba      	b.n	800646e <_dtoa_r+0x9d6>
 80064f8:	2201      	movs	r2, #1
 80064fa:	e7e1      	b.n	80064c0 <_dtoa_r+0xa28>
 80064fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064fe:	2b00      	cmp	r3, #0
 8006500:	db04      	blt.n	800650c <_dtoa_r+0xa74>
 8006502:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006504:	430b      	orrs	r3, r1
 8006506:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006508:	430b      	orrs	r3, r1
 800650a:	d120      	bne.n	800654e <_dtoa_r+0xab6>
 800650c:	2a00      	cmp	r2, #0
 800650e:	dded      	ble.n	80064ec <_dtoa_r+0xa54>
 8006510:	4651      	mov	r1, sl
 8006512:	2201      	movs	r2, #1
 8006514:	4628      	mov	r0, r5
 8006516:	f000 fbf7 	bl	8006d08 <__lshift>
 800651a:	4621      	mov	r1, r4
 800651c:	4682      	mov	sl, r0
 800651e:	f000 fc5f 	bl	8006de0 <__mcmp>
 8006522:	2800      	cmp	r0, #0
 8006524:	dc03      	bgt.n	800652e <_dtoa_r+0xa96>
 8006526:	d1e1      	bne.n	80064ec <_dtoa_r+0xa54>
 8006528:	f019 0f01 	tst.w	r9, #1
 800652c:	d0de      	beq.n	80064ec <_dtoa_r+0xa54>
 800652e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006532:	d1d8      	bne.n	80064e6 <_dtoa_r+0xa4e>
 8006534:	2339      	movs	r3, #57	; 0x39
 8006536:	9a04      	ldr	r2, [sp, #16]
 8006538:	7013      	strb	r3, [r2, #0]
 800653a:	463b      	mov	r3, r7
 800653c:	461f      	mov	r7, r3
 800653e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006542:	3b01      	subs	r3, #1
 8006544:	2a39      	cmp	r2, #57	; 0x39
 8006546:	d06b      	beq.n	8006620 <_dtoa_r+0xb88>
 8006548:	3201      	adds	r2, #1
 800654a:	701a      	strb	r2, [r3, #0]
 800654c:	e74a      	b.n	80063e4 <_dtoa_r+0x94c>
 800654e:	2a00      	cmp	r2, #0
 8006550:	dd07      	ble.n	8006562 <_dtoa_r+0xaca>
 8006552:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006556:	d0ed      	beq.n	8006534 <_dtoa_r+0xa9c>
 8006558:	9a04      	ldr	r2, [sp, #16]
 800655a:	f109 0301 	add.w	r3, r9, #1
 800655e:	7013      	strb	r3, [r2, #0]
 8006560:	e740      	b.n	80063e4 <_dtoa_r+0x94c>
 8006562:	9b08      	ldr	r3, [sp, #32]
 8006564:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006566:	f803 9c01 	strb.w	r9, [r3, #-1]
 800656a:	4293      	cmp	r3, r2
 800656c:	d042      	beq.n	80065f4 <_dtoa_r+0xb5c>
 800656e:	4651      	mov	r1, sl
 8006570:	2300      	movs	r3, #0
 8006572:	220a      	movs	r2, #10
 8006574:	4628      	mov	r0, r5
 8006576:	f000 f9d1 	bl	800691c <__multadd>
 800657a:	45b0      	cmp	r8, r6
 800657c:	4682      	mov	sl, r0
 800657e:	f04f 0300 	mov.w	r3, #0
 8006582:	f04f 020a 	mov.w	r2, #10
 8006586:	4641      	mov	r1, r8
 8006588:	4628      	mov	r0, r5
 800658a:	d107      	bne.n	800659c <_dtoa_r+0xb04>
 800658c:	f000 f9c6 	bl	800691c <__multadd>
 8006590:	4680      	mov	r8, r0
 8006592:	4606      	mov	r6, r0
 8006594:	9b08      	ldr	r3, [sp, #32]
 8006596:	3301      	adds	r3, #1
 8006598:	9308      	str	r3, [sp, #32]
 800659a:	e775      	b.n	8006488 <_dtoa_r+0x9f0>
 800659c:	f000 f9be 	bl	800691c <__multadd>
 80065a0:	4631      	mov	r1, r6
 80065a2:	4680      	mov	r8, r0
 80065a4:	2300      	movs	r3, #0
 80065a6:	220a      	movs	r2, #10
 80065a8:	4628      	mov	r0, r5
 80065aa:	f000 f9b7 	bl	800691c <__multadd>
 80065ae:	4606      	mov	r6, r0
 80065b0:	e7f0      	b.n	8006594 <_dtoa_r+0xafc>
 80065b2:	9b08      	ldr	r3, [sp, #32]
 80065b4:	9306      	str	r3, [sp, #24]
 80065b6:	9f03      	ldr	r7, [sp, #12]
 80065b8:	4621      	mov	r1, r4
 80065ba:	4650      	mov	r0, sl
 80065bc:	f7ff f9e0 	bl	8005980 <quorem>
 80065c0:	9b03      	ldr	r3, [sp, #12]
 80065c2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80065c6:	f807 9b01 	strb.w	r9, [r7], #1
 80065ca:	1afa      	subs	r2, r7, r3
 80065cc:	9b06      	ldr	r3, [sp, #24]
 80065ce:	4293      	cmp	r3, r2
 80065d0:	dd07      	ble.n	80065e2 <_dtoa_r+0xb4a>
 80065d2:	4651      	mov	r1, sl
 80065d4:	2300      	movs	r3, #0
 80065d6:	220a      	movs	r2, #10
 80065d8:	4628      	mov	r0, r5
 80065da:	f000 f99f 	bl	800691c <__multadd>
 80065de:	4682      	mov	sl, r0
 80065e0:	e7ea      	b.n	80065b8 <_dtoa_r+0xb20>
 80065e2:	9b06      	ldr	r3, [sp, #24]
 80065e4:	f04f 0800 	mov.w	r8, #0
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	bfcc      	ite	gt
 80065ec:	461f      	movgt	r7, r3
 80065ee:	2701      	movle	r7, #1
 80065f0:	9b03      	ldr	r3, [sp, #12]
 80065f2:	441f      	add	r7, r3
 80065f4:	4651      	mov	r1, sl
 80065f6:	2201      	movs	r2, #1
 80065f8:	4628      	mov	r0, r5
 80065fa:	f000 fb85 	bl	8006d08 <__lshift>
 80065fe:	4621      	mov	r1, r4
 8006600:	4682      	mov	sl, r0
 8006602:	f000 fbed 	bl	8006de0 <__mcmp>
 8006606:	2800      	cmp	r0, #0
 8006608:	dc97      	bgt.n	800653a <_dtoa_r+0xaa2>
 800660a:	d102      	bne.n	8006612 <_dtoa_r+0xb7a>
 800660c:	f019 0f01 	tst.w	r9, #1
 8006610:	d193      	bne.n	800653a <_dtoa_r+0xaa2>
 8006612:	463b      	mov	r3, r7
 8006614:	461f      	mov	r7, r3
 8006616:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800661a:	2a30      	cmp	r2, #48	; 0x30
 800661c:	d0fa      	beq.n	8006614 <_dtoa_r+0xb7c>
 800661e:	e6e1      	b.n	80063e4 <_dtoa_r+0x94c>
 8006620:	9a03      	ldr	r2, [sp, #12]
 8006622:	429a      	cmp	r2, r3
 8006624:	d18a      	bne.n	800653c <_dtoa_r+0xaa4>
 8006626:	2331      	movs	r3, #49	; 0x31
 8006628:	f10b 0b01 	add.w	fp, fp, #1
 800662c:	e797      	b.n	800655e <_dtoa_r+0xac6>
 800662e:	4b0a      	ldr	r3, [pc, #40]	; (8006658 <_dtoa_r+0xbc0>)
 8006630:	f7ff ba9f 	b.w	8005b72 <_dtoa_r+0xda>
 8006634:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006636:	2b00      	cmp	r3, #0
 8006638:	f47f aa77 	bne.w	8005b2a <_dtoa_r+0x92>
 800663c:	4b07      	ldr	r3, [pc, #28]	; (800665c <_dtoa_r+0xbc4>)
 800663e:	f7ff ba98 	b.w	8005b72 <_dtoa_r+0xda>
 8006642:	9b06      	ldr	r3, [sp, #24]
 8006644:	2b00      	cmp	r3, #0
 8006646:	dcb6      	bgt.n	80065b6 <_dtoa_r+0xb1e>
 8006648:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800664a:	2b02      	cmp	r3, #2
 800664c:	f73f aeb5 	bgt.w	80063ba <_dtoa_r+0x922>
 8006650:	e7b1      	b.n	80065b6 <_dtoa_r+0xb1e>
 8006652:	bf00      	nop
 8006654:	080099c9 	.word	0x080099c9
 8006658:	08009cb0 	.word	0x08009cb0
 800665c:	0800994d 	.word	0x0800994d

08006660 <_free_r>:
 8006660:	b538      	push	{r3, r4, r5, lr}
 8006662:	4605      	mov	r5, r0
 8006664:	2900      	cmp	r1, #0
 8006666:	d040      	beq.n	80066ea <_free_r+0x8a>
 8006668:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800666c:	1f0c      	subs	r4, r1, #4
 800666e:	2b00      	cmp	r3, #0
 8006670:	bfb8      	it	lt
 8006672:	18e4      	addlt	r4, r4, r3
 8006674:	f000 f8e4 	bl	8006840 <__malloc_lock>
 8006678:	4a1c      	ldr	r2, [pc, #112]	; (80066ec <_free_r+0x8c>)
 800667a:	6813      	ldr	r3, [r2, #0]
 800667c:	b933      	cbnz	r3, 800668c <_free_r+0x2c>
 800667e:	6063      	str	r3, [r4, #4]
 8006680:	6014      	str	r4, [r2, #0]
 8006682:	4628      	mov	r0, r5
 8006684:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006688:	f000 b8e0 	b.w	800684c <__malloc_unlock>
 800668c:	42a3      	cmp	r3, r4
 800668e:	d908      	bls.n	80066a2 <_free_r+0x42>
 8006690:	6820      	ldr	r0, [r4, #0]
 8006692:	1821      	adds	r1, r4, r0
 8006694:	428b      	cmp	r3, r1
 8006696:	bf01      	itttt	eq
 8006698:	6819      	ldreq	r1, [r3, #0]
 800669a:	685b      	ldreq	r3, [r3, #4]
 800669c:	1809      	addeq	r1, r1, r0
 800669e:	6021      	streq	r1, [r4, #0]
 80066a0:	e7ed      	b.n	800667e <_free_r+0x1e>
 80066a2:	461a      	mov	r2, r3
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	b10b      	cbz	r3, 80066ac <_free_r+0x4c>
 80066a8:	42a3      	cmp	r3, r4
 80066aa:	d9fa      	bls.n	80066a2 <_free_r+0x42>
 80066ac:	6811      	ldr	r1, [r2, #0]
 80066ae:	1850      	adds	r0, r2, r1
 80066b0:	42a0      	cmp	r0, r4
 80066b2:	d10b      	bne.n	80066cc <_free_r+0x6c>
 80066b4:	6820      	ldr	r0, [r4, #0]
 80066b6:	4401      	add	r1, r0
 80066b8:	1850      	adds	r0, r2, r1
 80066ba:	4283      	cmp	r3, r0
 80066bc:	6011      	str	r1, [r2, #0]
 80066be:	d1e0      	bne.n	8006682 <_free_r+0x22>
 80066c0:	6818      	ldr	r0, [r3, #0]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	4408      	add	r0, r1
 80066c6:	6010      	str	r0, [r2, #0]
 80066c8:	6053      	str	r3, [r2, #4]
 80066ca:	e7da      	b.n	8006682 <_free_r+0x22>
 80066cc:	d902      	bls.n	80066d4 <_free_r+0x74>
 80066ce:	230c      	movs	r3, #12
 80066d0:	602b      	str	r3, [r5, #0]
 80066d2:	e7d6      	b.n	8006682 <_free_r+0x22>
 80066d4:	6820      	ldr	r0, [r4, #0]
 80066d6:	1821      	adds	r1, r4, r0
 80066d8:	428b      	cmp	r3, r1
 80066da:	bf01      	itttt	eq
 80066dc:	6819      	ldreq	r1, [r3, #0]
 80066de:	685b      	ldreq	r3, [r3, #4]
 80066e0:	1809      	addeq	r1, r1, r0
 80066e2:	6021      	streq	r1, [r4, #0]
 80066e4:	6063      	str	r3, [r4, #4]
 80066e6:	6054      	str	r4, [r2, #4]
 80066e8:	e7cb      	b.n	8006682 <_free_r+0x22>
 80066ea:	bd38      	pop	{r3, r4, r5, pc}
 80066ec:	200004b4 	.word	0x200004b4

080066f0 <malloc>:
 80066f0:	4b02      	ldr	r3, [pc, #8]	; (80066fc <malloc+0xc>)
 80066f2:	4601      	mov	r1, r0
 80066f4:	6818      	ldr	r0, [r3, #0]
 80066f6:	f000 b823 	b.w	8006740 <_malloc_r>
 80066fa:	bf00      	nop
 80066fc:	20000068 	.word	0x20000068

08006700 <sbrk_aligned>:
 8006700:	b570      	push	{r4, r5, r6, lr}
 8006702:	4e0e      	ldr	r6, [pc, #56]	; (800673c <sbrk_aligned+0x3c>)
 8006704:	460c      	mov	r4, r1
 8006706:	6831      	ldr	r1, [r6, #0]
 8006708:	4605      	mov	r5, r0
 800670a:	b911      	cbnz	r1, 8006712 <sbrk_aligned+0x12>
 800670c:	f002 f99c 	bl	8008a48 <_sbrk_r>
 8006710:	6030      	str	r0, [r6, #0]
 8006712:	4621      	mov	r1, r4
 8006714:	4628      	mov	r0, r5
 8006716:	f002 f997 	bl	8008a48 <_sbrk_r>
 800671a:	1c43      	adds	r3, r0, #1
 800671c:	d00a      	beq.n	8006734 <sbrk_aligned+0x34>
 800671e:	1cc4      	adds	r4, r0, #3
 8006720:	f024 0403 	bic.w	r4, r4, #3
 8006724:	42a0      	cmp	r0, r4
 8006726:	d007      	beq.n	8006738 <sbrk_aligned+0x38>
 8006728:	1a21      	subs	r1, r4, r0
 800672a:	4628      	mov	r0, r5
 800672c:	f002 f98c 	bl	8008a48 <_sbrk_r>
 8006730:	3001      	adds	r0, #1
 8006732:	d101      	bne.n	8006738 <sbrk_aligned+0x38>
 8006734:	f04f 34ff 	mov.w	r4, #4294967295
 8006738:	4620      	mov	r0, r4
 800673a:	bd70      	pop	{r4, r5, r6, pc}
 800673c:	200004b8 	.word	0x200004b8

08006740 <_malloc_r>:
 8006740:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006744:	1ccd      	adds	r5, r1, #3
 8006746:	f025 0503 	bic.w	r5, r5, #3
 800674a:	3508      	adds	r5, #8
 800674c:	2d0c      	cmp	r5, #12
 800674e:	bf38      	it	cc
 8006750:	250c      	movcc	r5, #12
 8006752:	2d00      	cmp	r5, #0
 8006754:	4607      	mov	r7, r0
 8006756:	db01      	blt.n	800675c <_malloc_r+0x1c>
 8006758:	42a9      	cmp	r1, r5
 800675a:	d905      	bls.n	8006768 <_malloc_r+0x28>
 800675c:	230c      	movs	r3, #12
 800675e:	2600      	movs	r6, #0
 8006760:	603b      	str	r3, [r7, #0]
 8006762:	4630      	mov	r0, r6
 8006764:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006768:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800683c <_malloc_r+0xfc>
 800676c:	f000 f868 	bl	8006840 <__malloc_lock>
 8006770:	f8d8 3000 	ldr.w	r3, [r8]
 8006774:	461c      	mov	r4, r3
 8006776:	bb5c      	cbnz	r4, 80067d0 <_malloc_r+0x90>
 8006778:	4629      	mov	r1, r5
 800677a:	4638      	mov	r0, r7
 800677c:	f7ff ffc0 	bl	8006700 <sbrk_aligned>
 8006780:	1c43      	adds	r3, r0, #1
 8006782:	4604      	mov	r4, r0
 8006784:	d155      	bne.n	8006832 <_malloc_r+0xf2>
 8006786:	f8d8 4000 	ldr.w	r4, [r8]
 800678a:	4626      	mov	r6, r4
 800678c:	2e00      	cmp	r6, #0
 800678e:	d145      	bne.n	800681c <_malloc_r+0xdc>
 8006790:	2c00      	cmp	r4, #0
 8006792:	d048      	beq.n	8006826 <_malloc_r+0xe6>
 8006794:	6823      	ldr	r3, [r4, #0]
 8006796:	4631      	mov	r1, r6
 8006798:	4638      	mov	r0, r7
 800679a:	eb04 0903 	add.w	r9, r4, r3
 800679e:	f002 f953 	bl	8008a48 <_sbrk_r>
 80067a2:	4581      	cmp	r9, r0
 80067a4:	d13f      	bne.n	8006826 <_malloc_r+0xe6>
 80067a6:	6821      	ldr	r1, [r4, #0]
 80067a8:	4638      	mov	r0, r7
 80067aa:	1a6d      	subs	r5, r5, r1
 80067ac:	4629      	mov	r1, r5
 80067ae:	f7ff ffa7 	bl	8006700 <sbrk_aligned>
 80067b2:	3001      	adds	r0, #1
 80067b4:	d037      	beq.n	8006826 <_malloc_r+0xe6>
 80067b6:	6823      	ldr	r3, [r4, #0]
 80067b8:	442b      	add	r3, r5
 80067ba:	6023      	str	r3, [r4, #0]
 80067bc:	f8d8 3000 	ldr.w	r3, [r8]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d038      	beq.n	8006836 <_malloc_r+0xf6>
 80067c4:	685a      	ldr	r2, [r3, #4]
 80067c6:	42a2      	cmp	r2, r4
 80067c8:	d12b      	bne.n	8006822 <_malloc_r+0xe2>
 80067ca:	2200      	movs	r2, #0
 80067cc:	605a      	str	r2, [r3, #4]
 80067ce:	e00f      	b.n	80067f0 <_malloc_r+0xb0>
 80067d0:	6822      	ldr	r2, [r4, #0]
 80067d2:	1b52      	subs	r2, r2, r5
 80067d4:	d41f      	bmi.n	8006816 <_malloc_r+0xd6>
 80067d6:	2a0b      	cmp	r2, #11
 80067d8:	d917      	bls.n	800680a <_malloc_r+0xca>
 80067da:	1961      	adds	r1, r4, r5
 80067dc:	42a3      	cmp	r3, r4
 80067de:	6025      	str	r5, [r4, #0]
 80067e0:	bf18      	it	ne
 80067e2:	6059      	strne	r1, [r3, #4]
 80067e4:	6863      	ldr	r3, [r4, #4]
 80067e6:	bf08      	it	eq
 80067e8:	f8c8 1000 	streq.w	r1, [r8]
 80067ec:	5162      	str	r2, [r4, r5]
 80067ee:	604b      	str	r3, [r1, #4]
 80067f0:	4638      	mov	r0, r7
 80067f2:	f104 060b 	add.w	r6, r4, #11
 80067f6:	f000 f829 	bl	800684c <__malloc_unlock>
 80067fa:	f026 0607 	bic.w	r6, r6, #7
 80067fe:	1d23      	adds	r3, r4, #4
 8006800:	1af2      	subs	r2, r6, r3
 8006802:	d0ae      	beq.n	8006762 <_malloc_r+0x22>
 8006804:	1b9b      	subs	r3, r3, r6
 8006806:	50a3      	str	r3, [r4, r2]
 8006808:	e7ab      	b.n	8006762 <_malloc_r+0x22>
 800680a:	42a3      	cmp	r3, r4
 800680c:	6862      	ldr	r2, [r4, #4]
 800680e:	d1dd      	bne.n	80067cc <_malloc_r+0x8c>
 8006810:	f8c8 2000 	str.w	r2, [r8]
 8006814:	e7ec      	b.n	80067f0 <_malloc_r+0xb0>
 8006816:	4623      	mov	r3, r4
 8006818:	6864      	ldr	r4, [r4, #4]
 800681a:	e7ac      	b.n	8006776 <_malloc_r+0x36>
 800681c:	4634      	mov	r4, r6
 800681e:	6876      	ldr	r6, [r6, #4]
 8006820:	e7b4      	b.n	800678c <_malloc_r+0x4c>
 8006822:	4613      	mov	r3, r2
 8006824:	e7cc      	b.n	80067c0 <_malloc_r+0x80>
 8006826:	230c      	movs	r3, #12
 8006828:	4638      	mov	r0, r7
 800682a:	603b      	str	r3, [r7, #0]
 800682c:	f000 f80e 	bl	800684c <__malloc_unlock>
 8006830:	e797      	b.n	8006762 <_malloc_r+0x22>
 8006832:	6025      	str	r5, [r4, #0]
 8006834:	e7dc      	b.n	80067f0 <_malloc_r+0xb0>
 8006836:	605b      	str	r3, [r3, #4]
 8006838:	deff      	udf	#255	; 0xff
 800683a:	bf00      	nop
 800683c:	200004b4 	.word	0x200004b4

08006840 <__malloc_lock>:
 8006840:	4801      	ldr	r0, [pc, #4]	; (8006848 <__malloc_lock+0x8>)
 8006842:	f7ff b888 	b.w	8005956 <__retarget_lock_acquire_recursive>
 8006846:	bf00      	nop
 8006848:	200004b0 	.word	0x200004b0

0800684c <__malloc_unlock>:
 800684c:	4801      	ldr	r0, [pc, #4]	; (8006854 <__malloc_unlock+0x8>)
 800684e:	f7ff b883 	b.w	8005958 <__retarget_lock_release_recursive>
 8006852:	bf00      	nop
 8006854:	200004b0 	.word	0x200004b0

08006858 <_Balloc>:
 8006858:	b570      	push	{r4, r5, r6, lr}
 800685a:	69c6      	ldr	r6, [r0, #28]
 800685c:	4604      	mov	r4, r0
 800685e:	460d      	mov	r5, r1
 8006860:	b976      	cbnz	r6, 8006880 <_Balloc+0x28>
 8006862:	2010      	movs	r0, #16
 8006864:	f7ff ff44 	bl	80066f0 <malloc>
 8006868:	4602      	mov	r2, r0
 800686a:	61e0      	str	r0, [r4, #28]
 800686c:	b920      	cbnz	r0, 8006878 <_Balloc+0x20>
 800686e:	216b      	movs	r1, #107	; 0x6b
 8006870:	4b17      	ldr	r3, [pc, #92]	; (80068d0 <_Balloc+0x78>)
 8006872:	4818      	ldr	r0, [pc, #96]	; (80068d4 <_Balloc+0x7c>)
 8006874:	f002 f90c 	bl	8008a90 <__assert_func>
 8006878:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800687c:	6006      	str	r6, [r0, #0]
 800687e:	60c6      	str	r6, [r0, #12]
 8006880:	69e6      	ldr	r6, [r4, #28]
 8006882:	68f3      	ldr	r3, [r6, #12]
 8006884:	b183      	cbz	r3, 80068a8 <_Balloc+0x50>
 8006886:	69e3      	ldr	r3, [r4, #28]
 8006888:	68db      	ldr	r3, [r3, #12]
 800688a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800688e:	b9b8      	cbnz	r0, 80068c0 <_Balloc+0x68>
 8006890:	2101      	movs	r1, #1
 8006892:	fa01 f605 	lsl.w	r6, r1, r5
 8006896:	1d72      	adds	r2, r6, #5
 8006898:	4620      	mov	r0, r4
 800689a:	0092      	lsls	r2, r2, #2
 800689c:	f002 f916 	bl	8008acc <_calloc_r>
 80068a0:	b160      	cbz	r0, 80068bc <_Balloc+0x64>
 80068a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80068a6:	e00e      	b.n	80068c6 <_Balloc+0x6e>
 80068a8:	2221      	movs	r2, #33	; 0x21
 80068aa:	2104      	movs	r1, #4
 80068ac:	4620      	mov	r0, r4
 80068ae:	f002 f90d 	bl	8008acc <_calloc_r>
 80068b2:	69e3      	ldr	r3, [r4, #28]
 80068b4:	60f0      	str	r0, [r6, #12]
 80068b6:	68db      	ldr	r3, [r3, #12]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d1e4      	bne.n	8006886 <_Balloc+0x2e>
 80068bc:	2000      	movs	r0, #0
 80068be:	bd70      	pop	{r4, r5, r6, pc}
 80068c0:	6802      	ldr	r2, [r0, #0]
 80068c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80068c6:	2300      	movs	r3, #0
 80068c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80068cc:	e7f7      	b.n	80068be <_Balloc+0x66>
 80068ce:	bf00      	nop
 80068d0:	0800995a 	.word	0x0800995a
 80068d4:	080099da 	.word	0x080099da

080068d8 <_Bfree>:
 80068d8:	b570      	push	{r4, r5, r6, lr}
 80068da:	69c6      	ldr	r6, [r0, #28]
 80068dc:	4605      	mov	r5, r0
 80068de:	460c      	mov	r4, r1
 80068e0:	b976      	cbnz	r6, 8006900 <_Bfree+0x28>
 80068e2:	2010      	movs	r0, #16
 80068e4:	f7ff ff04 	bl	80066f0 <malloc>
 80068e8:	4602      	mov	r2, r0
 80068ea:	61e8      	str	r0, [r5, #28]
 80068ec:	b920      	cbnz	r0, 80068f8 <_Bfree+0x20>
 80068ee:	218f      	movs	r1, #143	; 0x8f
 80068f0:	4b08      	ldr	r3, [pc, #32]	; (8006914 <_Bfree+0x3c>)
 80068f2:	4809      	ldr	r0, [pc, #36]	; (8006918 <_Bfree+0x40>)
 80068f4:	f002 f8cc 	bl	8008a90 <__assert_func>
 80068f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80068fc:	6006      	str	r6, [r0, #0]
 80068fe:	60c6      	str	r6, [r0, #12]
 8006900:	b13c      	cbz	r4, 8006912 <_Bfree+0x3a>
 8006902:	69eb      	ldr	r3, [r5, #28]
 8006904:	6862      	ldr	r2, [r4, #4]
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800690c:	6021      	str	r1, [r4, #0]
 800690e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006912:	bd70      	pop	{r4, r5, r6, pc}
 8006914:	0800995a 	.word	0x0800995a
 8006918:	080099da 	.word	0x080099da

0800691c <__multadd>:
 800691c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006920:	4607      	mov	r7, r0
 8006922:	460c      	mov	r4, r1
 8006924:	461e      	mov	r6, r3
 8006926:	2000      	movs	r0, #0
 8006928:	690d      	ldr	r5, [r1, #16]
 800692a:	f101 0c14 	add.w	ip, r1, #20
 800692e:	f8dc 3000 	ldr.w	r3, [ip]
 8006932:	3001      	adds	r0, #1
 8006934:	b299      	uxth	r1, r3
 8006936:	fb02 6101 	mla	r1, r2, r1, r6
 800693a:	0c1e      	lsrs	r6, r3, #16
 800693c:	0c0b      	lsrs	r3, r1, #16
 800693e:	fb02 3306 	mla	r3, r2, r6, r3
 8006942:	b289      	uxth	r1, r1
 8006944:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006948:	4285      	cmp	r5, r0
 800694a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800694e:	f84c 1b04 	str.w	r1, [ip], #4
 8006952:	dcec      	bgt.n	800692e <__multadd+0x12>
 8006954:	b30e      	cbz	r6, 800699a <__multadd+0x7e>
 8006956:	68a3      	ldr	r3, [r4, #8]
 8006958:	42ab      	cmp	r3, r5
 800695a:	dc19      	bgt.n	8006990 <__multadd+0x74>
 800695c:	6861      	ldr	r1, [r4, #4]
 800695e:	4638      	mov	r0, r7
 8006960:	3101      	adds	r1, #1
 8006962:	f7ff ff79 	bl	8006858 <_Balloc>
 8006966:	4680      	mov	r8, r0
 8006968:	b928      	cbnz	r0, 8006976 <__multadd+0x5a>
 800696a:	4602      	mov	r2, r0
 800696c:	21ba      	movs	r1, #186	; 0xba
 800696e:	4b0c      	ldr	r3, [pc, #48]	; (80069a0 <__multadd+0x84>)
 8006970:	480c      	ldr	r0, [pc, #48]	; (80069a4 <__multadd+0x88>)
 8006972:	f002 f88d 	bl	8008a90 <__assert_func>
 8006976:	6922      	ldr	r2, [r4, #16]
 8006978:	f104 010c 	add.w	r1, r4, #12
 800697c:	3202      	adds	r2, #2
 800697e:	0092      	lsls	r2, r2, #2
 8006980:	300c      	adds	r0, #12
 8006982:	f002 f871 	bl	8008a68 <memcpy>
 8006986:	4621      	mov	r1, r4
 8006988:	4638      	mov	r0, r7
 800698a:	f7ff ffa5 	bl	80068d8 <_Bfree>
 800698e:	4644      	mov	r4, r8
 8006990:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006994:	3501      	adds	r5, #1
 8006996:	615e      	str	r6, [r3, #20]
 8006998:	6125      	str	r5, [r4, #16]
 800699a:	4620      	mov	r0, r4
 800699c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069a0:	080099c9 	.word	0x080099c9
 80069a4:	080099da 	.word	0x080099da

080069a8 <__s2b>:
 80069a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069ac:	4615      	mov	r5, r2
 80069ae:	2209      	movs	r2, #9
 80069b0:	461f      	mov	r7, r3
 80069b2:	3308      	adds	r3, #8
 80069b4:	460c      	mov	r4, r1
 80069b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80069ba:	4606      	mov	r6, r0
 80069bc:	2201      	movs	r2, #1
 80069be:	2100      	movs	r1, #0
 80069c0:	429a      	cmp	r2, r3
 80069c2:	db09      	blt.n	80069d8 <__s2b+0x30>
 80069c4:	4630      	mov	r0, r6
 80069c6:	f7ff ff47 	bl	8006858 <_Balloc>
 80069ca:	b940      	cbnz	r0, 80069de <__s2b+0x36>
 80069cc:	4602      	mov	r2, r0
 80069ce:	21d3      	movs	r1, #211	; 0xd3
 80069d0:	4b18      	ldr	r3, [pc, #96]	; (8006a34 <__s2b+0x8c>)
 80069d2:	4819      	ldr	r0, [pc, #100]	; (8006a38 <__s2b+0x90>)
 80069d4:	f002 f85c 	bl	8008a90 <__assert_func>
 80069d8:	0052      	lsls	r2, r2, #1
 80069da:	3101      	adds	r1, #1
 80069dc:	e7f0      	b.n	80069c0 <__s2b+0x18>
 80069de:	9b08      	ldr	r3, [sp, #32]
 80069e0:	2d09      	cmp	r5, #9
 80069e2:	6143      	str	r3, [r0, #20]
 80069e4:	f04f 0301 	mov.w	r3, #1
 80069e8:	6103      	str	r3, [r0, #16]
 80069ea:	dd16      	ble.n	8006a1a <__s2b+0x72>
 80069ec:	f104 0909 	add.w	r9, r4, #9
 80069f0:	46c8      	mov	r8, r9
 80069f2:	442c      	add	r4, r5
 80069f4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80069f8:	4601      	mov	r1, r0
 80069fa:	220a      	movs	r2, #10
 80069fc:	4630      	mov	r0, r6
 80069fe:	3b30      	subs	r3, #48	; 0x30
 8006a00:	f7ff ff8c 	bl	800691c <__multadd>
 8006a04:	45a0      	cmp	r8, r4
 8006a06:	d1f5      	bne.n	80069f4 <__s2b+0x4c>
 8006a08:	f1a5 0408 	sub.w	r4, r5, #8
 8006a0c:	444c      	add	r4, r9
 8006a0e:	1b2d      	subs	r5, r5, r4
 8006a10:	1963      	adds	r3, r4, r5
 8006a12:	42bb      	cmp	r3, r7
 8006a14:	db04      	blt.n	8006a20 <__s2b+0x78>
 8006a16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a1a:	2509      	movs	r5, #9
 8006a1c:	340a      	adds	r4, #10
 8006a1e:	e7f6      	b.n	8006a0e <__s2b+0x66>
 8006a20:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006a24:	4601      	mov	r1, r0
 8006a26:	220a      	movs	r2, #10
 8006a28:	4630      	mov	r0, r6
 8006a2a:	3b30      	subs	r3, #48	; 0x30
 8006a2c:	f7ff ff76 	bl	800691c <__multadd>
 8006a30:	e7ee      	b.n	8006a10 <__s2b+0x68>
 8006a32:	bf00      	nop
 8006a34:	080099c9 	.word	0x080099c9
 8006a38:	080099da 	.word	0x080099da

08006a3c <__hi0bits>:
 8006a3c:	0c02      	lsrs	r2, r0, #16
 8006a3e:	0412      	lsls	r2, r2, #16
 8006a40:	4603      	mov	r3, r0
 8006a42:	b9ca      	cbnz	r2, 8006a78 <__hi0bits+0x3c>
 8006a44:	0403      	lsls	r3, r0, #16
 8006a46:	2010      	movs	r0, #16
 8006a48:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006a4c:	bf04      	itt	eq
 8006a4e:	021b      	lsleq	r3, r3, #8
 8006a50:	3008      	addeq	r0, #8
 8006a52:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006a56:	bf04      	itt	eq
 8006a58:	011b      	lsleq	r3, r3, #4
 8006a5a:	3004      	addeq	r0, #4
 8006a5c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006a60:	bf04      	itt	eq
 8006a62:	009b      	lsleq	r3, r3, #2
 8006a64:	3002      	addeq	r0, #2
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	db05      	blt.n	8006a76 <__hi0bits+0x3a>
 8006a6a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006a6e:	f100 0001 	add.w	r0, r0, #1
 8006a72:	bf08      	it	eq
 8006a74:	2020      	moveq	r0, #32
 8006a76:	4770      	bx	lr
 8006a78:	2000      	movs	r0, #0
 8006a7a:	e7e5      	b.n	8006a48 <__hi0bits+0xc>

08006a7c <__lo0bits>:
 8006a7c:	6803      	ldr	r3, [r0, #0]
 8006a7e:	4602      	mov	r2, r0
 8006a80:	f013 0007 	ands.w	r0, r3, #7
 8006a84:	d00b      	beq.n	8006a9e <__lo0bits+0x22>
 8006a86:	07d9      	lsls	r1, r3, #31
 8006a88:	d421      	bmi.n	8006ace <__lo0bits+0x52>
 8006a8a:	0798      	lsls	r0, r3, #30
 8006a8c:	bf49      	itett	mi
 8006a8e:	085b      	lsrmi	r3, r3, #1
 8006a90:	089b      	lsrpl	r3, r3, #2
 8006a92:	2001      	movmi	r0, #1
 8006a94:	6013      	strmi	r3, [r2, #0]
 8006a96:	bf5c      	itt	pl
 8006a98:	2002      	movpl	r0, #2
 8006a9a:	6013      	strpl	r3, [r2, #0]
 8006a9c:	4770      	bx	lr
 8006a9e:	b299      	uxth	r1, r3
 8006aa0:	b909      	cbnz	r1, 8006aa6 <__lo0bits+0x2a>
 8006aa2:	2010      	movs	r0, #16
 8006aa4:	0c1b      	lsrs	r3, r3, #16
 8006aa6:	b2d9      	uxtb	r1, r3
 8006aa8:	b909      	cbnz	r1, 8006aae <__lo0bits+0x32>
 8006aaa:	3008      	adds	r0, #8
 8006aac:	0a1b      	lsrs	r3, r3, #8
 8006aae:	0719      	lsls	r1, r3, #28
 8006ab0:	bf04      	itt	eq
 8006ab2:	091b      	lsreq	r3, r3, #4
 8006ab4:	3004      	addeq	r0, #4
 8006ab6:	0799      	lsls	r1, r3, #30
 8006ab8:	bf04      	itt	eq
 8006aba:	089b      	lsreq	r3, r3, #2
 8006abc:	3002      	addeq	r0, #2
 8006abe:	07d9      	lsls	r1, r3, #31
 8006ac0:	d403      	bmi.n	8006aca <__lo0bits+0x4e>
 8006ac2:	085b      	lsrs	r3, r3, #1
 8006ac4:	f100 0001 	add.w	r0, r0, #1
 8006ac8:	d003      	beq.n	8006ad2 <__lo0bits+0x56>
 8006aca:	6013      	str	r3, [r2, #0]
 8006acc:	4770      	bx	lr
 8006ace:	2000      	movs	r0, #0
 8006ad0:	4770      	bx	lr
 8006ad2:	2020      	movs	r0, #32
 8006ad4:	4770      	bx	lr
	...

08006ad8 <__i2b>:
 8006ad8:	b510      	push	{r4, lr}
 8006ada:	460c      	mov	r4, r1
 8006adc:	2101      	movs	r1, #1
 8006ade:	f7ff febb 	bl	8006858 <_Balloc>
 8006ae2:	4602      	mov	r2, r0
 8006ae4:	b928      	cbnz	r0, 8006af2 <__i2b+0x1a>
 8006ae6:	f240 1145 	movw	r1, #325	; 0x145
 8006aea:	4b04      	ldr	r3, [pc, #16]	; (8006afc <__i2b+0x24>)
 8006aec:	4804      	ldr	r0, [pc, #16]	; (8006b00 <__i2b+0x28>)
 8006aee:	f001 ffcf 	bl	8008a90 <__assert_func>
 8006af2:	2301      	movs	r3, #1
 8006af4:	6144      	str	r4, [r0, #20]
 8006af6:	6103      	str	r3, [r0, #16]
 8006af8:	bd10      	pop	{r4, pc}
 8006afa:	bf00      	nop
 8006afc:	080099c9 	.word	0x080099c9
 8006b00:	080099da 	.word	0x080099da

08006b04 <__multiply>:
 8006b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b08:	4691      	mov	r9, r2
 8006b0a:	690a      	ldr	r2, [r1, #16]
 8006b0c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006b10:	460c      	mov	r4, r1
 8006b12:	429a      	cmp	r2, r3
 8006b14:	bfbe      	ittt	lt
 8006b16:	460b      	movlt	r3, r1
 8006b18:	464c      	movlt	r4, r9
 8006b1a:	4699      	movlt	r9, r3
 8006b1c:	6927      	ldr	r7, [r4, #16]
 8006b1e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006b22:	68a3      	ldr	r3, [r4, #8]
 8006b24:	6861      	ldr	r1, [r4, #4]
 8006b26:	eb07 060a 	add.w	r6, r7, sl
 8006b2a:	42b3      	cmp	r3, r6
 8006b2c:	b085      	sub	sp, #20
 8006b2e:	bfb8      	it	lt
 8006b30:	3101      	addlt	r1, #1
 8006b32:	f7ff fe91 	bl	8006858 <_Balloc>
 8006b36:	b930      	cbnz	r0, 8006b46 <__multiply+0x42>
 8006b38:	4602      	mov	r2, r0
 8006b3a:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006b3e:	4b43      	ldr	r3, [pc, #268]	; (8006c4c <__multiply+0x148>)
 8006b40:	4843      	ldr	r0, [pc, #268]	; (8006c50 <__multiply+0x14c>)
 8006b42:	f001 ffa5 	bl	8008a90 <__assert_func>
 8006b46:	f100 0514 	add.w	r5, r0, #20
 8006b4a:	462b      	mov	r3, r5
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006b52:	4543      	cmp	r3, r8
 8006b54:	d321      	bcc.n	8006b9a <__multiply+0x96>
 8006b56:	f104 0314 	add.w	r3, r4, #20
 8006b5a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006b5e:	f109 0314 	add.w	r3, r9, #20
 8006b62:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006b66:	9202      	str	r2, [sp, #8]
 8006b68:	1b3a      	subs	r2, r7, r4
 8006b6a:	3a15      	subs	r2, #21
 8006b6c:	f022 0203 	bic.w	r2, r2, #3
 8006b70:	3204      	adds	r2, #4
 8006b72:	f104 0115 	add.w	r1, r4, #21
 8006b76:	428f      	cmp	r7, r1
 8006b78:	bf38      	it	cc
 8006b7a:	2204      	movcc	r2, #4
 8006b7c:	9201      	str	r2, [sp, #4]
 8006b7e:	9a02      	ldr	r2, [sp, #8]
 8006b80:	9303      	str	r3, [sp, #12]
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d80c      	bhi.n	8006ba0 <__multiply+0x9c>
 8006b86:	2e00      	cmp	r6, #0
 8006b88:	dd03      	ble.n	8006b92 <__multiply+0x8e>
 8006b8a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d05a      	beq.n	8006c48 <__multiply+0x144>
 8006b92:	6106      	str	r6, [r0, #16]
 8006b94:	b005      	add	sp, #20
 8006b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b9a:	f843 2b04 	str.w	r2, [r3], #4
 8006b9e:	e7d8      	b.n	8006b52 <__multiply+0x4e>
 8006ba0:	f8b3 a000 	ldrh.w	sl, [r3]
 8006ba4:	f1ba 0f00 	cmp.w	sl, #0
 8006ba8:	d023      	beq.n	8006bf2 <__multiply+0xee>
 8006baa:	46a9      	mov	r9, r5
 8006bac:	f04f 0c00 	mov.w	ip, #0
 8006bb0:	f104 0e14 	add.w	lr, r4, #20
 8006bb4:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006bb8:	f8d9 1000 	ldr.w	r1, [r9]
 8006bbc:	fa1f fb82 	uxth.w	fp, r2
 8006bc0:	b289      	uxth	r1, r1
 8006bc2:	fb0a 110b 	mla	r1, sl, fp, r1
 8006bc6:	4461      	add	r1, ip
 8006bc8:	f8d9 c000 	ldr.w	ip, [r9]
 8006bcc:	0c12      	lsrs	r2, r2, #16
 8006bce:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006bd2:	fb0a c202 	mla	r2, sl, r2, ip
 8006bd6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006bda:	b289      	uxth	r1, r1
 8006bdc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006be0:	4577      	cmp	r7, lr
 8006be2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006be6:	f849 1b04 	str.w	r1, [r9], #4
 8006bea:	d8e3      	bhi.n	8006bb4 <__multiply+0xb0>
 8006bec:	9a01      	ldr	r2, [sp, #4]
 8006bee:	f845 c002 	str.w	ip, [r5, r2]
 8006bf2:	9a03      	ldr	r2, [sp, #12]
 8006bf4:	3304      	adds	r3, #4
 8006bf6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006bfa:	f1b9 0f00 	cmp.w	r9, #0
 8006bfe:	d021      	beq.n	8006c44 <__multiply+0x140>
 8006c00:	46ae      	mov	lr, r5
 8006c02:	f04f 0a00 	mov.w	sl, #0
 8006c06:	6829      	ldr	r1, [r5, #0]
 8006c08:	f104 0c14 	add.w	ip, r4, #20
 8006c0c:	f8bc b000 	ldrh.w	fp, [ip]
 8006c10:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006c14:	b289      	uxth	r1, r1
 8006c16:	fb09 220b 	mla	r2, r9, fp, r2
 8006c1a:	4452      	add	r2, sl
 8006c1c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006c20:	f84e 1b04 	str.w	r1, [lr], #4
 8006c24:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006c28:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006c2c:	f8be 1000 	ldrh.w	r1, [lr]
 8006c30:	4567      	cmp	r7, ip
 8006c32:	fb09 110a 	mla	r1, r9, sl, r1
 8006c36:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006c3a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006c3e:	d8e5      	bhi.n	8006c0c <__multiply+0x108>
 8006c40:	9a01      	ldr	r2, [sp, #4]
 8006c42:	50a9      	str	r1, [r5, r2]
 8006c44:	3504      	adds	r5, #4
 8006c46:	e79a      	b.n	8006b7e <__multiply+0x7a>
 8006c48:	3e01      	subs	r6, #1
 8006c4a:	e79c      	b.n	8006b86 <__multiply+0x82>
 8006c4c:	080099c9 	.word	0x080099c9
 8006c50:	080099da 	.word	0x080099da

08006c54 <__pow5mult>:
 8006c54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c58:	4615      	mov	r5, r2
 8006c5a:	f012 0203 	ands.w	r2, r2, #3
 8006c5e:	4606      	mov	r6, r0
 8006c60:	460f      	mov	r7, r1
 8006c62:	d007      	beq.n	8006c74 <__pow5mult+0x20>
 8006c64:	4c25      	ldr	r4, [pc, #148]	; (8006cfc <__pow5mult+0xa8>)
 8006c66:	3a01      	subs	r2, #1
 8006c68:	2300      	movs	r3, #0
 8006c6a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006c6e:	f7ff fe55 	bl	800691c <__multadd>
 8006c72:	4607      	mov	r7, r0
 8006c74:	10ad      	asrs	r5, r5, #2
 8006c76:	d03d      	beq.n	8006cf4 <__pow5mult+0xa0>
 8006c78:	69f4      	ldr	r4, [r6, #28]
 8006c7a:	b97c      	cbnz	r4, 8006c9c <__pow5mult+0x48>
 8006c7c:	2010      	movs	r0, #16
 8006c7e:	f7ff fd37 	bl	80066f0 <malloc>
 8006c82:	4602      	mov	r2, r0
 8006c84:	61f0      	str	r0, [r6, #28]
 8006c86:	b928      	cbnz	r0, 8006c94 <__pow5mult+0x40>
 8006c88:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006c8c:	4b1c      	ldr	r3, [pc, #112]	; (8006d00 <__pow5mult+0xac>)
 8006c8e:	481d      	ldr	r0, [pc, #116]	; (8006d04 <__pow5mult+0xb0>)
 8006c90:	f001 fefe 	bl	8008a90 <__assert_func>
 8006c94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006c98:	6004      	str	r4, [r0, #0]
 8006c9a:	60c4      	str	r4, [r0, #12]
 8006c9c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006ca0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006ca4:	b94c      	cbnz	r4, 8006cba <__pow5mult+0x66>
 8006ca6:	f240 2171 	movw	r1, #625	; 0x271
 8006caa:	4630      	mov	r0, r6
 8006cac:	f7ff ff14 	bl	8006ad8 <__i2b>
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	4604      	mov	r4, r0
 8006cb4:	f8c8 0008 	str.w	r0, [r8, #8]
 8006cb8:	6003      	str	r3, [r0, #0]
 8006cba:	f04f 0900 	mov.w	r9, #0
 8006cbe:	07eb      	lsls	r3, r5, #31
 8006cc0:	d50a      	bpl.n	8006cd8 <__pow5mult+0x84>
 8006cc2:	4639      	mov	r1, r7
 8006cc4:	4622      	mov	r2, r4
 8006cc6:	4630      	mov	r0, r6
 8006cc8:	f7ff ff1c 	bl	8006b04 <__multiply>
 8006ccc:	4680      	mov	r8, r0
 8006cce:	4639      	mov	r1, r7
 8006cd0:	4630      	mov	r0, r6
 8006cd2:	f7ff fe01 	bl	80068d8 <_Bfree>
 8006cd6:	4647      	mov	r7, r8
 8006cd8:	106d      	asrs	r5, r5, #1
 8006cda:	d00b      	beq.n	8006cf4 <__pow5mult+0xa0>
 8006cdc:	6820      	ldr	r0, [r4, #0]
 8006cde:	b938      	cbnz	r0, 8006cf0 <__pow5mult+0x9c>
 8006ce0:	4622      	mov	r2, r4
 8006ce2:	4621      	mov	r1, r4
 8006ce4:	4630      	mov	r0, r6
 8006ce6:	f7ff ff0d 	bl	8006b04 <__multiply>
 8006cea:	6020      	str	r0, [r4, #0]
 8006cec:	f8c0 9000 	str.w	r9, [r0]
 8006cf0:	4604      	mov	r4, r0
 8006cf2:	e7e4      	b.n	8006cbe <__pow5mult+0x6a>
 8006cf4:	4638      	mov	r0, r7
 8006cf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cfa:	bf00      	nop
 8006cfc:	08009b28 	.word	0x08009b28
 8006d00:	0800995a 	.word	0x0800995a
 8006d04:	080099da 	.word	0x080099da

08006d08 <__lshift>:
 8006d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d0c:	460c      	mov	r4, r1
 8006d0e:	4607      	mov	r7, r0
 8006d10:	4691      	mov	r9, r2
 8006d12:	6923      	ldr	r3, [r4, #16]
 8006d14:	6849      	ldr	r1, [r1, #4]
 8006d16:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006d1a:	68a3      	ldr	r3, [r4, #8]
 8006d1c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006d20:	f108 0601 	add.w	r6, r8, #1
 8006d24:	42b3      	cmp	r3, r6
 8006d26:	db0b      	blt.n	8006d40 <__lshift+0x38>
 8006d28:	4638      	mov	r0, r7
 8006d2a:	f7ff fd95 	bl	8006858 <_Balloc>
 8006d2e:	4605      	mov	r5, r0
 8006d30:	b948      	cbnz	r0, 8006d46 <__lshift+0x3e>
 8006d32:	4602      	mov	r2, r0
 8006d34:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006d38:	4b27      	ldr	r3, [pc, #156]	; (8006dd8 <__lshift+0xd0>)
 8006d3a:	4828      	ldr	r0, [pc, #160]	; (8006ddc <__lshift+0xd4>)
 8006d3c:	f001 fea8 	bl	8008a90 <__assert_func>
 8006d40:	3101      	adds	r1, #1
 8006d42:	005b      	lsls	r3, r3, #1
 8006d44:	e7ee      	b.n	8006d24 <__lshift+0x1c>
 8006d46:	2300      	movs	r3, #0
 8006d48:	f100 0114 	add.w	r1, r0, #20
 8006d4c:	f100 0210 	add.w	r2, r0, #16
 8006d50:	4618      	mov	r0, r3
 8006d52:	4553      	cmp	r3, sl
 8006d54:	db33      	blt.n	8006dbe <__lshift+0xb6>
 8006d56:	6920      	ldr	r0, [r4, #16]
 8006d58:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006d5c:	f104 0314 	add.w	r3, r4, #20
 8006d60:	f019 091f 	ands.w	r9, r9, #31
 8006d64:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006d68:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006d6c:	d02b      	beq.n	8006dc6 <__lshift+0xbe>
 8006d6e:	468a      	mov	sl, r1
 8006d70:	2200      	movs	r2, #0
 8006d72:	f1c9 0e20 	rsb	lr, r9, #32
 8006d76:	6818      	ldr	r0, [r3, #0]
 8006d78:	fa00 f009 	lsl.w	r0, r0, r9
 8006d7c:	4310      	orrs	r0, r2
 8006d7e:	f84a 0b04 	str.w	r0, [sl], #4
 8006d82:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d86:	459c      	cmp	ip, r3
 8006d88:	fa22 f20e 	lsr.w	r2, r2, lr
 8006d8c:	d8f3      	bhi.n	8006d76 <__lshift+0x6e>
 8006d8e:	ebac 0304 	sub.w	r3, ip, r4
 8006d92:	3b15      	subs	r3, #21
 8006d94:	f023 0303 	bic.w	r3, r3, #3
 8006d98:	3304      	adds	r3, #4
 8006d9a:	f104 0015 	add.w	r0, r4, #21
 8006d9e:	4584      	cmp	ip, r0
 8006da0:	bf38      	it	cc
 8006da2:	2304      	movcc	r3, #4
 8006da4:	50ca      	str	r2, [r1, r3]
 8006da6:	b10a      	cbz	r2, 8006dac <__lshift+0xa4>
 8006da8:	f108 0602 	add.w	r6, r8, #2
 8006dac:	3e01      	subs	r6, #1
 8006dae:	4638      	mov	r0, r7
 8006db0:	4621      	mov	r1, r4
 8006db2:	612e      	str	r6, [r5, #16]
 8006db4:	f7ff fd90 	bl	80068d8 <_Bfree>
 8006db8:	4628      	mov	r0, r5
 8006dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dbe:	f842 0f04 	str.w	r0, [r2, #4]!
 8006dc2:	3301      	adds	r3, #1
 8006dc4:	e7c5      	b.n	8006d52 <__lshift+0x4a>
 8006dc6:	3904      	subs	r1, #4
 8006dc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006dcc:	459c      	cmp	ip, r3
 8006dce:	f841 2f04 	str.w	r2, [r1, #4]!
 8006dd2:	d8f9      	bhi.n	8006dc8 <__lshift+0xc0>
 8006dd4:	e7ea      	b.n	8006dac <__lshift+0xa4>
 8006dd6:	bf00      	nop
 8006dd8:	080099c9 	.word	0x080099c9
 8006ddc:	080099da 	.word	0x080099da

08006de0 <__mcmp>:
 8006de0:	4603      	mov	r3, r0
 8006de2:	690a      	ldr	r2, [r1, #16]
 8006de4:	6900      	ldr	r0, [r0, #16]
 8006de6:	b530      	push	{r4, r5, lr}
 8006de8:	1a80      	subs	r0, r0, r2
 8006dea:	d10d      	bne.n	8006e08 <__mcmp+0x28>
 8006dec:	3314      	adds	r3, #20
 8006dee:	3114      	adds	r1, #20
 8006df0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006df4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006df8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006dfc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006e00:	4295      	cmp	r5, r2
 8006e02:	d002      	beq.n	8006e0a <__mcmp+0x2a>
 8006e04:	d304      	bcc.n	8006e10 <__mcmp+0x30>
 8006e06:	2001      	movs	r0, #1
 8006e08:	bd30      	pop	{r4, r5, pc}
 8006e0a:	42a3      	cmp	r3, r4
 8006e0c:	d3f4      	bcc.n	8006df8 <__mcmp+0x18>
 8006e0e:	e7fb      	b.n	8006e08 <__mcmp+0x28>
 8006e10:	f04f 30ff 	mov.w	r0, #4294967295
 8006e14:	e7f8      	b.n	8006e08 <__mcmp+0x28>
	...

08006e18 <__mdiff>:
 8006e18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e1c:	460d      	mov	r5, r1
 8006e1e:	4607      	mov	r7, r0
 8006e20:	4611      	mov	r1, r2
 8006e22:	4628      	mov	r0, r5
 8006e24:	4614      	mov	r4, r2
 8006e26:	f7ff ffdb 	bl	8006de0 <__mcmp>
 8006e2a:	1e06      	subs	r6, r0, #0
 8006e2c:	d111      	bne.n	8006e52 <__mdiff+0x3a>
 8006e2e:	4631      	mov	r1, r6
 8006e30:	4638      	mov	r0, r7
 8006e32:	f7ff fd11 	bl	8006858 <_Balloc>
 8006e36:	4602      	mov	r2, r0
 8006e38:	b928      	cbnz	r0, 8006e46 <__mdiff+0x2e>
 8006e3a:	f240 2137 	movw	r1, #567	; 0x237
 8006e3e:	4b3a      	ldr	r3, [pc, #232]	; (8006f28 <__mdiff+0x110>)
 8006e40:	483a      	ldr	r0, [pc, #232]	; (8006f2c <__mdiff+0x114>)
 8006e42:	f001 fe25 	bl	8008a90 <__assert_func>
 8006e46:	2301      	movs	r3, #1
 8006e48:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006e4c:	4610      	mov	r0, r2
 8006e4e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e52:	bfa4      	itt	ge
 8006e54:	4623      	movge	r3, r4
 8006e56:	462c      	movge	r4, r5
 8006e58:	4638      	mov	r0, r7
 8006e5a:	6861      	ldr	r1, [r4, #4]
 8006e5c:	bfa6      	itte	ge
 8006e5e:	461d      	movge	r5, r3
 8006e60:	2600      	movge	r6, #0
 8006e62:	2601      	movlt	r6, #1
 8006e64:	f7ff fcf8 	bl	8006858 <_Balloc>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	b918      	cbnz	r0, 8006e74 <__mdiff+0x5c>
 8006e6c:	f240 2145 	movw	r1, #581	; 0x245
 8006e70:	4b2d      	ldr	r3, [pc, #180]	; (8006f28 <__mdiff+0x110>)
 8006e72:	e7e5      	b.n	8006e40 <__mdiff+0x28>
 8006e74:	f102 0814 	add.w	r8, r2, #20
 8006e78:	46c2      	mov	sl, r8
 8006e7a:	f04f 0c00 	mov.w	ip, #0
 8006e7e:	6927      	ldr	r7, [r4, #16]
 8006e80:	60c6      	str	r6, [r0, #12]
 8006e82:	692e      	ldr	r6, [r5, #16]
 8006e84:	f104 0014 	add.w	r0, r4, #20
 8006e88:	f105 0914 	add.w	r9, r5, #20
 8006e8c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006e90:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006e94:	3410      	adds	r4, #16
 8006e96:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006e9a:	f859 3b04 	ldr.w	r3, [r9], #4
 8006e9e:	fa1f f18b 	uxth.w	r1, fp
 8006ea2:	4461      	add	r1, ip
 8006ea4:	fa1f fc83 	uxth.w	ip, r3
 8006ea8:	0c1b      	lsrs	r3, r3, #16
 8006eaa:	eba1 010c 	sub.w	r1, r1, ip
 8006eae:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006eb2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006eb6:	b289      	uxth	r1, r1
 8006eb8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8006ebc:	454e      	cmp	r6, r9
 8006ebe:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006ec2:	f84a 1b04 	str.w	r1, [sl], #4
 8006ec6:	d8e6      	bhi.n	8006e96 <__mdiff+0x7e>
 8006ec8:	1b73      	subs	r3, r6, r5
 8006eca:	3b15      	subs	r3, #21
 8006ecc:	f023 0303 	bic.w	r3, r3, #3
 8006ed0:	3515      	adds	r5, #21
 8006ed2:	3304      	adds	r3, #4
 8006ed4:	42ae      	cmp	r6, r5
 8006ed6:	bf38      	it	cc
 8006ed8:	2304      	movcc	r3, #4
 8006eda:	4418      	add	r0, r3
 8006edc:	4443      	add	r3, r8
 8006ede:	461e      	mov	r6, r3
 8006ee0:	4605      	mov	r5, r0
 8006ee2:	4575      	cmp	r5, lr
 8006ee4:	d30e      	bcc.n	8006f04 <__mdiff+0xec>
 8006ee6:	f10e 0103 	add.w	r1, lr, #3
 8006eea:	1a09      	subs	r1, r1, r0
 8006eec:	f021 0103 	bic.w	r1, r1, #3
 8006ef0:	3803      	subs	r0, #3
 8006ef2:	4586      	cmp	lr, r0
 8006ef4:	bf38      	it	cc
 8006ef6:	2100      	movcc	r1, #0
 8006ef8:	440b      	add	r3, r1
 8006efa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006efe:	b189      	cbz	r1, 8006f24 <__mdiff+0x10c>
 8006f00:	6117      	str	r7, [r2, #16]
 8006f02:	e7a3      	b.n	8006e4c <__mdiff+0x34>
 8006f04:	f855 8b04 	ldr.w	r8, [r5], #4
 8006f08:	fa1f f188 	uxth.w	r1, r8
 8006f0c:	4461      	add	r1, ip
 8006f0e:	140c      	asrs	r4, r1, #16
 8006f10:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006f14:	b289      	uxth	r1, r1
 8006f16:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006f1a:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006f1e:	f846 1b04 	str.w	r1, [r6], #4
 8006f22:	e7de      	b.n	8006ee2 <__mdiff+0xca>
 8006f24:	3f01      	subs	r7, #1
 8006f26:	e7e8      	b.n	8006efa <__mdiff+0xe2>
 8006f28:	080099c9 	.word	0x080099c9
 8006f2c:	080099da 	.word	0x080099da

08006f30 <__ulp>:
 8006f30:	4b0e      	ldr	r3, [pc, #56]	; (8006f6c <__ulp+0x3c>)
 8006f32:	400b      	ands	r3, r1
 8006f34:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	dc08      	bgt.n	8006f4e <__ulp+0x1e>
 8006f3c:	425b      	negs	r3, r3
 8006f3e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8006f42:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006f46:	da04      	bge.n	8006f52 <__ulp+0x22>
 8006f48:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006f4c:	4113      	asrs	r3, r2
 8006f4e:	2200      	movs	r2, #0
 8006f50:	e008      	b.n	8006f64 <__ulp+0x34>
 8006f52:	f1a2 0314 	sub.w	r3, r2, #20
 8006f56:	2b1e      	cmp	r3, #30
 8006f58:	bfd6      	itet	le
 8006f5a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8006f5e:	2201      	movgt	r2, #1
 8006f60:	40da      	lsrle	r2, r3
 8006f62:	2300      	movs	r3, #0
 8006f64:	4619      	mov	r1, r3
 8006f66:	4610      	mov	r0, r2
 8006f68:	4770      	bx	lr
 8006f6a:	bf00      	nop
 8006f6c:	7ff00000 	.word	0x7ff00000

08006f70 <__b2d>:
 8006f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f72:	6905      	ldr	r5, [r0, #16]
 8006f74:	f100 0714 	add.w	r7, r0, #20
 8006f78:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8006f7c:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8006f80:	1f2e      	subs	r6, r5, #4
 8006f82:	4620      	mov	r0, r4
 8006f84:	f7ff fd5a 	bl	8006a3c <__hi0bits>
 8006f88:	f1c0 0220 	rsb	r2, r0, #32
 8006f8c:	280a      	cmp	r0, #10
 8006f8e:	4603      	mov	r3, r0
 8006f90:	f8df c068 	ldr.w	ip, [pc, #104]	; 8006ffc <__b2d+0x8c>
 8006f94:	600a      	str	r2, [r1, #0]
 8006f96:	dc12      	bgt.n	8006fbe <__b2d+0x4e>
 8006f98:	f1c0 0e0b 	rsb	lr, r0, #11
 8006f9c:	fa24 f20e 	lsr.w	r2, r4, lr
 8006fa0:	42b7      	cmp	r7, r6
 8006fa2:	ea42 010c 	orr.w	r1, r2, ip
 8006fa6:	bf2c      	ite	cs
 8006fa8:	2200      	movcs	r2, #0
 8006faa:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8006fae:	3315      	adds	r3, #21
 8006fb0:	fa04 f303 	lsl.w	r3, r4, r3
 8006fb4:	fa22 f20e 	lsr.w	r2, r2, lr
 8006fb8:	431a      	orrs	r2, r3
 8006fba:	4610      	mov	r0, r2
 8006fbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fbe:	42b7      	cmp	r7, r6
 8006fc0:	bf2e      	itee	cs
 8006fc2:	2200      	movcs	r2, #0
 8006fc4:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8006fc8:	f1a5 0608 	subcc.w	r6, r5, #8
 8006fcc:	3b0b      	subs	r3, #11
 8006fce:	d012      	beq.n	8006ff6 <__b2d+0x86>
 8006fd0:	f1c3 0520 	rsb	r5, r3, #32
 8006fd4:	fa22 f105 	lsr.w	r1, r2, r5
 8006fd8:	409c      	lsls	r4, r3
 8006fda:	430c      	orrs	r4, r1
 8006fdc:	42be      	cmp	r6, r7
 8006fde:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 8006fe2:	bf94      	ite	ls
 8006fe4:	2400      	movls	r4, #0
 8006fe6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8006fea:	409a      	lsls	r2, r3
 8006fec:	40ec      	lsrs	r4, r5
 8006fee:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006ff2:	4322      	orrs	r2, r4
 8006ff4:	e7e1      	b.n	8006fba <__b2d+0x4a>
 8006ff6:	ea44 010c 	orr.w	r1, r4, ip
 8006ffa:	e7de      	b.n	8006fba <__b2d+0x4a>
 8006ffc:	3ff00000 	.word	0x3ff00000

08007000 <__d2b>:
 8007000:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007002:	2101      	movs	r1, #1
 8007004:	4617      	mov	r7, r2
 8007006:	461c      	mov	r4, r3
 8007008:	9e08      	ldr	r6, [sp, #32]
 800700a:	f7ff fc25 	bl	8006858 <_Balloc>
 800700e:	4605      	mov	r5, r0
 8007010:	b930      	cbnz	r0, 8007020 <__d2b+0x20>
 8007012:	4602      	mov	r2, r0
 8007014:	f240 310f 	movw	r1, #783	; 0x30f
 8007018:	4b22      	ldr	r3, [pc, #136]	; (80070a4 <__d2b+0xa4>)
 800701a:	4823      	ldr	r0, [pc, #140]	; (80070a8 <__d2b+0xa8>)
 800701c:	f001 fd38 	bl	8008a90 <__assert_func>
 8007020:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007024:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8007028:	bb24      	cbnz	r4, 8007074 <__d2b+0x74>
 800702a:	2f00      	cmp	r7, #0
 800702c:	9301      	str	r3, [sp, #4]
 800702e:	d026      	beq.n	800707e <__d2b+0x7e>
 8007030:	4668      	mov	r0, sp
 8007032:	9700      	str	r7, [sp, #0]
 8007034:	f7ff fd22 	bl	8006a7c <__lo0bits>
 8007038:	e9dd 1200 	ldrd	r1, r2, [sp]
 800703c:	b1e8      	cbz	r0, 800707a <__d2b+0x7a>
 800703e:	f1c0 0320 	rsb	r3, r0, #32
 8007042:	fa02 f303 	lsl.w	r3, r2, r3
 8007046:	430b      	orrs	r3, r1
 8007048:	40c2      	lsrs	r2, r0
 800704a:	616b      	str	r3, [r5, #20]
 800704c:	9201      	str	r2, [sp, #4]
 800704e:	9b01      	ldr	r3, [sp, #4]
 8007050:	2b00      	cmp	r3, #0
 8007052:	bf14      	ite	ne
 8007054:	2102      	movne	r1, #2
 8007056:	2101      	moveq	r1, #1
 8007058:	61ab      	str	r3, [r5, #24]
 800705a:	6129      	str	r1, [r5, #16]
 800705c:	b1bc      	cbz	r4, 800708e <__d2b+0x8e>
 800705e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007062:	4404      	add	r4, r0
 8007064:	6034      	str	r4, [r6, #0]
 8007066:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800706a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800706c:	6018      	str	r0, [r3, #0]
 800706e:	4628      	mov	r0, r5
 8007070:	b003      	add	sp, #12
 8007072:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007074:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007078:	e7d7      	b.n	800702a <__d2b+0x2a>
 800707a:	6169      	str	r1, [r5, #20]
 800707c:	e7e7      	b.n	800704e <__d2b+0x4e>
 800707e:	a801      	add	r0, sp, #4
 8007080:	f7ff fcfc 	bl	8006a7c <__lo0bits>
 8007084:	9b01      	ldr	r3, [sp, #4]
 8007086:	2101      	movs	r1, #1
 8007088:	616b      	str	r3, [r5, #20]
 800708a:	3020      	adds	r0, #32
 800708c:	e7e5      	b.n	800705a <__d2b+0x5a>
 800708e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007092:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8007096:	6030      	str	r0, [r6, #0]
 8007098:	6918      	ldr	r0, [r3, #16]
 800709a:	f7ff fccf 	bl	8006a3c <__hi0bits>
 800709e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80070a2:	e7e2      	b.n	800706a <__d2b+0x6a>
 80070a4:	080099c9 	.word	0x080099c9
 80070a8:	080099da 	.word	0x080099da

080070ac <__ratio>:
 80070ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070b0:	4688      	mov	r8, r1
 80070b2:	4669      	mov	r1, sp
 80070b4:	4681      	mov	r9, r0
 80070b6:	f7ff ff5b 	bl	8006f70 <__b2d>
 80070ba:	460f      	mov	r7, r1
 80070bc:	4604      	mov	r4, r0
 80070be:	460d      	mov	r5, r1
 80070c0:	4640      	mov	r0, r8
 80070c2:	a901      	add	r1, sp, #4
 80070c4:	f7ff ff54 	bl	8006f70 <__b2d>
 80070c8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80070cc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80070d0:	468b      	mov	fp, r1
 80070d2:	eba3 0c02 	sub.w	ip, r3, r2
 80070d6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80070da:	1a9b      	subs	r3, r3, r2
 80070dc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	bfd5      	itete	le
 80070e4:	460a      	movle	r2, r1
 80070e6:	462a      	movgt	r2, r5
 80070e8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80070ec:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80070f0:	bfd8      	it	le
 80070f2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80070f6:	465b      	mov	r3, fp
 80070f8:	4602      	mov	r2, r0
 80070fa:	4639      	mov	r1, r7
 80070fc:	4620      	mov	r0, r4
 80070fe:	f7f9 fb1f 	bl	8000740 <__aeabi_ddiv>
 8007102:	b003      	add	sp, #12
 8007104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007108 <__copybits>:
 8007108:	3901      	subs	r1, #1
 800710a:	b570      	push	{r4, r5, r6, lr}
 800710c:	1149      	asrs	r1, r1, #5
 800710e:	6914      	ldr	r4, [r2, #16]
 8007110:	3101      	adds	r1, #1
 8007112:	f102 0314 	add.w	r3, r2, #20
 8007116:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800711a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800711e:	1f05      	subs	r5, r0, #4
 8007120:	42a3      	cmp	r3, r4
 8007122:	d30c      	bcc.n	800713e <__copybits+0x36>
 8007124:	1aa3      	subs	r3, r4, r2
 8007126:	3b11      	subs	r3, #17
 8007128:	f023 0303 	bic.w	r3, r3, #3
 800712c:	3211      	adds	r2, #17
 800712e:	42a2      	cmp	r2, r4
 8007130:	bf88      	it	hi
 8007132:	2300      	movhi	r3, #0
 8007134:	4418      	add	r0, r3
 8007136:	2300      	movs	r3, #0
 8007138:	4288      	cmp	r0, r1
 800713a:	d305      	bcc.n	8007148 <__copybits+0x40>
 800713c:	bd70      	pop	{r4, r5, r6, pc}
 800713e:	f853 6b04 	ldr.w	r6, [r3], #4
 8007142:	f845 6f04 	str.w	r6, [r5, #4]!
 8007146:	e7eb      	b.n	8007120 <__copybits+0x18>
 8007148:	f840 3b04 	str.w	r3, [r0], #4
 800714c:	e7f4      	b.n	8007138 <__copybits+0x30>

0800714e <__any_on>:
 800714e:	f100 0214 	add.w	r2, r0, #20
 8007152:	6900      	ldr	r0, [r0, #16]
 8007154:	114b      	asrs	r3, r1, #5
 8007156:	4298      	cmp	r0, r3
 8007158:	b510      	push	{r4, lr}
 800715a:	db11      	blt.n	8007180 <__any_on+0x32>
 800715c:	dd0a      	ble.n	8007174 <__any_on+0x26>
 800715e:	f011 011f 	ands.w	r1, r1, #31
 8007162:	d007      	beq.n	8007174 <__any_on+0x26>
 8007164:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007168:	fa24 f001 	lsr.w	r0, r4, r1
 800716c:	fa00 f101 	lsl.w	r1, r0, r1
 8007170:	428c      	cmp	r4, r1
 8007172:	d10b      	bne.n	800718c <__any_on+0x3e>
 8007174:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007178:	4293      	cmp	r3, r2
 800717a:	d803      	bhi.n	8007184 <__any_on+0x36>
 800717c:	2000      	movs	r0, #0
 800717e:	bd10      	pop	{r4, pc}
 8007180:	4603      	mov	r3, r0
 8007182:	e7f7      	b.n	8007174 <__any_on+0x26>
 8007184:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007188:	2900      	cmp	r1, #0
 800718a:	d0f5      	beq.n	8007178 <__any_on+0x2a>
 800718c:	2001      	movs	r0, #1
 800718e:	e7f6      	b.n	800717e <__any_on+0x30>

08007190 <sulp>:
 8007190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007194:	460f      	mov	r7, r1
 8007196:	4690      	mov	r8, r2
 8007198:	f7ff feca 	bl	8006f30 <__ulp>
 800719c:	4604      	mov	r4, r0
 800719e:	460d      	mov	r5, r1
 80071a0:	f1b8 0f00 	cmp.w	r8, #0
 80071a4:	d011      	beq.n	80071ca <sulp+0x3a>
 80071a6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80071aa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	dd0b      	ble.n	80071ca <sulp+0x3a>
 80071b2:	2400      	movs	r4, #0
 80071b4:	051b      	lsls	r3, r3, #20
 80071b6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80071ba:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80071be:	4622      	mov	r2, r4
 80071c0:	462b      	mov	r3, r5
 80071c2:	f7f9 f993 	bl	80004ec <__aeabi_dmul>
 80071c6:	4604      	mov	r4, r0
 80071c8:	460d      	mov	r5, r1
 80071ca:	4620      	mov	r0, r4
 80071cc:	4629      	mov	r1, r5
 80071ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071d2:	0000      	movs	r0, r0
 80071d4:	0000      	movs	r0, r0
	...

080071d8 <_strtod_l>:
 80071d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071dc:	b09f      	sub	sp, #124	; 0x7c
 80071de:	9217      	str	r2, [sp, #92]	; 0x5c
 80071e0:	2200      	movs	r2, #0
 80071e2:	4604      	mov	r4, r0
 80071e4:	921a      	str	r2, [sp, #104]	; 0x68
 80071e6:	460d      	mov	r5, r1
 80071e8:	f04f 0800 	mov.w	r8, #0
 80071ec:	f04f 0900 	mov.w	r9, #0
 80071f0:	460a      	mov	r2, r1
 80071f2:	9219      	str	r2, [sp, #100]	; 0x64
 80071f4:	7811      	ldrb	r1, [r2, #0]
 80071f6:	292b      	cmp	r1, #43	; 0x2b
 80071f8:	d04a      	beq.n	8007290 <_strtod_l+0xb8>
 80071fa:	d838      	bhi.n	800726e <_strtod_l+0x96>
 80071fc:	290d      	cmp	r1, #13
 80071fe:	d832      	bhi.n	8007266 <_strtod_l+0x8e>
 8007200:	2908      	cmp	r1, #8
 8007202:	d832      	bhi.n	800726a <_strtod_l+0x92>
 8007204:	2900      	cmp	r1, #0
 8007206:	d03b      	beq.n	8007280 <_strtod_l+0xa8>
 8007208:	2200      	movs	r2, #0
 800720a:	920e      	str	r2, [sp, #56]	; 0x38
 800720c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800720e:	7832      	ldrb	r2, [r6, #0]
 8007210:	2a30      	cmp	r2, #48	; 0x30
 8007212:	f040 80b2 	bne.w	800737a <_strtod_l+0x1a2>
 8007216:	7872      	ldrb	r2, [r6, #1]
 8007218:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800721c:	2a58      	cmp	r2, #88	; 0x58
 800721e:	d16e      	bne.n	80072fe <_strtod_l+0x126>
 8007220:	9302      	str	r3, [sp, #8]
 8007222:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007224:	4620      	mov	r0, r4
 8007226:	9301      	str	r3, [sp, #4]
 8007228:	ab1a      	add	r3, sp, #104	; 0x68
 800722a:	9300      	str	r3, [sp, #0]
 800722c:	4a8c      	ldr	r2, [pc, #560]	; (8007460 <_strtod_l+0x288>)
 800722e:	ab1b      	add	r3, sp, #108	; 0x6c
 8007230:	a919      	add	r1, sp, #100	; 0x64
 8007232:	f001 fcc7 	bl	8008bc4 <__gethex>
 8007236:	f010 070f 	ands.w	r7, r0, #15
 800723a:	4605      	mov	r5, r0
 800723c:	d005      	beq.n	800724a <_strtod_l+0x72>
 800723e:	2f06      	cmp	r7, #6
 8007240:	d128      	bne.n	8007294 <_strtod_l+0xbc>
 8007242:	2300      	movs	r3, #0
 8007244:	3601      	adds	r6, #1
 8007246:	9619      	str	r6, [sp, #100]	; 0x64
 8007248:	930e      	str	r3, [sp, #56]	; 0x38
 800724a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800724c:	2b00      	cmp	r3, #0
 800724e:	f040 85a0 	bne.w	8007d92 <_strtod_l+0xbba>
 8007252:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007254:	b1cb      	cbz	r3, 800728a <_strtod_l+0xb2>
 8007256:	4642      	mov	r2, r8
 8007258:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800725c:	4610      	mov	r0, r2
 800725e:	4619      	mov	r1, r3
 8007260:	b01f      	add	sp, #124	; 0x7c
 8007262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007266:	2920      	cmp	r1, #32
 8007268:	d1ce      	bne.n	8007208 <_strtod_l+0x30>
 800726a:	3201      	adds	r2, #1
 800726c:	e7c1      	b.n	80071f2 <_strtod_l+0x1a>
 800726e:	292d      	cmp	r1, #45	; 0x2d
 8007270:	d1ca      	bne.n	8007208 <_strtod_l+0x30>
 8007272:	2101      	movs	r1, #1
 8007274:	910e      	str	r1, [sp, #56]	; 0x38
 8007276:	1c51      	adds	r1, r2, #1
 8007278:	9119      	str	r1, [sp, #100]	; 0x64
 800727a:	7852      	ldrb	r2, [r2, #1]
 800727c:	2a00      	cmp	r2, #0
 800727e:	d1c5      	bne.n	800720c <_strtod_l+0x34>
 8007280:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007282:	9519      	str	r5, [sp, #100]	; 0x64
 8007284:	2b00      	cmp	r3, #0
 8007286:	f040 8582 	bne.w	8007d8e <_strtod_l+0xbb6>
 800728a:	4642      	mov	r2, r8
 800728c:	464b      	mov	r3, r9
 800728e:	e7e5      	b.n	800725c <_strtod_l+0x84>
 8007290:	2100      	movs	r1, #0
 8007292:	e7ef      	b.n	8007274 <_strtod_l+0x9c>
 8007294:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007296:	b13a      	cbz	r2, 80072a8 <_strtod_l+0xd0>
 8007298:	2135      	movs	r1, #53	; 0x35
 800729a:	a81c      	add	r0, sp, #112	; 0x70
 800729c:	f7ff ff34 	bl	8007108 <__copybits>
 80072a0:	4620      	mov	r0, r4
 80072a2:	991a      	ldr	r1, [sp, #104]	; 0x68
 80072a4:	f7ff fb18 	bl	80068d8 <_Bfree>
 80072a8:	3f01      	subs	r7, #1
 80072aa:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80072ac:	2f04      	cmp	r7, #4
 80072ae:	d806      	bhi.n	80072be <_strtod_l+0xe6>
 80072b0:	e8df f007 	tbb	[pc, r7]
 80072b4:	201d0314 	.word	0x201d0314
 80072b8:	14          	.byte	0x14
 80072b9:	00          	.byte	0x00
 80072ba:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80072be:	05e9      	lsls	r1, r5, #23
 80072c0:	bf48      	it	mi
 80072c2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80072c6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80072ca:	0d1b      	lsrs	r3, r3, #20
 80072cc:	051b      	lsls	r3, r3, #20
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d1bb      	bne.n	800724a <_strtod_l+0x72>
 80072d2:	f7fe fb15 	bl	8005900 <__errno>
 80072d6:	2322      	movs	r3, #34	; 0x22
 80072d8:	6003      	str	r3, [r0, #0]
 80072da:	e7b6      	b.n	800724a <_strtod_l+0x72>
 80072dc:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80072e0:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80072e4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80072e8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80072ec:	e7e7      	b.n	80072be <_strtod_l+0xe6>
 80072ee:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8007464 <_strtod_l+0x28c>
 80072f2:	e7e4      	b.n	80072be <_strtod_l+0xe6>
 80072f4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80072f8:	f04f 38ff 	mov.w	r8, #4294967295
 80072fc:	e7df      	b.n	80072be <_strtod_l+0xe6>
 80072fe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007300:	1c5a      	adds	r2, r3, #1
 8007302:	9219      	str	r2, [sp, #100]	; 0x64
 8007304:	785b      	ldrb	r3, [r3, #1]
 8007306:	2b30      	cmp	r3, #48	; 0x30
 8007308:	d0f9      	beq.n	80072fe <_strtod_l+0x126>
 800730a:	2b00      	cmp	r3, #0
 800730c:	d09d      	beq.n	800724a <_strtod_l+0x72>
 800730e:	2301      	movs	r3, #1
 8007310:	f04f 0a00 	mov.w	sl, #0
 8007314:	220a      	movs	r2, #10
 8007316:	46d3      	mov	fp, sl
 8007318:	9305      	str	r3, [sp, #20]
 800731a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800731c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8007320:	930b      	str	r3, [sp, #44]	; 0x2c
 8007322:	9819      	ldr	r0, [sp, #100]	; 0x64
 8007324:	7806      	ldrb	r6, [r0, #0]
 8007326:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800732a:	b2d9      	uxtb	r1, r3
 800732c:	2909      	cmp	r1, #9
 800732e:	d926      	bls.n	800737e <_strtod_l+0x1a6>
 8007330:	2201      	movs	r2, #1
 8007332:	494d      	ldr	r1, [pc, #308]	; (8007468 <_strtod_l+0x290>)
 8007334:	f001 fb75 	bl	8008a22 <strncmp>
 8007338:	2800      	cmp	r0, #0
 800733a:	d030      	beq.n	800739e <_strtod_l+0x1c6>
 800733c:	2000      	movs	r0, #0
 800733e:	4632      	mov	r2, r6
 8007340:	4603      	mov	r3, r0
 8007342:	465e      	mov	r6, fp
 8007344:	9008      	str	r0, [sp, #32]
 8007346:	2a65      	cmp	r2, #101	; 0x65
 8007348:	d001      	beq.n	800734e <_strtod_l+0x176>
 800734a:	2a45      	cmp	r2, #69	; 0x45
 800734c:	d113      	bne.n	8007376 <_strtod_l+0x19e>
 800734e:	b91e      	cbnz	r6, 8007358 <_strtod_l+0x180>
 8007350:	9a05      	ldr	r2, [sp, #20]
 8007352:	4302      	orrs	r2, r0
 8007354:	d094      	beq.n	8007280 <_strtod_l+0xa8>
 8007356:	2600      	movs	r6, #0
 8007358:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800735a:	1c6a      	adds	r2, r5, #1
 800735c:	9219      	str	r2, [sp, #100]	; 0x64
 800735e:	786a      	ldrb	r2, [r5, #1]
 8007360:	2a2b      	cmp	r2, #43	; 0x2b
 8007362:	d074      	beq.n	800744e <_strtod_l+0x276>
 8007364:	2a2d      	cmp	r2, #45	; 0x2d
 8007366:	d078      	beq.n	800745a <_strtod_l+0x282>
 8007368:	f04f 0c00 	mov.w	ip, #0
 800736c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007370:	2909      	cmp	r1, #9
 8007372:	d97f      	bls.n	8007474 <_strtod_l+0x29c>
 8007374:	9519      	str	r5, [sp, #100]	; 0x64
 8007376:	2700      	movs	r7, #0
 8007378:	e09e      	b.n	80074b8 <_strtod_l+0x2e0>
 800737a:	2300      	movs	r3, #0
 800737c:	e7c8      	b.n	8007310 <_strtod_l+0x138>
 800737e:	f1bb 0f08 	cmp.w	fp, #8
 8007382:	bfd8      	it	le
 8007384:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8007386:	f100 0001 	add.w	r0, r0, #1
 800738a:	bfd6      	itet	le
 800738c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007390:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8007394:	930a      	strle	r3, [sp, #40]	; 0x28
 8007396:	f10b 0b01 	add.w	fp, fp, #1
 800739a:	9019      	str	r0, [sp, #100]	; 0x64
 800739c:	e7c1      	b.n	8007322 <_strtod_l+0x14a>
 800739e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80073a0:	1c5a      	adds	r2, r3, #1
 80073a2:	9219      	str	r2, [sp, #100]	; 0x64
 80073a4:	785a      	ldrb	r2, [r3, #1]
 80073a6:	f1bb 0f00 	cmp.w	fp, #0
 80073aa:	d037      	beq.n	800741c <_strtod_l+0x244>
 80073ac:	465e      	mov	r6, fp
 80073ae:	9008      	str	r0, [sp, #32]
 80073b0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80073b4:	2b09      	cmp	r3, #9
 80073b6:	d912      	bls.n	80073de <_strtod_l+0x206>
 80073b8:	2301      	movs	r3, #1
 80073ba:	e7c4      	b.n	8007346 <_strtod_l+0x16e>
 80073bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80073be:	3001      	adds	r0, #1
 80073c0:	1c5a      	adds	r2, r3, #1
 80073c2:	9219      	str	r2, [sp, #100]	; 0x64
 80073c4:	785a      	ldrb	r2, [r3, #1]
 80073c6:	2a30      	cmp	r2, #48	; 0x30
 80073c8:	d0f8      	beq.n	80073bc <_strtod_l+0x1e4>
 80073ca:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80073ce:	2b08      	cmp	r3, #8
 80073d0:	f200 84e4 	bhi.w	8007d9c <_strtod_l+0xbc4>
 80073d4:	9008      	str	r0, [sp, #32]
 80073d6:	2000      	movs	r0, #0
 80073d8:	4606      	mov	r6, r0
 80073da:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80073dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80073de:	3a30      	subs	r2, #48	; 0x30
 80073e0:	f100 0301 	add.w	r3, r0, #1
 80073e4:	d014      	beq.n	8007410 <_strtod_l+0x238>
 80073e6:	9908      	ldr	r1, [sp, #32]
 80073e8:	eb00 0c06 	add.w	ip, r0, r6
 80073ec:	4419      	add	r1, r3
 80073ee:	9108      	str	r1, [sp, #32]
 80073f0:	4633      	mov	r3, r6
 80073f2:	210a      	movs	r1, #10
 80073f4:	4563      	cmp	r3, ip
 80073f6:	d113      	bne.n	8007420 <_strtod_l+0x248>
 80073f8:	1833      	adds	r3, r6, r0
 80073fa:	2b08      	cmp	r3, #8
 80073fc:	f106 0601 	add.w	r6, r6, #1
 8007400:	4406      	add	r6, r0
 8007402:	dc1a      	bgt.n	800743a <_strtod_l+0x262>
 8007404:	230a      	movs	r3, #10
 8007406:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007408:	fb03 2301 	mla	r3, r3, r1, r2
 800740c:	930a      	str	r3, [sp, #40]	; 0x28
 800740e:	2300      	movs	r3, #0
 8007410:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007412:	4618      	mov	r0, r3
 8007414:	1c51      	adds	r1, r2, #1
 8007416:	9119      	str	r1, [sp, #100]	; 0x64
 8007418:	7852      	ldrb	r2, [r2, #1]
 800741a:	e7c9      	b.n	80073b0 <_strtod_l+0x1d8>
 800741c:	4658      	mov	r0, fp
 800741e:	e7d2      	b.n	80073c6 <_strtod_l+0x1ee>
 8007420:	2b08      	cmp	r3, #8
 8007422:	f103 0301 	add.w	r3, r3, #1
 8007426:	dc03      	bgt.n	8007430 <_strtod_l+0x258>
 8007428:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800742a:	434f      	muls	r7, r1
 800742c:	970a      	str	r7, [sp, #40]	; 0x28
 800742e:	e7e1      	b.n	80073f4 <_strtod_l+0x21c>
 8007430:	2b10      	cmp	r3, #16
 8007432:	bfd8      	it	le
 8007434:	fb01 fa0a 	mulle.w	sl, r1, sl
 8007438:	e7dc      	b.n	80073f4 <_strtod_l+0x21c>
 800743a:	2e10      	cmp	r6, #16
 800743c:	bfdc      	itt	le
 800743e:	230a      	movle	r3, #10
 8007440:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8007444:	e7e3      	b.n	800740e <_strtod_l+0x236>
 8007446:	2300      	movs	r3, #0
 8007448:	9308      	str	r3, [sp, #32]
 800744a:	2301      	movs	r3, #1
 800744c:	e780      	b.n	8007350 <_strtod_l+0x178>
 800744e:	f04f 0c00 	mov.w	ip, #0
 8007452:	1caa      	adds	r2, r5, #2
 8007454:	9219      	str	r2, [sp, #100]	; 0x64
 8007456:	78aa      	ldrb	r2, [r5, #2]
 8007458:	e788      	b.n	800736c <_strtod_l+0x194>
 800745a:	f04f 0c01 	mov.w	ip, #1
 800745e:	e7f8      	b.n	8007452 <_strtod_l+0x27a>
 8007460:	08009b38 	.word	0x08009b38
 8007464:	7ff00000 	.word	0x7ff00000
 8007468:	08009b34 	.word	0x08009b34
 800746c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800746e:	1c51      	adds	r1, r2, #1
 8007470:	9119      	str	r1, [sp, #100]	; 0x64
 8007472:	7852      	ldrb	r2, [r2, #1]
 8007474:	2a30      	cmp	r2, #48	; 0x30
 8007476:	d0f9      	beq.n	800746c <_strtod_l+0x294>
 8007478:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800747c:	2908      	cmp	r1, #8
 800747e:	f63f af7a 	bhi.w	8007376 <_strtod_l+0x19e>
 8007482:	3a30      	subs	r2, #48	; 0x30
 8007484:	9209      	str	r2, [sp, #36]	; 0x24
 8007486:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007488:	920c      	str	r2, [sp, #48]	; 0x30
 800748a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800748c:	1c57      	adds	r7, r2, #1
 800748e:	9719      	str	r7, [sp, #100]	; 0x64
 8007490:	7852      	ldrb	r2, [r2, #1]
 8007492:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007496:	f1be 0f09 	cmp.w	lr, #9
 800749a:	d938      	bls.n	800750e <_strtod_l+0x336>
 800749c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800749e:	1a7f      	subs	r7, r7, r1
 80074a0:	2f08      	cmp	r7, #8
 80074a2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80074a6:	dc03      	bgt.n	80074b0 <_strtod_l+0x2d8>
 80074a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80074aa:	428f      	cmp	r7, r1
 80074ac:	bfa8      	it	ge
 80074ae:	460f      	movge	r7, r1
 80074b0:	f1bc 0f00 	cmp.w	ip, #0
 80074b4:	d000      	beq.n	80074b8 <_strtod_l+0x2e0>
 80074b6:	427f      	negs	r7, r7
 80074b8:	2e00      	cmp	r6, #0
 80074ba:	d14f      	bne.n	800755c <_strtod_l+0x384>
 80074bc:	9905      	ldr	r1, [sp, #20]
 80074be:	4301      	orrs	r1, r0
 80074c0:	f47f aec3 	bne.w	800724a <_strtod_l+0x72>
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	f47f aedb 	bne.w	8007280 <_strtod_l+0xa8>
 80074ca:	2a69      	cmp	r2, #105	; 0x69
 80074cc:	d029      	beq.n	8007522 <_strtod_l+0x34a>
 80074ce:	dc26      	bgt.n	800751e <_strtod_l+0x346>
 80074d0:	2a49      	cmp	r2, #73	; 0x49
 80074d2:	d026      	beq.n	8007522 <_strtod_l+0x34a>
 80074d4:	2a4e      	cmp	r2, #78	; 0x4e
 80074d6:	f47f aed3 	bne.w	8007280 <_strtod_l+0xa8>
 80074da:	499a      	ldr	r1, [pc, #616]	; (8007744 <_strtod_l+0x56c>)
 80074dc:	a819      	add	r0, sp, #100	; 0x64
 80074de:	f001 fdb3 	bl	8009048 <__match>
 80074e2:	2800      	cmp	r0, #0
 80074e4:	f43f aecc 	beq.w	8007280 <_strtod_l+0xa8>
 80074e8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	2b28      	cmp	r3, #40	; 0x28
 80074ee:	d12f      	bne.n	8007550 <_strtod_l+0x378>
 80074f0:	4995      	ldr	r1, [pc, #596]	; (8007748 <_strtod_l+0x570>)
 80074f2:	aa1c      	add	r2, sp, #112	; 0x70
 80074f4:	a819      	add	r0, sp, #100	; 0x64
 80074f6:	f001 fdbb 	bl	8009070 <__hexnan>
 80074fa:	2805      	cmp	r0, #5
 80074fc:	d128      	bne.n	8007550 <_strtod_l+0x378>
 80074fe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007500:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8007504:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007508:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800750c:	e69d      	b.n	800724a <_strtod_l+0x72>
 800750e:	210a      	movs	r1, #10
 8007510:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007512:	fb01 2107 	mla	r1, r1, r7, r2
 8007516:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800751a:	9209      	str	r2, [sp, #36]	; 0x24
 800751c:	e7b5      	b.n	800748a <_strtod_l+0x2b2>
 800751e:	2a6e      	cmp	r2, #110	; 0x6e
 8007520:	e7d9      	b.n	80074d6 <_strtod_l+0x2fe>
 8007522:	498a      	ldr	r1, [pc, #552]	; (800774c <_strtod_l+0x574>)
 8007524:	a819      	add	r0, sp, #100	; 0x64
 8007526:	f001 fd8f 	bl	8009048 <__match>
 800752a:	2800      	cmp	r0, #0
 800752c:	f43f aea8 	beq.w	8007280 <_strtod_l+0xa8>
 8007530:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007532:	4987      	ldr	r1, [pc, #540]	; (8007750 <_strtod_l+0x578>)
 8007534:	3b01      	subs	r3, #1
 8007536:	a819      	add	r0, sp, #100	; 0x64
 8007538:	9319      	str	r3, [sp, #100]	; 0x64
 800753a:	f001 fd85 	bl	8009048 <__match>
 800753e:	b910      	cbnz	r0, 8007546 <_strtod_l+0x36e>
 8007540:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007542:	3301      	adds	r3, #1
 8007544:	9319      	str	r3, [sp, #100]	; 0x64
 8007546:	f04f 0800 	mov.w	r8, #0
 800754a:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8007754 <_strtod_l+0x57c>
 800754e:	e67c      	b.n	800724a <_strtod_l+0x72>
 8007550:	4881      	ldr	r0, [pc, #516]	; (8007758 <_strtod_l+0x580>)
 8007552:	f001 fa97 	bl	8008a84 <nan>
 8007556:	4680      	mov	r8, r0
 8007558:	4689      	mov	r9, r1
 800755a:	e676      	b.n	800724a <_strtod_l+0x72>
 800755c:	9b08      	ldr	r3, [sp, #32]
 800755e:	f1bb 0f00 	cmp.w	fp, #0
 8007562:	bf08      	it	eq
 8007564:	46b3      	moveq	fp, r6
 8007566:	1afb      	subs	r3, r7, r3
 8007568:	2e10      	cmp	r6, #16
 800756a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800756c:	4635      	mov	r5, r6
 800756e:	9309      	str	r3, [sp, #36]	; 0x24
 8007570:	bfa8      	it	ge
 8007572:	2510      	movge	r5, #16
 8007574:	f7f8 ff40 	bl	80003f8 <__aeabi_ui2d>
 8007578:	2e09      	cmp	r6, #9
 800757a:	4680      	mov	r8, r0
 800757c:	4689      	mov	r9, r1
 800757e:	dd13      	ble.n	80075a8 <_strtod_l+0x3d0>
 8007580:	4b76      	ldr	r3, [pc, #472]	; (800775c <_strtod_l+0x584>)
 8007582:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007586:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800758a:	f7f8 ffaf 	bl	80004ec <__aeabi_dmul>
 800758e:	4680      	mov	r8, r0
 8007590:	4650      	mov	r0, sl
 8007592:	4689      	mov	r9, r1
 8007594:	f7f8 ff30 	bl	80003f8 <__aeabi_ui2d>
 8007598:	4602      	mov	r2, r0
 800759a:	460b      	mov	r3, r1
 800759c:	4640      	mov	r0, r8
 800759e:	4649      	mov	r1, r9
 80075a0:	f7f8 fdee 	bl	8000180 <__adddf3>
 80075a4:	4680      	mov	r8, r0
 80075a6:	4689      	mov	r9, r1
 80075a8:	2e0f      	cmp	r6, #15
 80075aa:	dc36      	bgt.n	800761a <_strtod_l+0x442>
 80075ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	f43f ae4b 	beq.w	800724a <_strtod_l+0x72>
 80075b4:	dd22      	ble.n	80075fc <_strtod_l+0x424>
 80075b6:	2b16      	cmp	r3, #22
 80075b8:	dc09      	bgt.n	80075ce <_strtod_l+0x3f6>
 80075ba:	4968      	ldr	r1, [pc, #416]	; (800775c <_strtod_l+0x584>)
 80075bc:	4642      	mov	r2, r8
 80075be:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80075c2:	464b      	mov	r3, r9
 80075c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80075c8:	f7f8 ff90 	bl	80004ec <__aeabi_dmul>
 80075cc:	e7c3      	b.n	8007556 <_strtod_l+0x37e>
 80075ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075d0:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80075d4:	4293      	cmp	r3, r2
 80075d6:	db20      	blt.n	800761a <_strtod_l+0x442>
 80075d8:	4c60      	ldr	r4, [pc, #384]	; (800775c <_strtod_l+0x584>)
 80075da:	f1c6 060f 	rsb	r6, r6, #15
 80075de:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80075e2:	4642      	mov	r2, r8
 80075e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80075e8:	464b      	mov	r3, r9
 80075ea:	f7f8 ff7f 	bl	80004ec <__aeabi_dmul>
 80075ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075f0:	1b9e      	subs	r6, r3, r6
 80075f2:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80075f6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80075fa:	e7e5      	b.n	80075c8 <_strtod_l+0x3f0>
 80075fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075fe:	3316      	adds	r3, #22
 8007600:	db0b      	blt.n	800761a <_strtod_l+0x442>
 8007602:	9b08      	ldr	r3, [sp, #32]
 8007604:	4640      	mov	r0, r8
 8007606:	1bdf      	subs	r7, r3, r7
 8007608:	4b54      	ldr	r3, [pc, #336]	; (800775c <_strtod_l+0x584>)
 800760a:	4649      	mov	r1, r9
 800760c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007610:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007614:	f7f9 f894 	bl	8000740 <__aeabi_ddiv>
 8007618:	e79d      	b.n	8007556 <_strtod_l+0x37e>
 800761a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800761c:	1b75      	subs	r5, r6, r5
 800761e:	441d      	add	r5, r3
 8007620:	2d00      	cmp	r5, #0
 8007622:	dd70      	ble.n	8007706 <_strtod_l+0x52e>
 8007624:	f015 030f 	ands.w	r3, r5, #15
 8007628:	d00a      	beq.n	8007640 <_strtod_l+0x468>
 800762a:	494c      	ldr	r1, [pc, #304]	; (800775c <_strtod_l+0x584>)
 800762c:	4642      	mov	r2, r8
 800762e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007632:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007636:	464b      	mov	r3, r9
 8007638:	f7f8 ff58 	bl	80004ec <__aeabi_dmul>
 800763c:	4680      	mov	r8, r0
 800763e:	4689      	mov	r9, r1
 8007640:	f035 050f 	bics.w	r5, r5, #15
 8007644:	d04d      	beq.n	80076e2 <_strtod_l+0x50a>
 8007646:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800764a:	dd22      	ble.n	8007692 <_strtod_l+0x4ba>
 800764c:	2600      	movs	r6, #0
 800764e:	46b3      	mov	fp, r6
 8007650:	960b      	str	r6, [sp, #44]	; 0x2c
 8007652:	9608      	str	r6, [sp, #32]
 8007654:	2322      	movs	r3, #34	; 0x22
 8007656:	f04f 0800 	mov.w	r8, #0
 800765a:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8007754 <_strtod_l+0x57c>
 800765e:	6023      	str	r3, [r4, #0]
 8007660:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007662:	2b00      	cmp	r3, #0
 8007664:	f43f adf1 	beq.w	800724a <_strtod_l+0x72>
 8007668:	4620      	mov	r0, r4
 800766a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800766c:	f7ff f934 	bl	80068d8 <_Bfree>
 8007670:	4620      	mov	r0, r4
 8007672:	9908      	ldr	r1, [sp, #32]
 8007674:	f7ff f930 	bl	80068d8 <_Bfree>
 8007678:	4659      	mov	r1, fp
 800767a:	4620      	mov	r0, r4
 800767c:	f7ff f92c 	bl	80068d8 <_Bfree>
 8007680:	4620      	mov	r0, r4
 8007682:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007684:	f7ff f928 	bl	80068d8 <_Bfree>
 8007688:	4631      	mov	r1, r6
 800768a:	4620      	mov	r0, r4
 800768c:	f7ff f924 	bl	80068d8 <_Bfree>
 8007690:	e5db      	b.n	800724a <_strtod_l+0x72>
 8007692:	4b33      	ldr	r3, [pc, #204]	; (8007760 <_strtod_l+0x588>)
 8007694:	4640      	mov	r0, r8
 8007696:	9305      	str	r3, [sp, #20]
 8007698:	2300      	movs	r3, #0
 800769a:	4649      	mov	r1, r9
 800769c:	469a      	mov	sl, r3
 800769e:	112d      	asrs	r5, r5, #4
 80076a0:	2d01      	cmp	r5, #1
 80076a2:	dc21      	bgt.n	80076e8 <_strtod_l+0x510>
 80076a4:	b10b      	cbz	r3, 80076aa <_strtod_l+0x4d2>
 80076a6:	4680      	mov	r8, r0
 80076a8:	4689      	mov	r9, r1
 80076aa:	492d      	ldr	r1, [pc, #180]	; (8007760 <_strtod_l+0x588>)
 80076ac:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80076b0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80076b4:	4642      	mov	r2, r8
 80076b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80076ba:	464b      	mov	r3, r9
 80076bc:	f7f8 ff16 	bl	80004ec <__aeabi_dmul>
 80076c0:	4b24      	ldr	r3, [pc, #144]	; (8007754 <_strtod_l+0x57c>)
 80076c2:	460a      	mov	r2, r1
 80076c4:	400b      	ands	r3, r1
 80076c6:	4927      	ldr	r1, [pc, #156]	; (8007764 <_strtod_l+0x58c>)
 80076c8:	4680      	mov	r8, r0
 80076ca:	428b      	cmp	r3, r1
 80076cc:	d8be      	bhi.n	800764c <_strtod_l+0x474>
 80076ce:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80076d2:	428b      	cmp	r3, r1
 80076d4:	bf86      	itte	hi
 80076d6:	f04f 38ff 	movhi.w	r8, #4294967295
 80076da:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8007768 <_strtod_l+0x590>
 80076de:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80076e2:	2300      	movs	r3, #0
 80076e4:	9305      	str	r3, [sp, #20]
 80076e6:	e07b      	b.n	80077e0 <_strtod_l+0x608>
 80076e8:	07ea      	lsls	r2, r5, #31
 80076ea:	d505      	bpl.n	80076f8 <_strtod_l+0x520>
 80076ec:	9b05      	ldr	r3, [sp, #20]
 80076ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076f2:	f7f8 fefb 	bl	80004ec <__aeabi_dmul>
 80076f6:	2301      	movs	r3, #1
 80076f8:	9a05      	ldr	r2, [sp, #20]
 80076fa:	f10a 0a01 	add.w	sl, sl, #1
 80076fe:	3208      	adds	r2, #8
 8007700:	106d      	asrs	r5, r5, #1
 8007702:	9205      	str	r2, [sp, #20]
 8007704:	e7cc      	b.n	80076a0 <_strtod_l+0x4c8>
 8007706:	d0ec      	beq.n	80076e2 <_strtod_l+0x50a>
 8007708:	426d      	negs	r5, r5
 800770a:	f015 020f 	ands.w	r2, r5, #15
 800770e:	d00a      	beq.n	8007726 <_strtod_l+0x54e>
 8007710:	4b12      	ldr	r3, [pc, #72]	; (800775c <_strtod_l+0x584>)
 8007712:	4640      	mov	r0, r8
 8007714:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007718:	4649      	mov	r1, r9
 800771a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800771e:	f7f9 f80f 	bl	8000740 <__aeabi_ddiv>
 8007722:	4680      	mov	r8, r0
 8007724:	4689      	mov	r9, r1
 8007726:	112d      	asrs	r5, r5, #4
 8007728:	d0db      	beq.n	80076e2 <_strtod_l+0x50a>
 800772a:	2d1f      	cmp	r5, #31
 800772c:	dd1e      	ble.n	800776c <_strtod_l+0x594>
 800772e:	2600      	movs	r6, #0
 8007730:	46b3      	mov	fp, r6
 8007732:	960b      	str	r6, [sp, #44]	; 0x2c
 8007734:	9608      	str	r6, [sp, #32]
 8007736:	2322      	movs	r3, #34	; 0x22
 8007738:	f04f 0800 	mov.w	r8, #0
 800773c:	f04f 0900 	mov.w	r9, #0
 8007740:	6023      	str	r3, [r4, #0]
 8007742:	e78d      	b.n	8007660 <_strtod_l+0x488>
 8007744:	08009923 	.word	0x08009923
 8007748:	08009b4c 	.word	0x08009b4c
 800774c:	0800991b 	.word	0x0800991b
 8007750:	08009950 	.word	0x08009950
 8007754:	7ff00000 	.word	0x7ff00000
 8007758:	08009cf8 	.word	0x08009cf8
 800775c:	08009a60 	.word	0x08009a60
 8007760:	08009a38 	.word	0x08009a38
 8007764:	7ca00000 	.word	0x7ca00000
 8007768:	7fefffff 	.word	0x7fefffff
 800776c:	f015 0310 	ands.w	r3, r5, #16
 8007770:	bf18      	it	ne
 8007772:	236a      	movne	r3, #106	; 0x6a
 8007774:	4640      	mov	r0, r8
 8007776:	9305      	str	r3, [sp, #20]
 8007778:	4649      	mov	r1, r9
 800777a:	2300      	movs	r3, #0
 800777c:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8007a48 <_strtod_l+0x870>
 8007780:	07ea      	lsls	r2, r5, #31
 8007782:	d504      	bpl.n	800778e <_strtod_l+0x5b6>
 8007784:	e9da 2300 	ldrd	r2, r3, [sl]
 8007788:	f7f8 feb0 	bl	80004ec <__aeabi_dmul>
 800778c:	2301      	movs	r3, #1
 800778e:	106d      	asrs	r5, r5, #1
 8007790:	f10a 0a08 	add.w	sl, sl, #8
 8007794:	d1f4      	bne.n	8007780 <_strtod_l+0x5a8>
 8007796:	b10b      	cbz	r3, 800779c <_strtod_l+0x5c4>
 8007798:	4680      	mov	r8, r0
 800779a:	4689      	mov	r9, r1
 800779c:	9b05      	ldr	r3, [sp, #20]
 800779e:	b1bb      	cbz	r3, 80077d0 <_strtod_l+0x5f8>
 80077a0:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80077a4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	4649      	mov	r1, r9
 80077ac:	dd10      	ble.n	80077d0 <_strtod_l+0x5f8>
 80077ae:	2b1f      	cmp	r3, #31
 80077b0:	f340 8128 	ble.w	8007a04 <_strtod_l+0x82c>
 80077b4:	2b34      	cmp	r3, #52	; 0x34
 80077b6:	bfd8      	it	le
 80077b8:	f04f 33ff 	movle.w	r3, #4294967295
 80077bc:	f04f 0800 	mov.w	r8, #0
 80077c0:	bfcf      	iteee	gt
 80077c2:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80077c6:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80077ca:	4093      	lslle	r3, r2
 80077cc:	ea03 0901 	andle.w	r9, r3, r1
 80077d0:	2200      	movs	r2, #0
 80077d2:	2300      	movs	r3, #0
 80077d4:	4640      	mov	r0, r8
 80077d6:	4649      	mov	r1, r9
 80077d8:	f7f9 f8f0 	bl	80009bc <__aeabi_dcmpeq>
 80077dc:	2800      	cmp	r0, #0
 80077de:	d1a6      	bne.n	800772e <_strtod_l+0x556>
 80077e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077e2:	465a      	mov	r2, fp
 80077e4:	9300      	str	r3, [sp, #0]
 80077e6:	4620      	mov	r0, r4
 80077e8:	4633      	mov	r3, r6
 80077ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80077ec:	f7ff f8dc 	bl	80069a8 <__s2b>
 80077f0:	900b      	str	r0, [sp, #44]	; 0x2c
 80077f2:	2800      	cmp	r0, #0
 80077f4:	f43f af2a 	beq.w	800764c <_strtod_l+0x474>
 80077f8:	2600      	movs	r6, #0
 80077fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077fc:	9b08      	ldr	r3, [sp, #32]
 80077fe:	2a00      	cmp	r2, #0
 8007800:	eba3 0307 	sub.w	r3, r3, r7
 8007804:	bfa8      	it	ge
 8007806:	2300      	movge	r3, #0
 8007808:	46b3      	mov	fp, r6
 800780a:	9312      	str	r3, [sp, #72]	; 0x48
 800780c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007810:	9316      	str	r3, [sp, #88]	; 0x58
 8007812:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007814:	4620      	mov	r0, r4
 8007816:	6859      	ldr	r1, [r3, #4]
 8007818:	f7ff f81e 	bl	8006858 <_Balloc>
 800781c:	9008      	str	r0, [sp, #32]
 800781e:	2800      	cmp	r0, #0
 8007820:	f43f af18 	beq.w	8007654 <_strtod_l+0x47c>
 8007824:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007826:	300c      	adds	r0, #12
 8007828:	691a      	ldr	r2, [r3, #16]
 800782a:	f103 010c 	add.w	r1, r3, #12
 800782e:	3202      	adds	r2, #2
 8007830:	0092      	lsls	r2, r2, #2
 8007832:	f001 f919 	bl	8008a68 <memcpy>
 8007836:	ab1c      	add	r3, sp, #112	; 0x70
 8007838:	9301      	str	r3, [sp, #4]
 800783a:	ab1b      	add	r3, sp, #108	; 0x6c
 800783c:	9300      	str	r3, [sp, #0]
 800783e:	4642      	mov	r2, r8
 8007840:	464b      	mov	r3, r9
 8007842:	4620      	mov	r0, r4
 8007844:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8007848:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 800784c:	f7ff fbd8 	bl	8007000 <__d2b>
 8007850:	901a      	str	r0, [sp, #104]	; 0x68
 8007852:	2800      	cmp	r0, #0
 8007854:	f43f aefe 	beq.w	8007654 <_strtod_l+0x47c>
 8007858:	2101      	movs	r1, #1
 800785a:	4620      	mov	r0, r4
 800785c:	f7ff f93c 	bl	8006ad8 <__i2b>
 8007860:	4683      	mov	fp, r0
 8007862:	2800      	cmp	r0, #0
 8007864:	f43f aef6 	beq.w	8007654 <_strtod_l+0x47c>
 8007868:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800786a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800786c:	2f00      	cmp	r7, #0
 800786e:	bfab      	itete	ge
 8007870:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 8007872:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8007874:	eb07 0a03 	addge.w	sl, r7, r3
 8007878:	1bdd      	sublt	r5, r3, r7
 800787a:	9b05      	ldr	r3, [sp, #20]
 800787c:	bfa8      	it	ge
 800787e:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8007880:	eba7 0703 	sub.w	r7, r7, r3
 8007884:	4417      	add	r7, r2
 8007886:	4b71      	ldr	r3, [pc, #452]	; (8007a4c <_strtod_l+0x874>)
 8007888:	f107 37ff 	add.w	r7, r7, #4294967295
 800788c:	bfb8      	it	lt
 800788e:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 8007892:	429f      	cmp	r7, r3
 8007894:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007898:	f280 80c7 	bge.w	8007a2a <_strtod_l+0x852>
 800789c:	1bdb      	subs	r3, r3, r7
 800789e:	2b1f      	cmp	r3, #31
 80078a0:	f04f 0101 	mov.w	r1, #1
 80078a4:	eba2 0203 	sub.w	r2, r2, r3
 80078a8:	f300 80b3 	bgt.w	8007a12 <_strtod_l+0x83a>
 80078ac:	fa01 f303 	lsl.w	r3, r1, r3
 80078b0:	9313      	str	r3, [sp, #76]	; 0x4c
 80078b2:	2300      	movs	r3, #0
 80078b4:	9310      	str	r3, [sp, #64]	; 0x40
 80078b6:	eb0a 0702 	add.w	r7, sl, r2
 80078ba:	9b05      	ldr	r3, [sp, #20]
 80078bc:	45ba      	cmp	sl, r7
 80078be:	4415      	add	r5, r2
 80078c0:	441d      	add	r5, r3
 80078c2:	4653      	mov	r3, sl
 80078c4:	bfa8      	it	ge
 80078c6:	463b      	movge	r3, r7
 80078c8:	42ab      	cmp	r3, r5
 80078ca:	bfa8      	it	ge
 80078cc:	462b      	movge	r3, r5
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	bfc2      	ittt	gt
 80078d2:	1aff      	subgt	r7, r7, r3
 80078d4:	1aed      	subgt	r5, r5, r3
 80078d6:	ebaa 0a03 	subgt.w	sl, sl, r3
 80078da:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80078dc:	2b00      	cmp	r3, #0
 80078de:	dd17      	ble.n	8007910 <_strtod_l+0x738>
 80078e0:	4659      	mov	r1, fp
 80078e2:	461a      	mov	r2, r3
 80078e4:	4620      	mov	r0, r4
 80078e6:	f7ff f9b5 	bl	8006c54 <__pow5mult>
 80078ea:	4683      	mov	fp, r0
 80078ec:	2800      	cmp	r0, #0
 80078ee:	f43f aeb1 	beq.w	8007654 <_strtod_l+0x47c>
 80078f2:	4601      	mov	r1, r0
 80078f4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80078f6:	4620      	mov	r0, r4
 80078f8:	f7ff f904 	bl	8006b04 <__multiply>
 80078fc:	900a      	str	r0, [sp, #40]	; 0x28
 80078fe:	2800      	cmp	r0, #0
 8007900:	f43f aea8 	beq.w	8007654 <_strtod_l+0x47c>
 8007904:	4620      	mov	r0, r4
 8007906:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007908:	f7fe ffe6 	bl	80068d8 <_Bfree>
 800790c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800790e:	931a      	str	r3, [sp, #104]	; 0x68
 8007910:	2f00      	cmp	r7, #0
 8007912:	f300 808f 	bgt.w	8007a34 <_strtod_l+0x85c>
 8007916:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007918:	2b00      	cmp	r3, #0
 800791a:	dd08      	ble.n	800792e <_strtod_l+0x756>
 800791c:	4620      	mov	r0, r4
 800791e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007920:	9908      	ldr	r1, [sp, #32]
 8007922:	f7ff f997 	bl	8006c54 <__pow5mult>
 8007926:	9008      	str	r0, [sp, #32]
 8007928:	2800      	cmp	r0, #0
 800792a:	f43f ae93 	beq.w	8007654 <_strtod_l+0x47c>
 800792e:	2d00      	cmp	r5, #0
 8007930:	dd08      	ble.n	8007944 <_strtod_l+0x76c>
 8007932:	462a      	mov	r2, r5
 8007934:	4620      	mov	r0, r4
 8007936:	9908      	ldr	r1, [sp, #32]
 8007938:	f7ff f9e6 	bl	8006d08 <__lshift>
 800793c:	9008      	str	r0, [sp, #32]
 800793e:	2800      	cmp	r0, #0
 8007940:	f43f ae88 	beq.w	8007654 <_strtod_l+0x47c>
 8007944:	f1ba 0f00 	cmp.w	sl, #0
 8007948:	dd08      	ble.n	800795c <_strtod_l+0x784>
 800794a:	4659      	mov	r1, fp
 800794c:	4652      	mov	r2, sl
 800794e:	4620      	mov	r0, r4
 8007950:	f7ff f9da 	bl	8006d08 <__lshift>
 8007954:	4683      	mov	fp, r0
 8007956:	2800      	cmp	r0, #0
 8007958:	f43f ae7c 	beq.w	8007654 <_strtod_l+0x47c>
 800795c:	4620      	mov	r0, r4
 800795e:	9a08      	ldr	r2, [sp, #32]
 8007960:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007962:	f7ff fa59 	bl	8006e18 <__mdiff>
 8007966:	4606      	mov	r6, r0
 8007968:	2800      	cmp	r0, #0
 800796a:	f43f ae73 	beq.w	8007654 <_strtod_l+0x47c>
 800796e:	2500      	movs	r5, #0
 8007970:	68c3      	ldr	r3, [r0, #12]
 8007972:	4659      	mov	r1, fp
 8007974:	60c5      	str	r5, [r0, #12]
 8007976:	930a      	str	r3, [sp, #40]	; 0x28
 8007978:	f7ff fa32 	bl	8006de0 <__mcmp>
 800797c:	42a8      	cmp	r0, r5
 800797e:	da6b      	bge.n	8007a58 <_strtod_l+0x880>
 8007980:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007982:	ea53 0308 	orrs.w	r3, r3, r8
 8007986:	f040 808f 	bne.w	8007aa8 <_strtod_l+0x8d0>
 800798a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800798e:	2b00      	cmp	r3, #0
 8007990:	f040 808a 	bne.w	8007aa8 <_strtod_l+0x8d0>
 8007994:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007998:	0d1b      	lsrs	r3, r3, #20
 800799a:	051b      	lsls	r3, r3, #20
 800799c:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80079a0:	f240 8082 	bls.w	8007aa8 <_strtod_l+0x8d0>
 80079a4:	6973      	ldr	r3, [r6, #20]
 80079a6:	b913      	cbnz	r3, 80079ae <_strtod_l+0x7d6>
 80079a8:	6933      	ldr	r3, [r6, #16]
 80079aa:	2b01      	cmp	r3, #1
 80079ac:	dd7c      	ble.n	8007aa8 <_strtod_l+0x8d0>
 80079ae:	4631      	mov	r1, r6
 80079b0:	2201      	movs	r2, #1
 80079b2:	4620      	mov	r0, r4
 80079b4:	f7ff f9a8 	bl	8006d08 <__lshift>
 80079b8:	4659      	mov	r1, fp
 80079ba:	4606      	mov	r6, r0
 80079bc:	f7ff fa10 	bl	8006de0 <__mcmp>
 80079c0:	2800      	cmp	r0, #0
 80079c2:	dd71      	ble.n	8007aa8 <_strtod_l+0x8d0>
 80079c4:	9905      	ldr	r1, [sp, #20]
 80079c6:	464b      	mov	r3, r9
 80079c8:	4a21      	ldr	r2, [pc, #132]	; (8007a50 <_strtod_l+0x878>)
 80079ca:	2900      	cmp	r1, #0
 80079cc:	f000 808d 	beq.w	8007aea <_strtod_l+0x912>
 80079d0:	ea02 0109 	and.w	r1, r2, r9
 80079d4:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80079d8:	f300 8087 	bgt.w	8007aea <_strtod_l+0x912>
 80079dc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80079e0:	f77f aea9 	ble.w	8007736 <_strtod_l+0x55e>
 80079e4:	4640      	mov	r0, r8
 80079e6:	4649      	mov	r1, r9
 80079e8:	4b1a      	ldr	r3, [pc, #104]	; (8007a54 <_strtod_l+0x87c>)
 80079ea:	2200      	movs	r2, #0
 80079ec:	f7f8 fd7e 	bl	80004ec <__aeabi_dmul>
 80079f0:	4b17      	ldr	r3, [pc, #92]	; (8007a50 <_strtod_l+0x878>)
 80079f2:	4680      	mov	r8, r0
 80079f4:	400b      	ands	r3, r1
 80079f6:	4689      	mov	r9, r1
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	f47f ae35 	bne.w	8007668 <_strtod_l+0x490>
 80079fe:	2322      	movs	r3, #34	; 0x22
 8007a00:	6023      	str	r3, [r4, #0]
 8007a02:	e631      	b.n	8007668 <_strtod_l+0x490>
 8007a04:	f04f 32ff 	mov.w	r2, #4294967295
 8007a08:	fa02 f303 	lsl.w	r3, r2, r3
 8007a0c:	ea03 0808 	and.w	r8, r3, r8
 8007a10:	e6de      	b.n	80077d0 <_strtod_l+0x5f8>
 8007a12:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 8007a16:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 8007a1a:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 8007a1e:	37e2      	adds	r7, #226	; 0xe2
 8007a20:	fa01 f307 	lsl.w	r3, r1, r7
 8007a24:	9310      	str	r3, [sp, #64]	; 0x40
 8007a26:	9113      	str	r1, [sp, #76]	; 0x4c
 8007a28:	e745      	b.n	80078b6 <_strtod_l+0x6de>
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	9310      	str	r3, [sp, #64]	; 0x40
 8007a2e:	2301      	movs	r3, #1
 8007a30:	9313      	str	r3, [sp, #76]	; 0x4c
 8007a32:	e740      	b.n	80078b6 <_strtod_l+0x6de>
 8007a34:	463a      	mov	r2, r7
 8007a36:	4620      	mov	r0, r4
 8007a38:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007a3a:	f7ff f965 	bl	8006d08 <__lshift>
 8007a3e:	901a      	str	r0, [sp, #104]	; 0x68
 8007a40:	2800      	cmp	r0, #0
 8007a42:	f47f af68 	bne.w	8007916 <_strtod_l+0x73e>
 8007a46:	e605      	b.n	8007654 <_strtod_l+0x47c>
 8007a48:	08009b60 	.word	0x08009b60
 8007a4c:	fffffc02 	.word	0xfffffc02
 8007a50:	7ff00000 	.word	0x7ff00000
 8007a54:	39500000 	.word	0x39500000
 8007a58:	46ca      	mov	sl, r9
 8007a5a:	d165      	bne.n	8007b28 <_strtod_l+0x950>
 8007a5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a5e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007a62:	b352      	cbz	r2, 8007aba <_strtod_l+0x8e2>
 8007a64:	4a9e      	ldr	r2, [pc, #632]	; (8007ce0 <_strtod_l+0xb08>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d12a      	bne.n	8007ac0 <_strtod_l+0x8e8>
 8007a6a:	9b05      	ldr	r3, [sp, #20]
 8007a6c:	4641      	mov	r1, r8
 8007a6e:	b1fb      	cbz	r3, 8007ab0 <_strtod_l+0x8d8>
 8007a70:	4b9c      	ldr	r3, [pc, #624]	; (8007ce4 <_strtod_l+0xb0c>)
 8007a72:	f04f 32ff 	mov.w	r2, #4294967295
 8007a76:	ea09 0303 	and.w	r3, r9, r3
 8007a7a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007a7e:	d81a      	bhi.n	8007ab6 <_strtod_l+0x8de>
 8007a80:	0d1b      	lsrs	r3, r3, #20
 8007a82:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007a86:	fa02 f303 	lsl.w	r3, r2, r3
 8007a8a:	4299      	cmp	r1, r3
 8007a8c:	d118      	bne.n	8007ac0 <_strtod_l+0x8e8>
 8007a8e:	4b96      	ldr	r3, [pc, #600]	; (8007ce8 <_strtod_l+0xb10>)
 8007a90:	459a      	cmp	sl, r3
 8007a92:	d102      	bne.n	8007a9a <_strtod_l+0x8c2>
 8007a94:	3101      	adds	r1, #1
 8007a96:	f43f addd 	beq.w	8007654 <_strtod_l+0x47c>
 8007a9a:	f04f 0800 	mov.w	r8, #0
 8007a9e:	4b91      	ldr	r3, [pc, #580]	; (8007ce4 <_strtod_l+0xb0c>)
 8007aa0:	ea0a 0303 	and.w	r3, sl, r3
 8007aa4:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8007aa8:	9b05      	ldr	r3, [sp, #20]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d19a      	bne.n	80079e4 <_strtod_l+0x80c>
 8007aae:	e5db      	b.n	8007668 <_strtod_l+0x490>
 8007ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8007ab4:	e7e9      	b.n	8007a8a <_strtod_l+0x8b2>
 8007ab6:	4613      	mov	r3, r2
 8007ab8:	e7e7      	b.n	8007a8a <_strtod_l+0x8b2>
 8007aba:	ea53 0308 	orrs.w	r3, r3, r8
 8007abe:	d081      	beq.n	80079c4 <_strtod_l+0x7ec>
 8007ac0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007ac2:	b1e3      	cbz	r3, 8007afe <_strtod_l+0x926>
 8007ac4:	ea13 0f0a 	tst.w	r3, sl
 8007ac8:	d0ee      	beq.n	8007aa8 <_strtod_l+0x8d0>
 8007aca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007acc:	4640      	mov	r0, r8
 8007ace:	4649      	mov	r1, r9
 8007ad0:	9a05      	ldr	r2, [sp, #20]
 8007ad2:	b1c3      	cbz	r3, 8007b06 <_strtod_l+0x92e>
 8007ad4:	f7ff fb5c 	bl	8007190 <sulp>
 8007ad8:	4602      	mov	r2, r0
 8007ada:	460b      	mov	r3, r1
 8007adc:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007ade:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007ae0:	f7f8 fb4e 	bl	8000180 <__adddf3>
 8007ae4:	4680      	mov	r8, r0
 8007ae6:	4689      	mov	r9, r1
 8007ae8:	e7de      	b.n	8007aa8 <_strtod_l+0x8d0>
 8007aea:	4013      	ands	r3, r2
 8007aec:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007af0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007af4:	f04f 38ff 	mov.w	r8, #4294967295
 8007af8:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007afc:	e7d4      	b.n	8007aa8 <_strtod_l+0x8d0>
 8007afe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007b00:	ea13 0f08 	tst.w	r3, r8
 8007b04:	e7e0      	b.n	8007ac8 <_strtod_l+0x8f0>
 8007b06:	f7ff fb43 	bl	8007190 <sulp>
 8007b0a:	4602      	mov	r2, r0
 8007b0c:	460b      	mov	r3, r1
 8007b0e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007b10:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007b12:	f7f8 fb33 	bl	800017c <__aeabi_dsub>
 8007b16:	2200      	movs	r2, #0
 8007b18:	2300      	movs	r3, #0
 8007b1a:	4680      	mov	r8, r0
 8007b1c:	4689      	mov	r9, r1
 8007b1e:	f7f8 ff4d 	bl	80009bc <__aeabi_dcmpeq>
 8007b22:	2800      	cmp	r0, #0
 8007b24:	d0c0      	beq.n	8007aa8 <_strtod_l+0x8d0>
 8007b26:	e606      	b.n	8007736 <_strtod_l+0x55e>
 8007b28:	4659      	mov	r1, fp
 8007b2a:	4630      	mov	r0, r6
 8007b2c:	f7ff fabe 	bl	80070ac <__ratio>
 8007b30:	4602      	mov	r2, r0
 8007b32:	460b      	mov	r3, r1
 8007b34:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007b38:	2200      	movs	r2, #0
 8007b3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007b3e:	f7f8 ff51 	bl	80009e4 <__aeabi_dcmple>
 8007b42:	2800      	cmp	r0, #0
 8007b44:	d06f      	beq.n	8007c26 <_strtod_l+0xa4e>
 8007b46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d17c      	bne.n	8007c46 <_strtod_l+0xa6e>
 8007b4c:	f1b8 0f00 	cmp.w	r8, #0
 8007b50:	d159      	bne.n	8007c06 <_strtod_l+0xa2e>
 8007b52:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d17b      	bne.n	8007c52 <_strtod_l+0xa7a>
 8007b5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007b5e:	2200      	movs	r2, #0
 8007b60:	4b62      	ldr	r3, [pc, #392]	; (8007cec <_strtod_l+0xb14>)
 8007b62:	f7f8 ff35 	bl	80009d0 <__aeabi_dcmplt>
 8007b66:	2800      	cmp	r0, #0
 8007b68:	d15a      	bne.n	8007c20 <_strtod_l+0xa48>
 8007b6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007b6e:	2200      	movs	r2, #0
 8007b70:	4b5f      	ldr	r3, [pc, #380]	; (8007cf0 <_strtod_l+0xb18>)
 8007b72:	f7f8 fcbb 	bl	80004ec <__aeabi_dmul>
 8007b76:	4605      	mov	r5, r0
 8007b78:	460f      	mov	r7, r1
 8007b7a:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007b7e:	9506      	str	r5, [sp, #24]
 8007b80:	9307      	str	r3, [sp, #28]
 8007b82:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007b86:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007b8a:	4b56      	ldr	r3, [pc, #344]	; (8007ce4 <_strtod_l+0xb0c>)
 8007b8c:	4a55      	ldr	r2, [pc, #340]	; (8007ce4 <_strtod_l+0xb0c>)
 8007b8e:	ea0a 0303 	and.w	r3, sl, r3
 8007b92:	9313      	str	r3, [sp, #76]	; 0x4c
 8007b94:	4b57      	ldr	r3, [pc, #348]	; (8007cf4 <_strtod_l+0xb1c>)
 8007b96:	ea0a 0202 	and.w	r2, sl, r2
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	f040 80b0 	bne.w	8007d00 <_strtod_l+0xb28>
 8007ba0:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8007ba4:	4640      	mov	r0, r8
 8007ba6:	4649      	mov	r1, r9
 8007ba8:	f7ff f9c2 	bl	8006f30 <__ulp>
 8007bac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007bb0:	f7f8 fc9c 	bl	80004ec <__aeabi_dmul>
 8007bb4:	4642      	mov	r2, r8
 8007bb6:	464b      	mov	r3, r9
 8007bb8:	f7f8 fae2 	bl	8000180 <__adddf3>
 8007bbc:	f8df a124 	ldr.w	sl, [pc, #292]	; 8007ce4 <_strtod_l+0xb0c>
 8007bc0:	4a4d      	ldr	r2, [pc, #308]	; (8007cf8 <_strtod_l+0xb20>)
 8007bc2:	ea01 0a0a 	and.w	sl, r1, sl
 8007bc6:	4592      	cmp	sl, r2
 8007bc8:	4680      	mov	r8, r0
 8007bca:	d948      	bls.n	8007c5e <_strtod_l+0xa86>
 8007bcc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007bce:	4b46      	ldr	r3, [pc, #280]	; (8007ce8 <_strtod_l+0xb10>)
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	d103      	bne.n	8007bdc <_strtod_l+0xa04>
 8007bd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007bd6:	3301      	adds	r3, #1
 8007bd8:	f43f ad3c 	beq.w	8007654 <_strtod_l+0x47c>
 8007bdc:	f04f 38ff 	mov.w	r8, #4294967295
 8007be0:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8007ce8 <_strtod_l+0xb10>
 8007be4:	4620      	mov	r0, r4
 8007be6:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007be8:	f7fe fe76 	bl	80068d8 <_Bfree>
 8007bec:	4620      	mov	r0, r4
 8007bee:	9908      	ldr	r1, [sp, #32]
 8007bf0:	f7fe fe72 	bl	80068d8 <_Bfree>
 8007bf4:	4659      	mov	r1, fp
 8007bf6:	4620      	mov	r0, r4
 8007bf8:	f7fe fe6e 	bl	80068d8 <_Bfree>
 8007bfc:	4631      	mov	r1, r6
 8007bfe:	4620      	mov	r0, r4
 8007c00:	f7fe fe6a 	bl	80068d8 <_Bfree>
 8007c04:	e605      	b.n	8007812 <_strtod_l+0x63a>
 8007c06:	f1b8 0f01 	cmp.w	r8, #1
 8007c0a:	d103      	bne.n	8007c14 <_strtod_l+0xa3c>
 8007c0c:	f1b9 0f00 	cmp.w	r9, #0
 8007c10:	f43f ad91 	beq.w	8007736 <_strtod_l+0x55e>
 8007c14:	2200      	movs	r2, #0
 8007c16:	4b39      	ldr	r3, [pc, #228]	; (8007cfc <_strtod_l+0xb24>)
 8007c18:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007c1a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007c1e:	e016      	b.n	8007c4e <_strtod_l+0xa76>
 8007c20:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007c22:	4f33      	ldr	r7, [pc, #204]	; (8007cf0 <_strtod_l+0xb18>)
 8007c24:	e7a9      	b.n	8007b7a <_strtod_l+0x9a2>
 8007c26:	4b32      	ldr	r3, [pc, #200]	; (8007cf0 <_strtod_l+0xb18>)
 8007c28:	2200      	movs	r2, #0
 8007c2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007c2e:	f7f8 fc5d 	bl	80004ec <__aeabi_dmul>
 8007c32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c34:	4605      	mov	r5, r0
 8007c36:	460f      	mov	r7, r1
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d09e      	beq.n	8007b7a <_strtod_l+0x9a2>
 8007c3c:	4602      	mov	r2, r0
 8007c3e:	460b      	mov	r3, r1
 8007c40:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007c44:	e79d      	b.n	8007b82 <_strtod_l+0x9aa>
 8007c46:	2200      	movs	r2, #0
 8007c48:	4b28      	ldr	r3, [pc, #160]	; (8007cec <_strtod_l+0xb14>)
 8007c4a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007c4e:	4f27      	ldr	r7, [pc, #156]	; (8007cec <_strtod_l+0xb14>)
 8007c50:	e797      	b.n	8007b82 <_strtod_l+0x9aa>
 8007c52:	2200      	movs	r2, #0
 8007c54:	4b29      	ldr	r3, [pc, #164]	; (8007cfc <_strtod_l+0xb24>)
 8007c56:	4645      	mov	r5, r8
 8007c58:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007c5c:	e7f7      	b.n	8007c4e <_strtod_l+0xa76>
 8007c5e:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8007c62:	9b05      	ldr	r3, [sp, #20]
 8007c64:	46ca      	mov	sl, r9
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d1bc      	bne.n	8007be4 <_strtod_l+0xa0c>
 8007c6a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007c6e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007c70:	0d1b      	lsrs	r3, r3, #20
 8007c72:	051b      	lsls	r3, r3, #20
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d1b5      	bne.n	8007be4 <_strtod_l+0xa0c>
 8007c78:	4628      	mov	r0, r5
 8007c7a:	4639      	mov	r1, r7
 8007c7c:	f7f8 fff4 	bl	8000c68 <__aeabi_d2lz>
 8007c80:	f7f8 fc06 	bl	8000490 <__aeabi_l2d>
 8007c84:	4602      	mov	r2, r0
 8007c86:	460b      	mov	r3, r1
 8007c88:	4628      	mov	r0, r5
 8007c8a:	4639      	mov	r1, r7
 8007c8c:	f7f8 fa76 	bl	800017c <__aeabi_dsub>
 8007c90:	460b      	mov	r3, r1
 8007c92:	4602      	mov	r2, r0
 8007c94:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8007c98:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007c9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c9e:	ea4a 0a08 	orr.w	sl, sl, r8
 8007ca2:	ea5a 0a03 	orrs.w	sl, sl, r3
 8007ca6:	d06c      	beq.n	8007d82 <_strtod_l+0xbaa>
 8007ca8:	a309      	add	r3, pc, #36	; (adr r3, 8007cd0 <_strtod_l+0xaf8>)
 8007caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cae:	f7f8 fe8f 	bl	80009d0 <__aeabi_dcmplt>
 8007cb2:	2800      	cmp	r0, #0
 8007cb4:	f47f acd8 	bne.w	8007668 <_strtod_l+0x490>
 8007cb8:	a307      	add	r3, pc, #28	; (adr r3, 8007cd8 <_strtod_l+0xb00>)
 8007cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cbe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007cc2:	f7f8 fea3 	bl	8000a0c <__aeabi_dcmpgt>
 8007cc6:	2800      	cmp	r0, #0
 8007cc8:	d08c      	beq.n	8007be4 <_strtod_l+0xa0c>
 8007cca:	e4cd      	b.n	8007668 <_strtod_l+0x490>
 8007ccc:	f3af 8000 	nop.w
 8007cd0:	94a03595 	.word	0x94a03595
 8007cd4:	3fdfffff 	.word	0x3fdfffff
 8007cd8:	35afe535 	.word	0x35afe535
 8007cdc:	3fe00000 	.word	0x3fe00000
 8007ce0:	000fffff 	.word	0x000fffff
 8007ce4:	7ff00000 	.word	0x7ff00000
 8007ce8:	7fefffff 	.word	0x7fefffff
 8007cec:	3ff00000 	.word	0x3ff00000
 8007cf0:	3fe00000 	.word	0x3fe00000
 8007cf4:	7fe00000 	.word	0x7fe00000
 8007cf8:	7c9fffff 	.word	0x7c9fffff
 8007cfc:	bff00000 	.word	0xbff00000
 8007d00:	9b05      	ldr	r3, [sp, #20]
 8007d02:	b333      	cbz	r3, 8007d52 <_strtod_l+0xb7a>
 8007d04:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007d06:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007d0a:	d822      	bhi.n	8007d52 <_strtod_l+0xb7a>
 8007d0c:	a328      	add	r3, pc, #160	; (adr r3, 8007db0 <_strtod_l+0xbd8>)
 8007d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d12:	4628      	mov	r0, r5
 8007d14:	4639      	mov	r1, r7
 8007d16:	f7f8 fe65 	bl	80009e4 <__aeabi_dcmple>
 8007d1a:	b1a0      	cbz	r0, 8007d46 <_strtod_l+0xb6e>
 8007d1c:	4639      	mov	r1, r7
 8007d1e:	4628      	mov	r0, r5
 8007d20:	f7f8 febc 	bl	8000a9c <__aeabi_d2uiz>
 8007d24:	2801      	cmp	r0, #1
 8007d26:	bf38      	it	cc
 8007d28:	2001      	movcc	r0, #1
 8007d2a:	f7f8 fb65 	bl	80003f8 <__aeabi_ui2d>
 8007d2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d30:	4605      	mov	r5, r0
 8007d32:	460f      	mov	r7, r1
 8007d34:	bb03      	cbnz	r3, 8007d78 <_strtod_l+0xba0>
 8007d36:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007d3a:	9014      	str	r0, [sp, #80]	; 0x50
 8007d3c:	9315      	str	r3, [sp, #84]	; 0x54
 8007d3e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007d42:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007d46:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007d48:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007d4a:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007d4e:	1a9b      	subs	r3, r3, r2
 8007d50:	9311      	str	r3, [sp, #68]	; 0x44
 8007d52:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007d54:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007d56:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 8007d5a:	f7ff f8e9 	bl	8006f30 <__ulp>
 8007d5e:	4602      	mov	r2, r0
 8007d60:	460b      	mov	r3, r1
 8007d62:	4640      	mov	r0, r8
 8007d64:	4649      	mov	r1, r9
 8007d66:	f7f8 fbc1 	bl	80004ec <__aeabi_dmul>
 8007d6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007d6e:	f7f8 fa07 	bl	8000180 <__adddf3>
 8007d72:	4680      	mov	r8, r0
 8007d74:	4689      	mov	r9, r1
 8007d76:	e774      	b.n	8007c62 <_strtod_l+0xa8a>
 8007d78:	4602      	mov	r2, r0
 8007d7a:	460b      	mov	r3, r1
 8007d7c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8007d80:	e7dd      	b.n	8007d3e <_strtod_l+0xb66>
 8007d82:	a30d      	add	r3, pc, #52	; (adr r3, 8007db8 <_strtod_l+0xbe0>)
 8007d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d88:	f7f8 fe22 	bl	80009d0 <__aeabi_dcmplt>
 8007d8c:	e79b      	b.n	8007cc6 <_strtod_l+0xaee>
 8007d8e:	2300      	movs	r3, #0
 8007d90:	930e      	str	r3, [sp, #56]	; 0x38
 8007d92:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007d94:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007d96:	6013      	str	r3, [r2, #0]
 8007d98:	f7ff ba5b 	b.w	8007252 <_strtod_l+0x7a>
 8007d9c:	2a65      	cmp	r2, #101	; 0x65
 8007d9e:	f43f ab52 	beq.w	8007446 <_strtod_l+0x26e>
 8007da2:	2a45      	cmp	r2, #69	; 0x45
 8007da4:	f43f ab4f 	beq.w	8007446 <_strtod_l+0x26e>
 8007da8:	2301      	movs	r3, #1
 8007daa:	f7ff bb87 	b.w	80074bc <_strtod_l+0x2e4>
 8007dae:	bf00      	nop
 8007db0:	ffc00000 	.word	0xffc00000
 8007db4:	41dfffff 	.word	0x41dfffff
 8007db8:	94a03595 	.word	0x94a03595
 8007dbc:	3fcfffff 	.word	0x3fcfffff

08007dc0 <_strtod_r>:
 8007dc0:	4b01      	ldr	r3, [pc, #4]	; (8007dc8 <_strtod_r+0x8>)
 8007dc2:	f7ff ba09 	b.w	80071d8 <_strtod_l>
 8007dc6:	bf00      	nop
 8007dc8:	2000006c 	.word	0x2000006c

08007dcc <_strtol_l.constprop.0>:
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dd2:	4686      	mov	lr, r0
 8007dd4:	4690      	mov	r8, r2
 8007dd6:	d001      	beq.n	8007ddc <_strtol_l.constprop.0+0x10>
 8007dd8:	2b24      	cmp	r3, #36	; 0x24
 8007dda:	d906      	bls.n	8007dea <_strtol_l.constprop.0+0x1e>
 8007ddc:	f7fd fd90 	bl	8005900 <__errno>
 8007de0:	2316      	movs	r3, #22
 8007de2:	6003      	str	r3, [r0, #0]
 8007de4:	2000      	movs	r0, #0
 8007de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dea:	460d      	mov	r5, r1
 8007dec:	4835      	ldr	r0, [pc, #212]	; (8007ec4 <_strtol_l.constprop.0+0xf8>)
 8007dee:	462a      	mov	r2, r5
 8007df0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007df4:	5d06      	ldrb	r6, [r0, r4]
 8007df6:	f016 0608 	ands.w	r6, r6, #8
 8007dfa:	d1f8      	bne.n	8007dee <_strtol_l.constprop.0+0x22>
 8007dfc:	2c2d      	cmp	r4, #45	; 0x2d
 8007dfe:	d12e      	bne.n	8007e5e <_strtol_l.constprop.0+0x92>
 8007e00:	2601      	movs	r6, #1
 8007e02:	782c      	ldrb	r4, [r5, #0]
 8007e04:	1c95      	adds	r5, r2, #2
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d057      	beq.n	8007eba <_strtol_l.constprop.0+0xee>
 8007e0a:	2b10      	cmp	r3, #16
 8007e0c:	d109      	bne.n	8007e22 <_strtol_l.constprop.0+0x56>
 8007e0e:	2c30      	cmp	r4, #48	; 0x30
 8007e10:	d107      	bne.n	8007e22 <_strtol_l.constprop.0+0x56>
 8007e12:	782a      	ldrb	r2, [r5, #0]
 8007e14:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007e18:	2a58      	cmp	r2, #88	; 0x58
 8007e1a:	d149      	bne.n	8007eb0 <_strtol_l.constprop.0+0xe4>
 8007e1c:	2310      	movs	r3, #16
 8007e1e:	786c      	ldrb	r4, [r5, #1]
 8007e20:	3502      	adds	r5, #2
 8007e22:	2200      	movs	r2, #0
 8007e24:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8007e28:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007e2c:	fbbc f9f3 	udiv	r9, ip, r3
 8007e30:	4610      	mov	r0, r2
 8007e32:	fb03 ca19 	mls	sl, r3, r9, ip
 8007e36:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8007e3a:	2f09      	cmp	r7, #9
 8007e3c:	d814      	bhi.n	8007e68 <_strtol_l.constprop.0+0x9c>
 8007e3e:	463c      	mov	r4, r7
 8007e40:	42a3      	cmp	r3, r4
 8007e42:	dd20      	ble.n	8007e86 <_strtol_l.constprop.0+0xba>
 8007e44:	1c57      	adds	r7, r2, #1
 8007e46:	d007      	beq.n	8007e58 <_strtol_l.constprop.0+0x8c>
 8007e48:	4581      	cmp	r9, r0
 8007e4a:	d319      	bcc.n	8007e80 <_strtol_l.constprop.0+0xb4>
 8007e4c:	d101      	bne.n	8007e52 <_strtol_l.constprop.0+0x86>
 8007e4e:	45a2      	cmp	sl, r4
 8007e50:	db16      	blt.n	8007e80 <_strtol_l.constprop.0+0xb4>
 8007e52:	2201      	movs	r2, #1
 8007e54:	fb00 4003 	mla	r0, r0, r3, r4
 8007e58:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007e5c:	e7eb      	b.n	8007e36 <_strtol_l.constprop.0+0x6a>
 8007e5e:	2c2b      	cmp	r4, #43	; 0x2b
 8007e60:	bf04      	itt	eq
 8007e62:	782c      	ldrbeq	r4, [r5, #0]
 8007e64:	1c95      	addeq	r5, r2, #2
 8007e66:	e7ce      	b.n	8007e06 <_strtol_l.constprop.0+0x3a>
 8007e68:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007e6c:	2f19      	cmp	r7, #25
 8007e6e:	d801      	bhi.n	8007e74 <_strtol_l.constprop.0+0xa8>
 8007e70:	3c37      	subs	r4, #55	; 0x37
 8007e72:	e7e5      	b.n	8007e40 <_strtol_l.constprop.0+0x74>
 8007e74:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8007e78:	2f19      	cmp	r7, #25
 8007e7a:	d804      	bhi.n	8007e86 <_strtol_l.constprop.0+0xba>
 8007e7c:	3c57      	subs	r4, #87	; 0x57
 8007e7e:	e7df      	b.n	8007e40 <_strtol_l.constprop.0+0x74>
 8007e80:	f04f 32ff 	mov.w	r2, #4294967295
 8007e84:	e7e8      	b.n	8007e58 <_strtol_l.constprop.0+0x8c>
 8007e86:	1c53      	adds	r3, r2, #1
 8007e88:	d108      	bne.n	8007e9c <_strtol_l.constprop.0+0xd0>
 8007e8a:	2322      	movs	r3, #34	; 0x22
 8007e8c:	4660      	mov	r0, ip
 8007e8e:	f8ce 3000 	str.w	r3, [lr]
 8007e92:	f1b8 0f00 	cmp.w	r8, #0
 8007e96:	d0a6      	beq.n	8007de6 <_strtol_l.constprop.0+0x1a>
 8007e98:	1e69      	subs	r1, r5, #1
 8007e9a:	e006      	b.n	8007eaa <_strtol_l.constprop.0+0xde>
 8007e9c:	b106      	cbz	r6, 8007ea0 <_strtol_l.constprop.0+0xd4>
 8007e9e:	4240      	negs	r0, r0
 8007ea0:	f1b8 0f00 	cmp.w	r8, #0
 8007ea4:	d09f      	beq.n	8007de6 <_strtol_l.constprop.0+0x1a>
 8007ea6:	2a00      	cmp	r2, #0
 8007ea8:	d1f6      	bne.n	8007e98 <_strtol_l.constprop.0+0xcc>
 8007eaa:	f8c8 1000 	str.w	r1, [r8]
 8007eae:	e79a      	b.n	8007de6 <_strtol_l.constprop.0+0x1a>
 8007eb0:	2430      	movs	r4, #48	; 0x30
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d1b5      	bne.n	8007e22 <_strtol_l.constprop.0+0x56>
 8007eb6:	2308      	movs	r3, #8
 8007eb8:	e7b3      	b.n	8007e22 <_strtol_l.constprop.0+0x56>
 8007eba:	2c30      	cmp	r4, #48	; 0x30
 8007ebc:	d0a9      	beq.n	8007e12 <_strtol_l.constprop.0+0x46>
 8007ebe:	230a      	movs	r3, #10
 8007ec0:	e7af      	b.n	8007e22 <_strtol_l.constprop.0+0x56>
 8007ec2:	bf00      	nop
 8007ec4:	08009b89 	.word	0x08009b89

08007ec8 <_strtol_r>:
 8007ec8:	f7ff bf80 	b.w	8007dcc <_strtol_l.constprop.0>

08007ecc <__ssputs_r>:
 8007ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ed0:	461f      	mov	r7, r3
 8007ed2:	688e      	ldr	r6, [r1, #8]
 8007ed4:	4682      	mov	sl, r0
 8007ed6:	42be      	cmp	r6, r7
 8007ed8:	460c      	mov	r4, r1
 8007eda:	4690      	mov	r8, r2
 8007edc:	680b      	ldr	r3, [r1, #0]
 8007ede:	d82c      	bhi.n	8007f3a <__ssputs_r+0x6e>
 8007ee0:	898a      	ldrh	r2, [r1, #12]
 8007ee2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007ee6:	d026      	beq.n	8007f36 <__ssputs_r+0x6a>
 8007ee8:	6965      	ldr	r5, [r4, #20]
 8007eea:	6909      	ldr	r1, [r1, #16]
 8007eec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007ef0:	eba3 0901 	sub.w	r9, r3, r1
 8007ef4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007ef8:	1c7b      	adds	r3, r7, #1
 8007efa:	444b      	add	r3, r9
 8007efc:	106d      	asrs	r5, r5, #1
 8007efe:	429d      	cmp	r5, r3
 8007f00:	bf38      	it	cc
 8007f02:	461d      	movcc	r5, r3
 8007f04:	0553      	lsls	r3, r2, #21
 8007f06:	d527      	bpl.n	8007f58 <__ssputs_r+0x8c>
 8007f08:	4629      	mov	r1, r5
 8007f0a:	f7fe fc19 	bl	8006740 <_malloc_r>
 8007f0e:	4606      	mov	r6, r0
 8007f10:	b360      	cbz	r0, 8007f6c <__ssputs_r+0xa0>
 8007f12:	464a      	mov	r2, r9
 8007f14:	6921      	ldr	r1, [r4, #16]
 8007f16:	f000 fda7 	bl	8008a68 <memcpy>
 8007f1a:	89a3      	ldrh	r3, [r4, #12]
 8007f1c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007f20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f24:	81a3      	strh	r3, [r4, #12]
 8007f26:	6126      	str	r6, [r4, #16]
 8007f28:	444e      	add	r6, r9
 8007f2a:	6026      	str	r6, [r4, #0]
 8007f2c:	463e      	mov	r6, r7
 8007f2e:	6165      	str	r5, [r4, #20]
 8007f30:	eba5 0509 	sub.w	r5, r5, r9
 8007f34:	60a5      	str	r5, [r4, #8]
 8007f36:	42be      	cmp	r6, r7
 8007f38:	d900      	bls.n	8007f3c <__ssputs_r+0x70>
 8007f3a:	463e      	mov	r6, r7
 8007f3c:	4632      	mov	r2, r6
 8007f3e:	4641      	mov	r1, r8
 8007f40:	6820      	ldr	r0, [r4, #0]
 8007f42:	f000 fd54 	bl	80089ee <memmove>
 8007f46:	2000      	movs	r0, #0
 8007f48:	68a3      	ldr	r3, [r4, #8]
 8007f4a:	1b9b      	subs	r3, r3, r6
 8007f4c:	60a3      	str	r3, [r4, #8]
 8007f4e:	6823      	ldr	r3, [r4, #0]
 8007f50:	4433      	add	r3, r6
 8007f52:	6023      	str	r3, [r4, #0]
 8007f54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f58:	462a      	mov	r2, r5
 8007f5a:	f001 f936 	bl	80091ca <_realloc_r>
 8007f5e:	4606      	mov	r6, r0
 8007f60:	2800      	cmp	r0, #0
 8007f62:	d1e0      	bne.n	8007f26 <__ssputs_r+0x5a>
 8007f64:	4650      	mov	r0, sl
 8007f66:	6921      	ldr	r1, [r4, #16]
 8007f68:	f7fe fb7a 	bl	8006660 <_free_r>
 8007f6c:	230c      	movs	r3, #12
 8007f6e:	f8ca 3000 	str.w	r3, [sl]
 8007f72:	89a3      	ldrh	r3, [r4, #12]
 8007f74:	f04f 30ff 	mov.w	r0, #4294967295
 8007f78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f7c:	81a3      	strh	r3, [r4, #12]
 8007f7e:	e7e9      	b.n	8007f54 <__ssputs_r+0x88>

08007f80 <_svfiprintf_r>:
 8007f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f84:	4698      	mov	r8, r3
 8007f86:	898b      	ldrh	r3, [r1, #12]
 8007f88:	4607      	mov	r7, r0
 8007f8a:	061b      	lsls	r3, r3, #24
 8007f8c:	460d      	mov	r5, r1
 8007f8e:	4614      	mov	r4, r2
 8007f90:	b09d      	sub	sp, #116	; 0x74
 8007f92:	d50e      	bpl.n	8007fb2 <_svfiprintf_r+0x32>
 8007f94:	690b      	ldr	r3, [r1, #16]
 8007f96:	b963      	cbnz	r3, 8007fb2 <_svfiprintf_r+0x32>
 8007f98:	2140      	movs	r1, #64	; 0x40
 8007f9a:	f7fe fbd1 	bl	8006740 <_malloc_r>
 8007f9e:	6028      	str	r0, [r5, #0]
 8007fa0:	6128      	str	r0, [r5, #16]
 8007fa2:	b920      	cbnz	r0, 8007fae <_svfiprintf_r+0x2e>
 8007fa4:	230c      	movs	r3, #12
 8007fa6:	603b      	str	r3, [r7, #0]
 8007fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8007fac:	e0d0      	b.n	8008150 <_svfiprintf_r+0x1d0>
 8007fae:	2340      	movs	r3, #64	; 0x40
 8007fb0:	616b      	str	r3, [r5, #20]
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	9309      	str	r3, [sp, #36]	; 0x24
 8007fb6:	2320      	movs	r3, #32
 8007fb8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007fbc:	2330      	movs	r3, #48	; 0x30
 8007fbe:	f04f 0901 	mov.w	r9, #1
 8007fc2:	f8cd 800c 	str.w	r8, [sp, #12]
 8007fc6:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8008168 <_svfiprintf_r+0x1e8>
 8007fca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007fce:	4623      	mov	r3, r4
 8007fd0:	469a      	mov	sl, r3
 8007fd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007fd6:	b10a      	cbz	r2, 8007fdc <_svfiprintf_r+0x5c>
 8007fd8:	2a25      	cmp	r2, #37	; 0x25
 8007fda:	d1f9      	bne.n	8007fd0 <_svfiprintf_r+0x50>
 8007fdc:	ebba 0b04 	subs.w	fp, sl, r4
 8007fe0:	d00b      	beq.n	8007ffa <_svfiprintf_r+0x7a>
 8007fe2:	465b      	mov	r3, fp
 8007fe4:	4622      	mov	r2, r4
 8007fe6:	4629      	mov	r1, r5
 8007fe8:	4638      	mov	r0, r7
 8007fea:	f7ff ff6f 	bl	8007ecc <__ssputs_r>
 8007fee:	3001      	adds	r0, #1
 8007ff0:	f000 80a9 	beq.w	8008146 <_svfiprintf_r+0x1c6>
 8007ff4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ff6:	445a      	add	r2, fp
 8007ff8:	9209      	str	r2, [sp, #36]	; 0x24
 8007ffa:	f89a 3000 	ldrb.w	r3, [sl]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	f000 80a1 	beq.w	8008146 <_svfiprintf_r+0x1c6>
 8008004:	2300      	movs	r3, #0
 8008006:	f04f 32ff 	mov.w	r2, #4294967295
 800800a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800800e:	f10a 0a01 	add.w	sl, sl, #1
 8008012:	9304      	str	r3, [sp, #16]
 8008014:	9307      	str	r3, [sp, #28]
 8008016:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800801a:	931a      	str	r3, [sp, #104]	; 0x68
 800801c:	4654      	mov	r4, sl
 800801e:	2205      	movs	r2, #5
 8008020:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008024:	4850      	ldr	r0, [pc, #320]	; (8008168 <_svfiprintf_r+0x1e8>)
 8008026:	f7fd fc98 	bl	800595a <memchr>
 800802a:	9a04      	ldr	r2, [sp, #16]
 800802c:	b9d8      	cbnz	r0, 8008066 <_svfiprintf_r+0xe6>
 800802e:	06d0      	lsls	r0, r2, #27
 8008030:	bf44      	itt	mi
 8008032:	2320      	movmi	r3, #32
 8008034:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008038:	0711      	lsls	r1, r2, #28
 800803a:	bf44      	itt	mi
 800803c:	232b      	movmi	r3, #43	; 0x2b
 800803e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008042:	f89a 3000 	ldrb.w	r3, [sl]
 8008046:	2b2a      	cmp	r3, #42	; 0x2a
 8008048:	d015      	beq.n	8008076 <_svfiprintf_r+0xf6>
 800804a:	4654      	mov	r4, sl
 800804c:	2000      	movs	r0, #0
 800804e:	f04f 0c0a 	mov.w	ip, #10
 8008052:	9a07      	ldr	r2, [sp, #28]
 8008054:	4621      	mov	r1, r4
 8008056:	f811 3b01 	ldrb.w	r3, [r1], #1
 800805a:	3b30      	subs	r3, #48	; 0x30
 800805c:	2b09      	cmp	r3, #9
 800805e:	d94d      	bls.n	80080fc <_svfiprintf_r+0x17c>
 8008060:	b1b0      	cbz	r0, 8008090 <_svfiprintf_r+0x110>
 8008062:	9207      	str	r2, [sp, #28]
 8008064:	e014      	b.n	8008090 <_svfiprintf_r+0x110>
 8008066:	eba0 0308 	sub.w	r3, r0, r8
 800806a:	fa09 f303 	lsl.w	r3, r9, r3
 800806e:	4313      	orrs	r3, r2
 8008070:	46a2      	mov	sl, r4
 8008072:	9304      	str	r3, [sp, #16]
 8008074:	e7d2      	b.n	800801c <_svfiprintf_r+0x9c>
 8008076:	9b03      	ldr	r3, [sp, #12]
 8008078:	1d19      	adds	r1, r3, #4
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	9103      	str	r1, [sp, #12]
 800807e:	2b00      	cmp	r3, #0
 8008080:	bfbb      	ittet	lt
 8008082:	425b      	neglt	r3, r3
 8008084:	f042 0202 	orrlt.w	r2, r2, #2
 8008088:	9307      	strge	r3, [sp, #28]
 800808a:	9307      	strlt	r3, [sp, #28]
 800808c:	bfb8      	it	lt
 800808e:	9204      	strlt	r2, [sp, #16]
 8008090:	7823      	ldrb	r3, [r4, #0]
 8008092:	2b2e      	cmp	r3, #46	; 0x2e
 8008094:	d10c      	bne.n	80080b0 <_svfiprintf_r+0x130>
 8008096:	7863      	ldrb	r3, [r4, #1]
 8008098:	2b2a      	cmp	r3, #42	; 0x2a
 800809a:	d134      	bne.n	8008106 <_svfiprintf_r+0x186>
 800809c:	9b03      	ldr	r3, [sp, #12]
 800809e:	3402      	adds	r4, #2
 80080a0:	1d1a      	adds	r2, r3, #4
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	9203      	str	r2, [sp, #12]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	bfb8      	it	lt
 80080aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80080ae:	9305      	str	r3, [sp, #20]
 80080b0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800816c <_svfiprintf_r+0x1ec>
 80080b4:	2203      	movs	r2, #3
 80080b6:	4650      	mov	r0, sl
 80080b8:	7821      	ldrb	r1, [r4, #0]
 80080ba:	f7fd fc4e 	bl	800595a <memchr>
 80080be:	b138      	cbz	r0, 80080d0 <_svfiprintf_r+0x150>
 80080c0:	2240      	movs	r2, #64	; 0x40
 80080c2:	9b04      	ldr	r3, [sp, #16]
 80080c4:	eba0 000a 	sub.w	r0, r0, sl
 80080c8:	4082      	lsls	r2, r0
 80080ca:	4313      	orrs	r3, r2
 80080cc:	3401      	adds	r4, #1
 80080ce:	9304      	str	r3, [sp, #16]
 80080d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080d4:	2206      	movs	r2, #6
 80080d6:	4826      	ldr	r0, [pc, #152]	; (8008170 <_svfiprintf_r+0x1f0>)
 80080d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80080dc:	f7fd fc3d 	bl	800595a <memchr>
 80080e0:	2800      	cmp	r0, #0
 80080e2:	d038      	beq.n	8008156 <_svfiprintf_r+0x1d6>
 80080e4:	4b23      	ldr	r3, [pc, #140]	; (8008174 <_svfiprintf_r+0x1f4>)
 80080e6:	bb1b      	cbnz	r3, 8008130 <_svfiprintf_r+0x1b0>
 80080e8:	9b03      	ldr	r3, [sp, #12]
 80080ea:	3307      	adds	r3, #7
 80080ec:	f023 0307 	bic.w	r3, r3, #7
 80080f0:	3308      	adds	r3, #8
 80080f2:	9303      	str	r3, [sp, #12]
 80080f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080f6:	4433      	add	r3, r6
 80080f8:	9309      	str	r3, [sp, #36]	; 0x24
 80080fa:	e768      	b.n	8007fce <_svfiprintf_r+0x4e>
 80080fc:	460c      	mov	r4, r1
 80080fe:	2001      	movs	r0, #1
 8008100:	fb0c 3202 	mla	r2, ip, r2, r3
 8008104:	e7a6      	b.n	8008054 <_svfiprintf_r+0xd4>
 8008106:	2300      	movs	r3, #0
 8008108:	f04f 0c0a 	mov.w	ip, #10
 800810c:	4619      	mov	r1, r3
 800810e:	3401      	adds	r4, #1
 8008110:	9305      	str	r3, [sp, #20]
 8008112:	4620      	mov	r0, r4
 8008114:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008118:	3a30      	subs	r2, #48	; 0x30
 800811a:	2a09      	cmp	r2, #9
 800811c:	d903      	bls.n	8008126 <_svfiprintf_r+0x1a6>
 800811e:	2b00      	cmp	r3, #0
 8008120:	d0c6      	beq.n	80080b0 <_svfiprintf_r+0x130>
 8008122:	9105      	str	r1, [sp, #20]
 8008124:	e7c4      	b.n	80080b0 <_svfiprintf_r+0x130>
 8008126:	4604      	mov	r4, r0
 8008128:	2301      	movs	r3, #1
 800812a:	fb0c 2101 	mla	r1, ip, r1, r2
 800812e:	e7f0      	b.n	8008112 <_svfiprintf_r+0x192>
 8008130:	ab03      	add	r3, sp, #12
 8008132:	9300      	str	r3, [sp, #0]
 8008134:	462a      	mov	r2, r5
 8008136:	4638      	mov	r0, r7
 8008138:	4b0f      	ldr	r3, [pc, #60]	; (8008178 <_svfiprintf_r+0x1f8>)
 800813a:	a904      	add	r1, sp, #16
 800813c:	f7fc fc6c 	bl	8004a18 <_printf_float>
 8008140:	1c42      	adds	r2, r0, #1
 8008142:	4606      	mov	r6, r0
 8008144:	d1d6      	bne.n	80080f4 <_svfiprintf_r+0x174>
 8008146:	89ab      	ldrh	r3, [r5, #12]
 8008148:	065b      	lsls	r3, r3, #25
 800814a:	f53f af2d 	bmi.w	8007fa8 <_svfiprintf_r+0x28>
 800814e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008150:	b01d      	add	sp, #116	; 0x74
 8008152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008156:	ab03      	add	r3, sp, #12
 8008158:	9300      	str	r3, [sp, #0]
 800815a:	462a      	mov	r2, r5
 800815c:	4638      	mov	r0, r7
 800815e:	4b06      	ldr	r3, [pc, #24]	; (8008178 <_svfiprintf_r+0x1f8>)
 8008160:	a904      	add	r1, sp, #16
 8008162:	f7fc fef9 	bl	8004f58 <_printf_i>
 8008166:	e7eb      	b.n	8008140 <_svfiprintf_r+0x1c0>
 8008168:	08009c89 	.word	0x08009c89
 800816c:	08009c8f 	.word	0x08009c8f
 8008170:	08009c93 	.word	0x08009c93
 8008174:	08004a19 	.word	0x08004a19
 8008178:	08007ecd 	.word	0x08007ecd

0800817c <_sungetc_r>:
 800817c:	b538      	push	{r3, r4, r5, lr}
 800817e:	1c4b      	adds	r3, r1, #1
 8008180:	4614      	mov	r4, r2
 8008182:	d103      	bne.n	800818c <_sungetc_r+0x10>
 8008184:	f04f 35ff 	mov.w	r5, #4294967295
 8008188:	4628      	mov	r0, r5
 800818a:	bd38      	pop	{r3, r4, r5, pc}
 800818c:	8993      	ldrh	r3, [r2, #12]
 800818e:	b2cd      	uxtb	r5, r1
 8008190:	f023 0320 	bic.w	r3, r3, #32
 8008194:	8193      	strh	r3, [r2, #12]
 8008196:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008198:	6852      	ldr	r2, [r2, #4]
 800819a:	b18b      	cbz	r3, 80081c0 <_sungetc_r+0x44>
 800819c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800819e:	4293      	cmp	r3, r2
 80081a0:	dd08      	ble.n	80081b4 <_sungetc_r+0x38>
 80081a2:	6823      	ldr	r3, [r4, #0]
 80081a4:	1e5a      	subs	r2, r3, #1
 80081a6:	6022      	str	r2, [r4, #0]
 80081a8:	f803 5c01 	strb.w	r5, [r3, #-1]
 80081ac:	6863      	ldr	r3, [r4, #4]
 80081ae:	3301      	adds	r3, #1
 80081b0:	6063      	str	r3, [r4, #4]
 80081b2:	e7e9      	b.n	8008188 <_sungetc_r+0xc>
 80081b4:	4621      	mov	r1, r4
 80081b6:	f000 fbe2 	bl	800897e <__submore>
 80081ba:	2800      	cmp	r0, #0
 80081bc:	d0f1      	beq.n	80081a2 <_sungetc_r+0x26>
 80081be:	e7e1      	b.n	8008184 <_sungetc_r+0x8>
 80081c0:	6921      	ldr	r1, [r4, #16]
 80081c2:	6823      	ldr	r3, [r4, #0]
 80081c4:	b151      	cbz	r1, 80081dc <_sungetc_r+0x60>
 80081c6:	4299      	cmp	r1, r3
 80081c8:	d208      	bcs.n	80081dc <_sungetc_r+0x60>
 80081ca:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80081ce:	42a9      	cmp	r1, r5
 80081d0:	d104      	bne.n	80081dc <_sungetc_r+0x60>
 80081d2:	3b01      	subs	r3, #1
 80081d4:	3201      	adds	r2, #1
 80081d6:	6023      	str	r3, [r4, #0]
 80081d8:	6062      	str	r2, [r4, #4]
 80081da:	e7d5      	b.n	8008188 <_sungetc_r+0xc>
 80081dc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80081e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80081e4:	6363      	str	r3, [r4, #52]	; 0x34
 80081e6:	2303      	movs	r3, #3
 80081e8:	63a3      	str	r3, [r4, #56]	; 0x38
 80081ea:	4623      	mov	r3, r4
 80081ec:	f803 5f46 	strb.w	r5, [r3, #70]!
 80081f0:	6023      	str	r3, [r4, #0]
 80081f2:	2301      	movs	r3, #1
 80081f4:	e7dc      	b.n	80081b0 <_sungetc_r+0x34>

080081f6 <__ssrefill_r>:
 80081f6:	b510      	push	{r4, lr}
 80081f8:	460c      	mov	r4, r1
 80081fa:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80081fc:	b169      	cbz	r1, 800821a <__ssrefill_r+0x24>
 80081fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008202:	4299      	cmp	r1, r3
 8008204:	d001      	beq.n	800820a <__ssrefill_r+0x14>
 8008206:	f7fe fa2b 	bl	8006660 <_free_r>
 800820a:	2000      	movs	r0, #0
 800820c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800820e:	6360      	str	r0, [r4, #52]	; 0x34
 8008210:	6063      	str	r3, [r4, #4]
 8008212:	b113      	cbz	r3, 800821a <__ssrefill_r+0x24>
 8008214:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008216:	6023      	str	r3, [r4, #0]
 8008218:	bd10      	pop	{r4, pc}
 800821a:	6923      	ldr	r3, [r4, #16]
 800821c:	f04f 30ff 	mov.w	r0, #4294967295
 8008220:	6023      	str	r3, [r4, #0]
 8008222:	2300      	movs	r3, #0
 8008224:	6063      	str	r3, [r4, #4]
 8008226:	89a3      	ldrh	r3, [r4, #12]
 8008228:	f043 0320 	orr.w	r3, r3, #32
 800822c:	81a3      	strh	r3, [r4, #12]
 800822e:	e7f3      	b.n	8008218 <__ssrefill_r+0x22>

08008230 <__ssvfiscanf_r>:
 8008230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008234:	460c      	mov	r4, r1
 8008236:	2100      	movs	r1, #0
 8008238:	4606      	mov	r6, r0
 800823a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800823e:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8008242:	49a6      	ldr	r1, [pc, #664]	; (80084dc <__ssvfiscanf_r+0x2ac>)
 8008244:	f10d 0804 	add.w	r8, sp, #4
 8008248:	91a0      	str	r1, [sp, #640]	; 0x280
 800824a:	49a5      	ldr	r1, [pc, #660]	; (80084e0 <__ssvfiscanf_r+0x2b0>)
 800824c:	4fa5      	ldr	r7, [pc, #660]	; (80084e4 <__ssvfiscanf_r+0x2b4>)
 800824e:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80084e8 <__ssvfiscanf_r+0x2b8>
 8008252:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8008256:	91a1      	str	r1, [sp, #644]	; 0x284
 8008258:	9300      	str	r3, [sp, #0]
 800825a:	7813      	ldrb	r3, [r2, #0]
 800825c:	2b00      	cmp	r3, #0
 800825e:	f000 815a 	beq.w	8008516 <__ssvfiscanf_r+0x2e6>
 8008262:	5cf9      	ldrb	r1, [r7, r3]
 8008264:	1c55      	adds	r5, r2, #1
 8008266:	f011 0108 	ands.w	r1, r1, #8
 800826a:	d019      	beq.n	80082a0 <__ssvfiscanf_r+0x70>
 800826c:	6863      	ldr	r3, [r4, #4]
 800826e:	2b00      	cmp	r3, #0
 8008270:	dd0f      	ble.n	8008292 <__ssvfiscanf_r+0x62>
 8008272:	6823      	ldr	r3, [r4, #0]
 8008274:	781a      	ldrb	r2, [r3, #0]
 8008276:	5cba      	ldrb	r2, [r7, r2]
 8008278:	0712      	lsls	r2, r2, #28
 800827a:	d401      	bmi.n	8008280 <__ssvfiscanf_r+0x50>
 800827c:	462a      	mov	r2, r5
 800827e:	e7ec      	b.n	800825a <__ssvfiscanf_r+0x2a>
 8008280:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008282:	3301      	adds	r3, #1
 8008284:	3201      	adds	r2, #1
 8008286:	9245      	str	r2, [sp, #276]	; 0x114
 8008288:	6862      	ldr	r2, [r4, #4]
 800828a:	6023      	str	r3, [r4, #0]
 800828c:	3a01      	subs	r2, #1
 800828e:	6062      	str	r2, [r4, #4]
 8008290:	e7ec      	b.n	800826c <__ssvfiscanf_r+0x3c>
 8008292:	4621      	mov	r1, r4
 8008294:	4630      	mov	r0, r6
 8008296:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008298:	4798      	blx	r3
 800829a:	2800      	cmp	r0, #0
 800829c:	d0e9      	beq.n	8008272 <__ssvfiscanf_r+0x42>
 800829e:	e7ed      	b.n	800827c <__ssvfiscanf_r+0x4c>
 80082a0:	2b25      	cmp	r3, #37	; 0x25
 80082a2:	d012      	beq.n	80082ca <__ssvfiscanf_r+0x9a>
 80082a4:	469a      	mov	sl, r3
 80082a6:	6863      	ldr	r3, [r4, #4]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	f340 8092 	ble.w	80083d2 <__ssvfiscanf_r+0x1a2>
 80082ae:	6822      	ldr	r2, [r4, #0]
 80082b0:	7813      	ldrb	r3, [r2, #0]
 80082b2:	4553      	cmp	r3, sl
 80082b4:	f040 812f 	bne.w	8008516 <__ssvfiscanf_r+0x2e6>
 80082b8:	6863      	ldr	r3, [r4, #4]
 80082ba:	3201      	adds	r2, #1
 80082bc:	3b01      	subs	r3, #1
 80082be:	6063      	str	r3, [r4, #4]
 80082c0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80082c2:	6022      	str	r2, [r4, #0]
 80082c4:	3301      	adds	r3, #1
 80082c6:	9345      	str	r3, [sp, #276]	; 0x114
 80082c8:	e7d8      	b.n	800827c <__ssvfiscanf_r+0x4c>
 80082ca:	9141      	str	r1, [sp, #260]	; 0x104
 80082cc:	9143      	str	r1, [sp, #268]	; 0x10c
 80082ce:	7853      	ldrb	r3, [r2, #1]
 80082d0:	2b2a      	cmp	r3, #42	; 0x2a
 80082d2:	bf04      	itt	eq
 80082d4:	2310      	moveq	r3, #16
 80082d6:	1c95      	addeq	r5, r2, #2
 80082d8:	f04f 020a 	mov.w	r2, #10
 80082dc:	bf08      	it	eq
 80082de:	9341      	streq	r3, [sp, #260]	; 0x104
 80082e0:	46aa      	mov	sl, r5
 80082e2:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80082e6:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80082ea:	2b09      	cmp	r3, #9
 80082ec:	d91c      	bls.n	8008328 <__ssvfiscanf_r+0xf8>
 80082ee:	2203      	movs	r2, #3
 80082f0:	487d      	ldr	r0, [pc, #500]	; (80084e8 <__ssvfiscanf_r+0x2b8>)
 80082f2:	f7fd fb32 	bl	800595a <memchr>
 80082f6:	b138      	cbz	r0, 8008308 <__ssvfiscanf_r+0xd8>
 80082f8:	2301      	movs	r3, #1
 80082fa:	4655      	mov	r5, sl
 80082fc:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80082fe:	eba0 0009 	sub.w	r0, r0, r9
 8008302:	4083      	lsls	r3, r0
 8008304:	4313      	orrs	r3, r2
 8008306:	9341      	str	r3, [sp, #260]	; 0x104
 8008308:	f815 3b01 	ldrb.w	r3, [r5], #1
 800830c:	2b78      	cmp	r3, #120	; 0x78
 800830e:	d806      	bhi.n	800831e <__ssvfiscanf_r+0xee>
 8008310:	2b57      	cmp	r3, #87	; 0x57
 8008312:	d810      	bhi.n	8008336 <__ssvfiscanf_r+0x106>
 8008314:	2b25      	cmp	r3, #37	; 0x25
 8008316:	d0c5      	beq.n	80082a4 <__ssvfiscanf_r+0x74>
 8008318:	d856      	bhi.n	80083c8 <__ssvfiscanf_r+0x198>
 800831a:	2b00      	cmp	r3, #0
 800831c:	d064      	beq.n	80083e8 <__ssvfiscanf_r+0x1b8>
 800831e:	2303      	movs	r3, #3
 8008320:	9347      	str	r3, [sp, #284]	; 0x11c
 8008322:	230a      	movs	r3, #10
 8008324:	9342      	str	r3, [sp, #264]	; 0x108
 8008326:	e075      	b.n	8008414 <__ssvfiscanf_r+0x1e4>
 8008328:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800832a:	4655      	mov	r5, sl
 800832c:	fb02 1103 	mla	r1, r2, r3, r1
 8008330:	3930      	subs	r1, #48	; 0x30
 8008332:	9143      	str	r1, [sp, #268]	; 0x10c
 8008334:	e7d4      	b.n	80082e0 <__ssvfiscanf_r+0xb0>
 8008336:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800833a:	2a20      	cmp	r2, #32
 800833c:	d8ef      	bhi.n	800831e <__ssvfiscanf_r+0xee>
 800833e:	a101      	add	r1, pc, #4	; (adr r1, 8008344 <__ssvfiscanf_r+0x114>)
 8008340:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008344:	080083f7 	.word	0x080083f7
 8008348:	0800831f 	.word	0x0800831f
 800834c:	0800831f 	.word	0x0800831f
 8008350:	08008455 	.word	0x08008455
 8008354:	0800831f 	.word	0x0800831f
 8008358:	0800831f 	.word	0x0800831f
 800835c:	0800831f 	.word	0x0800831f
 8008360:	0800831f 	.word	0x0800831f
 8008364:	0800831f 	.word	0x0800831f
 8008368:	0800831f 	.word	0x0800831f
 800836c:	0800831f 	.word	0x0800831f
 8008370:	0800846b 	.word	0x0800846b
 8008374:	08008451 	.word	0x08008451
 8008378:	080083cf 	.word	0x080083cf
 800837c:	080083cf 	.word	0x080083cf
 8008380:	080083cf 	.word	0x080083cf
 8008384:	0800831f 	.word	0x0800831f
 8008388:	0800840d 	.word	0x0800840d
 800838c:	0800831f 	.word	0x0800831f
 8008390:	0800831f 	.word	0x0800831f
 8008394:	0800831f 	.word	0x0800831f
 8008398:	0800831f 	.word	0x0800831f
 800839c:	0800847b 	.word	0x0800847b
 80083a0:	08008449 	.word	0x08008449
 80083a4:	080083ef 	.word	0x080083ef
 80083a8:	0800831f 	.word	0x0800831f
 80083ac:	0800831f 	.word	0x0800831f
 80083b0:	08008477 	.word	0x08008477
 80083b4:	0800831f 	.word	0x0800831f
 80083b8:	08008451 	.word	0x08008451
 80083bc:	0800831f 	.word	0x0800831f
 80083c0:	0800831f 	.word	0x0800831f
 80083c4:	080083f7 	.word	0x080083f7
 80083c8:	3b45      	subs	r3, #69	; 0x45
 80083ca:	2b02      	cmp	r3, #2
 80083cc:	d8a7      	bhi.n	800831e <__ssvfiscanf_r+0xee>
 80083ce:	2305      	movs	r3, #5
 80083d0:	e01f      	b.n	8008412 <__ssvfiscanf_r+0x1e2>
 80083d2:	4621      	mov	r1, r4
 80083d4:	4630      	mov	r0, r6
 80083d6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80083d8:	4798      	blx	r3
 80083da:	2800      	cmp	r0, #0
 80083dc:	f43f af67 	beq.w	80082ae <__ssvfiscanf_r+0x7e>
 80083e0:	9844      	ldr	r0, [sp, #272]	; 0x110
 80083e2:	2800      	cmp	r0, #0
 80083e4:	f040 808d 	bne.w	8008502 <__ssvfiscanf_r+0x2d2>
 80083e8:	f04f 30ff 	mov.w	r0, #4294967295
 80083ec:	e08f      	b.n	800850e <__ssvfiscanf_r+0x2de>
 80083ee:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80083f0:	f042 0220 	orr.w	r2, r2, #32
 80083f4:	9241      	str	r2, [sp, #260]	; 0x104
 80083f6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80083f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80083fc:	9241      	str	r2, [sp, #260]	; 0x104
 80083fe:	2210      	movs	r2, #16
 8008400:	2b6f      	cmp	r3, #111	; 0x6f
 8008402:	bf34      	ite	cc
 8008404:	2303      	movcc	r3, #3
 8008406:	2304      	movcs	r3, #4
 8008408:	9242      	str	r2, [sp, #264]	; 0x108
 800840a:	e002      	b.n	8008412 <__ssvfiscanf_r+0x1e2>
 800840c:	2300      	movs	r3, #0
 800840e:	9342      	str	r3, [sp, #264]	; 0x108
 8008410:	2303      	movs	r3, #3
 8008412:	9347      	str	r3, [sp, #284]	; 0x11c
 8008414:	6863      	ldr	r3, [r4, #4]
 8008416:	2b00      	cmp	r3, #0
 8008418:	dd3d      	ble.n	8008496 <__ssvfiscanf_r+0x266>
 800841a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800841c:	0659      	lsls	r1, r3, #25
 800841e:	d404      	bmi.n	800842a <__ssvfiscanf_r+0x1fa>
 8008420:	6823      	ldr	r3, [r4, #0]
 8008422:	781a      	ldrb	r2, [r3, #0]
 8008424:	5cba      	ldrb	r2, [r7, r2]
 8008426:	0712      	lsls	r2, r2, #28
 8008428:	d43c      	bmi.n	80084a4 <__ssvfiscanf_r+0x274>
 800842a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800842c:	2b02      	cmp	r3, #2
 800842e:	dc4b      	bgt.n	80084c8 <__ssvfiscanf_r+0x298>
 8008430:	466b      	mov	r3, sp
 8008432:	4622      	mov	r2, r4
 8008434:	4630      	mov	r0, r6
 8008436:	a941      	add	r1, sp, #260	; 0x104
 8008438:	f000 f872 	bl	8008520 <_scanf_chars>
 800843c:	2801      	cmp	r0, #1
 800843e:	d06a      	beq.n	8008516 <__ssvfiscanf_r+0x2e6>
 8008440:	2802      	cmp	r0, #2
 8008442:	f47f af1b 	bne.w	800827c <__ssvfiscanf_r+0x4c>
 8008446:	e7cb      	b.n	80083e0 <__ssvfiscanf_r+0x1b0>
 8008448:	2308      	movs	r3, #8
 800844a:	9342      	str	r3, [sp, #264]	; 0x108
 800844c:	2304      	movs	r3, #4
 800844e:	e7e0      	b.n	8008412 <__ssvfiscanf_r+0x1e2>
 8008450:	220a      	movs	r2, #10
 8008452:	e7d5      	b.n	8008400 <__ssvfiscanf_r+0x1d0>
 8008454:	4629      	mov	r1, r5
 8008456:	4640      	mov	r0, r8
 8008458:	f000 fa58 	bl	800890c <__sccl>
 800845c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800845e:	4605      	mov	r5, r0
 8008460:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008464:	9341      	str	r3, [sp, #260]	; 0x104
 8008466:	2301      	movs	r3, #1
 8008468:	e7d3      	b.n	8008412 <__ssvfiscanf_r+0x1e2>
 800846a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800846c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008470:	9341      	str	r3, [sp, #260]	; 0x104
 8008472:	2300      	movs	r3, #0
 8008474:	e7cd      	b.n	8008412 <__ssvfiscanf_r+0x1e2>
 8008476:	2302      	movs	r3, #2
 8008478:	e7cb      	b.n	8008412 <__ssvfiscanf_r+0x1e2>
 800847a:	9841      	ldr	r0, [sp, #260]	; 0x104
 800847c:	06c3      	lsls	r3, r0, #27
 800847e:	f53f aefd 	bmi.w	800827c <__ssvfiscanf_r+0x4c>
 8008482:	9b00      	ldr	r3, [sp, #0]
 8008484:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008486:	1d19      	adds	r1, r3, #4
 8008488:	9100      	str	r1, [sp, #0]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	07c0      	lsls	r0, r0, #31
 800848e:	bf4c      	ite	mi
 8008490:	801a      	strhmi	r2, [r3, #0]
 8008492:	601a      	strpl	r2, [r3, #0]
 8008494:	e6f2      	b.n	800827c <__ssvfiscanf_r+0x4c>
 8008496:	4621      	mov	r1, r4
 8008498:	4630      	mov	r0, r6
 800849a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800849c:	4798      	blx	r3
 800849e:	2800      	cmp	r0, #0
 80084a0:	d0bb      	beq.n	800841a <__ssvfiscanf_r+0x1ea>
 80084a2:	e79d      	b.n	80083e0 <__ssvfiscanf_r+0x1b0>
 80084a4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80084a6:	3201      	adds	r2, #1
 80084a8:	9245      	str	r2, [sp, #276]	; 0x114
 80084aa:	6862      	ldr	r2, [r4, #4]
 80084ac:	3a01      	subs	r2, #1
 80084ae:	2a00      	cmp	r2, #0
 80084b0:	6062      	str	r2, [r4, #4]
 80084b2:	dd02      	ble.n	80084ba <__ssvfiscanf_r+0x28a>
 80084b4:	3301      	adds	r3, #1
 80084b6:	6023      	str	r3, [r4, #0]
 80084b8:	e7b2      	b.n	8008420 <__ssvfiscanf_r+0x1f0>
 80084ba:	4621      	mov	r1, r4
 80084bc:	4630      	mov	r0, r6
 80084be:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80084c0:	4798      	blx	r3
 80084c2:	2800      	cmp	r0, #0
 80084c4:	d0ac      	beq.n	8008420 <__ssvfiscanf_r+0x1f0>
 80084c6:	e78b      	b.n	80083e0 <__ssvfiscanf_r+0x1b0>
 80084c8:	2b04      	cmp	r3, #4
 80084ca:	dc0f      	bgt.n	80084ec <__ssvfiscanf_r+0x2bc>
 80084cc:	466b      	mov	r3, sp
 80084ce:	4622      	mov	r2, r4
 80084d0:	4630      	mov	r0, r6
 80084d2:	a941      	add	r1, sp, #260	; 0x104
 80084d4:	f000 f87e 	bl	80085d4 <_scanf_i>
 80084d8:	e7b0      	b.n	800843c <__ssvfiscanf_r+0x20c>
 80084da:	bf00      	nop
 80084dc:	0800817d 	.word	0x0800817d
 80084e0:	080081f7 	.word	0x080081f7
 80084e4:	08009b89 	.word	0x08009b89
 80084e8:	08009c8f 	.word	0x08009c8f
 80084ec:	4b0b      	ldr	r3, [pc, #44]	; (800851c <__ssvfiscanf_r+0x2ec>)
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	f43f aec4 	beq.w	800827c <__ssvfiscanf_r+0x4c>
 80084f4:	466b      	mov	r3, sp
 80084f6:	4622      	mov	r2, r4
 80084f8:	4630      	mov	r0, r6
 80084fa:	a941      	add	r1, sp, #260	; 0x104
 80084fc:	f7fc fe4e 	bl	800519c <_scanf_float>
 8008500:	e79c      	b.n	800843c <__ssvfiscanf_r+0x20c>
 8008502:	89a3      	ldrh	r3, [r4, #12]
 8008504:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008508:	bf18      	it	ne
 800850a:	f04f 30ff 	movne.w	r0, #4294967295
 800850e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8008512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008516:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008518:	e7f9      	b.n	800850e <__ssvfiscanf_r+0x2de>
 800851a:	bf00      	nop
 800851c:	0800519d 	.word	0x0800519d

08008520 <_scanf_chars>:
 8008520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008524:	4615      	mov	r5, r2
 8008526:	688a      	ldr	r2, [r1, #8]
 8008528:	4680      	mov	r8, r0
 800852a:	460c      	mov	r4, r1
 800852c:	b932      	cbnz	r2, 800853c <_scanf_chars+0x1c>
 800852e:	698a      	ldr	r2, [r1, #24]
 8008530:	2a00      	cmp	r2, #0
 8008532:	bf0c      	ite	eq
 8008534:	2201      	moveq	r2, #1
 8008536:	f04f 32ff 	movne.w	r2, #4294967295
 800853a:	608a      	str	r2, [r1, #8]
 800853c:	2700      	movs	r7, #0
 800853e:	6822      	ldr	r2, [r4, #0]
 8008540:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80085d0 <_scanf_chars+0xb0>
 8008544:	06d1      	lsls	r1, r2, #27
 8008546:	bf5f      	itttt	pl
 8008548:	681a      	ldrpl	r2, [r3, #0]
 800854a:	1d11      	addpl	r1, r2, #4
 800854c:	6019      	strpl	r1, [r3, #0]
 800854e:	6816      	ldrpl	r6, [r2, #0]
 8008550:	69a0      	ldr	r0, [r4, #24]
 8008552:	b188      	cbz	r0, 8008578 <_scanf_chars+0x58>
 8008554:	2801      	cmp	r0, #1
 8008556:	d107      	bne.n	8008568 <_scanf_chars+0x48>
 8008558:	682b      	ldr	r3, [r5, #0]
 800855a:	781a      	ldrb	r2, [r3, #0]
 800855c:	6963      	ldr	r3, [r4, #20]
 800855e:	5c9b      	ldrb	r3, [r3, r2]
 8008560:	b953      	cbnz	r3, 8008578 <_scanf_chars+0x58>
 8008562:	2f00      	cmp	r7, #0
 8008564:	d031      	beq.n	80085ca <_scanf_chars+0xaa>
 8008566:	e022      	b.n	80085ae <_scanf_chars+0x8e>
 8008568:	2802      	cmp	r0, #2
 800856a:	d120      	bne.n	80085ae <_scanf_chars+0x8e>
 800856c:	682b      	ldr	r3, [r5, #0]
 800856e:	781b      	ldrb	r3, [r3, #0]
 8008570:	f819 3003 	ldrb.w	r3, [r9, r3]
 8008574:	071b      	lsls	r3, r3, #28
 8008576:	d41a      	bmi.n	80085ae <_scanf_chars+0x8e>
 8008578:	6823      	ldr	r3, [r4, #0]
 800857a:	3701      	adds	r7, #1
 800857c:	06da      	lsls	r2, r3, #27
 800857e:	bf5e      	ittt	pl
 8008580:	682b      	ldrpl	r3, [r5, #0]
 8008582:	781b      	ldrbpl	r3, [r3, #0]
 8008584:	f806 3b01 	strbpl.w	r3, [r6], #1
 8008588:	682a      	ldr	r2, [r5, #0]
 800858a:	686b      	ldr	r3, [r5, #4]
 800858c:	3201      	adds	r2, #1
 800858e:	602a      	str	r2, [r5, #0]
 8008590:	68a2      	ldr	r2, [r4, #8]
 8008592:	3b01      	subs	r3, #1
 8008594:	3a01      	subs	r2, #1
 8008596:	606b      	str	r3, [r5, #4]
 8008598:	60a2      	str	r2, [r4, #8]
 800859a:	b142      	cbz	r2, 80085ae <_scanf_chars+0x8e>
 800859c:	2b00      	cmp	r3, #0
 800859e:	dcd7      	bgt.n	8008550 <_scanf_chars+0x30>
 80085a0:	4629      	mov	r1, r5
 80085a2:	4640      	mov	r0, r8
 80085a4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80085a8:	4798      	blx	r3
 80085aa:	2800      	cmp	r0, #0
 80085ac:	d0d0      	beq.n	8008550 <_scanf_chars+0x30>
 80085ae:	6823      	ldr	r3, [r4, #0]
 80085b0:	f013 0310 	ands.w	r3, r3, #16
 80085b4:	d105      	bne.n	80085c2 <_scanf_chars+0xa2>
 80085b6:	68e2      	ldr	r2, [r4, #12]
 80085b8:	3201      	adds	r2, #1
 80085ba:	60e2      	str	r2, [r4, #12]
 80085bc:	69a2      	ldr	r2, [r4, #24]
 80085be:	b102      	cbz	r2, 80085c2 <_scanf_chars+0xa2>
 80085c0:	7033      	strb	r3, [r6, #0]
 80085c2:	2000      	movs	r0, #0
 80085c4:	6923      	ldr	r3, [r4, #16]
 80085c6:	443b      	add	r3, r7
 80085c8:	6123      	str	r3, [r4, #16]
 80085ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085ce:	bf00      	nop
 80085d0:	08009b89 	.word	0x08009b89

080085d4 <_scanf_i>:
 80085d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085d8:	460c      	mov	r4, r1
 80085da:	4698      	mov	r8, r3
 80085dc:	4b72      	ldr	r3, [pc, #456]	; (80087a8 <_scanf_i+0x1d4>)
 80085de:	b087      	sub	sp, #28
 80085e0:	4682      	mov	sl, r0
 80085e2:	4616      	mov	r6, r2
 80085e4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80085e8:	ab03      	add	r3, sp, #12
 80085ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80085ee:	4b6f      	ldr	r3, [pc, #444]	; (80087ac <_scanf_i+0x1d8>)
 80085f0:	69a1      	ldr	r1, [r4, #24]
 80085f2:	4a6f      	ldr	r2, [pc, #444]	; (80087b0 <_scanf_i+0x1dc>)
 80085f4:	4627      	mov	r7, r4
 80085f6:	2903      	cmp	r1, #3
 80085f8:	bf18      	it	ne
 80085fa:	461a      	movne	r2, r3
 80085fc:	68a3      	ldr	r3, [r4, #8]
 80085fe:	9201      	str	r2, [sp, #4]
 8008600:	1e5a      	subs	r2, r3, #1
 8008602:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008606:	bf81      	itttt	hi
 8008608:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800860c:	eb03 0905 	addhi.w	r9, r3, r5
 8008610:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008614:	60a3      	strhi	r3, [r4, #8]
 8008616:	f857 3b1c 	ldr.w	r3, [r7], #28
 800861a:	bf98      	it	ls
 800861c:	f04f 0900 	movls.w	r9, #0
 8008620:	463d      	mov	r5, r7
 8008622:	f04f 0b00 	mov.w	fp, #0
 8008626:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800862a:	6023      	str	r3, [r4, #0]
 800862c:	6831      	ldr	r1, [r6, #0]
 800862e:	ab03      	add	r3, sp, #12
 8008630:	2202      	movs	r2, #2
 8008632:	7809      	ldrb	r1, [r1, #0]
 8008634:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008638:	f7fd f98f 	bl	800595a <memchr>
 800863c:	b328      	cbz	r0, 800868a <_scanf_i+0xb6>
 800863e:	f1bb 0f01 	cmp.w	fp, #1
 8008642:	d159      	bne.n	80086f8 <_scanf_i+0x124>
 8008644:	6862      	ldr	r2, [r4, #4]
 8008646:	b92a      	cbnz	r2, 8008654 <_scanf_i+0x80>
 8008648:	2308      	movs	r3, #8
 800864a:	6822      	ldr	r2, [r4, #0]
 800864c:	6063      	str	r3, [r4, #4]
 800864e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008652:	6022      	str	r2, [r4, #0]
 8008654:	6822      	ldr	r2, [r4, #0]
 8008656:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800865a:	6022      	str	r2, [r4, #0]
 800865c:	68a2      	ldr	r2, [r4, #8]
 800865e:	1e51      	subs	r1, r2, #1
 8008660:	60a1      	str	r1, [r4, #8]
 8008662:	b192      	cbz	r2, 800868a <_scanf_i+0xb6>
 8008664:	6832      	ldr	r2, [r6, #0]
 8008666:	1c51      	adds	r1, r2, #1
 8008668:	6031      	str	r1, [r6, #0]
 800866a:	7812      	ldrb	r2, [r2, #0]
 800866c:	f805 2b01 	strb.w	r2, [r5], #1
 8008670:	6872      	ldr	r2, [r6, #4]
 8008672:	3a01      	subs	r2, #1
 8008674:	2a00      	cmp	r2, #0
 8008676:	6072      	str	r2, [r6, #4]
 8008678:	dc07      	bgt.n	800868a <_scanf_i+0xb6>
 800867a:	4631      	mov	r1, r6
 800867c:	4650      	mov	r0, sl
 800867e:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8008682:	4790      	blx	r2
 8008684:	2800      	cmp	r0, #0
 8008686:	f040 8085 	bne.w	8008794 <_scanf_i+0x1c0>
 800868a:	f10b 0b01 	add.w	fp, fp, #1
 800868e:	f1bb 0f03 	cmp.w	fp, #3
 8008692:	d1cb      	bne.n	800862c <_scanf_i+0x58>
 8008694:	6863      	ldr	r3, [r4, #4]
 8008696:	b90b      	cbnz	r3, 800869c <_scanf_i+0xc8>
 8008698:	230a      	movs	r3, #10
 800869a:	6063      	str	r3, [r4, #4]
 800869c:	6863      	ldr	r3, [r4, #4]
 800869e:	4945      	ldr	r1, [pc, #276]	; (80087b4 <_scanf_i+0x1e0>)
 80086a0:	6960      	ldr	r0, [r4, #20]
 80086a2:	1ac9      	subs	r1, r1, r3
 80086a4:	f000 f932 	bl	800890c <__sccl>
 80086a8:	f04f 0b00 	mov.w	fp, #0
 80086ac:	68a3      	ldr	r3, [r4, #8]
 80086ae:	6822      	ldr	r2, [r4, #0]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d03d      	beq.n	8008730 <_scanf_i+0x15c>
 80086b4:	6831      	ldr	r1, [r6, #0]
 80086b6:	6960      	ldr	r0, [r4, #20]
 80086b8:	f891 c000 	ldrb.w	ip, [r1]
 80086bc:	f810 000c 	ldrb.w	r0, [r0, ip]
 80086c0:	2800      	cmp	r0, #0
 80086c2:	d035      	beq.n	8008730 <_scanf_i+0x15c>
 80086c4:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80086c8:	d124      	bne.n	8008714 <_scanf_i+0x140>
 80086ca:	0510      	lsls	r0, r2, #20
 80086cc:	d522      	bpl.n	8008714 <_scanf_i+0x140>
 80086ce:	f10b 0b01 	add.w	fp, fp, #1
 80086d2:	f1b9 0f00 	cmp.w	r9, #0
 80086d6:	d003      	beq.n	80086e0 <_scanf_i+0x10c>
 80086d8:	3301      	adds	r3, #1
 80086da:	f109 39ff 	add.w	r9, r9, #4294967295
 80086de:	60a3      	str	r3, [r4, #8]
 80086e0:	6873      	ldr	r3, [r6, #4]
 80086e2:	3b01      	subs	r3, #1
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	6073      	str	r3, [r6, #4]
 80086e8:	dd1b      	ble.n	8008722 <_scanf_i+0x14e>
 80086ea:	6833      	ldr	r3, [r6, #0]
 80086ec:	3301      	adds	r3, #1
 80086ee:	6033      	str	r3, [r6, #0]
 80086f0:	68a3      	ldr	r3, [r4, #8]
 80086f2:	3b01      	subs	r3, #1
 80086f4:	60a3      	str	r3, [r4, #8]
 80086f6:	e7d9      	b.n	80086ac <_scanf_i+0xd8>
 80086f8:	f1bb 0f02 	cmp.w	fp, #2
 80086fc:	d1ae      	bne.n	800865c <_scanf_i+0x88>
 80086fe:	6822      	ldr	r2, [r4, #0]
 8008700:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8008704:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8008708:	d1bf      	bne.n	800868a <_scanf_i+0xb6>
 800870a:	2310      	movs	r3, #16
 800870c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008710:	6063      	str	r3, [r4, #4]
 8008712:	e7a2      	b.n	800865a <_scanf_i+0x86>
 8008714:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8008718:	6022      	str	r2, [r4, #0]
 800871a:	780b      	ldrb	r3, [r1, #0]
 800871c:	f805 3b01 	strb.w	r3, [r5], #1
 8008720:	e7de      	b.n	80086e0 <_scanf_i+0x10c>
 8008722:	4631      	mov	r1, r6
 8008724:	4650      	mov	r0, sl
 8008726:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800872a:	4798      	blx	r3
 800872c:	2800      	cmp	r0, #0
 800872e:	d0df      	beq.n	80086f0 <_scanf_i+0x11c>
 8008730:	6823      	ldr	r3, [r4, #0]
 8008732:	05d9      	lsls	r1, r3, #23
 8008734:	d50d      	bpl.n	8008752 <_scanf_i+0x17e>
 8008736:	42bd      	cmp	r5, r7
 8008738:	d909      	bls.n	800874e <_scanf_i+0x17a>
 800873a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800873e:	4632      	mov	r2, r6
 8008740:	4650      	mov	r0, sl
 8008742:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008746:	f105 39ff 	add.w	r9, r5, #4294967295
 800874a:	4798      	blx	r3
 800874c:	464d      	mov	r5, r9
 800874e:	42bd      	cmp	r5, r7
 8008750:	d028      	beq.n	80087a4 <_scanf_i+0x1d0>
 8008752:	6822      	ldr	r2, [r4, #0]
 8008754:	f012 0210 	ands.w	r2, r2, #16
 8008758:	d113      	bne.n	8008782 <_scanf_i+0x1ae>
 800875a:	702a      	strb	r2, [r5, #0]
 800875c:	4639      	mov	r1, r7
 800875e:	6863      	ldr	r3, [r4, #4]
 8008760:	4650      	mov	r0, sl
 8008762:	9e01      	ldr	r6, [sp, #4]
 8008764:	47b0      	blx	r6
 8008766:	f8d8 3000 	ldr.w	r3, [r8]
 800876a:	6821      	ldr	r1, [r4, #0]
 800876c:	1d1a      	adds	r2, r3, #4
 800876e:	f8c8 2000 	str.w	r2, [r8]
 8008772:	f011 0f20 	tst.w	r1, #32
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	d00f      	beq.n	800879a <_scanf_i+0x1c6>
 800877a:	6018      	str	r0, [r3, #0]
 800877c:	68e3      	ldr	r3, [r4, #12]
 800877e:	3301      	adds	r3, #1
 8008780:	60e3      	str	r3, [r4, #12]
 8008782:	2000      	movs	r0, #0
 8008784:	6923      	ldr	r3, [r4, #16]
 8008786:	1bed      	subs	r5, r5, r7
 8008788:	445d      	add	r5, fp
 800878a:	442b      	add	r3, r5
 800878c:	6123      	str	r3, [r4, #16]
 800878e:	b007      	add	sp, #28
 8008790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008794:	f04f 0b00 	mov.w	fp, #0
 8008798:	e7ca      	b.n	8008730 <_scanf_i+0x15c>
 800879a:	07ca      	lsls	r2, r1, #31
 800879c:	bf4c      	ite	mi
 800879e:	8018      	strhmi	r0, [r3, #0]
 80087a0:	6018      	strpl	r0, [r3, #0]
 80087a2:	e7eb      	b.n	800877c <_scanf_i+0x1a8>
 80087a4:	2001      	movs	r0, #1
 80087a6:	e7f2      	b.n	800878e <_scanf_i+0x1ba>
 80087a8:	080098e0 	.word	0x080098e0
 80087ac:	0800930d 	.word	0x0800930d
 80087b0:	08007ec9 	.word	0x08007ec9
 80087b4:	08009caa 	.word	0x08009caa

080087b8 <__sflush_r>:
 80087b8:	898a      	ldrh	r2, [r1, #12]
 80087ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087bc:	4605      	mov	r5, r0
 80087be:	0710      	lsls	r0, r2, #28
 80087c0:	460c      	mov	r4, r1
 80087c2:	d457      	bmi.n	8008874 <__sflush_r+0xbc>
 80087c4:	684b      	ldr	r3, [r1, #4]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	dc04      	bgt.n	80087d4 <__sflush_r+0x1c>
 80087ca:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	dc01      	bgt.n	80087d4 <__sflush_r+0x1c>
 80087d0:	2000      	movs	r0, #0
 80087d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80087d6:	2e00      	cmp	r6, #0
 80087d8:	d0fa      	beq.n	80087d0 <__sflush_r+0x18>
 80087da:	2300      	movs	r3, #0
 80087dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80087e0:	682f      	ldr	r7, [r5, #0]
 80087e2:	6a21      	ldr	r1, [r4, #32]
 80087e4:	602b      	str	r3, [r5, #0]
 80087e6:	d032      	beq.n	800884e <__sflush_r+0x96>
 80087e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80087ea:	89a3      	ldrh	r3, [r4, #12]
 80087ec:	075a      	lsls	r2, r3, #29
 80087ee:	d505      	bpl.n	80087fc <__sflush_r+0x44>
 80087f0:	6863      	ldr	r3, [r4, #4]
 80087f2:	1ac0      	subs	r0, r0, r3
 80087f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80087f6:	b10b      	cbz	r3, 80087fc <__sflush_r+0x44>
 80087f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80087fa:	1ac0      	subs	r0, r0, r3
 80087fc:	2300      	movs	r3, #0
 80087fe:	4602      	mov	r2, r0
 8008800:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008802:	4628      	mov	r0, r5
 8008804:	6a21      	ldr	r1, [r4, #32]
 8008806:	47b0      	blx	r6
 8008808:	1c43      	adds	r3, r0, #1
 800880a:	89a3      	ldrh	r3, [r4, #12]
 800880c:	d106      	bne.n	800881c <__sflush_r+0x64>
 800880e:	6829      	ldr	r1, [r5, #0]
 8008810:	291d      	cmp	r1, #29
 8008812:	d82b      	bhi.n	800886c <__sflush_r+0xb4>
 8008814:	4a28      	ldr	r2, [pc, #160]	; (80088b8 <__sflush_r+0x100>)
 8008816:	410a      	asrs	r2, r1
 8008818:	07d6      	lsls	r6, r2, #31
 800881a:	d427      	bmi.n	800886c <__sflush_r+0xb4>
 800881c:	2200      	movs	r2, #0
 800881e:	6062      	str	r2, [r4, #4]
 8008820:	6922      	ldr	r2, [r4, #16]
 8008822:	04d9      	lsls	r1, r3, #19
 8008824:	6022      	str	r2, [r4, #0]
 8008826:	d504      	bpl.n	8008832 <__sflush_r+0x7a>
 8008828:	1c42      	adds	r2, r0, #1
 800882a:	d101      	bne.n	8008830 <__sflush_r+0x78>
 800882c:	682b      	ldr	r3, [r5, #0]
 800882e:	b903      	cbnz	r3, 8008832 <__sflush_r+0x7a>
 8008830:	6560      	str	r0, [r4, #84]	; 0x54
 8008832:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008834:	602f      	str	r7, [r5, #0]
 8008836:	2900      	cmp	r1, #0
 8008838:	d0ca      	beq.n	80087d0 <__sflush_r+0x18>
 800883a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800883e:	4299      	cmp	r1, r3
 8008840:	d002      	beq.n	8008848 <__sflush_r+0x90>
 8008842:	4628      	mov	r0, r5
 8008844:	f7fd ff0c 	bl	8006660 <_free_r>
 8008848:	2000      	movs	r0, #0
 800884a:	6360      	str	r0, [r4, #52]	; 0x34
 800884c:	e7c1      	b.n	80087d2 <__sflush_r+0x1a>
 800884e:	2301      	movs	r3, #1
 8008850:	4628      	mov	r0, r5
 8008852:	47b0      	blx	r6
 8008854:	1c41      	adds	r1, r0, #1
 8008856:	d1c8      	bne.n	80087ea <__sflush_r+0x32>
 8008858:	682b      	ldr	r3, [r5, #0]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d0c5      	beq.n	80087ea <__sflush_r+0x32>
 800885e:	2b1d      	cmp	r3, #29
 8008860:	d001      	beq.n	8008866 <__sflush_r+0xae>
 8008862:	2b16      	cmp	r3, #22
 8008864:	d101      	bne.n	800886a <__sflush_r+0xb2>
 8008866:	602f      	str	r7, [r5, #0]
 8008868:	e7b2      	b.n	80087d0 <__sflush_r+0x18>
 800886a:	89a3      	ldrh	r3, [r4, #12]
 800886c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008870:	81a3      	strh	r3, [r4, #12]
 8008872:	e7ae      	b.n	80087d2 <__sflush_r+0x1a>
 8008874:	690f      	ldr	r7, [r1, #16]
 8008876:	2f00      	cmp	r7, #0
 8008878:	d0aa      	beq.n	80087d0 <__sflush_r+0x18>
 800887a:	0793      	lsls	r3, r2, #30
 800887c:	bf18      	it	ne
 800887e:	2300      	movne	r3, #0
 8008880:	680e      	ldr	r6, [r1, #0]
 8008882:	bf08      	it	eq
 8008884:	694b      	ldreq	r3, [r1, #20]
 8008886:	1bf6      	subs	r6, r6, r7
 8008888:	600f      	str	r7, [r1, #0]
 800888a:	608b      	str	r3, [r1, #8]
 800888c:	2e00      	cmp	r6, #0
 800888e:	dd9f      	ble.n	80087d0 <__sflush_r+0x18>
 8008890:	4633      	mov	r3, r6
 8008892:	463a      	mov	r2, r7
 8008894:	4628      	mov	r0, r5
 8008896:	6a21      	ldr	r1, [r4, #32]
 8008898:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800889c:	47e0      	blx	ip
 800889e:	2800      	cmp	r0, #0
 80088a0:	dc06      	bgt.n	80088b0 <__sflush_r+0xf8>
 80088a2:	89a3      	ldrh	r3, [r4, #12]
 80088a4:	f04f 30ff 	mov.w	r0, #4294967295
 80088a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088ac:	81a3      	strh	r3, [r4, #12]
 80088ae:	e790      	b.n	80087d2 <__sflush_r+0x1a>
 80088b0:	4407      	add	r7, r0
 80088b2:	1a36      	subs	r6, r6, r0
 80088b4:	e7ea      	b.n	800888c <__sflush_r+0xd4>
 80088b6:	bf00      	nop
 80088b8:	dfbffffe 	.word	0xdfbffffe

080088bc <_fflush_r>:
 80088bc:	b538      	push	{r3, r4, r5, lr}
 80088be:	690b      	ldr	r3, [r1, #16]
 80088c0:	4605      	mov	r5, r0
 80088c2:	460c      	mov	r4, r1
 80088c4:	b913      	cbnz	r3, 80088cc <_fflush_r+0x10>
 80088c6:	2500      	movs	r5, #0
 80088c8:	4628      	mov	r0, r5
 80088ca:	bd38      	pop	{r3, r4, r5, pc}
 80088cc:	b118      	cbz	r0, 80088d6 <_fflush_r+0x1a>
 80088ce:	6a03      	ldr	r3, [r0, #32]
 80088d0:	b90b      	cbnz	r3, 80088d6 <_fflush_r+0x1a>
 80088d2:	f7fc fefd 	bl	80056d0 <__sinit>
 80088d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d0f3      	beq.n	80088c6 <_fflush_r+0xa>
 80088de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80088e0:	07d0      	lsls	r0, r2, #31
 80088e2:	d404      	bmi.n	80088ee <_fflush_r+0x32>
 80088e4:	0599      	lsls	r1, r3, #22
 80088e6:	d402      	bmi.n	80088ee <_fflush_r+0x32>
 80088e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088ea:	f7fd f834 	bl	8005956 <__retarget_lock_acquire_recursive>
 80088ee:	4628      	mov	r0, r5
 80088f0:	4621      	mov	r1, r4
 80088f2:	f7ff ff61 	bl	80087b8 <__sflush_r>
 80088f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80088f8:	4605      	mov	r5, r0
 80088fa:	07da      	lsls	r2, r3, #31
 80088fc:	d4e4      	bmi.n	80088c8 <_fflush_r+0xc>
 80088fe:	89a3      	ldrh	r3, [r4, #12]
 8008900:	059b      	lsls	r3, r3, #22
 8008902:	d4e1      	bmi.n	80088c8 <_fflush_r+0xc>
 8008904:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008906:	f7fd f827 	bl	8005958 <__retarget_lock_release_recursive>
 800890a:	e7dd      	b.n	80088c8 <_fflush_r+0xc>

0800890c <__sccl>:
 800890c:	b570      	push	{r4, r5, r6, lr}
 800890e:	780b      	ldrb	r3, [r1, #0]
 8008910:	4604      	mov	r4, r0
 8008912:	2b5e      	cmp	r3, #94	; 0x5e
 8008914:	bf0b      	itete	eq
 8008916:	784b      	ldrbeq	r3, [r1, #1]
 8008918:	1c4a      	addne	r2, r1, #1
 800891a:	1c8a      	addeq	r2, r1, #2
 800891c:	2100      	movne	r1, #0
 800891e:	bf08      	it	eq
 8008920:	2101      	moveq	r1, #1
 8008922:	3801      	subs	r0, #1
 8008924:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8008928:	f800 1f01 	strb.w	r1, [r0, #1]!
 800892c:	42a8      	cmp	r0, r5
 800892e:	d1fb      	bne.n	8008928 <__sccl+0x1c>
 8008930:	b90b      	cbnz	r3, 8008936 <__sccl+0x2a>
 8008932:	1e50      	subs	r0, r2, #1
 8008934:	bd70      	pop	{r4, r5, r6, pc}
 8008936:	f081 0101 	eor.w	r1, r1, #1
 800893a:	4610      	mov	r0, r2
 800893c:	54e1      	strb	r1, [r4, r3]
 800893e:	4602      	mov	r2, r0
 8008940:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008944:	2d2d      	cmp	r5, #45	; 0x2d
 8008946:	d005      	beq.n	8008954 <__sccl+0x48>
 8008948:	2d5d      	cmp	r5, #93	; 0x5d
 800894a:	d016      	beq.n	800897a <__sccl+0x6e>
 800894c:	2d00      	cmp	r5, #0
 800894e:	d0f1      	beq.n	8008934 <__sccl+0x28>
 8008950:	462b      	mov	r3, r5
 8008952:	e7f2      	b.n	800893a <__sccl+0x2e>
 8008954:	7846      	ldrb	r6, [r0, #1]
 8008956:	2e5d      	cmp	r6, #93	; 0x5d
 8008958:	d0fa      	beq.n	8008950 <__sccl+0x44>
 800895a:	42b3      	cmp	r3, r6
 800895c:	dcf8      	bgt.n	8008950 <__sccl+0x44>
 800895e:	461a      	mov	r2, r3
 8008960:	3002      	adds	r0, #2
 8008962:	3201      	adds	r2, #1
 8008964:	4296      	cmp	r6, r2
 8008966:	54a1      	strb	r1, [r4, r2]
 8008968:	dcfb      	bgt.n	8008962 <__sccl+0x56>
 800896a:	1af2      	subs	r2, r6, r3
 800896c:	3a01      	subs	r2, #1
 800896e:	42b3      	cmp	r3, r6
 8008970:	bfa8      	it	ge
 8008972:	2200      	movge	r2, #0
 8008974:	1c5d      	adds	r5, r3, #1
 8008976:	18ab      	adds	r3, r5, r2
 8008978:	e7e1      	b.n	800893e <__sccl+0x32>
 800897a:	4610      	mov	r0, r2
 800897c:	e7da      	b.n	8008934 <__sccl+0x28>

0800897e <__submore>:
 800897e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008982:	460c      	mov	r4, r1
 8008984:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008986:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800898a:	4299      	cmp	r1, r3
 800898c:	d11b      	bne.n	80089c6 <__submore+0x48>
 800898e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008992:	f7fd fed5 	bl	8006740 <_malloc_r>
 8008996:	b918      	cbnz	r0, 80089a0 <__submore+0x22>
 8008998:	f04f 30ff 	mov.w	r0, #4294967295
 800899c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089a4:	63a3      	str	r3, [r4, #56]	; 0x38
 80089a6:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80089aa:	6360      	str	r0, [r4, #52]	; 0x34
 80089ac:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80089b0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80089b4:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80089b8:	7043      	strb	r3, [r0, #1]
 80089ba:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80089be:	7003      	strb	r3, [r0, #0]
 80089c0:	6020      	str	r0, [r4, #0]
 80089c2:	2000      	movs	r0, #0
 80089c4:	e7ea      	b.n	800899c <__submore+0x1e>
 80089c6:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80089c8:	0077      	lsls	r7, r6, #1
 80089ca:	463a      	mov	r2, r7
 80089cc:	f000 fbfd 	bl	80091ca <_realloc_r>
 80089d0:	4605      	mov	r5, r0
 80089d2:	2800      	cmp	r0, #0
 80089d4:	d0e0      	beq.n	8008998 <__submore+0x1a>
 80089d6:	eb00 0806 	add.w	r8, r0, r6
 80089da:	4601      	mov	r1, r0
 80089dc:	4632      	mov	r2, r6
 80089de:	4640      	mov	r0, r8
 80089e0:	f000 f842 	bl	8008a68 <memcpy>
 80089e4:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80089e8:	f8c4 8000 	str.w	r8, [r4]
 80089ec:	e7e9      	b.n	80089c2 <__submore+0x44>

080089ee <memmove>:
 80089ee:	4288      	cmp	r0, r1
 80089f0:	b510      	push	{r4, lr}
 80089f2:	eb01 0402 	add.w	r4, r1, r2
 80089f6:	d902      	bls.n	80089fe <memmove+0x10>
 80089f8:	4284      	cmp	r4, r0
 80089fa:	4623      	mov	r3, r4
 80089fc:	d807      	bhi.n	8008a0e <memmove+0x20>
 80089fe:	1e43      	subs	r3, r0, #1
 8008a00:	42a1      	cmp	r1, r4
 8008a02:	d008      	beq.n	8008a16 <memmove+0x28>
 8008a04:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a08:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a0c:	e7f8      	b.n	8008a00 <memmove+0x12>
 8008a0e:	4601      	mov	r1, r0
 8008a10:	4402      	add	r2, r0
 8008a12:	428a      	cmp	r2, r1
 8008a14:	d100      	bne.n	8008a18 <memmove+0x2a>
 8008a16:	bd10      	pop	{r4, pc}
 8008a18:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a1c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a20:	e7f7      	b.n	8008a12 <memmove+0x24>

08008a22 <strncmp>:
 8008a22:	b510      	push	{r4, lr}
 8008a24:	b16a      	cbz	r2, 8008a42 <strncmp+0x20>
 8008a26:	3901      	subs	r1, #1
 8008a28:	1884      	adds	r4, r0, r2
 8008a2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a2e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008a32:	429a      	cmp	r2, r3
 8008a34:	d103      	bne.n	8008a3e <strncmp+0x1c>
 8008a36:	42a0      	cmp	r0, r4
 8008a38:	d001      	beq.n	8008a3e <strncmp+0x1c>
 8008a3a:	2a00      	cmp	r2, #0
 8008a3c:	d1f5      	bne.n	8008a2a <strncmp+0x8>
 8008a3e:	1ad0      	subs	r0, r2, r3
 8008a40:	bd10      	pop	{r4, pc}
 8008a42:	4610      	mov	r0, r2
 8008a44:	e7fc      	b.n	8008a40 <strncmp+0x1e>
	...

08008a48 <_sbrk_r>:
 8008a48:	b538      	push	{r3, r4, r5, lr}
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	4d05      	ldr	r5, [pc, #20]	; (8008a64 <_sbrk_r+0x1c>)
 8008a4e:	4604      	mov	r4, r0
 8008a50:	4608      	mov	r0, r1
 8008a52:	602b      	str	r3, [r5, #0]
 8008a54:	f7f9 faa2 	bl	8001f9c <_sbrk>
 8008a58:	1c43      	adds	r3, r0, #1
 8008a5a:	d102      	bne.n	8008a62 <_sbrk_r+0x1a>
 8008a5c:	682b      	ldr	r3, [r5, #0]
 8008a5e:	b103      	cbz	r3, 8008a62 <_sbrk_r+0x1a>
 8008a60:	6023      	str	r3, [r4, #0]
 8008a62:	bd38      	pop	{r3, r4, r5, pc}
 8008a64:	200004ac 	.word	0x200004ac

08008a68 <memcpy>:
 8008a68:	440a      	add	r2, r1
 8008a6a:	4291      	cmp	r1, r2
 8008a6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a70:	d100      	bne.n	8008a74 <memcpy+0xc>
 8008a72:	4770      	bx	lr
 8008a74:	b510      	push	{r4, lr}
 8008a76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a7a:	4291      	cmp	r1, r2
 8008a7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a80:	d1f9      	bne.n	8008a76 <memcpy+0xe>
 8008a82:	bd10      	pop	{r4, pc}

08008a84 <nan>:
 8008a84:	2000      	movs	r0, #0
 8008a86:	4901      	ldr	r1, [pc, #4]	; (8008a8c <nan+0x8>)
 8008a88:	4770      	bx	lr
 8008a8a:	bf00      	nop
 8008a8c:	7ff80000 	.word	0x7ff80000

08008a90 <__assert_func>:
 8008a90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008a92:	4614      	mov	r4, r2
 8008a94:	461a      	mov	r2, r3
 8008a96:	4b09      	ldr	r3, [pc, #36]	; (8008abc <__assert_func+0x2c>)
 8008a98:	4605      	mov	r5, r0
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	68d8      	ldr	r0, [r3, #12]
 8008a9e:	b14c      	cbz	r4, 8008ab4 <__assert_func+0x24>
 8008aa0:	4b07      	ldr	r3, [pc, #28]	; (8008ac0 <__assert_func+0x30>)
 8008aa2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008aa6:	9100      	str	r1, [sp, #0]
 8008aa8:	462b      	mov	r3, r5
 8008aaa:	4906      	ldr	r1, [pc, #24]	; (8008ac4 <__assert_func+0x34>)
 8008aac:	f000 fc3e 	bl	800932c <fiprintf>
 8008ab0:	f000 fc4e 	bl	8009350 <abort>
 8008ab4:	4b04      	ldr	r3, [pc, #16]	; (8008ac8 <__assert_func+0x38>)
 8008ab6:	461c      	mov	r4, r3
 8008ab8:	e7f3      	b.n	8008aa2 <__assert_func+0x12>
 8008aba:	bf00      	nop
 8008abc:	20000068 	.word	0x20000068
 8008ac0:	08009cbd 	.word	0x08009cbd
 8008ac4:	08009cca 	.word	0x08009cca
 8008ac8:	08009cf8 	.word	0x08009cf8

08008acc <_calloc_r>:
 8008acc:	b570      	push	{r4, r5, r6, lr}
 8008ace:	fba1 5402 	umull	r5, r4, r1, r2
 8008ad2:	b934      	cbnz	r4, 8008ae2 <_calloc_r+0x16>
 8008ad4:	4629      	mov	r1, r5
 8008ad6:	f7fd fe33 	bl	8006740 <_malloc_r>
 8008ada:	4606      	mov	r6, r0
 8008adc:	b928      	cbnz	r0, 8008aea <_calloc_r+0x1e>
 8008ade:	4630      	mov	r0, r6
 8008ae0:	bd70      	pop	{r4, r5, r6, pc}
 8008ae2:	220c      	movs	r2, #12
 8008ae4:	2600      	movs	r6, #0
 8008ae6:	6002      	str	r2, [r0, #0]
 8008ae8:	e7f9      	b.n	8008ade <_calloc_r+0x12>
 8008aea:	462a      	mov	r2, r5
 8008aec:	4621      	mov	r1, r4
 8008aee:	f7fc feb4 	bl	800585a <memset>
 8008af2:	e7f4      	b.n	8008ade <_calloc_r+0x12>

08008af4 <rshift>:
 8008af4:	6903      	ldr	r3, [r0, #16]
 8008af6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008afa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008afe:	f100 0414 	add.w	r4, r0, #20
 8008b02:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008b06:	dd46      	ble.n	8008b96 <rshift+0xa2>
 8008b08:	f011 011f 	ands.w	r1, r1, #31
 8008b0c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008b10:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008b14:	d10c      	bne.n	8008b30 <rshift+0x3c>
 8008b16:	4629      	mov	r1, r5
 8008b18:	f100 0710 	add.w	r7, r0, #16
 8008b1c:	42b1      	cmp	r1, r6
 8008b1e:	d335      	bcc.n	8008b8c <rshift+0x98>
 8008b20:	1a9b      	subs	r3, r3, r2
 8008b22:	009b      	lsls	r3, r3, #2
 8008b24:	1eea      	subs	r2, r5, #3
 8008b26:	4296      	cmp	r6, r2
 8008b28:	bf38      	it	cc
 8008b2a:	2300      	movcc	r3, #0
 8008b2c:	4423      	add	r3, r4
 8008b2e:	e015      	b.n	8008b5c <rshift+0x68>
 8008b30:	46a1      	mov	r9, r4
 8008b32:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008b36:	f1c1 0820 	rsb	r8, r1, #32
 8008b3a:	40cf      	lsrs	r7, r1
 8008b3c:	f105 0e04 	add.w	lr, r5, #4
 8008b40:	4576      	cmp	r6, lr
 8008b42:	46f4      	mov	ip, lr
 8008b44:	d816      	bhi.n	8008b74 <rshift+0x80>
 8008b46:	1a9a      	subs	r2, r3, r2
 8008b48:	0092      	lsls	r2, r2, #2
 8008b4a:	3a04      	subs	r2, #4
 8008b4c:	3501      	adds	r5, #1
 8008b4e:	42ae      	cmp	r6, r5
 8008b50:	bf38      	it	cc
 8008b52:	2200      	movcc	r2, #0
 8008b54:	18a3      	adds	r3, r4, r2
 8008b56:	50a7      	str	r7, [r4, r2]
 8008b58:	b107      	cbz	r7, 8008b5c <rshift+0x68>
 8008b5a:	3304      	adds	r3, #4
 8008b5c:	42a3      	cmp	r3, r4
 8008b5e:	eba3 0204 	sub.w	r2, r3, r4
 8008b62:	bf08      	it	eq
 8008b64:	2300      	moveq	r3, #0
 8008b66:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008b6a:	6102      	str	r2, [r0, #16]
 8008b6c:	bf08      	it	eq
 8008b6e:	6143      	streq	r3, [r0, #20]
 8008b70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b74:	f8dc c000 	ldr.w	ip, [ip]
 8008b78:	fa0c fc08 	lsl.w	ip, ip, r8
 8008b7c:	ea4c 0707 	orr.w	r7, ip, r7
 8008b80:	f849 7b04 	str.w	r7, [r9], #4
 8008b84:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008b88:	40cf      	lsrs	r7, r1
 8008b8a:	e7d9      	b.n	8008b40 <rshift+0x4c>
 8008b8c:	f851 cb04 	ldr.w	ip, [r1], #4
 8008b90:	f847 cf04 	str.w	ip, [r7, #4]!
 8008b94:	e7c2      	b.n	8008b1c <rshift+0x28>
 8008b96:	4623      	mov	r3, r4
 8008b98:	e7e0      	b.n	8008b5c <rshift+0x68>

08008b9a <__hexdig_fun>:
 8008b9a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008b9e:	2b09      	cmp	r3, #9
 8008ba0:	d802      	bhi.n	8008ba8 <__hexdig_fun+0xe>
 8008ba2:	3820      	subs	r0, #32
 8008ba4:	b2c0      	uxtb	r0, r0
 8008ba6:	4770      	bx	lr
 8008ba8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008bac:	2b05      	cmp	r3, #5
 8008bae:	d801      	bhi.n	8008bb4 <__hexdig_fun+0x1a>
 8008bb0:	3847      	subs	r0, #71	; 0x47
 8008bb2:	e7f7      	b.n	8008ba4 <__hexdig_fun+0xa>
 8008bb4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008bb8:	2b05      	cmp	r3, #5
 8008bba:	d801      	bhi.n	8008bc0 <__hexdig_fun+0x26>
 8008bbc:	3827      	subs	r0, #39	; 0x27
 8008bbe:	e7f1      	b.n	8008ba4 <__hexdig_fun+0xa>
 8008bc0:	2000      	movs	r0, #0
 8008bc2:	4770      	bx	lr

08008bc4 <__gethex>:
 8008bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bc8:	4681      	mov	r9, r0
 8008bca:	468a      	mov	sl, r1
 8008bcc:	4617      	mov	r7, r2
 8008bce:	680a      	ldr	r2, [r1, #0]
 8008bd0:	b085      	sub	sp, #20
 8008bd2:	f102 0b02 	add.w	fp, r2, #2
 8008bd6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008bda:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008bde:	9302      	str	r3, [sp, #8]
 8008be0:	32fe      	adds	r2, #254	; 0xfe
 8008be2:	eb02 030b 	add.w	r3, r2, fp
 8008be6:	46d8      	mov	r8, fp
 8008be8:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8008bec:	9301      	str	r3, [sp, #4]
 8008bee:	2830      	cmp	r0, #48	; 0x30
 8008bf0:	d0f7      	beq.n	8008be2 <__gethex+0x1e>
 8008bf2:	f7ff ffd2 	bl	8008b9a <__hexdig_fun>
 8008bf6:	4604      	mov	r4, r0
 8008bf8:	2800      	cmp	r0, #0
 8008bfa:	d138      	bne.n	8008c6e <__gethex+0xaa>
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	4640      	mov	r0, r8
 8008c00:	49a7      	ldr	r1, [pc, #668]	; (8008ea0 <__gethex+0x2dc>)
 8008c02:	f7ff ff0e 	bl	8008a22 <strncmp>
 8008c06:	4606      	mov	r6, r0
 8008c08:	2800      	cmp	r0, #0
 8008c0a:	d169      	bne.n	8008ce0 <__gethex+0x11c>
 8008c0c:	f898 0001 	ldrb.w	r0, [r8, #1]
 8008c10:	465d      	mov	r5, fp
 8008c12:	f7ff ffc2 	bl	8008b9a <__hexdig_fun>
 8008c16:	2800      	cmp	r0, #0
 8008c18:	d064      	beq.n	8008ce4 <__gethex+0x120>
 8008c1a:	465a      	mov	r2, fp
 8008c1c:	7810      	ldrb	r0, [r2, #0]
 8008c1e:	4690      	mov	r8, r2
 8008c20:	2830      	cmp	r0, #48	; 0x30
 8008c22:	f102 0201 	add.w	r2, r2, #1
 8008c26:	d0f9      	beq.n	8008c1c <__gethex+0x58>
 8008c28:	f7ff ffb7 	bl	8008b9a <__hexdig_fun>
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	fab0 f480 	clz	r4, r0
 8008c32:	465e      	mov	r6, fp
 8008c34:	0964      	lsrs	r4, r4, #5
 8008c36:	9301      	str	r3, [sp, #4]
 8008c38:	4642      	mov	r2, r8
 8008c3a:	4615      	mov	r5, r2
 8008c3c:	7828      	ldrb	r0, [r5, #0]
 8008c3e:	3201      	adds	r2, #1
 8008c40:	f7ff ffab 	bl	8008b9a <__hexdig_fun>
 8008c44:	2800      	cmp	r0, #0
 8008c46:	d1f8      	bne.n	8008c3a <__gethex+0x76>
 8008c48:	2201      	movs	r2, #1
 8008c4a:	4628      	mov	r0, r5
 8008c4c:	4994      	ldr	r1, [pc, #592]	; (8008ea0 <__gethex+0x2dc>)
 8008c4e:	f7ff fee8 	bl	8008a22 <strncmp>
 8008c52:	b978      	cbnz	r0, 8008c74 <__gethex+0xb0>
 8008c54:	b946      	cbnz	r6, 8008c68 <__gethex+0xa4>
 8008c56:	1c6e      	adds	r6, r5, #1
 8008c58:	4632      	mov	r2, r6
 8008c5a:	4615      	mov	r5, r2
 8008c5c:	7828      	ldrb	r0, [r5, #0]
 8008c5e:	3201      	adds	r2, #1
 8008c60:	f7ff ff9b 	bl	8008b9a <__hexdig_fun>
 8008c64:	2800      	cmp	r0, #0
 8008c66:	d1f8      	bne.n	8008c5a <__gethex+0x96>
 8008c68:	1b73      	subs	r3, r6, r5
 8008c6a:	009e      	lsls	r6, r3, #2
 8008c6c:	e004      	b.n	8008c78 <__gethex+0xb4>
 8008c6e:	2400      	movs	r4, #0
 8008c70:	4626      	mov	r6, r4
 8008c72:	e7e1      	b.n	8008c38 <__gethex+0x74>
 8008c74:	2e00      	cmp	r6, #0
 8008c76:	d1f7      	bne.n	8008c68 <__gethex+0xa4>
 8008c78:	782b      	ldrb	r3, [r5, #0]
 8008c7a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008c7e:	2b50      	cmp	r3, #80	; 0x50
 8008c80:	d13d      	bne.n	8008cfe <__gethex+0x13a>
 8008c82:	786b      	ldrb	r3, [r5, #1]
 8008c84:	2b2b      	cmp	r3, #43	; 0x2b
 8008c86:	d02f      	beq.n	8008ce8 <__gethex+0x124>
 8008c88:	2b2d      	cmp	r3, #45	; 0x2d
 8008c8a:	d031      	beq.n	8008cf0 <__gethex+0x12c>
 8008c8c:	f04f 0b00 	mov.w	fp, #0
 8008c90:	1c69      	adds	r1, r5, #1
 8008c92:	7808      	ldrb	r0, [r1, #0]
 8008c94:	f7ff ff81 	bl	8008b9a <__hexdig_fun>
 8008c98:	1e42      	subs	r2, r0, #1
 8008c9a:	b2d2      	uxtb	r2, r2
 8008c9c:	2a18      	cmp	r2, #24
 8008c9e:	d82e      	bhi.n	8008cfe <__gethex+0x13a>
 8008ca0:	f1a0 0210 	sub.w	r2, r0, #16
 8008ca4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008ca8:	f7ff ff77 	bl	8008b9a <__hexdig_fun>
 8008cac:	f100 3cff 	add.w	ip, r0, #4294967295
 8008cb0:	fa5f fc8c 	uxtb.w	ip, ip
 8008cb4:	f1bc 0f18 	cmp.w	ip, #24
 8008cb8:	d91d      	bls.n	8008cf6 <__gethex+0x132>
 8008cba:	f1bb 0f00 	cmp.w	fp, #0
 8008cbe:	d000      	beq.n	8008cc2 <__gethex+0xfe>
 8008cc0:	4252      	negs	r2, r2
 8008cc2:	4416      	add	r6, r2
 8008cc4:	f8ca 1000 	str.w	r1, [sl]
 8008cc8:	b1dc      	cbz	r4, 8008d02 <__gethex+0x13e>
 8008cca:	9b01      	ldr	r3, [sp, #4]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	bf14      	ite	ne
 8008cd0:	f04f 0800 	movne.w	r8, #0
 8008cd4:	f04f 0806 	moveq.w	r8, #6
 8008cd8:	4640      	mov	r0, r8
 8008cda:	b005      	add	sp, #20
 8008cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ce0:	4645      	mov	r5, r8
 8008ce2:	4626      	mov	r6, r4
 8008ce4:	2401      	movs	r4, #1
 8008ce6:	e7c7      	b.n	8008c78 <__gethex+0xb4>
 8008ce8:	f04f 0b00 	mov.w	fp, #0
 8008cec:	1ca9      	adds	r1, r5, #2
 8008cee:	e7d0      	b.n	8008c92 <__gethex+0xce>
 8008cf0:	f04f 0b01 	mov.w	fp, #1
 8008cf4:	e7fa      	b.n	8008cec <__gethex+0x128>
 8008cf6:	230a      	movs	r3, #10
 8008cf8:	fb03 0002 	mla	r0, r3, r2, r0
 8008cfc:	e7d0      	b.n	8008ca0 <__gethex+0xdc>
 8008cfe:	4629      	mov	r1, r5
 8008d00:	e7e0      	b.n	8008cc4 <__gethex+0x100>
 8008d02:	4621      	mov	r1, r4
 8008d04:	eba5 0308 	sub.w	r3, r5, r8
 8008d08:	3b01      	subs	r3, #1
 8008d0a:	2b07      	cmp	r3, #7
 8008d0c:	dc0a      	bgt.n	8008d24 <__gethex+0x160>
 8008d0e:	4648      	mov	r0, r9
 8008d10:	f7fd fda2 	bl	8006858 <_Balloc>
 8008d14:	4604      	mov	r4, r0
 8008d16:	b940      	cbnz	r0, 8008d2a <__gethex+0x166>
 8008d18:	4602      	mov	r2, r0
 8008d1a:	21e4      	movs	r1, #228	; 0xe4
 8008d1c:	4b61      	ldr	r3, [pc, #388]	; (8008ea4 <__gethex+0x2e0>)
 8008d1e:	4862      	ldr	r0, [pc, #392]	; (8008ea8 <__gethex+0x2e4>)
 8008d20:	f7ff feb6 	bl	8008a90 <__assert_func>
 8008d24:	3101      	adds	r1, #1
 8008d26:	105b      	asrs	r3, r3, #1
 8008d28:	e7ef      	b.n	8008d0a <__gethex+0x146>
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	469b      	mov	fp, r3
 8008d2e:	f100 0a14 	add.w	sl, r0, #20
 8008d32:	f8cd a004 	str.w	sl, [sp, #4]
 8008d36:	45a8      	cmp	r8, r5
 8008d38:	d344      	bcc.n	8008dc4 <__gethex+0x200>
 8008d3a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008d3e:	4658      	mov	r0, fp
 8008d40:	f848 bb04 	str.w	fp, [r8], #4
 8008d44:	eba8 080a 	sub.w	r8, r8, sl
 8008d48:	ea4f 02a8 	mov.w	r2, r8, asr #2
 8008d4c:	6122      	str	r2, [r4, #16]
 8008d4e:	ea4f 1842 	mov.w	r8, r2, lsl #5
 8008d52:	f7fd fe73 	bl	8006a3c <__hi0bits>
 8008d56:	683d      	ldr	r5, [r7, #0]
 8008d58:	eba8 0800 	sub.w	r8, r8, r0
 8008d5c:	45a8      	cmp	r8, r5
 8008d5e:	dd59      	ble.n	8008e14 <__gethex+0x250>
 8008d60:	eba8 0805 	sub.w	r8, r8, r5
 8008d64:	4641      	mov	r1, r8
 8008d66:	4620      	mov	r0, r4
 8008d68:	f7fe f9f1 	bl	800714e <__any_on>
 8008d6c:	4683      	mov	fp, r0
 8008d6e:	b1b8      	cbz	r0, 8008da0 <__gethex+0x1dc>
 8008d70:	f04f 0b01 	mov.w	fp, #1
 8008d74:	f108 33ff 	add.w	r3, r8, #4294967295
 8008d78:	1159      	asrs	r1, r3, #5
 8008d7a:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008d7e:	f003 021f 	and.w	r2, r3, #31
 8008d82:	fa0b f202 	lsl.w	r2, fp, r2
 8008d86:	420a      	tst	r2, r1
 8008d88:	d00a      	beq.n	8008da0 <__gethex+0x1dc>
 8008d8a:	455b      	cmp	r3, fp
 8008d8c:	dd06      	ble.n	8008d9c <__gethex+0x1d8>
 8008d8e:	4620      	mov	r0, r4
 8008d90:	f1a8 0102 	sub.w	r1, r8, #2
 8008d94:	f7fe f9db 	bl	800714e <__any_on>
 8008d98:	2800      	cmp	r0, #0
 8008d9a:	d138      	bne.n	8008e0e <__gethex+0x24a>
 8008d9c:	f04f 0b02 	mov.w	fp, #2
 8008da0:	4641      	mov	r1, r8
 8008da2:	4620      	mov	r0, r4
 8008da4:	f7ff fea6 	bl	8008af4 <rshift>
 8008da8:	4446      	add	r6, r8
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	42b3      	cmp	r3, r6
 8008dae:	da41      	bge.n	8008e34 <__gethex+0x270>
 8008db0:	4621      	mov	r1, r4
 8008db2:	4648      	mov	r0, r9
 8008db4:	f7fd fd90 	bl	80068d8 <_Bfree>
 8008db8:	2300      	movs	r3, #0
 8008dba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008dbc:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8008dc0:	6013      	str	r3, [r2, #0]
 8008dc2:	e789      	b.n	8008cd8 <__gethex+0x114>
 8008dc4:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8008dc8:	2a2e      	cmp	r2, #46	; 0x2e
 8008dca:	d014      	beq.n	8008df6 <__gethex+0x232>
 8008dcc:	2b20      	cmp	r3, #32
 8008dce:	d106      	bne.n	8008dde <__gethex+0x21a>
 8008dd0:	9b01      	ldr	r3, [sp, #4]
 8008dd2:	f843 bb04 	str.w	fp, [r3], #4
 8008dd6:	f04f 0b00 	mov.w	fp, #0
 8008dda:	9301      	str	r3, [sp, #4]
 8008ddc:	465b      	mov	r3, fp
 8008dde:	7828      	ldrb	r0, [r5, #0]
 8008de0:	9303      	str	r3, [sp, #12]
 8008de2:	f7ff feda 	bl	8008b9a <__hexdig_fun>
 8008de6:	9b03      	ldr	r3, [sp, #12]
 8008de8:	f000 000f 	and.w	r0, r0, #15
 8008dec:	4098      	lsls	r0, r3
 8008dee:	ea4b 0b00 	orr.w	fp, fp, r0
 8008df2:	3304      	adds	r3, #4
 8008df4:	e79f      	b.n	8008d36 <__gethex+0x172>
 8008df6:	45a8      	cmp	r8, r5
 8008df8:	d8e8      	bhi.n	8008dcc <__gethex+0x208>
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	4628      	mov	r0, r5
 8008dfe:	4928      	ldr	r1, [pc, #160]	; (8008ea0 <__gethex+0x2dc>)
 8008e00:	9303      	str	r3, [sp, #12]
 8008e02:	f7ff fe0e 	bl	8008a22 <strncmp>
 8008e06:	9b03      	ldr	r3, [sp, #12]
 8008e08:	2800      	cmp	r0, #0
 8008e0a:	d1df      	bne.n	8008dcc <__gethex+0x208>
 8008e0c:	e793      	b.n	8008d36 <__gethex+0x172>
 8008e0e:	f04f 0b03 	mov.w	fp, #3
 8008e12:	e7c5      	b.n	8008da0 <__gethex+0x1dc>
 8008e14:	da0b      	bge.n	8008e2e <__gethex+0x26a>
 8008e16:	eba5 0808 	sub.w	r8, r5, r8
 8008e1a:	4621      	mov	r1, r4
 8008e1c:	4642      	mov	r2, r8
 8008e1e:	4648      	mov	r0, r9
 8008e20:	f7fd ff72 	bl	8006d08 <__lshift>
 8008e24:	4604      	mov	r4, r0
 8008e26:	eba6 0608 	sub.w	r6, r6, r8
 8008e2a:	f100 0a14 	add.w	sl, r0, #20
 8008e2e:	f04f 0b00 	mov.w	fp, #0
 8008e32:	e7ba      	b.n	8008daa <__gethex+0x1e6>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	42b3      	cmp	r3, r6
 8008e38:	dd74      	ble.n	8008f24 <__gethex+0x360>
 8008e3a:	1b9e      	subs	r6, r3, r6
 8008e3c:	42b5      	cmp	r5, r6
 8008e3e:	dc35      	bgt.n	8008eac <__gethex+0x2e8>
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	2b02      	cmp	r3, #2
 8008e44:	d023      	beq.n	8008e8e <__gethex+0x2ca>
 8008e46:	2b03      	cmp	r3, #3
 8008e48:	d025      	beq.n	8008e96 <__gethex+0x2d2>
 8008e4a:	2b01      	cmp	r3, #1
 8008e4c:	d115      	bne.n	8008e7a <__gethex+0x2b6>
 8008e4e:	42b5      	cmp	r5, r6
 8008e50:	d113      	bne.n	8008e7a <__gethex+0x2b6>
 8008e52:	2d01      	cmp	r5, #1
 8008e54:	d10b      	bne.n	8008e6e <__gethex+0x2aa>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	9a02      	ldr	r2, [sp, #8]
 8008e5a:	f04f 0862 	mov.w	r8, #98	; 0x62
 8008e5e:	6013      	str	r3, [r2, #0]
 8008e60:	2301      	movs	r3, #1
 8008e62:	6123      	str	r3, [r4, #16]
 8008e64:	f8ca 3000 	str.w	r3, [sl]
 8008e68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e6a:	601c      	str	r4, [r3, #0]
 8008e6c:	e734      	b.n	8008cd8 <__gethex+0x114>
 8008e6e:	4620      	mov	r0, r4
 8008e70:	1e69      	subs	r1, r5, #1
 8008e72:	f7fe f96c 	bl	800714e <__any_on>
 8008e76:	2800      	cmp	r0, #0
 8008e78:	d1ed      	bne.n	8008e56 <__gethex+0x292>
 8008e7a:	4621      	mov	r1, r4
 8008e7c:	4648      	mov	r0, r9
 8008e7e:	f7fd fd2b 	bl	80068d8 <_Bfree>
 8008e82:	2300      	movs	r3, #0
 8008e84:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008e86:	f04f 0850 	mov.w	r8, #80	; 0x50
 8008e8a:	6013      	str	r3, [r2, #0]
 8008e8c:	e724      	b.n	8008cd8 <__gethex+0x114>
 8008e8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d1f2      	bne.n	8008e7a <__gethex+0x2b6>
 8008e94:	e7df      	b.n	8008e56 <__gethex+0x292>
 8008e96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d1dc      	bne.n	8008e56 <__gethex+0x292>
 8008e9c:	e7ed      	b.n	8008e7a <__gethex+0x2b6>
 8008e9e:	bf00      	nop
 8008ea0:	08009b34 	.word	0x08009b34
 8008ea4:	080099c9 	.word	0x080099c9
 8008ea8:	08009cf9 	.word	0x08009cf9
 8008eac:	f106 38ff 	add.w	r8, r6, #4294967295
 8008eb0:	f1bb 0f00 	cmp.w	fp, #0
 8008eb4:	d133      	bne.n	8008f1e <__gethex+0x35a>
 8008eb6:	f1b8 0f00 	cmp.w	r8, #0
 8008eba:	d004      	beq.n	8008ec6 <__gethex+0x302>
 8008ebc:	4641      	mov	r1, r8
 8008ebe:	4620      	mov	r0, r4
 8008ec0:	f7fe f945 	bl	800714e <__any_on>
 8008ec4:	4683      	mov	fp, r0
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	ea4f 1268 	mov.w	r2, r8, asr #5
 8008ecc:	f008 081f 	and.w	r8, r8, #31
 8008ed0:	fa03 f308 	lsl.w	r3, r3, r8
 8008ed4:	f04f 0802 	mov.w	r8, #2
 8008ed8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008edc:	4631      	mov	r1, r6
 8008ede:	4213      	tst	r3, r2
 8008ee0:	4620      	mov	r0, r4
 8008ee2:	bf18      	it	ne
 8008ee4:	f04b 0b02 	orrne.w	fp, fp, #2
 8008ee8:	1bad      	subs	r5, r5, r6
 8008eea:	f7ff fe03 	bl	8008af4 <rshift>
 8008eee:	687e      	ldr	r6, [r7, #4]
 8008ef0:	f1bb 0f00 	cmp.w	fp, #0
 8008ef4:	d04a      	beq.n	8008f8c <__gethex+0x3c8>
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	2b02      	cmp	r3, #2
 8008efa:	d016      	beq.n	8008f2a <__gethex+0x366>
 8008efc:	2b03      	cmp	r3, #3
 8008efe:	d018      	beq.n	8008f32 <__gethex+0x36e>
 8008f00:	2b01      	cmp	r3, #1
 8008f02:	d109      	bne.n	8008f18 <__gethex+0x354>
 8008f04:	f01b 0f02 	tst.w	fp, #2
 8008f08:	d006      	beq.n	8008f18 <__gethex+0x354>
 8008f0a:	f8da 3000 	ldr.w	r3, [sl]
 8008f0e:	ea4b 0b03 	orr.w	fp, fp, r3
 8008f12:	f01b 0f01 	tst.w	fp, #1
 8008f16:	d10f      	bne.n	8008f38 <__gethex+0x374>
 8008f18:	f048 0810 	orr.w	r8, r8, #16
 8008f1c:	e036      	b.n	8008f8c <__gethex+0x3c8>
 8008f1e:	f04f 0b01 	mov.w	fp, #1
 8008f22:	e7d0      	b.n	8008ec6 <__gethex+0x302>
 8008f24:	f04f 0801 	mov.w	r8, #1
 8008f28:	e7e2      	b.n	8008ef0 <__gethex+0x32c>
 8008f2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008f2c:	f1c3 0301 	rsb	r3, r3, #1
 8008f30:	930f      	str	r3, [sp, #60]	; 0x3c
 8008f32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d0ef      	beq.n	8008f18 <__gethex+0x354>
 8008f38:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008f3c:	f104 0214 	add.w	r2, r4, #20
 8008f40:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8008f44:	9301      	str	r3, [sp, #4]
 8008f46:	2300      	movs	r3, #0
 8008f48:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8008f4c:	4694      	mov	ip, r2
 8008f4e:	f852 1b04 	ldr.w	r1, [r2], #4
 8008f52:	f1b1 3fff 	cmp.w	r1, #4294967295
 8008f56:	d01e      	beq.n	8008f96 <__gethex+0x3d2>
 8008f58:	3101      	adds	r1, #1
 8008f5a:	f8cc 1000 	str.w	r1, [ip]
 8008f5e:	f1b8 0f02 	cmp.w	r8, #2
 8008f62:	f104 0214 	add.w	r2, r4, #20
 8008f66:	d13d      	bne.n	8008fe4 <__gethex+0x420>
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	3b01      	subs	r3, #1
 8008f6c:	42ab      	cmp	r3, r5
 8008f6e:	d10b      	bne.n	8008f88 <__gethex+0x3c4>
 8008f70:	2301      	movs	r3, #1
 8008f72:	1169      	asrs	r1, r5, #5
 8008f74:	f005 051f 	and.w	r5, r5, #31
 8008f78:	fa03 f505 	lsl.w	r5, r3, r5
 8008f7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008f80:	421d      	tst	r5, r3
 8008f82:	bf18      	it	ne
 8008f84:	f04f 0801 	movne.w	r8, #1
 8008f88:	f048 0820 	orr.w	r8, r8, #32
 8008f8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f8e:	601c      	str	r4, [r3, #0]
 8008f90:	9b02      	ldr	r3, [sp, #8]
 8008f92:	601e      	str	r6, [r3, #0]
 8008f94:	e6a0      	b.n	8008cd8 <__gethex+0x114>
 8008f96:	4290      	cmp	r0, r2
 8008f98:	f842 3c04 	str.w	r3, [r2, #-4]
 8008f9c:	d8d6      	bhi.n	8008f4c <__gethex+0x388>
 8008f9e:	68a2      	ldr	r2, [r4, #8]
 8008fa0:	4593      	cmp	fp, r2
 8008fa2:	db17      	blt.n	8008fd4 <__gethex+0x410>
 8008fa4:	6861      	ldr	r1, [r4, #4]
 8008fa6:	4648      	mov	r0, r9
 8008fa8:	3101      	adds	r1, #1
 8008faa:	f7fd fc55 	bl	8006858 <_Balloc>
 8008fae:	4682      	mov	sl, r0
 8008fb0:	b918      	cbnz	r0, 8008fba <__gethex+0x3f6>
 8008fb2:	4602      	mov	r2, r0
 8008fb4:	2184      	movs	r1, #132	; 0x84
 8008fb6:	4b1a      	ldr	r3, [pc, #104]	; (8009020 <__gethex+0x45c>)
 8008fb8:	e6b1      	b.n	8008d1e <__gethex+0x15a>
 8008fba:	6922      	ldr	r2, [r4, #16]
 8008fbc:	f104 010c 	add.w	r1, r4, #12
 8008fc0:	3202      	adds	r2, #2
 8008fc2:	0092      	lsls	r2, r2, #2
 8008fc4:	300c      	adds	r0, #12
 8008fc6:	f7ff fd4f 	bl	8008a68 <memcpy>
 8008fca:	4621      	mov	r1, r4
 8008fcc:	4648      	mov	r0, r9
 8008fce:	f7fd fc83 	bl	80068d8 <_Bfree>
 8008fd2:	4654      	mov	r4, sl
 8008fd4:	6922      	ldr	r2, [r4, #16]
 8008fd6:	1c51      	adds	r1, r2, #1
 8008fd8:	6121      	str	r1, [r4, #16]
 8008fda:	2101      	movs	r1, #1
 8008fdc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008fe0:	6151      	str	r1, [r2, #20]
 8008fe2:	e7bc      	b.n	8008f5e <__gethex+0x39a>
 8008fe4:	6921      	ldr	r1, [r4, #16]
 8008fe6:	4559      	cmp	r1, fp
 8008fe8:	dd0b      	ble.n	8009002 <__gethex+0x43e>
 8008fea:	2101      	movs	r1, #1
 8008fec:	4620      	mov	r0, r4
 8008fee:	f7ff fd81 	bl	8008af4 <rshift>
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	3601      	adds	r6, #1
 8008ff6:	42b3      	cmp	r3, r6
 8008ff8:	f6ff aeda 	blt.w	8008db0 <__gethex+0x1ec>
 8008ffc:	f04f 0801 	mov.w	r8, #1
 8009000:	e7c2      	b.n	8008f88 <__gethex+0x3c4>
 8009002:	f015 051f 	ands.w	r5, r5, #31
 8009006:	d0f9      	beq.n	8008ffc <__gethex+0x438>
 8009008:	9b01      	ldr	r3, [sp, #4]
 800900a:	f1c5 0520 	rsb	r5, r5, #32
 800900e:	441a      	add	r2, r3
 8009010:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8009014:	f7fd fd12 	bl	8006a3c <__hi0bits>
 8009018:	42a8      	cmp	r0, r5
 800901a:	dbe6      	blt.n	8008fea <__gethex+0x426>
 800901c:	e7ee      	b.n	8008ffc <__gethex+0x438>
 800901e:	bf00      	nop
 8009020:	080099c9 	.word	0x080099c9

08009024 <L_shift>:
 8009024:	f1c2 0208 	rsb	r2, r2, #8
 8009028:	0092      	lsls	r2, r2, #2
 800902a:	b570      	push	{r4, r5, r6, lr}
 800902c:	f1c2 0620 	rsb	r6, r2, #32
 8009030:	6843      	ldr	r3, [r0, #4]
 8009032:	6804      	ldr	r4, [r0, #0]
 8009034:	fa03 f506 	lsl.w	r5, r3, r6
 8009038:	432c      	orrs	r4, r5
 800903a:	40d3      	lsrs	r3, r2
 800903c:	6004      	str	r4, [r0, #0]
 800903e:	f840 3f04 	str.w	r3, [r0, #4]!
 8009042:	4288      	cmp	r0, r1
 8009044:	d3f4      	bcc.n	8009030 <L_shift+0xc>
 8009046:	bd70      	pop	{r4, r5, r6, pc}

08009048 <__match>:
 8009048:	b530      	push	{r4, r5, lr}
 800904a:	6803      	ldr	r3, [r0, #0]
 800904c:	3301      	adds	r3, #1
 800904e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009052:	b914      	cbnz	r4, 800905a <__match+0x12>
 8009054:	6003      	str	r3, [r0, #0]
 8009056:	2001      	movs	r0, #1
 8009058:	bd30      	pop	{r4, r5, pc}
 800905a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800905e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009062:	2d19      	cmp	r5, #25
 8009064:	bf98      	it	ls
 8009066:	3220      	addls	r2, #32
 8009068:	42a2      	cmp	r2, r4
 800906a:	d0f0      	beq.n	800904e <__match+0x6>
 800906c:	2000      	movs	r0, #0
 800906e:	e7f3      	b.n	8009058 <__match+0x10>

08009070 <__hexnan>:
 8009070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009074:	2500      	movs	r5, #0
 8009076:	680b      	ldr	r3, [r1, #0]
 8009078:	4682      	mov	sl, r0
 800907a:	115e      	asrs	r6, r3, #5
 800907c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009080:	f013 031f 	ands.w	r3, r3, #31
 8009084:	bf18      	it	ne
 8009086:	3604      	addne	r6, #4
 8009088:	1f37      	subs	r7, r6, #4
 800908a:	4690      	mov	r8, r2
 800908c:	46b9      	mov	r9, r7
 800908e:	463c      	mov	r4, r7
 8009090:	46ab      	mov	fp, r5
 8009092:	b087      	sub	sp, #28
 8009094:	6801      	ldr	r1, [r0, #0]
 8009096:	9301      	str	r3, [sp, #4]
 8009098:	f846 5c04 	str.w	r5, [r6, #-4]
 800909c:	9502      	str	r5, [sp, #8]
 800909e:	784a      	ldrb	r2, [r1, #1]
 80090a0:	1c4b      	adds	r3, r1, #1
 80090a2:	9303      	str	r3, [sp, #12]
 80090a4:	b342      	cbz	r2, 80090f8 <__hexnan+0x88>
 80090a6:	4610      	mov	r0, r2
 80090a8:	9105      	str	r1, [sp, #20]
 80090aa:	9204      	str	r2, [sp, #16]
 80090ac:	f7ff fd75 	bl	8008b9a <__hexdig_fun>
 80090b0:	2800      	cmp	r0, #0
 80090b2:	d14f      	bne.n	8009154 <__hexnan+0xe4>
 80090b4:	9a04      	ldr	r2, [sp, #16]
 80090b6:	9905      	ldr	r1, [sp, #20]
 80090b8:	2a20      	cmp	r2, #32
 80090ba:	d818      	bhi.n	80090ee <__hexnan+0x7e>
 80090bc:	9b02      	ldr	r3, [sp, #8]
 80090be:	459b      	cmp	fp, r3
 80090c0:	dd13      	ble.n	80090ea <__hexnan+0x7a>
 80090c2:	454c      	cmp	r4, r9
 80090c4:	d206      	bcs.n	80090d4 <__hexnan+0x64>
 80090c6:	2d07      	cmp	r5, #7
 80090c8:	dc04      	bgt.n	80090d4 <__hexnan+0x64>
 80090ca:	462a      	mov	r2, r5
 80090cc:	4649      	mov	r1, r9
 80090ce:	4620      	mov	r0, r4
 80090d0:	f7ff ffa8 	bl	8009024 <L_shift>
 80090d4:	4544      	cmp	r4, r8
 80090d6:	d950      	bls.n	800917a <__hexnan+0x10a>
 80090d8:	2300      	movs	r3, #0
 80090da:	f1a4 0904 	sub.w	r9, r4, #4
 80090de:	f844 3c04 	str.w	r3, [r4, #-4]
 80090e2:	461d      	mov	r5, r3
 80090e4:	464c      	mov	r4, r9
 80090e6:	f8cd b008 	str.w	fp, [sp, #8]
 80090ea:	9903      	ldr	r1, [sp, #12]
 80090ec:	e7d7      	b.n	800909e <__hexnan+0x2e>
 80090ee:	2a29      	cmp	r2, #41	; 0x29
 80090f0:	d155      	bne.n	800919e <__hexnan+0x12e>
 80090f2:	3102      	adds	r1, #2
 80090f4:	f8ca 1000 	str.w	r1, [sl]
 80090f8:	f1bb 0f00 	cmp.w	fp, #0
 80090fc:	d04f      	beq.n	800919e <__hexnan+0x12e>
 80090fe:	454c      	cmp	r4, r9
 8009100:	d206      	bcs.n	8009110 <__hexnan+0xa0>
 8009102:	2d07      	cmp	r5, #7
 8009104:	dc04      	bgt.n	8009110 <__hexnan+0xa0>
 8009106:	462a      	mov	r2, r5
 8009108:	4649      	mov	r1, r9
 800910a:	4620      	mov	r0, r4
 800910c:	f7ff ff8a 	bl	8009024 <L_shift>
 8009110:	4544      	cmp	r4, r8
 8009112:	d934      	bls.n	800917e <__hexnan+0x10e>
 8009114:	4623      	mov	r3, r4
 8009116:	f1a8 0204 	sub.w	r2, r8, #4
 800911a:	f853 1b04 	ldr.w	r1, [r3], #4
 800911e:	429f      	cmp	r7, r3
 8009120:	f842 1f04 	str.w	r1, [r2, #4]!
 8009124:	d2f9      	bcs.n	800911a <__hexnan+0xaa>
 8009126:	1b3b      	subs	r3, r7, r4
 8009128:	f023 0303 	bic.w	r3, r3, #3
 800912c:	3304      	adds	r3, #4
 800912e:	3e03      	subs	r6, #3
 8009130:	3401      	adds	r4, #1
 8009132:	42a6      	cmp	r6, r4
 8009134:	bf38      	it	cc
 8009136:	2304      	movcc	r3, #4
 8009138:	2200      	movs	r2, #0
 800913a:	4443      	add	r3, r8
 800913c:	f843 2b04 	str.w	r2, [r3], #4
 8009140:	429f      	cmp	r7, r3
 8009142:	d2fb      	bcs.n	800913c <__hexnan+0xcc>
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	b91b      	cbnz	r3, 8009150 <__hexnan+0xe0>
 8009148:	4547      	cmp	r7, r8
 800914a:	d126      	bne.n	800919a <__hexnan+0x12a>
 800914c:	2301      	movs	r3, #1
 800914e:	603b      	str	r3, [r7, #0]
 8009150:	2005      	movs	r0, #5
 8009152:	e025      	b.n	80091a0 <__hexnan+0x130>
 8009154:	3501      	adds	r5, #1
 8009156:	2d08      	cmp	r5, #8
 8009158:	f10b 0b01 	add.w	fp, fp, #1
 800915c:	dd06      	ble.n	800916c <__hexnan+0xfc>
 800915e:	4544      	cmp	r4, r8
 8009160:	d9c3      	bls.n	80090ea <__hexnan+0x7a>
 8009162:	2300      	movs	r3, #0
 8009164:	2501      	movs	r5, #1
 8009166:	f844 3c04 	str.w	r3, [r4, #-4]
 800916a:	3c04      	subs	r4, #4
 800916c:	6822      	ldr	r2, [r4, #0]
 800916e:	f000 000f 	and.w	r0, r0, #15
 8009172:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009176:	6020      	str	r0, [r4, #0]
 8009178:	e7b7      	b.n	80090ea <__hexnan+0x7a>
 800917a:	2508      	movs	r5, #8
 800917c:	e7b5      	b.n	80090ea <__hexnan+0x7a>
 800917e:	9b01      	ldr	r3, [sp, #4]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d0df      	beq.n	8009144 <__hexnan+0xd4>
 8009184:	f04f 32ff 	mov.w	r2, #4294967295
 8009188:	f1c3 0320 	rsb	r3, r3, #32
 800918c:	40da      	lsrs	r2, r3
 800918e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009192:	4013      	ands	r3, r2
 8009194:	f846 3c04 	str.w	r3, [r6, #-4]
 8009198:	e7d4      	b.n	8009144 <__hexnan+0xd4>
 800919a:	3f04      	subs	r7, #4
 800919c:	e7d2      	b.n	8009144 <__hexnan+0xd4>
 800919e:	2004      	movs	r0, #4
 80091a0:	b007      	add	sp, #28
 80091a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080091a6 <__ascii_mbtowc>:
 80091a6:	b082      	sub	sp, #8
 80091a8:	b901      	cbnz	r1, 80091ac <__ascii_mbtowc+0x6>
 80091aa:	a901      	add	r1, sp, #4
 80091ac:	b142      	cbz	r2, 80091c0 <__ascii_mbtowc+0x1a>
 80091ae:	b14b      	cbz	r3, 80091c4 <__ascii_mbtowc+0x1e>
 80091b0:	7813      	ldrb	r3, [r2, #0]
 80091b2:	600b      	str	r3, [r1, #0]
 80091b4:	7812      	ldrb	r2, [r2, #0]
 80091b6:	1e10      	subs	r0, r2, #0
 80091b8:	bf18      	it	ne
 80091ba:	2001      	movne	r0, #1
 80091bc:	b002      	add	sp, #8
 80091be:	4770      	bx	lr
 80091c0:	4610      	mov	r0, r2
 80091c2:	e7fb      	b.n	80091bc <__ascii_mbtowc+0x16>
 80091c4:	f06f 0001 	mvn.w	r0, #1
 80091c8:	e7f8      	b.n	80091bc <__ascii_mbtowc+0x16>

080091ca <_realloc_r>:
 80091ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091ce:	4680      	mov	r8, r0
 80091d0:	4614      	mov	r4, r2
 80091d2:	460e      	mov	r6, r1
 80091d4:	b921      	cbnz	r1, 80091e0 <_realloc_r+0x16>
 80091d6:	4611      	mov	r1, r2
 80091d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80091dc:	f7fd bab0 	b.w	8006740 <_malloc_r>
 80091e0:	b92a      	cbnz	r2, 80091ee <_realloc_r+0x24>
 80091e2:	f7fd fa3d 	bl	8006660 <_free_r>
 80091e6:	4625      	mov	r5, r4
 80091e8:	4628      	mov	r0, r5
 80091ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091ee:	f000 f8b6 	bl	800935e <_malloc_usable_size_r>
 80091f2:	4284      	cmp	r4, r0
 80091f4:	4607      	mov	r7, r0
 80091f6:	d802      	bhi.n	80091fe <_realloc_r+0x34>
 80091f8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80091fc:	d812      	bhi.n	8009224 <_realloc_r+0x5a>
 80091fe:	4621      	mov	r1, r4
 8009200:	4640      	mov	r0, r8
 8009202:	f7fd fa9d 	bl	8006740 <_malloc_r>
 8009206:	4605      	mov	r5, r0
 8009208:	2800      	cmp	r0, #0
 800920a:	d0ed      	beq.n	80091e8 <_realloc_r+0x1e>
 800920c:	42bc      	cmp	r4, r7
 800920e:	4622      	mov	r2, r4
 8009210:	4631      	mov	r1, r6
 8009212:	bf28      	it	cs
 8009214:	463a      	movcs	r2, r7
 8009216:	f7ff fc27 	bl	8008a68 <memcpy>
 800921a:	4631      	mov	r1, r6
 800921c:	4640      	mov	r0, r8
 800921e:	f7fd fa1f 	bl	8006660 <_free_r>
 8009222:	e7e1      	b.n	80091e8 <_realloc_r+0x1e>
 8009224:	4635      	mov	r5, r6
 8009226:	e7df      	b.n	80091e8 <_realloc_r+0x1e>

08009228 <_strtoul_l.constprop.0>:
 8009228:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800922c:	4686      	mov	lr, r0
 800922e:	460d      	mov	r5, r1
 8009230:	4f35      	ldr	r7, [pc, #212]	; (8009308 <_strtoul_l.constprop.0+0xe0>)
 8009232:	4628      	mov	r0, r5
 8009234:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009238:	5d3e      	ldrb	r6, [r7, r4]
 800923a:	f016 0608 	ands.w	r6, r6, #8
 800923e:	d1f8      	bne.n	8009232 <_strtoul_l.constprop.0+0xa>
 8009240:	2c2d      	cmp	r4, #45	; 0x2d
 8009242:	d130      	bne.n	80092a6 <_strtoul_l.constprop.0+0x7e>
 8009244:	2601      	movs	r6, #1
 8009246:	782c      	ldrb	r4, [r5, #0]
 8009248:	1c85      	adds	r5, r0, #2
 800924a:	2b00      	cmp	r3, #0
 800924c:	d057      	beq.n	80092fe <_strtoul_l.constprop.0+0xd6>
 800924e:	2b10      	cmp	r3, #16
 8009250:	d109      	bne.n	8009266 <_strtoul_l.constprop.0+0x3e>
 8009252:	2c30      	cmp	r4, #48	; 0x30
 8009254:	d107      	bne.n	8009266 <_strtoul_l.constprop.0+0x3e>
 8009256:	7828      	ldrb	r0, [r5, #0]
 8009258:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800925c:	2858      	cmp	r0, #88	; 0x58
 800925e:	d149      	bne.n	80092f4 <_strtoul_l.constprop.0+0xcc>
 8009260:	2310      	movs	r3, #16
 8009262:	786c      	ldrb	r4, [r5, #1]
 8009264:	3502      	adds	r5, #2
 8009266:	f04f 38ff 	mov.w	r8, #4294967295
 800926a:	fbb8 f8f3 	udiv	r8, r8, r3
 800926e:	2700      	movs	r7, #0
 8009270:	fb03 f908 	mul.w	r9, r3, r8
 8009274:	4638      	mov	r0, r7
 8009276:	ea6f 0909 	mvn.w	r9, r9
 800927a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800927e:	f1bc 0f09 	cmp.w	ip, #9
 8009282:	d815      	bhi.n	80092b0 <_strtoul_l.constprop.0+0x88>
 8009284:	4664      	mov	r4, ip
 8009286:	42a3      	cmp	r3, r4
 8009288:	dd23      	ble.n	80092d2 <_strtoul_l.constprop.0+0xaa>
 800928a:	f1b7 3fff 	cmp.w	r7, #4294967295
 800928e:	d007      	beq.n	80092a0 <_strtoul_l.constprop.0+0x78>
 8009290:	4580      	cmp	r8, r0
 8009292:	d31b      	bcc.n	80092cc <_strtoul_l.constprop.0+0xa4>
 8009294:	d101      	bne.n	800929a <_strtoul_l.constprop.0+0x72>
 8009296:	45a1      	cmp	r9, r4
 8009298:	db18      	blt.n	80092cc <_strtoul_l.constprop.0+0xa4>
 800929a:	2701      	movs	r7, #1
 800929c:	fb00 4003 	mla	r0, r0, r3, r4
 80092a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80092a4:	e7e9      	b.n	800927a <_strtoul_l.constprop.0+0x52>
 80092a6:	2c2b      	cmp	r4, #43	; 0x2b
 80092a8:	bf04      	itt	eq
 80092aa:	782c      	ldrbeq	r4, [r5, #0]
 80092ac:	1c85      	addeq	r5, r0, #2
 80092ae:	e7cc      	b.n	800924a <_strtoul_l.constprop.0+0x22>
 80092b0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80092b4:	f1bc 0f19 	cmp.w	ip, #25
 80092b8:	d801      	bhi.n	80092be <_strtoul_l.constprop.0+0x96>
 80092ba:	3c37      	subs	r4, #55	; 0x37
 80092bc:	e7e3      	b.n	8009286 <_strtoul_l.constprop.0+0x5e>
 80092be:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80092c2:	f1bc 0f19 	cmp.w	ip, #25
 80092c6:	d804      	bhi.n	80092d2 <_strtoul_l.constprop.0+0xaa>
 80092c8:	3c57      	subs	r4, #87	; 0x57
 80092ca:	e7dc      	b.n	8009286 <_strtoul_l.constprop.0+0x5e>
 80092cc:	f04f 37ff 	mov.w	r7, #4294967295
 80092d0:	e7e6      	b.n	80092a0 <_strtoul_l.constprop.0+0x78>
 80092d2:	1c7b      	adds	r3, r7, #1
 80092d4:	d106      	bne.n	80092e4 <_strtoul_l.constprop.0+0xbc>
 80092d6:	2322      	movs	r3, #34	; 0x22
 80092d8:	4638      	mov	r0, r7
 80092da:	f8ce 3000 	str.w	r3, [lr]
 80092de:	b932      	cbnz	r2, 80092ee <_strtoul_l.constprop.0+0xc6>
 80092e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80092e4:	b106      	cbz	r6, 80092e8 <_strtoul_l.constprop.0+0xc0>
 80092e6:	4240      	negs	r0, r0
 80092e8:	2a00      	cmp	r2, #0
 80092ea:	d0f9      	beq.n	80092e0 <_strtoul_l.constprop.0+0xb8>
 80092ec:	b107      	cbz	r7, 80092f0 <_strtoul_l.constprop.0+0xc8>
 80092ee:	1e69      	subs	r1, r5, #1
 80092f0:	6011      	str	r1, [r2, #0]
 80092f2:	e7f5      	b.n	80092e0 <_strtoul_l.constprop.0+0xb8>
 80092f4:	2430      	movs	r4, #48	; 0x30
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d1b5      	bne.n	8009266 <_strtoul_l.constprop.0+0x3e>
 80092fa:	2308      	movs	r3, #8
 80092fc:	e7b3      	b.n	8009266 <_strtoul_l.constprop.0+0x3e>
 80092fe:	2c30      	cmp	r4, #48	; 0x30
 8009300:	d0a9      	beq.n	8009256 <_strtoul_l.constprop.0+0x2e>
 8009302:	230a      	movs	r3, #10
 8009304:	e7af      	b.n	8009266 <_strtoul_l.constprop.0+0x3e>
 8009306:	bf00      	nop
 8009308:	08009b89 	.word	0x08009b89

0800930c <_strtoul_r>:
 800930c:	f7ff bf8c 	b.w	8009228 <_strtoul_l.constprop.0>

08009310 <__ascii_wctomb>:
 8009310:	4603      	mov	r3, r0
 8009312:	4608      	mov	r0, r1
 8009314:	b141      	cbz	r1, 8009328 <__ascii_wctomb+0x18>
 8009316:	2aff      	cmp	r2, #255	; 0xff
 8009318:	d904      	bls.n	8009324 <__ascii_wctomb+0x14>
 800931a:	228a      	movs	r2, #138	; 0x8a
 800931c:	f04f 30ff 	mov.w	r0, #4294967295
 8009320:	601a      	str	r2, [r3, #0]
 8009322:	4770      	bx	lr
 8009324:	2001      	movs	r0, #1
 8009326:	700a      	strb	r2, [r1, #0]
 8009328:	4770      	bx	lr
	...

0800932c <fiprintf>:
 800932c:	b40e      	push	{r1, r2, r3}
 800932e:	b503      	push	{r0, r1, lr}
 8009330:	4601      	mov	r1, r0
 8009332:	ab03      	add	r3, sp, #12
 8009334:	4805      	ldr	r0, [pc, #20]	; (800934c <fiprintf+0x20>)
 8009336:	f853 2b04 	ldr.w	r2, [r3], #4
 800933a:	6800      	ldr	r0, [r0, #0]
 800933c:	9301      	str	r3, [sp, #4]
 800933e:	f000 f83d 	bl	80093bc <_vfiprintf_r>
 8009342:	b002      	add	sp, #8
 8009344:	f85d eb04 	ldr.w	lr, [sp], #4
 8009348:	b003      	add	sp, #12
 800934a:	4770      	bx	lr
 800934c:	20000068 	.word	0x20000068

08009350 <abort>:
 8009350:	2006      	movs	r0, #6
 8009352:	b508      	push	{r3, lr}
 8009354:	f000 fa0a 	bl	800976c <raise>
 8009358:	2001      	movs	r0, #1
 800935a:	f7f8 fdac 	bl	8001eb6 <_exit>

0800935e <_malloc_usable_size_r>:
 800935e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009362:	1f18      	subs	r0, r3, #4
 8009364:	2b00      	cmp	r3, #0
 8009366:	bfbc      	itt	lt
 8009368:	580b      	ldrlt	r3, [r1, r0]
 800936a:	18c0      	addlt	r0, r0, r3
 800936c:	4770      	bx	lr

0800936e <__sfputc_r>:
 800936e:	6893      	ldr	r3, [r2, #8]
 8009370:	b410      	push	{r4}
 8009372:	3b01      	subs	r3, #1
 8009374:	2b00      	cmp	r3, #0
 8009376:	6093      	str	r3, [r2, #8]
 8009378:	da07      	bge.n	800938a <__sfputc_r+0x1c>
 800937a:	6994      	ldr	r4, [r2, #24]
 800937c:	42a3      	cmp	r3, r4
 800937e:	db01      	blt.n	8009384 <__sfputc_r+0x16>
 8009380:	290a      	cmp	r1, #10
 8009382:	d102      	bne.n	800938a <__sfputc_r+0x1c>
 8009384:	bc10      	pop	{r4}
 8009386:	f000 b933 	b.w	80095f0 <__swbuf_r>
 800938a:	6813      	ldr	r3, [r2, #0]
 800938c:	1c58      	adds	r0, r3, #1
 800938e:	6010      	str	r0, [r2, #0]
 8009390:	7019      	strb	r1, [r3, #0]
 8009392:	4608      	mov	r0, r1
 8009394:	bc10      	pop	{r4}
 8009396:	4770      	bx	lr

08009398 <__sfputs_r>:
 8009398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800939a:	4606      	mov	r6, r0
 800939c:	460f      	mov	r7, r1
 800939e:	4614      	mov	r4, r2
 80093a0:	18d5      	adds	r5, r2, r3
 80093a2:	42ac      	cmp	r4, r5
 80093a4:	d101      	bne.n	80093aa <__sfputs_r+0x12>
 80093a6:	2000      	movs	r0, #0
 80093a8:	e007      	b.n	80093ba <__sfputs_r+0x22>
 80093aa:	463a      	mov	r2, r7
 80093ac:	4630      	mov	r0, r6
 80093ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093b2:	f7ff ffdc 	bl	800936e <__sfputc_r>
 80093b6:	1c43      	adds	r3, r0, #1
 80093b8:	d1f3      	bne.n	80093a2 <__sfputs_r+0xa>
 80093ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080093bc <_vfiprintf_r>:
 80093bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093c0:	460d      	mov	r5, r1
 80093c2:	4614      	mov	r4, r2
 80093c4:	4698      	mov	r8, r3
 80093c6:	4606      	mov	r6, r0
 80093c8:	b09d      	sub	sp, #116	; 0x74
 80093ca:	b118      	cbz	r0, 80093d4 <_vfiprintf_r+0x18>
 80093cc:	6a03      	ldr	r3, [r0, #32]
 80093ce:	b90b      	cbnz	r3, 80093d4 <_vfiprintf_r+0x18>
 80093d0:	f7fc f97e 	bl	80056d0 <__sinit>
 80093d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80093d6:	07d9      	lsls	r1, r3, #31
 80093d8:	d405      	bmi.n	80093e6 <_vfiprintf_r+0x2a>
 80093da:	89ab      	ldrh	r3, [r5, #12]
 80093dc:	059a      	lsls	r2, r3, #22
 80093de:	d402      	bmi.n	80093e6 <_vfiprintf_r+0x2a>
 80093e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80093e2:	f7fc fab8 	bl	8005956 <__retarget_lock_acquire_recursive>
 80093e6:	89ab      	ldrh	r3, [r5, #12]
 80093e8:	071b      	lsls	r3, r3, #28
 80093ea:	d501      	bpl.n	80093f0 <_vfiprintf_r+0x34>
 80093ec:	692b      	ldr	r3, [r5, #16]
 80093ee:	b99b      	cbnz	r3, 8009418 <_vfiprintf_r+0x5c>
 80093f0:	4629      	mov	r1, r5
 80093f2:	4630      	mov	r0, r6
 80093f4:	f000 f93a 	bl	800966c <__swsetup_r>
 80093f8:	b170      	cbz	r0, 8009418 <_vfiprintf_r+0x5c>
 80093fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80093fc:	07dc      	lsls	r4, r3, #31
 80093fe:	d504      	bpl.n	800940a <_vfiprintf_r+0x4e>
 8009400:	f04f 30ff 	mov.w	r0, #4294967295
 8009404:	b01d      	add	sp, #116	; 0x74
 8009406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800940a:	89ab      	ldrh	r3, [r5, #12]
 800940c:	0598      	lsls	r0, r3, #22
 800940e:	d4f7      	bmi.n	8009400 <_vfiprintf_r+0x44>
 8009410:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009412:	f7fc faa1 	bl	8005958 <__retarget_lock_release_recursive>
 8009416:	e7f3      	b.n	8009400 <_vfiprintf_r+0x44>
 8009418:	2300      	movs	r3, #0
 800941a:	9309      	str	r3, [sp, #36]	; 0x24
 800941c:	2320      	movs	r3, #32
 800941e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009422:	2330      	movs	r3, #48	; 0x30
 8009424:	f04f 0901 	mov.w	r9, #1
 8009428:	f8cd 800c 	str.w	r8, [sp, #12]
 800942c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80095dc <_vfiprintf_r+0x220>
 8009430:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009434:	4623      	mov	r3, r4
 8009436:	469a      	mov	sl, r3
 8009438:	f813 2b01 	ldrb.w	r2, [r3], #1
 800943c:	b10a      	cbz	r2, 8009442 <_vfiprintf_r+0x86>
 800943e:	2a25      	cmp	r2, #37	; 0x25
 8009440:	d1f9      	bne.n	8009436 <_vfiprintf_r+0x7a>
 8009442:	ebba 0b04 	subs.w	fp, sl, r4
 8009446:	d00b      	beq.n	8009460 <_vfiprintf_r+0xa4>
 8009448:	465b      	mov	r3, fp
 800944a:	4622      	mov	r2, r4
 800944c:	4629      	mov	r1, r5
 800944e:	4630      	mov	r0, r6
 8009450:	f7ff ffa2 	bl	8009398 <__sfputs_r>
 8009454:	3001      	adds	r0, #1
 8009456:	f000 80a9 	beq.w	80095ac <_vfiprintf_r+0x1f0>
 800945a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800945c:	445a      	add	r2, fp
 800945e:	9209      	str	r2, [sp, #36]	; 0x24
 8009460:	f89a 3000 	ldrb.w	r3, [sl]
 8009464:	2b00      	cmp	r3, #0
 8009466:	f000 80a1 	beq.w	80095ac <_vfiprintf_r+0x1f0>
 800946a:	2300      	movs	r3, #0
 800946c:	f04f 32ff 	mov.w	r2, #4294967295
 8009470:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009474:	f10a 0a01 	add.w	sl, sl, #1
 8009478:	9304      	str	r3, [sp, #16]
 800947a:	9307      	str	r3, [sp, #28]
 800947c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009480:	931a      	str	r3, [sp, #104]	; 0x68
 8009482:	4654      	mov	r4, sl
 8009484:	2205      	movs	r2, #5
 8009486:	f814 1b01 	ldrb.w	r1, [r4], #1
 800948a:	4854      	ldr	r0, [pc, #336]	; (80095dc <_vfiprintf_r+0x220>)
 800948c:	f7fc fa65 	bl	800595a <memchr>
 8009490:	9a04      	ldr	r2, [sp, #16]
 8009492:	b9d8      	cbnz	r0, 80094cc <_vfiprintf_r+0x110>
 8009494:	06d1      	lsls	r1, r2, #27
 8009496:	bf44      	itt	mi
 8009498:	2320      	movmi	r3, #32
 800949a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800949e:	0713      	lsls	r3, r2, #28
 80094a0:	bf44      	itt	mi
 80094a2:	232b      	movmi	r3, #43	; 0x2b
 80094a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80094a8:	f89a 3000 	ldrb.w	r3, [sl]
 80094ac:	2b2a      	cmp	r3, #42	; 0x2a
 80094ae:	d015      	beq.n	80094dc <_vfiprintf_r+0x120>
 80094b0:	4654      	mov	r4, sl
 80094b2:	2000      	movs	r0, #0
 80094b4:	f04f 0c0a 	mov.w	ip, #10
 80094b8:	9a07      	ldr	r2, [sp, #28]
 80094ba:	4621      	mov	r1, r4
 80094bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80094c0:	3b30      	subs	r3, #48	; 0x30
 80094c2:	2b09      	cmp	r3, #9
 80094c4:	d94d      	bls.n	8009562 <_vfiprintf_r+0x1a6>
 80094c6:	b1b0      	cbz	r0, 80094f6 <_vfiprintf_r+0x13a>
 80094c8:	9207      	str	r2, [sp, #28]
 80094ca:	e014      	b.n	80094f6 <_vfiprintf_r+0x13a>
 80094cc:	eba0 0308 	sub.w	r3, r0, r8
 80094d0:	fa09 f303 	lsl.w	r3, r9, r3
 80094d4:	4313      	orrs	r3, r2
 80094d6:	46a2      	mov	sl, r4
 80094d8:	9304      	str	r3, [sp, #16]
 80094da:	e7d2      	b.n	8009482 <_vfiprintf_r+0xc6>
 80094dc:	9b03      	ldr	r3, [sp, #12]
 80094de:	1d19      	adds	r1, r3, #4
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	9103      	str	r1, [sp, #12]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	bfbb      	ittet	lt
 80094e8:	425b      	neglt	r3, r3
 80094ea:	f042 0202 	orrlt.w	r2, r2, #2
 80094ee:	9307      	strge	r3, [sp, #28]
 80094f0:	9307      	strlt	r3, [sp, #28]
 80094f2:	bfb8      	it	lt
 80094f4:	9204      	strlt	r2, [sp, #16]
 80094f6:	7823      	ldrb	r3, [r4, #0]
 80094f8:	2b2e      	cmp	r3, #46	; 0x2e
 80094fa:	d10c      	bne.n	8009516 <_vfiprintf_r+0x15a>
 80094fc:	7863      	ldrb	r3, [r4, #1]
 80094fe:	2b2a      	cmp	r3, #42	; 0x2a
 8009500:	d134      	bne.n	800956c <_vfiprintf_r+0x1b0>
 8009502:	9b03      	ldr	r3, [sp, #12]
 8009504:	3402      	adds	r4, #2
 8009506:	1d1a      	adds	r2, r3, #4
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	9203      	str	r2, [sp, #12]
 800950c:	2b00      	cmp	r3, #0
 800950e:	bfb8      	it	lt
 8009510:	f04f 33ff 	movlt.w	r3, #4294967295
 8009514:	9305      	str	r3, [sp, #20]
 8009516:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80095e0 <_vfiprintf_r+0x224>
 800951a:	2203      	movs	r2, #3
 800951c:	4650      	mov	r0, sl
 800951e:	7821      	ldrb	r1, [r4, #0]
 8009520:	f7fc fa1b 	bl	800595a <memchr>
 8009524:	b138      	cbz	r0, 8009536 <_vfiprintf_r+0x17a>
 8009526:	2240      	movs	r2, #64	; 0x40
 8009528:	9b04      	ldr	r3, [sp, #16]
 800952a:	eba0 000a 	sub.w	r0, r0, sl
 800952e:	4082      	lsls	r2, r0
 8009530:	4313      	orrs	r3, r2
 8009532:	3401      	adds	r4, #1
 8009534:	9304      	str	r3, [sp, #16]
 8009536:	f814 1b01 	ldrb.w	r1, [r4], #1
 800953a:	2206      	movs	r2, #6
 800953c:	4829      	ldr	r0, [pc, #164]	; (80095e4 <_vfiprintf_r+0x228>)
 800953e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009542:	f7fc fa0a 	bl	800595a <memchr>
 8009546:	2800      	cmp	r0, #0
 8009548:	d03f      	beq.n	80095ca <_vfiprintf_r+0x20e>
 800954a:	4b27      	ldr	r3, [pc, #156]	; (80095e8 <_vfiprintf_r+0x22c>)
 800954c:	bb1b      	cbnz	r3, 8009596 <_vfiprintf_r+0x1da>
 800954e:	9b03      	ldr	r3, [sp, #12]
 8009550:	3307      	adds	r3, #7
 8009552:	f023 0307 	bic.w	r3, r3, #7
 8009556:	3308      	adds	r3, #8
 8009558:	9303      	str	r3, [sp, #12]
 800955a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800955c:	443b      	add	r3, r7
 800955e:	9309      	str	r3, [sp, #36]	; 0x24
 8009560:	e768      	b.n	8009434 <_vfiprintf_r+0x78>
 8009562:	460c      	mov	r4, r1
 8009564:	2001      	movs	r0, #1
 8009566:	fb0c 3202 	mla	r2, ip, r2, r3
 800956a:	e7a6      	b.n	80094ba <_vfiprintf_r+0xfe>
 800956c:	2300      	movs	r3, #0
 800956e:	f04f 0c0a 	mov.w	ip, #10
 8009572:	4619      	mov	r1, r3
 8009574:	3401      	adds	r4, #1
 8009576:	9305      	str	r3, [sp, #20]
 8009578:	4620      	mov	r0, r4
 800957a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800957e:	3a30      	subs	r2, #48	; 0x30
 8009580:	2a09      	cmp	r2, #9
 8009582:	d903      	bls.n	800958c <_vfiprintf_r+0x1d0>
 8009584:	2b00      	cmp	r3, #0
 8009586:	d0c6      	beq.n	8009516 <_vfiprintf_r+0x15a>
 8009588:	9105      	str	r1, [sp, #20]
 800958a:	e7c4      	b.n	8009516 <_vfiprintf_r+0x15a>
 800958c:	4604      	mov	r4, r0
 800958e:	2301      	movs	r3, #1
 8009590:	fb0c 2101 	mla	r1, ip, r1, r2
 8009594:	e7f0      	b.n	8009578 <_vfiprintf_r+0x1bc>
 8009596:	ab03      	add	r3, sp, #12
 8009598:	9300      	str	r3, [sp, #0]
 800959a:	462a      	mov	r2, r5
 800959c:	4630      	mov	r0, r6
 800959e:	4b13      	ldr	r3, [pc, #76]	; (80095ec <_vfiprintf_r+0x230>)
 80095a0:	a904      	add	r1, sp, #16
 80095a2:	f7fb fa39 	bl	8004a18 <_printf_float>
 80095a6:	4607      	mov	r7, r0
 80095a8:	1c78      	adds	r0, r7, #1
 80095aa:	d1d6      	bne.n	800955a <_vfiprintf_r+0x19e>
 80095ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80095ae:	07d9      	lsls	r1, r3, #31
 80095b0:	d405      	bmi.n	80095be <_vfiprintf_r+0x202>
 80095b2:	89ab      	ldrh	r3, [r5, #12]
 80095b4:	059a      	lsls	r2, r3, #22
 80095b6:	d402      	bmi.n	80095be <_vfiprintf_r+0x202>
 80095b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80095ba:	f7fc f9cd 	bl	8005958 <__retarget_lock_release_recursive>
 80095be:	89ab      	ldrh	r3, [r5, #12]
 80095c0:	065b      	lsls	r3, r3, #25
 80095c2:	f53f af1d 	bmi.w	8009400 <_vfiprintf_r+0x44>
 80095c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80095c8:	e71c      	b.n	8009404 <_vfiprintf_r+0x48>
 80095ca:	ab03      	add	r3, sp, #12
 80095cc:	9300      	str	r3, [sp, #0]
 80095ce:	462a      	mov	r2, r5
 80095d0:	4630      	mov	r0, r6
 80095d2:	4b06      	ldr	r3, [pc, #24]	; (80095ec <_vfiprintf_r+0x230>)
 80095d4:	a904      	add	r1, sp, #16
 80095d6:	f7fb fcbf 	bl	8004f58 <_printf_i>
 80095da:	e7e4      	b.n	80095a6 <_vfiprintf_r+0x1ea>
 80095dc:	08009c89 	.word	0x08009c89
 80095e0:	08009c8f 	.word	0x08009c8f
 80095e4:	08009c93 	.word	0x08009c93
 80095e8:	08004a19 	.word	0x08004a19
 80095ec:	08009399 	.word	0x08009399

080095f0 <__swbuf_r>:
 80095f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095f2:	460e      	mov	r6, r1
 80095f4:	4614      	mov	r4, r2
 80095f6:	4605      	mov	r5, r0
 80095f8:	b118      	cbz	r0, 8009602 <__swbuf_r+0x12>
 80095fa:	6a03      	ldr	r3, [r0, #32]
 80095fc:	b90b      	cbnz	r3, 8009602 <__swbuf_r+0x12>
 80095fe:	f7fc f867 	bl	80056d0 <__sinit>
 8009602:	69a3      	ldr	r3, [r4, #24]
 8009604:	60a3      	str	r3, [r4, #8]
 8009606:	89a3      	ldrh	r3, [r4, #12]
 8009608:	071a      	lsls	r2, r3, #28
 800960a:	d525      	bpl.n	8009658 <__swbuf_r+0x68>
 800960c:	6923      	ldr	r3, [r4, #16]
 800960e:	b31b      	cbz	r3, 8009658 <__swbuf_r+0x68>
 8009610:	6823      	ldr	r3, [r4, #0]
 8009612:	6922      	ldr	r2, [r4, #16]
 8009614:	b2f6      	uxtb	r6, r6
 8009616:	1a98      	subs	r0, r3, r2
 8009618:	6963      	ldr	r3, [r4, #20]
 800961a:	4637      	mov	r7, r6
 800961c:	4283      	cmp	r3, r0
 800961e:	dc04      	bgt.n	800962a <__swbuf_r+0x3a>
 8009620:	4621      	mov	r1, r4
 8009622:	4628      	mov	r0, r5
 8009624:	f7ff f94a 	bl	80088bc <_fflush_r>
 8009628:	b9e0      	cbnz	r0, 8009664 <__swbuf_r+0x74>
 800962a:	68a3      	ldr	r3, [r4, #8]
 800962c:	3b01      	subs	r3, #1
 800962e:	60a3      	str	r3, [r4, #8]
 8009630:	6823      	ldr	r3, [r4, #0]
 8009632:	1c5a      	adds	r2, r3, #1
 8009634:	6022      	str	r2, [r4, #0]
 8009636:	701e      	strb	r6, [r3, #0]
 8009638:	6962      	ldr	r2, [r4, #20]
 800963a:	1c43      	adds	r3, r0, #1
 800963c:	429a      	cmp	r2, r3
 800963e:	d004      	beq.n	800964a <__swbuf_r+0x5a>
 8009640:	89a3      	ldrh	r3, [r4, #12]
 8009642:	07db      	lsls	r3, r3, #31
 8009644:	d506      	bpl.n	8009654 <__swbuf_r+0x64>
 8009646:	2e0a      	cmp	r6, #10
 8009648:	d104      	bne.n	8009654 <__swbuf_r+0x64>
 800964a:	4621      	mov	r1, r4
 800964c:	4628      	mov	r0, r5
 800964e:	f7ff f935 	bl	80088bc <_fflush_r>
 8009652:	b938      	cbnz	r0, 8009664 <__swbuf_r+0x74>
 8009654:	4638      	mov	r0, r7
 8009656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009658:	4621      	mov	r1, r4
 800965a:	4628      	mov	r0, r5
 800965c:	f000 f806 	bl	800966c <__swsetup_r>
 8009660:	2800      	cmp	r0, #0
 8009662:	d0d5      	beq.n	8009610 <__swbuf_r+0x20>
 8009664:	f04f 37ff 	mov.w	r7, #4294967295
 8009668:	e7f4      	b.n	8009654 <__swbuf_r+0x64>
	...

0800966c <__swsetup_r>:
 800966c:	b538      	push	{r3, r4, r5, lr}
 800966e:	4b2a      	ldr	r3, [pc, #168]	; (8009718 <__swsetup_r+0xac>)
 8009670:	4605      	mov	r5, r0
 8009672:	6818      	ldr	r0, [r3, #0]
 8009674:	460c      	mov	r4, r1
 8009676:	b118      	cbz	r0, 8009680 <__swsetup_r+0x14>
 8009678:	6a03      	ldr	r3, [r0, #32]
 800967a:	b90b      	cbnz	r3, 8009680 <__swsetup_r+0x14>
 800967c:	f7fc f828 	bl	80056d0 <__sinit>
 8009680:	89a3      	ldrh	r3, [r4, #12]
 8009682:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009686:	0718      	lsls	r0, r3, #28
 8009688:	d422      	bmi.n	80096d0 <__swsetup_r+0x64>
 800968a:	06d9      	lsls	r1, r3, #27
 800968c:	d407      	bmi.n	800969e <__swsetup_r+0x32>
 800968e:	2309      	movs	r3, #9
 8009690:	602b      	str	r3, [r5, #0]
 8009692:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009696:	f04f 30ff 	mov.w	r0, #4294967295
 800969a:	81a3      	strh	r3, [r4, #12]
 800969c:	e034      	b.n	8009708 <__swsetup_r+0x9c>
 800969e:	0758      	lsls	r0, r3, #29
 80096a0:	d512      	bpl.n	80096c8 <__swsetup_r+0x5c>
 80096a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80096a4:	b141      	cbz	r1, 80096b8 <__swsetup_r+0x4c>
 80096a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80096aa:	4299      	cmp	r1, r3
 80096ac:	d002      	beq.n	80096b4 <__swsetup_r+0x48>
 80096ae:	4628      	mov	r0, r5
 80096b0:	f7fc ffd6 	bl	8006660 <_free_r>
 80096b4:	2300      	movs	r3, #0
 80096b6:	6363      	str	r3, [r4, #52]	; 0x34
 80096b8:	89a3      	ldrh	r3, [r4, #12]
 80096ba:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80096be:	81a3      	strh	r3, [r4, #12]
 80096c0:	2300      	movs	r3, #0
 80096c2:	6063      	str	r3, [r4, #4]
 80096c4:	6923      	ldr	r3, [r4, #16]
 80096c6:	6023      	str	r3, [r4, #0]
 80096c8:	89a3      	ldrh	r3, [r4, #12]
 80096ca:	f043 0308 	orr.w	r3, r3, #8
 80096ce:	81a3      	strh	r3, [r4, #12]
 80096d0:	6923      	ldr	r3, [r4, #16]
 80096d2:	b94b      	cbnz	r3, 80096e8 <__swsetup_r+0x7c>
 80096d4:	89a3      	ldrh	r3, [r4, #12]
 80096d6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80096da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80096de:	d003      	beq.n	80096e8 <__swsetup_r+0x7c>
 80096e0:	4621      	mov	r1, r4
 80096e2:	4628      	mov	r0, r5
 80096e4:	f000 f883 	bl	80097ee <__smakebuf_r>
 80096e8:	89a0      	ldrh	r0, [r4, #12]
 80096ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80096ee:	f010 0301 	ands.w	r3, r0, #1
 80096f2:	d00a      	beq.n	800970a <__swsetup_r+0x9e>
 80096f4:	2300      	movs	r3, #0
 80096f6:	60a3      	str	r3, [r4, #8]
 80096f8:	6963      	ldr	r3, [r4, #20]
 80096fa:	425b      	negs	r3, r3
 80096fc:	61a3      	str	r3, [r4, #24]
 80096fe:	6923      	ldr	r3, [r4, #16]
 8009700:	b943      	cbnz	r3, 8009714 <__swsetup_r+0xa8>
 8009702:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009706:	d1c4      	bne.n	8009692 <__swsetup_r+0x26>
 8009708:	bd38      	pop	{r3, r4, r5, pc}
 800970a:	0781      	lsls	r1, r0, #30
 800970c:	bf58      	it	pl
 800970e:	6963      	ldrpl	r3, [r4, #20]
 8009710:	60a3      	str	r3, [r4, #8]
 8009712:	e7f4      	b.n	80096fe <__swsetup_r+0x92>
 8009714:	2000      	movs	r0, #0
 8009716:	e7f7      	b.n	8009708 <__swsetup_r+0x9c>
 8009718:	20000068 	.word	0x20000068

0800971c <_raise_r>:
 800971c:	291f      	cmp	r1, #31
 800971e:	b538      	push	{r3, r4, r5, lr}
 8009720:	4604      	mov	r4, r0
 8009722:	460d      	mov	r5, r1
 8009724:	d904      	bls.n	8009730 <_raise_r+0x14>
 8009726:	2316      	movs	r3, #22
 8009728:	6003      	str	r3, [r0, #0]
 800972a:	f04f 30ff 	mov.w	r0, #4294967295
 800972e:	bd38      	pop	{r3, r4, r5, pc}
 8009730:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009732:	b112      	cbz	r2, 800973a <_raise_r+0x1e>
 8009734:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009738:	b94b      	cbnz	r3, 800974e <_raise_r+0x32>
 800973a:	4620      	mov	r0, r4
 800973c:	f000 f830 	bl	80097a0 <_getpid_r>
 8009740:	462a      	mov	r2, r5
 8009742:	4601      	mov	r1, r0
 8009744:	4620      	mov	r0, r4
 8009746:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800974a:	f000 b817 	b.w	800977c <_kill_r>
 800974e:	2b01      	cmp	r3, #1
 8009750:	d00a      	beq.n	8009768 <_raise_r+0x4c>
 8009752:	1c59      	adds	r1, r3, #1
 8009754:	d103      	bne.n	800975e <_raise_r+0x42>
 8009756:	2316      	movs	r3, #22
 8009758:	6003      	str	r3, [r0, #0]
 800975a:	2001      	movs	r0, #1
 800975c:	e7e7      	b.n	800972e <_raise_r+0x12>
 800975e:	2400      	movs	r4, #0
 8009760:	4628      	mov	r0, r5
 8009762:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009766:	4798      	blx	r3
 8009768:	2000      	movs	r0, #0
 800976a:	e7e0      	b.n	800972e <_raise_r+0x12>

0800976c <raise>:
 800976c:	4b02      	ldr	r3, [pc, #8]	; (8009778 <raise+0xc>)
 800976e:	4601      	mov	r1, r0
 8009770:	6818      	ldr	r0, [r3, #0]
 8009772:	f7ff bfd3 	b.w	800971c <_raise_r>
 8009776:	bf00      	nop
 8009778:	20000068 	.word	0x20000068

0800977c <_kill_r>:
 800977c:	b538      	push	{r3, r4, r5, lr}
 800977e:	2300      	movs	r3, #0
 8009780:	4d06      	ldr	r5, [pc, #24]	; (800979c <_kill_r+0x20>)
 8009782:	4604      	mov	r4, r0
 8009784:	4608      	mov	r0, r1
 8009786:	4611      	mov	r1, r2
 8009788:	602b      	str	r3, [r5, #0]
 800978a:	f7f8 fb84 	bl	8001e96 <_kill>
 800978e:	1c43      	adds	r3, r0, #1
 8009790:	d102      	bne.n	8009798 <_kill_r+0x1c>
 8009792:	682b      	ldr	r3, [r5, #0]
 8009794:	b103      	cbz	r3, 8009798 <_kill_r+0x1c>
 8009796:	6023      	str	r3, [r4, #0]
 8009798:	bd38      	pop	{r3, r4, r5, pc}
 800979a:	bf00      	nop
 800979c:	200004ac 	.word	0x200004ac

080097a0 <_getpid_r>:
 80097a0:	f7f8 bb72 	b.w	8001e88 <_getpid>

080097a4 <__swhatbuf_r>:
 80097a4:	b570      	push	{r4, r5, r6, lr}
 80097a6:	460c      	mov	r4, r1
 80097a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097ac:	4615      	mov	r5, r2
 80097ae:	2900      	cmp	r1, #0
 80097b0:	461e      	mov	r6, r3
 80097b2:	b096      	sub	sp, #88	; 0x58
 80097b4:	da0c      	bge.n	80097d0 <__swhatbuf_r+0x2c>
 80097b6:	89a3      	ldrh	r3, [r4, #12]
 80097b8:	2100      	movs	r1, #0
 80097ba:	f013 0f80 	tst.w	r3, #128	; 0x80
 80097be:	bf0c      	ite	eq
 80097c0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80097c4:	2340      	movne	r3, #64	; 0x40
 80097c6:	2000      	movs	r0, #0
 80097c8:	6031      	str	r1, [r6, #0]
 80097ca:	602b      	str	r3, [r5, #0]
 80097cc:	b016      	add	sp, #88	; 0x58
 80097ce:	bd70      	pop	{r4, r5, r6, pc}
 80097d0:	466a      	mov	r2, sp
 80097d2:	f000 f849 	bl	8009868 <_fstat_r>
 80097d6:	2800      	cmp	r0, #0
 80097d8:	dbed      	blt.n	80097b6 <__swhatbuf_r+0x12>
 80097da:	9901      	ldr	r1, [sp, #4]
 80097dc:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80097e0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80097e4:	4259      	negs	r1, r3
 80097e6:	4159      	adcs	r1, r3
 80097e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80097ec:	e7eb      	b.n	80097c6 <__swhatbuf_r+0x22>

080097ee <__smakebuf_r>:
 80097ee:	898b      	ldrh	r3, [r1, #12]
 80097f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80097f2:	079d      	lsls	r5, r3, #30
 80097f4:	4606      	mov	r6, r0
 80097f6:	460c      	mov	r4, r1
 80097f8:	d507      	bpl.n	800980a <__smakebuf_r+0x1c>
 80097fa:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80097fe:	6023      	str	r3, [r4, #0]
 8009800:	6123      	str	r3, [r4, #16]
 8009802:	2301      	movs	r3, #1
 8009804:	6163      	str	r3, [r4, #20]
 8009806:	b002      	add	sp, #8
 8009808:	bd70      	pop	{r4, r5, r6, pc}
 800980a:	466a      	mov	r2, sp
 800980c:	ab01      	add	r3, sp, #4
 800980e:	f7ff ffc9 	bl	80097a4 <__swhatbuf_r>
 8009812:	9900      	ldr	r1, [sp, #0]
 8009814:	4605      	mov	r5, r0
 8009816:	4630      	mov	r0, r6
 8009818:	f7fc ff92 	bl	8006740 <_malloc_r>
 800981c:	b948      	cbnz	r0, 8009832 <__smakebuf_r+0x44>
 800981e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009822:	059a      	lsls	r2, r3, #22
 8009824:	d4ef      	bmi.n	8009806 <__smakebuf_r+0x18>
 8009826:	f023 0303 	bic.w	r3, r3, #3
 800982a:	f043 0302 	orr.w	r3, r3, #2
 800982e:	81a3      	strh	r3, [r4, #12]
 8009830:	e7e3      	b.n	80097fa <__smakebuf_r+0xc>
 8009832:	89a3      	ldrh	r3, [r4, #12]
 8009834:	6020      	str	r0, [r4, #0]
 8009836:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800983a:	81a3      	strh	r3, [r4, #12]
 800983c:	9b00      	ldr	r3, [sp, #0]
 800983e:	6120      	str	r0, [r4, #16]
 8009840:	6163      	str	r3, [r4, #20]
 8009842:	9b01      	ldr	r3, [sp, #4]
 8009844:	b15b      	cbz	r3, 800985e <__smakebuf_r+0x70>
 8009846:	4630      	mov	r0, r6
 8009848:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800984c:	f000 f81e 	bl	800988c <_isatty_r>
 8009850:	b128      	cbz	r0, 800985e <__smakebuf_r+0x70>
 8009852:	89a3      	ldrh	r3, [r4, #12]
 8009854:	f023 0303 	bic.w	r3, r3, #3
 8009858:	f043 0301 	orr.w	r3, r3, #1
 800985c:	81a3      	strh	r3, [r4, #12]
 800985e:	89a3      	ldrh	r3, [r4, #12]
 8009860:	431d      	orrs	r5, r3
 8009862:	81a5      	strh	r5, [r4, #12]
 8009864:	e7cf      	b.n	8009806 <__smakebuf_r+0x18>
	...

08009868 <_fstat_r>:
 8009868:	b538      	push	{r3, r4, r5, lr}
 800986a:	2300      	movs	r3, #0
 800986c:	4d06      	ldr	r5, [pc, #24]	; (8009888 <_fstat_r+0x20>)
 800986e:	4604      	mov	r4, r0
 8009870:	4608      	mov	r0, r1
 8009872:	4611      	mov	r1, r2
 8009874:	602b      	str	r3, [r5, #0]
 8009876:	f7f8 fb6c 	bl	8001f52 <_fstat>
 800987a:	1c43      	adds	r3, r0, #1
 800987c:	d102      	bne.n	8009884 <_fstat_r+0x1c>
 800987e:	682b      	ldr	r3, [r5, #0]
 8009880:	b103      	cbz	r3, 8009884 <_fstat_r+0x1c>
 8009882:	6023      	str	r3, [r4, #0]
 8009884:	bd38      	pop	{r3, r4, r5, pc}
 8009886:	bf00      	nop
 8009888:	200004ac 	.word	0x200004ac

0800988c <_isatty_r>:
 800988c:	b538      	push	{r3, r4, r5, lr}
 800988e:	2300      	movs	r3, #0
 8009890:	4d05      	ldr	r5, [pc, #20]	; (80098a8 <_isatty_r+0x1c>)
 8009892:	4604      	mov	r4, r0
 8009894:	4608      	mov	r0, r1
 8009896:	602b      	str	r3, [r5, #0]
 8009898:	f7f8 fb6a 	bl	8001f70 <_isatty>
 800989c:	1c43      	adds	r3, r0, #1
 800989e:	d102      	bne.n	80098a6 <_isatty_r+0x1a>
 80098a0:	682b      	ldr	r3, [r5, #0]
 80098a2:	b103      	cbz	r3, 80098a6 <_isatty_r+0x1a>
 80098a4:	6023      	str	r3, [r4, #0]
 80098a6:	bd38      	pop	{r3, r4, r5, pc}
 80098a8:	200004ac 	.word	0x200004ac

080098ac <_init>:
 80098ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098ae:	bf00      	nop
 80098b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098b2:	bc08      	pop	{r3}
 80098b4:	469e      	mov	lr, r3
 80098b6:	4770      	bx	lr

080098b8 <_fini>:
 80098b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098ba:	bf00      	nop
 80098bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098be:	bc08      	pop	{r3}
 80098c0:	469e      	mov	lr, r3
 80098c2:	4770      	bx	lr
