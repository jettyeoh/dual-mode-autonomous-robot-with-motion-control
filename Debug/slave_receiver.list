
slave_receiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b4c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c3c  08008c60  08008c60  00018c60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800989c  0800989c  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  0800989c  0800989c  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800989c  0800989c  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800989c  0800989c  0001989c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080098a0  080098a0  000198a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  080098a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000066c  200001d4  08009a78  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000840  08009a78  00020840  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b980  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f4d  00000000  00000000  0002bbc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b10  00000000  00000000  0002db10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000088e  00000000  00000000  0002e620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001844a  00000000  00000000  0002eeae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e6a4  00000000  00000000  000472f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087353  00000000  00000000  0005599c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004454  00000000  00000000  000dccf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000e1144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08008c44 	.word	0x08008c44

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08008c44 	.word	0x08008c44

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2lz>:
 8000b7c:	b538      	push	{r3, r4, r5, lr}
 8000b7e:	4605      	mov	r5, r0
 8000b80:	460c      	mov	r4, r1
 8000b82:	2200      	movs	r2, #0
 8000b84:	2300      	movs	r3, #0
 8000b86:	4628      	mov	r0, r5
 8000b88:	4621      	mov	r1, r4
 8000b8a:	f7ff ff21 	bl	80009d0 <__aeabi_dcmplt>
 8000b8e:	b928      	cbnz	r0, 8000b9c <__aeabi_d2lz+0x20>
 8000b90:	4628      	mov	r0, r5
 8000b92:	4621      	mov	r1, r4
 8000b94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b98:	f000 b80a 	b.w	8000bb0 <__aeabi_d2ulz>
 8000b9c:	4628      	mov	r0, r5
 8000b9e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000ba2:	f000 f805 	bl	8000bb0 <__aeabi_d2ulz>
 8000ba6:	4240      	negs	r0, r0
 8000ba8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bac:	bd38      	pop	{r3, r4, r5, pc}
 8000bae:	bf00      	nop

08000bb0 <__aeabi_d2ulz>:
 8000bb0:	b5d0      	push	{r4, r6, r7, lr}
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <__aeabi_d2ulz+0x34>)
 8000bb6:	4606      	mov	r6, r0
 8000bb8:	460f      	mov	r7, r1
 8000bba:	f7ff fc97 	bl	80004ec <__aeabi_dmul>
 8000bbe:	f7ff ff6d 	bl	8000a9c <__aeabi_d2uiz>
 8000bc2:	4604      	mov	r4, r0
 8000bc4:	f7ff fc18 	bl	80003f8 <__aeabi_ui2d>
 8000bc8:	2200      	movs	r2, #0
 8000bca:	4b07      	ldr	r3, [pc, #28]	; (8000be8 <__aeabi_d2ulz+0x38>)
 8000bcc:	f7ff fc8e 	bl	80004ec <__aeabi_dmul>
 8000bd0:	4602      	mov	r2, r0
 8000bd2:	460b      	mov	r3, r1
 8000bd4:	4630      	mov	r0, r6
 8000bd6:	4639      	mov	r1, r7
 8000bd8:	f7ff fad0 	bl	800017c <__aeabi_dsub>
 8000bdc:	f7ff ff5e 	bl	8000a9c <__aeabi_d2uiz>
 8000be0:	4621      	mov	r1, r4
 8000be2:	bdd0      	pop	{r4, r6, r7, pc}
 8000be4:	3df00000 	.word	0x3df00000
 8000be8:	41f00000 	.word	0x41f00000

08000bec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bf0:	f000 fe34 	bl	800185c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bf4:	f000 f82a 	bl	8000c4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bf8:	f000 f8c6 	bl	8000d88 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000bfc:	f000 f89a 	bl	8000d34 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000c00:	f000 f86a 	bl	8000cd8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	ssd1306_Init();
 8000c04:	f000 fa3a 	bl	800107c <ssd1306_Init>
	HAL_UART_Receive_IT(&huart2, (uint8_t *)&rxBuffer[rxIndex], 1);
 8000c08:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <main+0x50>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	461a      	mov	r2, r3
 8000c10:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <main+0x54>)
 8000c12:	4413      	add	r3, r2
 8000c14:	2201      	movs	r2, #1
 8000c16:	4619      	mov	r1, r3
 8000c18:	480a      	ldr	r0, [pc, #40]	; (8000c44 <main+0x58>)
 8000c1a:	f002 faf5 	bl	8003208 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		if (messageReady) {
 8000c1e:	4b0a      	ldr	r3, [pc, #40]	; (8000c48 <main+0x5c>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d005      	beq.n	8000c34 <main+0x48>
			// Process the complete message
			ProcessReceivedData(rxBuffer);
 8000c28:	4805      	ldr	r0, [pc, #20]	; (8000c40 <main+0x54>)
 8000c2a:	f000 f931 	bl	8000e90 <ProcessReceivedData>
			messageReady = 0; // Reset the flag after processing
 8000c2e:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <main+0x5c>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	701a      	strb	r2, [r3, #0]
		}

		ssd1306_UpdateScreen();
 8000c34:	f000 faa4 	bl	8001180 <ssd1306_UpdateScreen>
		if (messageReady) {
 8000c38:	e7f1      	b.n	8000c1e <main+0x32>
 8000c3a:	bf00      	nop
 8000c3c:	200002d2 	.word	0x200002d2
 8000c40:	200002a0 	.word	0x200002a0
 8000c44:	20000244 	.word	0x20000244
 8000c48:	200002d3 	.word	0x200002d3

08000c4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b090      	sub	sp, #64	; 0x40
 8000c50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c52:	f107 0318 	add.w	r3, r7, #24
 8000c56:	2228      	movs	r2, #40	; 0x28
 8000c58:	2100      	movs	r1, #0
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f003 ffe3 	bl	8004c26 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c60:	1d3b      	adds	r3, r7, #4
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]
 8000c68:	609a      	str	r2, [r3, #8]
 8000c6a:	60da      	str	r2, [r3, #12]
 8000c6c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c76:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c80:	2302      	movs	r3, #2
 8000c82:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c88:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c8a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c90:	f107 0318 	add.w	r3, r7, #24
 8000c94:	4618      	mov	r0, r3
 8000c96:	f001 fe57 	bl	8002948 <HAL_RCC_OscConfig>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000ca0:	f000 f9ae 	bl	8001000 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ca4:	230f      	movs	r3, #15
 8000ca6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cac:	2300      	movs	r3, #0
 8000cae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cb4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cba:	1d3b      	adds	r3, r7, #4
 8000cbc:	2102      	movs	r1, #2
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f002 f8c4 	bl	8002e4c <HAL_RCC_ClockConfig>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000cca:	f000 f999 	bl	8001000 <Error_Handler>
  }
}
 8000cce:	bf00      	nop
 8000cd0:	3740      	adds	r7, #64	; 0x40
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
	...

08000cd8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cdc:	4b12      	ldr	r3, [pc, #72]	; (8000d28 <MX_I2C1_Init+0x50>)
 8000cde:	4a13      	ldr	r2, [pc, #76]	; (8000d2c <MX_I2C1_Init+0x54>)
 8000ce0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ce2:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <MX_I2C1_Init+0x50>)
 8000ce4:	4a12      	ldr	r2, [pc, #72]	; (8000d30 <MX_I2C1_Init+0x58>)
 8000ce6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ce8:	4b0f      	ldr	r3, [pc, #60]	; (8000d28 <MX_I2C1_Init+0x50>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000cee:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <MX_I2C1_Init+0x50>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cf4:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <MX_I2C1_Init+0x50>)
 8000cf6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cfa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cfc:	4b0a      	ldr	r3, [pc, #40]	; (8000d28 <MX_I2C1_Init+0x50>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d02:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <MX_I2C1_Init+0x50>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d08:	4b07      	ldr	r3, [pc, #28]	; (8000d28 <MX_I2C1_Init+0x50>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d0e:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <MX_I2C1_Init+0x50>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d14:	4804      	ldr	r0, [pc, #16]	; (8000d28 <MX_I2C1_Init+0x50>)
 8000d16:	f001 f96b 	bl	8001ff0 <HAL_I2C_Init>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d20:	f000 f96e 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d24:	bf00      	nop
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	200001f0 	.word	0x200001f0
 8000d2c:	40005400 	.word	0x40005400
 8000d30:	000186a0 	.word	0x000186a0

08000d34 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d38:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <MX_USART2_UART_Init+0x4c>)
 8000d3a:	4a12      	ldr	r2, [pc, #72]	; (8000d84 <MX_USART2_UART_Init+0x50>)
 8000d3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000d3e:	4b10      	ldr	r3, [pc, #64]	; (8000d80 <MX_USART2_UART_Init+0x4c>)
 8000d40:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000d44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d46:	4b0e      	ldr	r3, [pc, #56]	; (8000d80 <MX_USART2_UART_Init+0x4c>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d4c:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <MX_USART2_UART_Init+0x4c>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d52:	4b0b      	ldr	r3, [pc, #44]	; (8000d80 <MX_USART2_UART_Init+0x4c>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d58:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <MX_USART2_UART_Init+0x4c>)
 8000d5a:	220c      	movs	r2, #12
 8000d5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d5e:	4b08      	ldr	r3, [pc, #32]	; (8000d80 <MX_USART2_UART_Init+0x4c>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d64:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <MX_USART2_UART_Init+0x4c>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d6a:	4805      	ldr	r0, [pc, #20]	; (8000d80 <MX_USART2_UART_Init+0x4c>)
 8000d6c:	f002 f9fc 	bl	8003168 <HAL_UART_Init>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d76:	f000 f943 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000244 	.word	0x20000244
 8000d84:	40004400 	.word	0x40004400

08000d88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d8e:	4b1a      	ldr	r3, [pc, #104]	; (8000df8 <MX_GPIO_Init+0x70>)
 8000d90:	699b      	ldr	r3, [r3, #24]
 8000d92:	4a19      	ldr	r2, [pc, #100]	; (8000df8 <MX_GPIO_Init+0x70>)
 8000d94:	f043 0310 	orr.w	r3, r3, #16
 8000d98:	6193      	str	r3, [r2, #24]
 8000d9a:	4b17      	ldr	r3, [pc, #92]	; (8000df8 <MX_GPIO_Init+0x70>)
 8000d9c:	699b      	ldr	r3, [r3, #24]
 8000d9e:	f003 0310 	and.w	r3, r3, #16
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000da6:	4b14      	ldr	r3, [pc, #80]	; (8000df8 <MX_GPIO_Init+0x70>)
 8000da8:	699b      	ldr	r3, [r3, #24]
 8000daa:	4a13      	ldr	r2, [pc, #76]	; (8000df8 <MX_GPIO_Init+0x70>)
 8000dac:	f043 0320 	orr.w	r3, r3, #32
 8000db0:	6193      	str	r3, [r2, #24]
 8000db2:	4b11      	ldr	r3, [pc, #68]	; (8000df8 <MX_GPIO_Init+0x70>)
 8000db4:	699b      	ldr	r3, [r3, #24]
 8000db6:	f003 0320 	and.w	r3, r3, #32
 8000dba:	60bb      	str	r3, [r7, #8]
 8000dbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dbe:	4b0e      	ldr	r3, [pc, #56]	; (8000df8 <MX_GPIO_Init+0x70>)
 8000dc0:	699b      	ldr	r3, [r3, #24]
 8000dc2:	4a0d      	ldr	r2, [pc, #52]	; (8000df8 <MX_GPIO_Init+0x70>)
 8000dc4:	f043 0304 	orr.w	r3, r3, #4
 8000dc8:	6193      	str	r3, [r2, #24]
 8000dca:	4b0b      	ldr	r3, [pc, #44]	; (8000df8 <MX_GPIO_Init+0x70>)
 8000dcc:	699b      	ldr	r3, [r3, #24]
 8000dce:	f003 0304 	and.w	r3, r3, #4
 8000dd2:	607b      	str	r3, [r7, #4]
 8000dd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd6:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <MX_GPIO_Init+0x70>)
 8000dd8:	699b      	ldr	r3, [r3, #24]
 8000dda:	4a07      	ldr	r2, [pc, #28]	; (8000df8 <MX_GPIO_Init+0x70>)
 8000ddc:	f043 0308 	orr.w	r3, r3, #8
 8000de0:	6193      	str	r3, [r2, #24]
 8000de2:	4b05      	ldr	r3, [pc, #20]	; (8000df8 <MX_GPIO_Init+0x70>)
 8000de4:	699b      	ldr	r3, [r3, #24]
 8000de6:	f003 0308 	and.w	r3, r3, #8
 8000dea:	603b      	str	r3, [r7, #0]
 8000dec:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dee:	bf00      	nop
 8000df0:	3714      	adds	r7, #20
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bc80      	pop	{r7}
 8000df6:	4770      	bx	lr
 8000df8:	40021000 	.word	0x40021000

08000dfc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a1c      	ldr	r2, [pc, #112]	; (8000e7c <HAL_UART_RxCpltCallback+0x80>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d131      	bne.n	8000e72 <HAL_UART_RxCpltCallback+0x76>
        char receivedChar = rxBuffer[rxIndex]; // Store the received character
 8000e0e:	4b1c      	ldr	r3, [pc, #112]	; (8000e80 <HAL_UART_RxCpltCallback+0x84>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	461a      	mov	r2, r3
 8000e16:	4b1b      	ldr	r3, [pc, #108]	; (8000e84 <HAL_UART_RxCpltCallback+0x88>)
 8000e18:	5c9b      	ldrb	r3, [r3, r2]
 8000e1a:	73fb      	strb	r3, [r7, #15]

        if (receivedChar == '\n') {
 8000e1c:	7bfb      	ldrb	r3, [r7, #15]
 8000e1e:	2b0a      	cmp	r3, #10
 8000e20:	d10d      	bne.n	8000e3e <HAL_UART_RxCpltCallback+0x42>
            // Message delimiter detected, null-terminate the string
            rxBuffer[rxIndex] = '\0';
 8000e22:	4b17      	ldr	r3, [pc, #92]	; (8000e80 <HAL_UART_RxCpltCallback+0x84>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	461a      	mov	r2, r3
 8000e2a:	4b16      	ldr	r3, [pc, #88]	; (8000e84 <HAL_UART_RxCpltCallback+0x88>)
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	5499      	strb	r1, [r3, r2]
            messageReady = 1; // Set flag to process the message
 8000e30:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <HAL_UART_RxCpltCallback+0x8c>)
 8000e32:	2201      	movs	r2, #1
 8000e34:	701a      	strb	r2, [r3, #0]
            rxIndex = 0;      // Reset buffer index for the next message
 8000e36:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <HAL_UART_RxCpltCallback+0x84>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	701a      	strb	r2, [r3, #0]
 8000e3c:	e00e      	b.n	8000e5c <HAL_UART_RxCpltCallback+0x60>
        }
        else {
            // Add character to the buffer
            rxIndex++;
 8000e3e:	4b10      	ldr	r3, [pc, #64]	; (8000e80 <HAL_UART_RxCpltCallback+0x84>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	3301      	adds	r3, #1
 8000e46:	b2da      	uxtb	r2, r3
 8000e48:	4b0d      	ldr	r3, [pc, #52]	; (8000e80 <HAL_UART_RxCpltCallback+0x84>)
 8000e4a:	701a      	strb	r2, [r3, #0]

            // Handle buffer overflow
            if (rxIndex >= 50) {
 8000e4c:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <HAL_UART_RxCpltCallback+0x84>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	2b31      	cmp	r3, #49	; 0x31
 8000e54:	d902      	bls.n	8000e5c <HAL_UART_RxCpltCallback+0x60>
                rxIndex = 0; // Reset the index to prevent overflow
 8000e56:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <HAL_UART_RxCpltCallback+0x84>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	701a      	strb	r2, [r3, #0]
            }
        }

        // Re-enable interrupt to receive the next character
        HAL_UART_Receive_IT(&huart2, (uint8_t *)&rxBuffer[rxIndex], 1);
 8000e5c:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <HAL_UART_RxCpltCallback+0x84>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	461a      	mov	r2, r3
 8000e64:	4b07      	ldr	r3, [pc, #28]	; (8000e84 <HAL_UART_RxCpltCallback+0x88>)
 8000e66:	4413      	add	r3, r2
 8000e68:	2201      	movs	r2, #1
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4807      	ldr	r0, [pc, #28]	; (8000e8c <HAL_UART_RxCpltCallback+0x90>)
 8000e6e:	f002 f9cb 	bl	8003208 <HAL_UART_Receive_IT>
    }
}
 8000e72:	bf00      	nop
 8000e74:	3710      	adds	r7, #16
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40004400 	.word	0x40004400
 8000e80:	200002d2 	.word	0x200002d2
 8000e84:	200002a0 	.word	0x200002a0
 8000e88:	200002d3 	.word	0x200002d3
 8000e8c:	20000244 	.word	0x20000244

08000e90 <ProcessReceivedData>:

void ProcessReceivedData(char *data) {
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af02      	add	r7, sp, #8
 8000e96:	6078      	str	r0, [r7, #4]
    if (sscanf(data, "%f %f %f", &pitch, &roll, &yaw) == 3) {
 8000e98:	4b4b      	ldr	r3, [pc, #300]	; (8000fc8 <ProcessReceivedData+0x138>)
 8000e9a:	9300      	str	r3, [sp, #0]
 8000e9c:	4b4b      	ldr	r3, [pc, #300]	; (8000fcc <ProcessReceivedData+0x13c>)
 8000e9e:	4a4c      	ldr	r2, [pc, #304]	; (8000fd0 <ProcessReceivedData+0x140>)
 8000ea0:	494c      	ldr	r1, [pc, #304]	; (8000fd4 <ProcessReceivedData+0x144>)
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f003 fe36 	bl	8004b14 <siscanf>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b03      	cmp	r3, #3
 8000eac:	d14d      	bne.n	8000f4a <ProcessReceivedData+0xba>
    	sprintf((char *)display_buf, "pitch: %.2f", pitch);
 8000eae:	4b48      	ldr	r3, [pc, #288]	; (8000fd0 <ProcessReceivedData+0x140>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f7ff fac2 	bl	800043c <__aeabi_f2d>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	460b      	mov	r3, r1
 8000ebc:	4946      	ldr	r1, [pc, #280]	; (8000fd8 <ProcessReceivedData+0x148>)
 8000ebe:	4847      	ldr	r0, [pc, #284]	; (8000fdc <ProcessReceivedData+0x14c>)
 8000ec0:	f003 fe08 	bl	8004ad4 <siprintf>
    	ssd1306_SetCursor(0, 0);
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	2000      	movs	r0, #0
 8000ec8:	f000 fa8c 	bl	80013e4 <ssd1306_SetCursor>
    	ssd1306_WriteString(display_buf, Font_7x10, White);
 8000ecc:	4b44      	ldr	r3, [pc, #272]	; (8000fe0 <ProcessReceivedData+0x150>)
 8000ece:	2201      	movs	r2, #1
 8000ed0:	9200      	str	r2, [sp, #0]
 8000ed2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ed4:	4841      	ldr	r0, [pc, #260]	; (8000fdc <ProcessReceivedData+0x14c>)
 8000ed6:	f000 fa5f 	bl	8001398 <ssd1306_WriteString>

    	sprintf((char *)display_buf, "roll: %.2f", roll);
 8000eda:	4b3c      	ldr	r3, [pc, #240]	; (8000fcc <ProcessReceivedData+0x13c>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff faac 	bl	800043c <__aeabi_f2d>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	460b      	mov	r3, r1
 8000ee8:	493e      	ldr	r1, [pc, #248]	; (8000fe4 <ProcessReceivedData+0x154>)
 8000eea:	483c      	ldr	r0, [pc, #240]	; (8000fdc <ProcessReceivedData+0x14c>)
 8000eec:	f003 fdf2 	bl	8004ad4 <siprintf>
    	ssd1306_SetCursor(0, 10);
 8000ef0:	210a      	movs	r1, #10
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	f000 fa76 	bl	80013e4 <ssd1306_SetCursor>
    	ssd1306_WriteString(display_buf, Font_7x10, White);
 8000ef8:	4b39      	ldr	r3, [pc, #228]	; (8000fe0 <ProcessReceivedData+0x150>)
 8000efa:	2201      	movs	r2, #1
 8000efc:	9200      	str	r2, [sp, #0]
 8000efe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f00:	4836      	ldr	r0, [pc, #216]	; (8000fdc <ProcessReceivedData+0x14c>)
 8000f02:	f000 fa49 	bl	8001398 <ssd1306_WriteString>

    	sprintf((char *)display_buf, "yaw: %.2f", yaw);
 8000f06:	4b30      	ldr	r3, [pc, #192]	; (8000fc8 <ProcessReceivedData+0x138>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff fa96 	bl	800043c <__aeabi_f2d>
 8000f10:	4602      	mov	r2, r0
 8000f12:	460b      	mov	r3, r1
 8000f14:	4934      	ldr	r1, [pc, #208]	; (8000fe8 <ProcessReceivedData+0x158>)
 8000f16:	4831      	ldr	r0, [pc, #196]	; (8000fdc <ProcessReceivedData+0x14c>)
 8000f18:	f003 fddc 	bl	8004ad4 <siprintf>
    	ssd1306_SetCursor(0, 20);
 8000f1c:	2114      	movs	r1, #20
 8000f1e:	2000      	movs	r0, #0
 8000f20:	f000 fa60 	bl	80013e4 <ssd1306_SetCursor>
    	ssd1306_WriteString(display_buf, Font_7x10, White);
 8000f24:	4b2e      	ldr	r3, [pc, #184]	; (8000fe0 <ProcessReceivedData+0x150>)
 8000f26:	2201      	movs	r2, #1
 8000f28:	9200      	str	r2, [sp, #0]
 8000f2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f2c:	482b      	ldr	r0, [pc, #172]	; (8000fdc <ProcessReceivedData+0x14c>)
 8000f2e:	f000 fa33 	bl	8001398 <ssd1306_WriteString>

    	ssd1306_SetCursor(0, 40);
 8000f32:	2128      	movs	r1, #40	; 0x28
 8000f34:	2000      	movs	r0, #0
 8000f36:	f000 fa55 	bl	80013e4 <ssd1306_SetCursor>
    	ssd1306_WriteString(data, Font_7x10, White);
 8000f3a:	4b29      	ldr	r3, [pc, #164]	; (8000fe0 <ProcessReceivedData+0x150>)
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	9200      	str	r2, [sp, #0]
 8000f40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f000 fa28 	bl	8001398 <ssd1306_WriteString>
 8000f48:	e01f      	b.n	8000f8a <ProcessReceivedData+0xfa>
    }
    else if(strcmp(data, "a") == 0){
 8000f4a:	4928      	ldr	r1, [pc, #160]	; (8000fec <ProcessReceivedData+0x15c>)
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f7ff f8ff 	bl	8000150 <strcmp>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d10a      	bne.n	8000f6e <ProcessReceivedData+0xde>
    	open = !open;
 8000f58:	4b25      	ldr	r3, [pc, #148]	; (8000ff0 <ProcessReceivedData+0x160>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	bf0c      	ite	eq
 8000f60:	2301      	moveq	r3, #1
 8000f62:	2300      	movne	r3, #0
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	461a      	mov	r2, r3
 8000f68:	4b21      	ldr	r3, [pc, #132]	; (8000ff0 <ProcessReceivedData+0x160>)
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	e00d      	b.n	8000f8a <ProcessReceivedData+0xfa>
    }
    else {
        // Handle invalid data (optional)
    	ssd1306_Fill(Black);
 8000f6e:	2000      	movs	r0, #0
 8000f70:	f000 f8ee 	bl	8001150 <ssd1306_Fill>
    	ssd1306_SetCursor(0, 0);
 8000f74:	2100      	movs	r1, #0
 8000f76:	2000      	movs	r0, #0
 8000f78:	f000 fa34 	bl	80013e4 <ssd1306_SetCursor>
    	ssd1306_WriteString( "Failed", Font_7x10, White);
 8000f7c:	4b18      	ldr	r3, [pc, #96]	; (8000fe0 <ProcessReceivedData+0x150>)
 8000f7e:	2201      	movs	r2, #1
 8000f80:	9200      	str	r2, [sp, #0]
 8000f82:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f84:	481b      	ldr	r0, [pc, #108]	; (8000ff4 <ProcessReceivedData+0x164>)
 8000f86:	f000 fa07 	bl	8001398 <ssd1306_WriteString>
    }

    if(open == 1){
 8000f8a:	4b19      	ldr	r3, [pc, #100]	; (8000ff0 <ProcessReceivedData+0x160>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d10b      	bne.n	8000faa <ProcessReceivedData+0x11a>
    	ssd1306_SetCursor(0, 50);
 8000f92:	2132      	movs	r1, #50	; 0x32
 8000f94:	2000      	movs	r0, #0
 8000f96:	f000 fa25 	bl	80013e4 <ssd1306_SetCursor>
    	ssd1306_WriteString("Open", Font_7x10, White);
 8000f9a:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <ProcessReceivedData+0x150>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	9200      	str	r2, [sp, #0]
 8000fa0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fa2:	4815      	ldr	r0, [pc, #84]	; (8000ff8 <ProcessReceivedData+0x168>)
 8000fa4:	f000 f9f8 	bl	8001398 <ssd1306_WriteString>
    }
    else{
    	ssd1306_SetCursor(0, 50);
    	ssd1306_WriteString("close", Font_7x10, White);
    }
}
 8000fa8:	e00a      	b.n	8000fc0 <ProcessReceivedData+0x130>
    	ssd1306_SetCursor(0, 50);
 8000faa:	2132      	movs	r1, #50	; 0x32
 8000fac:	2000      	movs	r0, #0
 8000fae:	f000 fa19 	bl	80013e4 <ssd1306_SetCursor>
    	ssd1306_WriteString("close", Font_7x10, White);
 8000fb2:	4b0b      	ldr	r3, [pc, #44]	; (8000fe0 <ProcessReceivedData+0x150>)
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	9200      	str	r2, [sp, #0]
 8000fb8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fba:	4810      	ldr	r0, [pc, #64]	; (8000ffc <ProcessReceivedData+0x16c>)
 8000fbc:	f000 f9ec 	bl	8001398 <ssd1306_WriteString>
}
 8000fc0:	bf00      	nop
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	200002dc 	.word	0x200002dc
 8000fcc:	200002d8 	.word	0x200002d8
 8000fd0:	200002d4 	.word	0x200002d4
 8000fd4:	08008c60 	.word	0x08008c60
 8000fd8:	08008c6c 	.word	0x08008c6c
 8000fdc:	2000028c 	.word	0x2000028c
 8000fe0:	08009424 	.word	0x08009424
 8000fe4:	08008c78 	.word	0x08008c78
 8000fe8:	08008c84 	.word	0x08008c84
 8000fec:	08008c90 	.word	0x08008c90
 8000ff0:	200002e0 	.word	0x200002e0
 8000ff4:	08008c94 	.word	0x08008c94
 8000ff8:	08008c9c 	.word	0x08008c9c
 8000ffc:	08008ca4 	.word	0x08008ca4

08001000 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001004:	b672      	cpsid	i
}
 8001006:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001008:	e7fe      	b.n	8001008 <Error_Handler+0x8>

0800100a <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800100a:	b480      	push	{r7}
 800100c:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 800100e:	bf00      	nop
 8001010:	46bd      	mov	sp, r7
 8001012:	bc80      	pop	{r7}
 8001014:	4770      	bx	lr
	...

08001018 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af04      	add	r7, sp, #16
 800101e:	4603      	mov	r3, r0
 8001020:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001022:	f04f 33ff 	mov.w	r3, #4294967295
 8001026:	9302      	str	r3, [sp, #8]
 8001028:	2301      	movs	r3, #1
 800102a:	9301      	str	r3, [sp, #4]
 800102c:	1dfb      	adds	r3, r7, #7
 800102e:	9300      	str	r3, [sp, #0]
 8001030:	2301      	movs	r3, #1
 8001032:	2200      	movs	r2, #0
 8001034:	2178      	movs	r1, #120	; 0x78
 8001036:	4803      	ldr	r0, [pc, #12]	; (8001044 <ssd1306_WriteCommand+0x2c>)
 8001038:	f001 f91e 	bl	8002278 <HAL_I2C_Mem_Write>
}
 800103c:	bf00      	nop
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	200001f0 	.word	0x200001f0

08001048 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af04      	add	r7, sp, #16
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	b29b      	uxth	r3, r3
 8001056:	f04f 32ff 	mov.w	r2, #4294967295
 800105a:	9202      	str	r2, [sp, #8]
 800105c:	9301      	str	r3, [sp, #4]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	9300      	str	r3, [sp, #0]
 8001062:	2301      	movs	r3, #1
 8001064:	2240      	movs	r2, #64	; 0x40
 8001066:	2178      	movs	r1, #120	; 0x78
 8001068:	4803      	ldr	r0, [pc, #12]	; (8001078 <ssd1306_WriteData+0x30>)
 800106a:	f001 f905 	bl	8002278 <HAL_I2C_Mem_Write>
}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	200001f0 	.word	0x200001f0

0800107c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001080:	f7ff ffc3 	bl	800100a <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001084:	2064      	movs	r0, #100	; 0x64
 8001086:	f000 fc4b 	bl	8001920 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800108a:	2000      	movs	r0, #0
 800108c:	f000 f9d6 	bl	800143c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001090:	2020      	movs	r0, #32
 8001092:	f7ff ffc1 	bl	8001018 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001096:	2000      	movs	r0, #0
 8001098:	f7ff ffbe 	bl	8001018 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800109c:	20b0      	movs	r0, #176	; 0xb0
 800109e:	f7ff ffbb 	bl	8001018 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80010a2:	20c8      	movs	r0, #200	; 0xc8
 80010a4:	f7ff ffb8 	bl	8001018 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80010a8:	2000      	movs	r0, #0
 80010aa:	f7ff ffb5 	bl	8001018 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80010ae:	2010      	movs	r0, #16
 80010b0:	f7ff ffb2 	bl	8001018 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80010b4:	2040      	movs	r0, #64	; 0x40
 80010b6:	f7ff ffaf 	bl	8001018 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80010ba:	20ff      	movs	r0, #255	; 0xff
 80010bc:	f000 f9aa 	bl	8001414 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80010c0:	20a1      	movs	r0, #161	; 0xa1
 80010c2:	f7ff ffa9 	bl	8001018 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80010c6:	20a6      	movs	r0, #166	; 0xa6
 80010c8:	f7ff ffa6 	bl	8001018 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80010cc:	20a8      	movs	r0, #168	; 0xa8
 80010ce:	f7ff ffa3 	bl	8001018 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80010d2:	203f      	movs	r0, #63	; 0x3f
 80010d4:	f7ff ffa0 	bl	8001018 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80010d8:	20a4      	movs	r0, #164	; 0xa4
 80010da:	f7ff ff9d 	bl	8001018 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80010de:	20d3      	movs	r0, #211	; 0xd3
 80010e0:	f7ff ff9a 	bl	8001018 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80010e4:	2000      	movs	r0, #0
 80010e6:	f7ff ff97 	bl	8001018 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80010ea:	20d5      	movs	r0, #213	; 0xd5
 80010ec:	f7ff ff94 	bl	8001018 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80010f0:	20f0      	movs	r0, #240	; 0xf0
 80010f2:	f7ff ff91 	bl	8001018 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80010f6:	20d9      	movs	r0, #217	; 0xd9
 80010f8:	f7ff ff8e 	bl	8001018 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80010fc:	2022      	movs	r0, #34	; 0x22
 80010fe:	f7ff ff8b 	bl	8001018 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001102:	20da      	movs	r0, #218	; 0xda
 8001104:	f7ff ff88 	bl	8001018 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001108:	2012      	movs	r0, #18
 800110a:	f7ff ff85 	bl	8001018 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800110e:	20db      	movs	r0, #219	; 0xdb
 8001110:	f7ff ff82 	bl	8001018 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001114:	2020      	movs	r0, #32
 8001116:	f7ff ff7f 	bl	8001018 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800111a:	208d      	movs	r0, #141	; 0x8d
 800111c:	f7ff ff7c 	bl	8001018 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001120:	2014      	movs	r0, #20
 8001122:	f7ff ff79 	bl	8001018 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001126:	2001      	movs	r0, #1
 8001128:	f000 f988 	bl	800143c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 800112c:	2000      	movs	r0, #0
 800112e:	f000 f80f 	bl	8001150 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001132:	f000 f825 	bl	8001180 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001136:	4b05      	ldr	r3, [pc, #20]	; (800114c <ssd1306_Init+0xd0>)
 8001138:	2200      	movs	r2, #0
 800113a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800113c:	4b03      	ldr	r3, [pc, #12]	; (800114c <ssd1306_Init+0xd0>)
 800113e:	2200      	movs	r2, #0
 8001140:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001142:	4b02      	ldr	r3, [pc, #8]	; (800114c <ssd1306_Init+0xd0>)
 8001144:	2201      	movs	r2, #1
 8001146:	711a      	strb	r2, [r3, #4]
}
 8001148:	bf00      	nop
 800114a:	bd80      	pop	{r7, pc}
 800114c:	200006e4 	.word	0x200006e4

08001150 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800115a:	79fb      	ldrb	r3, [r7, #7]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d101      	bne.n	8001164 <ssd1306_Fill+0x14>
 8001160:	2300      	movs	r3, #0
 8001162:	e000      	b.n	8001166 <ssd1306_Fill+0x16>
 8001164:	23ff      	movs	r3, #255	; 0xff
 8001166:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800116a:	4619      	mov	r1, r3
 800116c:	4803      	ldr	r0, [pc, #12]	; (800117c <ssd1306_Fill+0x2c>)
 800116e:	f003 fd5a 	bl	8004c26 <memset>
}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	200002e4 	.word	0x200002e4

08001180 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001186:	2300      	movs	r3, #0
 8001188:	71fb      	strb	r3, [r7, #7]
 800118a:	e016      	b.n	80011ba <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	3b50      	subs	r3, #80	; 0x50
 8001190:	b2db      	uxtb	r3, r3
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff ff40 	bl	8001018 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001198:	2000      	movs	r0, #0
 800119a:	f7ff ff3d 	bl	8001018 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800119e:	2010      	movs	r0, #16
 80011a0:	f7ff ff3a 	bl	8001018 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80011a4:	79fb      	ldrb	r3, [r7, #7]
 80011a6:	01db      	lsls	r3, r3, #7
 80011a8:	4a08      	ldr	r2, [pc, #32]	; (80011cc <ssd1306_UpdateScreen+0x4c>)
 80011aa:	4413      	add	r3, r2
 80011ac:	2180      	movs	r1, #128	; 0x80
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff ff4a 	bl	8001048 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	3301      	adds	r3, #1
 80011b8:	71fb      	strb	r3, [r7, #7]
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	2b07      	cmp	r3, #7
 80011be:	d9e5      	bls.n	800118c <ssd1306_UpdateScreen+0xc>
    }
}
 80011c0:	bf00      	nop
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	200002e4 	.word	0x200002e4

080011d0 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	71fb      	strb	r3, [r7, #7]
 80011da:	460b      	mov	r3, r1
 80011dc:	71bb      	strb	r3, [r7, #6]
 80011de:	4613      	mov	r3, r2
 80011e0:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80011e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	db3d      	blt.n	8001266 <ssd1306_DrawPixel+0x96>
 80011ea:	79bb      	ldrb	r3, [r7, #6]
 80011ec:	2b3f      	cmp	r3, #63	; 0x3f
 80011ee:	d83a      	bhi.n	8001266 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80011f0:	797b      	ldrb	r3, [r7, #5]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d11a      	bne.n	800122c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80011f6:	79fa      	ldrb	r2, [r7, #7]
 80011f8:	79bb      	ldrb	r3, [r7, #6]
 80011fa:	08db      	lsrs	r3, r3, #3
 80011fc:	b2d8      	uxtb	r0, r3
 80011fe:	4603      	mov	r3, r0
 8001200:	01db      	lsls	r3, r3, #7
 8001202:	4413      	add	r3, r2
 8001204:	4a1a      	ldr	r2, [pc, #104]	; (8001270 <ssd1306_DrawPixel+0xa0>)
 8001206:	5cd3      	ldrb	r3, [r2, r3]
 8001208:	b25a      	sxtb	r2, r3
 800120a:	79bb      	ldrb	r3, [r7, #6]
 800120c:	f003 0307 	and.w	r3, r3, #7
 8001210:	2101      	movs	r1, #1
 8001212:	fa01 f303 	lsl.w	r3, r1, r3
 8001216:	b25b      	sxtb	r3, r3
 8001218:	4313      	orrs	r3, r2
 800121a:	b259      	sxtb	r1, r3
 800121c:	79fa      	ldrb	r2, [r7, #7]
 800121e:	4603      	mov	r3, r0
 8001220:	01db      	lsls	r3, r3, #7
 8001222:	4413      	add	r3, r2
 8001224:	b2c9      	uxtb	r1, r1
 8001226:	4a12      	ldr	r2, [pc, #72]	; (8001270 <ssd1306_DrawPixel+0xa0>)
 8001228:	54d1      	strb	r1, [r2, r3]
 800122a:	e01d      	b.n	8001268 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800122c:	79fa      	ldrb	r2, [r7, #7]
 800122e:	79bb      	ldrb	r3, [r7, #6]
 8001230:	08db      	lsrs	r3, r3, #3
 8001232:	b2d8      	uxtb	r0, r3
 8001234:	4603      	mov	r3, r0
 8001236:	01db      	lsls	r3, r3, #7
 8001238:	4413      	add	r3, r2
 800123a:	4a0d      	ldr	r2, [pc, #52]	; (8001270 <ssd1306_DrawPixel+0xa0>)
 800123c:	5cd3      	ldrb	r3, [r2, r3]
 800123e:	b25a      	sxtb	r2, r3
 8001240:	79bb      	ldrb	r3, [r7, #6]
 8001242:	f003 0307 	and.w	r3, r3, #7
 8001246:	2101      	movs	r1, #1
 8001248:	fa01 f303 	lsl.w	r3, r1, r3
 800124c:	b25b      	sxtb	r3, r3
 800124e:	43db      	mvns	r3, r3
 8001250:	b25b      	sxtb	r3, r3
 8001252:	4013      	ands	r3, r2
 8001254:	b259      	sxtb	r1, r3
 8001256:	79fa      	ldrb	r2, [r7, #7]
 8001258:	4603      	mov	r3, r0
 800125a:	01db      	lsls	r3, r3, #7
 800125c:	4413      	add	r3, r2
 800125e:	b2c9      	uxtb	r1, r1
 8001260:	4a03      	ldr	r2, [pc, #12]	; (8001270 <ssd1306_DrawPixel+0xa0>)
 8001262:	54d1      	strb	r1, [r2, r3]
 8001264:	e000      	b.n	8001268 <ssd1306_DrawPixel+0x98>
        return;
 8001266:	bf00      	nop
    }
}
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	bc80      	pop	{r7}
 800126e:	4770      	bx	lr
 8001270:	200002e4 	.word	0x200002e4

08001274 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001274:	b590      	push	{r4, r7, lr}
 8001276:	b089      	sub	sp, #36	; 0x24
 8001278:	af00      	add	r7, sp, #0
 800127a:	4604      	mov	r4, r0
 800127c:	4638      	mov	r0, r7
 800127e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001282:	4623      	mov	r3, r4
 8001284:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001286:	7bfb      	ldrb	r3, [r7, #15]
 8001288:	2b1f      	cmp	r3, #31
 800128a:	d902      	bls.n	8001292 <ssd1306_WriteChar+0x1e>
 800128c:	7bfb      	ldrb	r3, [r7, #15]
 800128e:	2b7e      	cmp	r3, #126	; 0x7e
 8001290:	d901      	bls.n	8001296 <ssd1306_WriteChar+0x22>
        return 0;
 8001292:	2300      	movs	r3, #0
 8001294:	e079      	b.n	800138a <ssd1306_WriteChar+0x116>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8001296:	4b3f      	ldr	r3, [pc, #252]	; (8001394 <ssd1306_WriteChar+0x120>)
 8001298:	881b      	ldrh	r3, [r3, #0]
 800129a:	461a      	mov	r2, r3
 800129c:	783b      	ldrb	r3, [r7, #0]
 800129e:	4413      	add	r3, r2
 80012a0:	2b80      	cmp	r3, #128	; 0x80
 80012a2:	dc06      	bgt.n	80012b2 <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 80012a4:	4b3b      	ldr	r3, [pc, #236]	; (8001394 <ssd1306_WriteChar+0x120>)
 80012a6:	885b      	ldrh	r3, [r3, #2]
 80012a8:	461a      	mov	r2, r3
 80012aa:	787b      	ldrb	r3, [r7, #1]
 80012ac:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 80012ae:	2b40      	cmp	r3, #64	; 0x40
 80012b0:	dd01      	ble.n	80012b6 <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	e069      	b.n	800138a <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 80012b6:	2300      	movs	r3, #0
 80012b8:	61fb      	str	r3, [r7, #28]
 80012ba:	e04e      	b.n	800135a <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	7bfb      	ldrb	r3, [r7, #15]
 80012c0:	3b20      	subs	r3, #32
 80012c2:	7879      	ldrb	r1, [r7, #1]
 80012c4:	fb01 f303 	mul.w	r3, r1, r3
 80012c8:	4619      	mov	r1, r3
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	440b      	add	r3, r1
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	4413      	add	r3, r2
 80012d2:	881b      	ldrh	r3, [r3, #0]
 80012d4:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 80012d6:	2300      	movs	r3, #0
 80012d8:	61bb      	str	r3, [r7, #24]
 80012da:	e036      	b.n	800134a <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 80012dc:	697a      	ldr	r2, [r7, #20]
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d013      	beq.n	8001314 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80012ec:	4b29      	ldr	r3, [pc, #164]	; (8001394 <ssd1306_WriteChar+0x120>)
 80012ee:	881b      	ldrh	r3, [r3, #0]
 80012f0:	b2da      	uxtb	r2, r3
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	4413      	add	r3, r2
 80012f8:	b2d8      	uxtb	r0, r3
 80012fa:	4b26      	ldr	r3, [pc, #152]	; (8001394 <ssd1306_WriteChar+0x120>)
 80012fc:	885b      	ldrh	r3, [r3, #2]
 80012fe:	b2da      	uxtb	r2, r3
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	b2db      	uxtb	r3, r3
 8001304:	4413      	add	r3, r2
 8001306:	b2db      	uxtb	r3, r3
 8001308:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800130c:	4619      	mov	r1, r3
 800130e:	f7ff ff5f 	bl	80011d0 <ssd1306_DrawPixel>
 8001312:	e017      	b.n	8001344 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001314:	4b1f      	ldr	r3, [pc, #124]	; (8001394 <ssd1306_WriteChar+0x120>)
 8001316:	881b      	ldrh	r3, [r3, #0]
 8001318:	b2da      	uxtb	r2, r3
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	b2db      	uxtb	r3, r3
 800131e:	4413      	add	r3, r2
 8001320:	b2d8      	uxtb	r0, r3
 8001322:	4b1c      	ldr	r3, [pc, #112]	; (8001394 <ssd1306_WriteChar+0x120>)
 8001324:	885b      	ldrh	r3, [r3, #2]
 8001326:	b2da      	uxtb	r2, r3
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	b2db      	uxtb	r3, r3
 800132c:	4413      	add	r3, r2
 800132e:	b2d9      	uxtb	r1, r3
 8001330:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001334:	2b00      	cmp	r3, #0
 8001336:	bf0c      	ite	eq
 8001338:	2301      	moveq	r3, #1
 800133a:	2300      	movne	r3, #0
 800133c:	b2db      	uxtb	r3, r3
 800133e:	461a      	mov	r2, r3
 8001340:	f7ff ff46 	bl	80011d0 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	3301      	adds	r3, #1
 8001348:	61bb      	str	r3, [r7, #24]
 800134a:	783b      	ldrb	r3, [r7, #0]
 800134c:	461a      	mov	r2, r3
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	4293      	cmp	r3, r2
 8001352:	d3c3      	bcc.n	80012dc <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	3301      	adds	r3, #1
 8001358:	61fb      	str	r3, [r7, #28]
 800135a:	787b      	ldrb	r3, [r7, #1]
 800135c:	461a      	mov	r2, r3
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	4293      	cmp	r3, r2
 8001362:	d3ab      	bcc.n	80012bc <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8001364:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <ssd1306_WriteChar+0x120>)
 8001366:	881a      	ldrh	r2, [r3, #0]
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d006      	beq.n	800137c <ssd1306_WriteChar+0x108>
 800136e:	68b9      	ldr	r1, [r7, #8]
 8001370:	7bfb      	ldrb	r3, [r7, #15]
 8001372:	3b20      	subs	r3, #32
 8001374:	440b      	add	r3, r1
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	b29b      	uxth	r3, r3
 800137a:	e001      	b.n	8001380 <ssd1306_WriteChar+0x10c>
 800137c:	783b      	ldrb	r3, [r7, #0]
 800137e:	b29b      	uxth	r3, r3
 8001380:	4413      	add	r3, r2
 8001382:	b29a      	uxth	r2, r3
 8001384:	4b03      	ldr	r3, [pc, #12]	; (8001394 <ssd1306_WriteChar+0x120>)
 8001386:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001388:	7bfb      	ldrb	r3, [r7, #15]
}
 800138a:	4618      	mov	r0, r3
 800138c:	3724      	adds	r7, #36	; 0x24
 800138e:	46bd      	mov	sp, r7
 8001390:	bd90      	pop	{r4, r7, pc}
 8001392:	bf00      	nop
 8001394:	200006e4 	.word	0x200006e4

08001398 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af02      	add	r7, sp, #8
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	4638      	mov	r0, r7
 80013a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 80013a6:	e013      	b.n	80013d0 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	7818      	ldrb	r0, [r3, #0]
 80013ac:	7e3b      	ldrb	r3, [r7, #24]
 80013ae:	9300      	str	r3, [sp, #0]
 80013b0:	463b      	mov	r3, r7
 80013b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013b4:	f7ff ff5e 	bl	8001274 <ssd1306_WriteChar>
 80013b8:	4603      	mov	r3, r0
 80013ba:	461a      	mov	r2, r3
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d002      	beq.n	80013ca <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	e008      	b.n	80013dc <ssd1306_WriteString+0x44>
        }
        str++;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	3301      	adds	r3, #1
 80013ce:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d1e7      	bne.n	80013a8 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	781b      	ldrb	r3, [r3, #0]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3710      	adds	r7, #16
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	460a      	mov	r2, r1
 80013ee:	71fb      	strb	r3, [r7, #7]
 80013f0:	4613      	mov	r3, r2
 80013f2:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	b29a      	uxth	r2, r3
 80013f8:	4b05      	ldr	r3, [pc, #20]	; (8001410 <ssd1306_SetCursor+0x2c>)
 80013fa:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80013fc:	79bb      	ldrb	r3, [r7, #6]
 80013fe:	b29a      	uxth	r2, r3
 8001400:	4b03      	ldr	r3, [pc, #12]	; (8001410 <ssd1306_SetCursor+0x2c>)
 8001402:	805a      	strh	r2, [r3, #2]
}
 8001404:	bf00      	nop
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	bc80      	pop	{r7}
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	200006e4 	.word	0x200006e4

08001414 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800141e:	2381      	movs	r3, #129	; 0x81
 8001420:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001422:	7bfb      	ldrb	r3, [r7, #15]
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff fdf7 	bl	8001018 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800142a:	79fb      	ldrb	r3, [r7, #7]
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff fdf3 	bl	8001018 <ssd1306_WriteCommand>
}
 8001432:	bf00      	nop
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
	...

0800143c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001446:	79fb      	ldrb	r3, [r7, #7]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d005      	beq.n	8001458 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 800144c:	23af      	movs	r3, #175	; 0xaf
 800144e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001450:	4b08      	ldr	r3, [pc, #32]	; (8001474 <ssd1306_SetDisplayOn+0x38>)
 8001452:	2201      	movs	r2, #1
 8001454:	715a      	strb	r2, [r3, #5]
 8001456:	e004      	b.n	8001462 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001458:	23ae      	movs	r3, #174	; 0xae
 800145a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800145c:	4b05      	ldr	r3, [pc, #20]	; (8001474 <ssd1306_SetDisplayOn+0x38>)
 800145e:	2200      	movs	r2, #0
 8001460:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001462:	7bfb      	ldrb	r3, [r7, #15]
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff fdd7 	bl	8001018 <ssd1306_WriteCommand>
}
 800146a:	bf00      	nop
 800146c:	3710      	adds	r7, #16
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	200006e4 	.word	0x200006e4

08001478 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800147e:	4b15      	ldr	r3, [pc, #84]	; (80014d4 <HAL_MspInit+0x5c>)
 8001480:	699b      	ldr	r3, [r3, #24]
 8001482:	4a14      	ldr	r2, [pc, #80]	; (80014d4 <HAL_MspInit+0x5c>)
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	6193      	str	r3, [r2, #24]
 800148a:	4b12      	ldr	r3, [pc, #72]	; (80014d4 <HAL_MspInit+0x5c>)
 800148c:	699b      	ldr	r3, [r3, #24]
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	60bb      	str	r3, [r7, #8]
 8001494:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001496:	4b0f      	ldr	r3, [pc, #60]	; (80014d4 <HAL_MspInit+0x5c>)
 8001498:	69db      	ldr	r3, [r3, #28]
 800149a:	4a0e      	ldr	r2, [pc, #56]	; (80014d4 <HAL_MspInit+0x5c>)
 800149c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a0:	61d3      	str	r3, [r2, #28]
 80014a2:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <HAL_MspInit+0x5c>)
 80014a4:	69db      	ldr	r3, [r3, #28]
 80014a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014aa:	607b      	str	r3, [r7, #4]
 80014ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80014ae:	4b0a      	ldr	r3, [pc, #40]	; (80014d8 <HAL_MspInit+0x60>)
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	4a04      	ldr	r2, [pc, #16]	; (80014d8 <HAL_MspInit+0x60>)
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ca:	bf00      	nop
 80014cc:	3714      	adds	r7, #20
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bc80      	pop	{r7}
 80014d2:	4770      	bx	lr
 80014d4:	40021000 	.word	0x40021000
 80014d8:	40010000 	.word	0x40010000

080014dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08a      	sub	sp, #40	; 0x28
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e4:	f107 0314 	add.w	r3, r7, #20
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a1d      	ldr	r2, [pc, #116]	; (800156c <HAL_I2C_MspInit+0x90>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d132      	bne.n	8001562 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014fc:	4b1c      	ldr	r3, [pc, #112]	; (8001570 <HAL_I2C_MspInit+0x94>)
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	4a1b      	ldr	r2, [pc, #108]	; (8001570 <HAL_I2C_MspInit+0x94>)
 8001502:	f043 0308 	orr.w	r3, r3, #8
 8001506:	6193      	str	r3, [r2, #24]
 8001508:	4b19      	ldr	r3, [pc, #100]	; (8001570 <HAL_I2C_MspInit+0x94>)
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	f003 0308 	and.w	r3, r3, #8
 8001510:	613b      	str	r3, [r7, #16]
 8001512:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001514:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001518:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800151a:	2312      	movs	r3, #18
 800151c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800151e:	2303      	movs	r3, #3
 8001520:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001522:	f107 0314 	add.w	r3, r7, #20
 8001526:	4619      	mov	r1, r3
 8001528:	4812      	ldr	r0, [pc, #72]	; (8001574 <HAL_I2C_MspInit+0x98>)
 800152a:	f000 fbdd 	bl	8001ce8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800152e:	4b12      	ldr	r3, [pc, #72]	; (8001578 <HAL_I2C_MspInit+0x9c>)
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	627b      	str	r3, [r7, #36]	; 0x24
 8001534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001536:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800153a:	627b      	str	r3, [r7, #36]	; 0x24
 800153c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153e:	f043 0302 	orr.w	r3, r3, #2
 8001542:	627b      	str	r3, [r7, #36]	; 0x24
 8001544:	4a0c      	ldr	r2, [pc, #48]	; (8001578 <HAL_I2C_MspInit+0x9c>)
 8001546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001548:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800154a:	4b09      	ldr	r3, [pc, #36]	; (8001570 <HAL_I2C_MspInit+0x94>)
 800154c:	69db      	ldr	r3, [r3, #28]
 800154e:	4a08      	ldr	r2, [pc, #32]	; (8001570 <HAL_I2C_MspInit+0x94>)
 8001550:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001554:	61d3      	str	r3, [r2, #28]
 8001556:	4b06      	ldr	r3, [pc, #24]	; (8001570 <HAL_I2C_MspInit+0x94>)
 8001558:	69db      	ldr	r3, [r3, #28]
 800155a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001562:	bf00      	nop
 8001564:	3728      	adds	r7, #40	; 0x28
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40005400 	.word	0x40005400
 8001570:	40021000 	.word	0x40021000
 8001574:	40010c00 	.word	0x40010c00
 8001578:	40010000 	.word	0x40010000

0800157c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b088      	sub	sp, #32
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001584:	f107 0310 	add.w	r3, r7, #16
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a1f      	ldr	r2, [pc, #124]	; (8001614 <HAL_UART_MspInit+0x98>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d137      	bne.n	800160c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800159c:	4b1e      	ldr	r3, [pc, #120]	; (8001618 <HAL_UART_MspInit+0x9c>)
 800159e:	69db      	ldr	r3, [r3, #28]
 80015a0:	4a1d      	ldr	r2, [pc, #116]	; (8001618 <HAL_UART_MspInit+0x9c>)
 80015a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015a6:	61d3      	str	r3, [r2, #28]
 80015a8:	4b1b      	ldr	r3, [pc, #108]	; (8001618 <HAL_UART_MspInit+0x9c>)
 80015aa:	69db      	ldr	r3, [r3, #28]
 80015ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b4:	4b18      	ldr	r3, [pc, #96]	; (8001618 <HAL_UART_MspInit+0x9c>)
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	4a17      	ldr	r2, [pc, #92]	; (8001618 <HAL_UART_MspInit+0x9c>)
 80015ba:	f043 0304 	orr.w	r3, r3, #4
 80015be:	6193      	str	r3, [r2, #24]
 80015c0:	4b15      	ldr	r3, [pc, #84]	; (8001618 <HAL_UART_MspInit+0x9c>)
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	f003 0304 	and.w	r3, r3, #4
 80015c8:	60bb      	str	r3, [r7, #8]
 80015ca:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015cc:	2304      	movs	r3, #4
 80015ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d0:	2302      	movs	r3, #2
 80015d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015d4:	2303      	movs	r3, #3
 80015d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d8:	f107 0310 	add.w	r3, r7, #16
 80015dc:	4619      	mov	r1, r3
 80015de:	480f      	ldr	r0, [pc, #60]	; (800161c <HAL_UART_MspInit+0xa0>)
 80015e0:	f000 fb82 	bl	8001ce8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80015e4:	2308      	movs	r3, #8
 80015e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015e8:	2300      	movs	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f0:	f107 0310 	add.w	r3, r7, #16
 80015f4:	4619      	mov	r1, r3
 80015f6:	4809      	ldr	r0, [pc, #36]	; (800161c <HAL_UART_MspInit+0xa0>)
 80015f8:	f000 fb76 	bl	8001ce8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80015fc:	2200      	movs	r2, #0
 80015fe:	2100      	movs	r1, #0
 8001600:	2026      	movs	r0, #38	; 0x26
 8001602:	f000 fa88 	bl	8001b16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001606:	2026      	movs	r0, #38	; 0x26
 8001608:	f000 faa1 	bl	8001b4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800160c:	bf00      	nop
 800160e:	3720      	adds	r7, #32
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	40004400 	.word	0x40004400
 8001618:	40021000 	.word	0x40021000
 800161c:	40010800 	.word	0x40010800

08001620 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001624:	e7fe      	b.n	8001624 <NMI_Handler+0x4>

08001626 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001626:	b480      	push	{r7}
 8001628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800162a:	e7fe      	b.n	800162a <HardFault_Handler+0x4>

0800162c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001630:	e7fe      	b.n	8001630 <MemManage_Handler+0x4>

08001632 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001632:	b480      	push	{r7}
 8001634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001636:	e7fe      	b.n	8001636 <BusFault_Handler+0x4>

08001638 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800163c:	e7fe      	b.n	800163c <UsageFault_Handler+0x4>

0800163e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800163e:	b480      	push	{r7}
 8001640:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	46bd      	mov	sp, r7
 8001646:	bc80      	pop	{r7}
 8001648:	4770      	bx	lr

0800164a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800164a:	b480      	push	{r7}
 800164c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	46bd      	mov	sp, r7
 8001652:	bc80      	pop	{r7}
 8001654:	4770      	bx	lr

08001656 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001656:	b480      	push	{r7}
 8001658:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800165a:	bf00      	nop
 800165c:	46bd      	mov	sp, r7
 800165e:	bc80      	pop	{r7}
 8001660:	4770      	bx	lr

08001662 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001666:	f000 f93f 	bl	80018e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
	...

08001670 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001674:	4802      	ldr	r0, [pc, #8]	; (8001680 <USART2_IRQHandler+0x10>)
 8001676:	f001 fded 	bl	8003254 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	20000244 	.word	0x20000244

08001684 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  return 1;
 8001688:	2301      	movs	r3, #1
}
 800168a:	4618      	mov	r0, r3
 800168c:	46bd      	mov	sp, r7
 800168e:	bc80      	pop	{r7}
 8001690:	4770      	bx	lr

08001692 <_kill>:

int _kill(int pid, int sig)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b082      	sub	sp, #8
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
 800169a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800169c:	f003 fb16 	bl	8004ccc <__errno>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2216      	movs	r2, #22
 80016a4:	601a      	str	r2, [r3, #0]
  return -1;
 80016a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <_exit>:

void _exit (int status)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b082      	sub	sp, #8
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016ba:	f04f 31ff 	mov.w	r1, #4294967295
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7ff ffe7 	bl	8001692 <_kill>
  while (1) {}    /* Make sure we hang here */
 80016c4:	e7fe      	b.n	80016c4 <_exit+0x12>

080016c6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b086      	sub	sp, #24
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	60f8      	str	r0, [r7, #12]
 80016ce:	60b9      	str	r1, [r7, #8]
 80016d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d2:	2300      	movs	r3, #0
 80016d4:	617b      	str	r3, [r7, #20]
 80016d6:	e00a      	b.n	80016ee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016d8:	f3af 8000 	nop.w
 80016dc:	4601      	mov	r1, r0
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	1c5a      	adds	r2, r3, #1
 80016e2:	60ba      	str	r2, [r7, #8]
 80016e4:	b2ca      	uxtb	r2, r1
 80016e6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	3301      	adds	r3, #1
 80016ec:	617b      	str	r3, [r7, #20]
 80016ee:	697a      	ldr	r2, [r7, #20]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	dbf0      	blt.n	80016d8 <_read+0x12>
  }

  return len;
 80016f6:	687b      	ldr	r3, [r7, #4]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3718      	adds	r7, #24
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}

08001700 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af00      	add	r7, sp, #0
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	60b9      	str	r1, [r7, #8]
 800170a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800170c:	2300      	movs	r3, #0
 800170e:	617b      	str	r3, [r7, #20]
 8001710:	e009      	b.n	8001726 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	1c5a      	adds	r2, r3, #1
 8001716:	60ba      	str	r2, [r7, #8]
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	4618      	mov	r0, r3
 800171c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	3301      	adds	r3, #1
 8001724:	617b      	str	r3, [r7, #20]
 8001726:	697a      	ldr	r2, [r7, #20]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	429a      	cmp	r2, r3
 800172c:	dbf1      	blt.n	8001712 <_write+0x12>
  }
  return len;
 800172e:	687b      	ldr	r3, [r7, #4]
}
 8001730:	4618      	mov	r0, r3
 8001732:	3718      	adds	r7, #24
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <_close>:

int _close(int file)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001740:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001744:	4618      	mov	r0, r3
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	bc80      	pop	{r7}
 800174c:	4770      	bx	lr

0800174e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800174e:	b480      	push	{r7}
 8001750:	b083      	sub	sp, #12
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
 8001756:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800175e:	605a      	str	r2, [r3, #4]
  return 0;
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr

0800176c <_isatty>:

int _isatty(int file)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001774:	2301      	movs	r3, #1
}
 8001776:	4618      	mov	r0, r3
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr

08001780 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	60b9      	str	r1, [r7, #8]
 800178a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3714      	adds	r7, #20
 8001792:	46bd      	mov	sp, r7
 8001794:	bc80      	pop	{r7}
 8001796:	4770      	bx	lr

08001798 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017a0:	4a14      	ldr	r2, [pc, #80]	; (80017f4 <_sbrk+0x5c>)
 80017a2:	4b15      	ldr	r3, [pc, #84]	; (80017f8 <_sbrk+0x60>)
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017ac:	4b13      	ldr	r3, [pc, #76]	; (80017fc <_sbrk+0x64>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d102      	bne.n	80017ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017b4:	4b11      	ldr	r3, [pc, #68]	; (80017fc <_sbrk+0x64>)
 80017b6:	4a12      	ldr	r2, [pc, #72]	; (8001800 <_sbrk+0x68>)
 80017b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017ba:	4b10      	ldr	r3, [pc, #64]	; (80017fc <_sbrk+0x64>)
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4413      	add	r3, r2
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d207      	bcs.n	80017d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017c8:	f003 fa80 	bl	8004ccc <__errno>
 80017cc:	4603      	mov	r3, r0
 80017ce:	220c      	movs	r2, #12
 80017d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017d2:	f04f 33ff 	mov.w	r3, #4294967295
 80017d6:	e009      	b.n	80017ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017d8:	4b08      	ldr	r3, [pc, #32]	; (80017fc <_sbrk+0x64>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017de:	4b07      	ldr	r3, [pc, #28]	; (80017fc <_sbrk+0x64>)
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4413      	add	r3, r2
 80017e6:	4a05      	ldr	r2, [pc, #20]	; (80017fc <_sbrk+0x64>)
 80017e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017ea:	68fb      	ldr	r3, [r7, #12]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3718      	adds	r7, #24
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	20005000 	.word	0x20005000
 80017f8:	00000400 	.word	0x00000400
 80017fc:	200006ec 	.word	0x200006ec
 8001800:	20000840 	.word	0x20000840

08001804 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	bc80      	pop	{r7}
 800180e:	4770      	bx	lr

08001810 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001810:	f7ff fff8 	bl	8001804 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001814:	480b      	ldr	r0, [pc, #44]	; (8001844 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001816:	490c      	ldr	r1, [pc, #48]	; (8001848 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001818:	4a0c      	ldr	r2, [pc, #48]	; (800184c <LoopFillZerobss+0x16>)
  movs r3, #0
 800181a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800181c:	e002      	b.n	8001824 <LoopCopyDataInit>

0800181e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800181e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001820:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001822:	3304      	adds	r3, #4

08001824 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001824:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001826:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001828:	d3f9      	bcc.n	800181e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800182a:	4a09      	ldr	r2, [pc, #36]	; (8001850 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800182c:	4c09      	ldr	r4, [pc, #36]	; (8001854 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800182e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001830:	e001      	b.n	8001836 <LoopFillZerobss>

08001832 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001832:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001834:	3204      	adds	r2, #4

08001836 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001836:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001838:	d3fb      	bcc.n	8001832 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800183a:	f003 fa4d 	bl	8004cd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800183e:	f7ff f9d5 	bl	8000bec <main>
  bx lr
 8001842:	4770      	bx	lr
  ldr r0, =_sdata
 8001844:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001848:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800184c:	080098a4 	.word	0x080098a4
  ldr r2, =_sbss
 8001850:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001854:	20000840 	.word	0x20000840

08001858 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001858:	e7fe      	b.n	8001858 <ADC1_2_IRQHandler>
	...

0800185c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001860:	4b08      	ldr	r3, [pc, #32]	; (8001884 <HAL_Init+0x28>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a07      	ldr	r2, [pc, #28]	; (8001884 <HAL_Init+0x28>)
 8001866:	f043 0310 	orr.w	r3, r3, #16
 800186a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800186c:	2003      	movs	r0, #3
 800186e:	f000 f947 	bl	8001b00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001872:	200f      	movs	r0, #15
 8001874:	f000 f808 	bl	8001888 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001878:	f7ff fdfe 	bl	8001478 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40022000 	.word	0x40022000

08001888 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001890:	4b12      	ldr	r3, [pc, #72]	; (80018dc <HAL_InitTick+0x54>)
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	4b12      	ldr	r3, [pc, #72]	; (80018e0 <HAL_InitTick+0x58>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	4619      	mov	r1, r3
 800189a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800189e:	fbb3 f3f1 	udiv	r3, r3, r1
 80018a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a6:	4618      	mov	r0, r3
 80018a8:	f000 f95f 	bl	8001b6a <HAL_SYSTICK_Config>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e00e      	b.n	80018d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2b0f      	cmp	r3, #15
 80018ba:	d80a      	bhi.n	80018d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018bc:	2200      	movs	r2, #0
 80018be:	6879      	ldr	r1, [r7, #4]
 80018c0:	f04f 30ff 	mov.w	r0, #4294967295
 80018c4:	f000 f927 	bl	8001b16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018c8:	4a06      	ldr	r2, [pc, #24]	; (80018e4 <HAL_InitTick+0x5c>)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ce:	2300      	movs	r3, #0
 80018d0:	e000      	b.n	80018d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	20000000 	.word	0x20000000
 80018e0:	20000008 	.word	0x20000008
 80018e4:	20000004 	.word	0x20000004

080018e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018ec:	4b05      	ldr	r3, [pc, #20]	; (8001904 <HAL_IncTick+0x1c>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	461a      	mov	r2, r3
 80018f2:	4b05      	ldr	r3, [pc, #20]	; (8001908 <HAL_IncTick+0x20>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4413      	add	r3, r2
 80018f8:	4a03      	ldr	r2, [pc, #12]	; (8001908 <HAL_IncTick+0x20>)
 80018fa:	6013      	str	r3, [r2, #0]
}
 80018fc:	bf00      	nop
 80018fe:	46bd      	mov	sp, r7
 8001900:	bc80      	pop	{r7}
 8001902:	4770      	bx	lr
 8001904:	20000008 	.word	0x20000008
 8001908:	200006f0 	.word	0x200006f0

0800190c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  return uwTick;
 8001910:	4b02      	ldr	r3, [pc, #8]	; (800191c <HAL_GetTick+0x10>)
 8001912:	681b      	ldr	r3, [r3, #0]
}
 8001914:	4618      	mov	r0, r3
 8001916:	46bd      	mov	sp, r7
 8001918:	bc80      	pop	{r7}
 800191a:	4770      	bx	lr
 800191c:	200006f0 	.word	0x200006f0

08001920 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001928:	f7ff fff0 	bl	800190c <HAL_GetTick>
 800192c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001938:	d005      	beq.n	8001946 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800193a:	4b0a      	ldr	r3, [pc, #40]	; (8001964 <HAL_Delay+0x44>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	461a      	mov	r2, r3
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	4413      	add	r3, r2
 8001944:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001946:	bf00      	nop
 8001948:	f7ff ffe0 	bl	800190c <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	68fa      	ldr	r2, [r7, #12]
 8001954:	429a      	cmp	r2, r3
 8001956:	d8f7      	bhi.n	8001948 <HAL_Delay+0x28>
  {
  }
}
 8001958:	bf00      	nop
 800195a:	bf00      	nop
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	20000008 	.word	0x20000008

08001968 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001978:	4b0c      	ldr	r3, [pc, #48]	; (80019ac <__NVIC_SetPriorityGrouping+0x44>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800197e:	68ba      	ldr	r2, [r7, #8]
 8001980:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001984:	4013      	ands	r3, r2
 8001986:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001990:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001994:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001998:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800199a:	4a04      	ldr	r2, [pc, #16]	; (80019ac <__NVIC_SetPriorityGrouping+0x44>)
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	60d3      	str	r3, [r2, #12]
}
 80019a0:	bf00      	nop
 80019a2:	3714      	adds	r7, #20
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bc80      	pop	{r7}
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	e000ed00 	.word	0xe000ed00

080019b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019b4:	4b04      	ldr	r3, [pc, #16]	; (80019c8 <__NVIC_GetPriorityGrouping+0x18>)
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	0a1b      	lsrs	r3, r3, #8
 80019ba:	f003 0307 	and.w	r3, r3, #7
}
 80019be:	4618      	mov	r0, r3
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bc80      	pop	{r7}
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	e000ed00 	.word	0xe000ed00

080019cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	db0b      	blt.n	80019f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019de:	79fb      	ldrb	r3, [r7, #7]
 80019e0:	f003 021f 	and.w	r2, r3, #31
 80019e4:	4906      	ldr	r1, [pc, #24]	; (8001a00 <__NVIC_EnableIRQ+0x34>)
 80019e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ea:	095b      	lsrs	r3, r3, #5
 80019ec:	2001      	movs	r0, #1
 80019ee:	fa00 f202 	lsl.w	r2, r0, r2
 80019f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019f6:	bf00      	nop
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bc80      	pop	{r7}
 80019fe:	4770      	bx	lr
 8001a00:	e000e100 	.word	0xe000e100

08001a04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	6039      	str	r1, [r7, #0]
 8001a0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	db0a      	blt.n	8001a2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	b2da      	uxtb	r2, r3
 8001a1c:	490c      	ldr	r1, [pc, #48]	; (8001a50 <__NVIC_SetPriority+0x4c>)
 8001a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a22:	0112      	lsls	r2, r2, #4
 8001a24:	b2d2      	uxtb	r2, r2
 8001a26:	440b      	add	r3, r1
 8001a28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a2c:	e00a      	b.n	8001a44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	b2da      	uxtb	r2, r3
 8001a32:	4908      	ldr	r1, [pc, #32]	; (8001a54 <__NVIC_SetPriority+0x50>)
 8001a34:	79fb      	ldrb	r3, [r7, #7]
 8001a36:	f003 030f 	and.w	r3, r3, #15
 8001a3a:	3b04      	subs	r3, #4
 8001a3c:	0112      	lsls	r2, r2, #4
 8001a3e:	b2d2      	uxtb	r2, r2
 8001a40:	440b      	add	r3, r1
 8001a42:	761a      	strb	r2, [r3, #24]
}
 8001a44:	bf00      	nop
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bc80      	pop	{r7}
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	e000e100 	.word	0xe000e100
 8001a54:	e000ed00 	.word	0xe000ed00

08001a58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b089      	sub	sp, #36	; 0x24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	f1c3 0307 	rsb	r3, r3, #7
 8001a72:	2b04      	cmp	r3, #4
 8001a74:	bf28      	it	cs
 8001a76:	2304      	movcs	r3, #4
 8001a78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	3304      	adds	r3, #4
 8001a7e:	2b06      	cmp	r3, #6
 8001a80:	d902      	bls.n	8001a88 <NVIC_EncodePriority+0x30>
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	3b03      	subs	r3, #3
 8001a86:	e000      	b.n	8001a8a <NVIC_EncodePriority+0x32>
 8001a88:	2300      	movs	r3, #0
 8001a8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	43da      	mvns	r2, r3
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	401a      	ands	r2, r3
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aa0:	f04f 31ff 	mov.w	r1, #4294967295
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aaa:	43d9      	mvns	r1, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab0:	4313      	orrs	r3, r2
         );
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3724      	adds	r7, #36	; 0x24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr

08001abc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001acc:	d301      	bcc.n	8001ad2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e00f      	b.n	8001af2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ad2:	4a0a      	ldr	r2, [pc, #40]	; (8001afc <SysTick_Config+0x40>)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ada:	210f      	movs	r1, #15
 8001adc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae0:	f7ff ff90 	bl	8001a04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ae4:	4b05      	ldr	r3, [pc, #20]	; (8001afc <SysTick_Config+0x40>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aea:	4b04      	ldr	r3, [pc, #16]	; (8001afc <SysTick_Config+0x40>)
 8001aec:	2207      	movs	r2, #7
 8001aee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	e000e010 	.word	0xe000e010

08001b00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f7ff ff2d 	bl	8001968 <__NVIC_SetPriorityGrouping>
}
 8001b0e:	bf00      	nop
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b086      	sub	sp, #24
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	60b9      	str	r1, [r7, #8]
 8001b20:	607a      	str	r2, [r7, #4]
 8001b22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b24:	2300      	movs	r3, #0
 8001b26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b28:	f7ff ff42 	bl	80019b0 <__NVIC_GetPriorityGrouping>
 8001b2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	68b9      	ldr	r1, [r7, #8]
 8001b32:	6978      	ldr	r0, [r7, #20]
 8001b34:	f7ff ff90 	bl	8001a58 <NVIC_EncodePriority>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b3e:	4611      	mov	r1, r2
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff ff5f 	bl	8001a04 <__NVIC_SetPriority>
}
 8001b46:	bf00      	nop
 8001b48:	3718      	adds	r7, #24
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b082      	sub	sp, #8
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	4603      	mov	r3, r0
 8001b56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff ff35 	bl	80019cc <__NVIC_EnableIRQ>
}
 8001b62:	bf00      	nop
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b082      	sub	sp, #8
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f7ff ffa2 	bl	8001abc <SysTick_Config>
 8001b78:	4603      	mov	r3, r0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b82:	b480      	push	{r7}
 8001b84:	b085      	sub	sp, #20
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d008      	beq.n	8001bac <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2204      	movs	r2, #4
 8001b9e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e020      	b.n	8001bee <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f022 020e 	bic.w	r2, r2, #14
 8001bba:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f022 0201 	bic.w	r2, r2, #1
 8001bca:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bd4:	2101      	movs	r1, #1
 8001bd6:	fa01 f202 	lsl.w	r2, r1, r2
 8001bda:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3714      	adds	r7, #20
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bc80      	pop	{r7}
 8001bf6:	4770      	bx	lr

08001bf8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c00:	2300      	movs	r3, #0
 8001c02:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d005      	beq.n	8001c1c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2204      	movs	r2, #4
 8001c14:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	73fb      	strb	r3, [r7, #15]
 8001c1a:	e051      	b.n	8001cc0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f022 020e 	bic.w	r2, r2, #14
 8001c2a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f022 0201 	bic.w	r2, r2, #1
 8001c3a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a22      	ldr	r2, [pc, #136]	; (8001ccc <HAL_DMA_Abort_IT+0xd4>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d029      	beq.n	8001c9a <HAL_DMA_Abort_IT+0xa2>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a21      	ldr	r2, [pc, #132]	; (8001cd0 <HAL_DMA_Abort_IT+0xd8>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d022      	beq.n	8001c96 <HAL_DMA_Abort_IT+0x9e>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a1f      	ldr	r2, [pc, #124]	; (8001cd4 <HAL_DMA_Abort_IT+0xdc>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d01a      	beq.n	8001c90 <HAL_DMA_Abort_IT+0x98>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a1e      	ldr	r2, [pc, #120]	; (8001cd8 <HAL_DMA_Abort_IT+0xe0>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d012      	beq.n	8001c8a <HAL_DMA_Abort_IT+0x92>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a1c      	ldr	r2, [pc, #112]	; (8001cdc <HAL_DMA_Abort_IT+0xe4>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d00a      	beq.n	8001c84 <HAL_DMA_Abort_IT+0x8c>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a1b      	ldr	r2, [pc, #108]	; (8001ce0 <HAL_DMA_Abort_IT+0xe8>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d102      	bne.n	8001c7e <HAL_DMA_Abort_IT+0x86>
 8001c78:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001c7c:	e00e      	b.n	8001c9c <HAL_DMA_Abort_IT+0xa4>
 8001c7e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c82:	e00b      	b.n	8001c9c <HAL_DMA_Abort_IT+0xa4>
 8001c84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c88:	e008      	b.n	8001c9c <HAL_DMA_Abort_IT+0xa4>
 8001c8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c8e:	e005      	b.n	8001c9c <HAL_DMA_Abort_IT+0xa4>
 8001c90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c94:	e002      	b.n	8001c9c <HAL_DMA_Abort_IT+0xa4>
 8001c96:	2310      	movs	r3, #16
 8001c98:	e000      	b.n	8001c9c <HAL_DMA_Abort_IT+0xa4>
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	4a11      	ldr	r2, [pc, #68]	; (8001ce4 <HAL_DMA_Abort_IT+0xec>)
 8001c9e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d003      	beq.n	8001cc0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	4798      	blx	r3
    } 
  }
  return status;
 8001cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3710      	adds	r7, #16
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40020008 	.word	0x40020008
 8001cd0:	4002001c 	.word	0x4002001c
 8001cd4:	40020030 	.word	0x40020030
 8001cd8:	40020044 	.word	0x40020044
 8001cdc:	40020058 	.word	0x40020058
 8001ce0:	4002006c 	.word	0x4002006c
 8001ce4:	40020000 	.word	0x40020000

08001ce8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b08b      	sub	sp, #44	; 0x2c
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cfa:	e169      	b.n	8001fd0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	69fa      	ldr	r2, [r7, #28]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	f040 8158 	bne.w	8001fca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	4a9a      	ldr	r2, [pc, #616]	; (8001f88 <HAL_GPIO_Init+0x2a0>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d05e      	beq.n	8001de2 <HAL_GPIO_Init+0xfa>
 8001d24:	4a98      	ldr	r2, [pc, #608]	; (8001f88 <HAL_GPIO_Init+0x2a0>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d875      	bhi.n	8001e16 <HAL_GPIO_Init+0x12e>
 8001d2a:	4a98      	ldr	r2, [pc, #608]	; (8001f8c <HAL_GPIO_Init+0x2a4>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d058      	beq.n	8001de2 <HAL_GPIO_Init+0xfa>
 8001d30:	4a96      	ldr	r2, [pc, #600]	; (8001f8c <HAL_GPIO_Init+0x2a4>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d86f      	bhi.n	8001e16 <HAL_GPIO_Init+0x12e>
 8001d36:	4a96      	ldr	r2, [pc, #600]	; (8001f90 <HAL_GPIO_Init+0x2a8>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d052      	beq.n	8001de2 <HAL_GPIO_Init+0xfa>
 8001d3c:	4a94      	ldr	r2, [pc, #592]	; (8001f90 <HAL_GPIO_Init+0x2a8>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d869      	bhi.n	8001e16 <HAL_GPIO_Init+0x12e>
 8001d42:	4a94      	ldr	r2, [pc, #592]	; (8001f94 <HAL_GPIO_Init+0x2ac>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d04c      	beq.n	8001de2 <HAL_GPIO_Init+0xfa>
 8001d48:	4a92      	ldr	r2, [pc, #584]	; (8001f94 <HAL_GPIO_Init+0x2ac>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d863      	bhi.n	8001e16 <HAL_GPIO_Init+0x12e>
 8001d4e:	4a92      	ldr	r2, [pc, #584]	; (8001f98 <HAL_GPIO_Init+0x2b0>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d046      	beq.n	8001de2 <HAL_GPIO_Init+0xfa>
 8001d54:	4a90      	ldr	r2, [pc, #576]	; (8001f98 <HAL_GPIO_Init+0x2b0>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d85d      	bhi.n	8001e16 <HAL_GPIO_Init+0x12e>
 8001d5a:	2b12      	cmp	r3, #18
 8001d5c:	d82a      	bhi.n	8001db4 <HAL_GPIO_Init+0xcc>
 8001d5e:	2b12      	cmp	r3, #18
 8001d60:	d859      	bhi.n	8001e16 <HAL_GPIO_Init+0x12e>
 8001d62:	a201      	add	r2, pc, #4	; (adr r2, 8001d68 <HAL_GPIO_Init+0x80>)
 8001d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d68:	08001de3 	.word	0x08001de3
 8001d6c:	08001dbd 	.word	0x08001dbd
 8001d70:	08001dcf 	.word	0x08001dcf
 8001d74:	08001e11 	.word	0x08001e11
 8001d78:	08001e17 	.word	0x08001e17
 8001d7c:	08001e17 	.word	0x08001e17
 8001d80:	08001e17 	.word	0x08001e17
 8001d84:	08001e17 	.word	0x08001e17
 8001d88:	08001e17 	.word	0x08001e17
 8001d8c:	08001e17 	.word	0x08001e17
 8001d90:	08001e17 	.word	0x08001e17
 8001d94:	08001e17 	.word	0x08001e17
 8001d98:	08001e17 	.word	0x08001e17
 8001d9c:	08001e17 	.word	0x08001e17
 8001da0:	08001e17 	.word	0x08001e17
 8001da4:	08001e17 	.word	0x08001e17
 8001da8:	08001e17 	.word	0x08001e17
 8001dac:	08001dc5 	.word	0x08001dc5
 8001db0:	08001dd9 	.word	0x08001dd9
 8001db4:	4a79      	ldr	r2, [pc, #484]	; (8001f9c <HAL_GPIO_Init+0x2b4>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d013      	beq.n	8001de2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001dba:	e02c      	b.n	8001e16 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	623b      	str	r3, [r7, #32]
          break;
 8001dc2:	e029      	b.n	8001e18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	3304      	adds	r3, #4
 8001dca:	623b      	str	r3, [r7, #32]
          break;
 8001dcc:	e024      	b.n	8001e18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	3308      	adds	r3, #8
 8001dd4:	623b      	str	r3, [r7, #32]
          break;
 8001dd6:	e01f      	b.n	8001e18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	330c      	adds	r3, #12
 8001dde:	623b      	str	r3, [r7, #32]
          break;
 8001de0:	e01a      	b.n	8001e18 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d102      	bne.n	8001df0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001dea:	2304      	movs	r3, #4
 8001dec:	623b      	str	r3, [r7, #32]
          break;
 8001dee:	e013      	b.n	8001e18 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d105      	bne.n	8001e04 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001df8:	2308      	movs	r3, #8
 8001dfa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	69fa      	ldr	r2, [r7, #28]
 8001e00:	611a      	str	r2, [r3, #16]
          break;
 8001e02:	e009      	b.n	8001e18 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e04:	2308      	movs	r3, #8
 8001e06:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	69fa      	ldr	r2, [r7, #28]
 8001e0c:	615a      	str	r2, [r3, #20]
          break;
 8001e0e:	e003      	b.n	8001e18 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e10:	2300      	movs	r3, #0
 8001e12:	623b      	str	r3, [r7, #32]
          break;
 8001e14:	e000      	b.n	8001e18 <HAL_GPIO_Init+0x130>
          break;
 8001e16:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	2bff      	cmp	r3, #255	; 0xff
 8001e1c:	d801      	bhi.n	8001e22 <HAL_GPIO_Init+0x13a>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	e001      	b.n	8001e26 <HAL_GPIO_Init+0x13e>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	3304      	adds	r3, #4
 8001e26:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	2bff      	cmp	r3, #255	; 0xff
 8001e2c:	d802      	bhi.n	8001e34 <HAL_GPIO_Init+0x14c>
 8001e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	e002      	b.n	8001e3a <HAL_GPIO_Init+0x152>
 8001e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e36:	3b08      	subs	r3, #8
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	210f      	movs	r1, #15
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	fa01 f303 	lsl.w	r3, r1, r3
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	401a      	ands	r2, r3
 8001e4c:	6a39      	ldr	r1, [r7, #32]
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	fa01 f303 	lsl.w	r3, r1, r3
 8001e54:	431a      	orrs	r2, r3
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f000 80b1 	beq.w	8001fca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e68:	4b4d      	ldr	r3, [pc, #308]	; (8001fa0 <HAL_GPIO_Init+0x2b8>)
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	4a4c      	ldr	r2, [pc, #304]	; (8001fa0 <HAL_GPIO_Init+0x2b8>)
 8001e6e:	f043 0301 	orr.w	r3, r3, #1
 8001e72:	6193      	str	r3, [r2, #24]
 8001e74:	4b4a      	ldr	r3, [pc, #296]	; (8001fa0 <HAL_GPIO_Init+0x2b8>)
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	f003 0301 	and.w	r3, r3, #1
 8001e7c:	60bb      	str	r3, [r7, #8]
 8001e7e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e80:	4a48      	ldr	r2, [pc, #288]	; (8001fa4 <HAL_GPIO_Init+0x2bc>)
 8001e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e84:	089b      	lsrs	r3, r3, #2
 8001e86:	3302      	adds	r3, #2
 8001e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e8c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e90:	f003 0303 	and.w	r3, r3, #3
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	220f      	movs	r2, #15
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4a40      	ldr	r2, [pc, #256]	; (8001fa8 <HAL_GPIO_Init+0x2c0>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d013      	beq.n	8001ed4 <HAL_GPIO_Init+0x1ec>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4a3f      	ldr	r2, [pc, #252]	; (8001fac <HAL_GPIO_Init+0x2c4>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d00d      	beq.n	8001ed0 <HAL_GPIO_Init+0x1e8>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a3e      	ldr	r2, [pc, #248]	; (8001fb0 <HAL_GPIO_Init+0x2c8>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d007      	beq.n	8001ecc <HAL_GPIO_Init+0x1e4>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4a3d      	ldr	r2, [pc, #244]	; (8001fb4 <HAL_GPIO_Init+0x2cc>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d101      	bne.n	8001ec8 <HAL_GPIO_Init+0x1e0>
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e006      	b.n	8001ed6 <HAL_GPIO_Init+0x1ee>
 8001ec8:	2304      	movs	r3, #4
 8001eca:	e004      	b.n	8001ed6 <HAL_GPIO_Init+0x1ee>
 8001ecc:	2302      	movs	r3, #2
 8001ece:	e002      	b.n	8001ed6 <HAL_GPIO_Init+0x1ee>
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e000      	b.n	8001ed6 <HAL_GPIO_Init+0x1ee>
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ed8:	f002 0203 	and.w	r2, r2, #3
 8001edc:	0092      	lsls	r2, r2, #2
 8001ede:	4093      	lsls	r3, r2
 8001ee0:	68fa      	ldr	r2, [r7, #12]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ee6:	492f      	ldr	r1, [pc, #188]	; (8001fa4 <HAL_GPIO_Init+0x2bc>)
 8001ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eea:	089b      	lsrs	r3, r3, #2
 8001eec:	3302      	adds	r3, #2
 8001eee:	68fa      	ldr	r2, [r7, #12]
 8001ef0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d006      	beq.n	8001f0e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f00:	4b2d      	ldr	r3, [pc, #180]	; (8001fb8 <HAL_GPIO_Init+0x2d0>)
 8001f02:	689a      	ldr	r2, [r3, #8]
 8001f04:	492c      	ldr	r1, [pc, #176]	; (8001fb8 <HAL_GPIO_Init+0x2d0>)
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	608b      	str	r3, [r1, #8]
 8001f0c:	e006      	b.n	8001f1c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f0e:	4b2a      	ldr	r3, [pc, #168]	; (8001fb8 <HAL_GPIO_Init+0x2d0>)
 8001f10:	689a      	ldr	r2, [r3, #8]
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	43db      	mvns	r3, r3
 8001f16:	4928      	ldr	r1, [pc, #160]	; (8001fb8 <HAL_GPIO_Init+0x2d0>)
 8001f18:	4013      	ands	r3, r2
 8001f1a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d006      	beq.n	8001f36 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f28:	4b23      	ldr	r3, [pc, #140]	; (8001fb8 <HAL_GPIO_Init+0x2d0>)
 8001f2a:	68da      	ldr	r2, [r3, #12]
 8001f2c:	4922      	ldr	r1, [pc, #136]	; (8001fb8 <HAL_GPIO_Init+0x2d0>)
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	60cb      	str	r3, [r1, #12]
 8001f34:	e006      	b.n	8001f44 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f36:	4b20      	ldr	r3, [pc, #128]	; (8001fb8 <HAL_GPIO_Init+0x2d0>)
 8001f38:	68da      	ldr	r2, [r3, #12]
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	491e      	ldr	r1, [pc, #120]	; (8001fb8 <HAL_GPIO_Init+0x2d0>)
 8001f40:	4013      	ands	r3, r2
 8001f42:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d006      	beq.n	8001f5e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f50:	4b19      	ldr	r3, [pc, #100]	; (8001fb8 <HAL_GPIO_Init+0x2d0>)
 8001f52:	685a      	ldr	r2, [r3, #4]
 8001f54:	4918      	ldr	r1, [pc, #96]	; (8001fb8 <HAL_GPIO_Init+0x2d0>)
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	604b      	str	r3, [r1, #4]
 8001f5c:	e006      	b.n	8001f6c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f5e:	4b16      	ldr	r3, [pc, #88]	; (8001fb8 <HAL_GPIO_Init+0x2d0>)
 8001f60:	685a      	ldr	r2, [r3, #4]
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	43db      	mvns	r3, r3
 8001f66:	4914      	ldr	r1, [pc, #80]	; (8001fb8 <HAL_GPIO_Init+0x2d0>)
 8001f68:	4013      	ands	r3, r2
 8001f6a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d021      	beq.n	8001fbc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f78:	4b0f      	ldr	r3, [pc, #60]	; (8001fb8 <HAL_GPIO_Init+0x2d0>)
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	490e      	ldr	r1, [pc, #56]	; (8001fb8 <HAL_GPIO_Init+0x2d0>)
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	600b      	str	r3, [r1, #0]
 8001f84:	e021      	b.n	8001fca <HAL_GPIO_Init+0x2e2>
 8001f86:	bf00      	nop
 8001f88:	10320000 	.word	0x10320000
 8001f8c:	10310000 	.word	0x10310000
 8001f90:	10220000 	.word	0x10220000
 8001f94:	10210000 	.word	0x10210000
 8001f98:	10120000 	.word	0x10120000
 8001f9c:	10110000 	.word	0x10110000
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	40010000 	.word	0x40010000
 8001fa8:	40010800 	.word	0x40010800
 8001fac:	40010c00 	.word	0x40010c00
 8001fb0:	40011000 	.word	0x40011000
 8001fb4:	40011400 	.word	0x40011400
 8001fb8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001fbc:	4b0b      	ldr	r3, [pc, #44]	; (8001fec <HAL_GPIO_Init+0x304>)
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	43db      	mvns	r3, r3
 8001fc4:	4909      	ldr	r1, [pc, #36]	; (8001fec <HAL_GPIO_Init+0x304>)
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fcc:	3301      	adds	r3, #1
 8001fce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd6:	fa22 f303 	lsr.w	r3, r2, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	f47f ae8e 	bne.w	8001cfc <HAL_GPIO_Init+0x14>
  }
}
 8001fe0:	bf00      	nop
 8001fe2:	bf00      	nop
 8001fe4:	372c      	adds	r7, #44	; 0x2c
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bc80      	pop	{r7}
 8001fea:	4770      	bx	lr
 8001fec:	40010400 	.word	0x40010400

08001ff0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d101      	bne.n	8002002 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e12b      	b.n	800225a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002008:	b2db      	uxtb	r3, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	d106      	bne.n	800201c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f7ff fa60 	bl	80014dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2224      	movs	r2, #36	; 0x24
 8002020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f022 0201 	bic.w	r2, r2, #1
 8002032:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002042:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002052:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002054:	f001 f842 	bl	80030dc <HAL_RCC_GetPCLK1Freq>
 8002058:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	4a81      	ldr	r2, [pc, #516]	; (8002264 <HAL_I2C_Init+0x274>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d807      	bhi.n	8002074 <HAL_I2C_Init+0x84>
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	4a80      	ldr	r2, [pc, #512]	; (8002268 <HAL_I2C_Init+0x278>)
 8002068:	4293      	cmp	r3, r2
 800206a:	bf94      	ite	ls
 800206c:	2301      	movls	r3, #1
 800206e:	2300      	movhi	r3, #0
 8002070:	b2db      	uxtb	r3, r3
 8002072:	e006      	b.n	8002082 <HAL_I2C_Init+0x92>
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	4a7d      	ldr	r2, [pc, #500]	; (800226c <HAL_I2C_Init+0x27c>)
 8002078:	4293      	cmp	r3, r2
 800207a:	bf94      	ite	ls
 800207c:	2301      	movls	r3, #1
 800207e:	2300      	movhi	r3, #0
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e0e7      	b.n	800225a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	4a78      	ldr	r2, [pc, #480]	; (8002270 <HAL_I2C_Init+0x280>)
 800208e:	fba2 2303 	umull	r2, r3, r2, r3
 8002092:	0c9b      	lsrs	r3, r3, #18
 8002094:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	68ba      	ldr	r2, [r7, #8]
 80020a6:	430a      	orrs	r2, r1
 80020a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	6a1b      	ldr	r3, [r3, #32]
 80020b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	4a6a      	ldr	r2, [pc, #424]	; (8002264 <HAL_I2C_Init+0x274>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d802      	bhi.n	80020c4 <HAL_I2C_Init+0xd4>
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	3301      	adds	r3, #1
 80020c2:	e009      	b.n	80020d8 <HAL_I2C_Init+0xe8>
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80020ca:	fb02 f303 	mul.w	r3, r2, r3
 80020ce:	4a69      	ldr	r2, [pc, #420]	; (8002274 <HAL_I2C_Init+0x284>)
 80020d0:	fba2 2303 	umull	r2, r3, r2, r3
 80020d4:	099b      	lsrs	r3, r3, #6
 80020d6:	3301      	adds	r3, #1
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	6812      	ldr	r2, [r2, #0]
 80020dc:	430b      	orrs	r3, r1
 80020de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	69db      	ldr	r3, [r3, #28]
 80020e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80020ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	495c      	ldr	r1, [pc, #368]	; (8002264 <HAL_I2C_Init+0x274>)
 80020f4:	428b      	cmp	r3, r1
 80020f6:	d819      	bhi.n	800212c <HAL_I2C_Init+0x13c>
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	1e59      	subs	r1, r3, #1
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	fbb1 f3f3 	udiv	r3, r1, r3
 8002106:	1c59      	adds	r1, r3, #1
 8002108:	f640 73fc 	movw	r3, #4092	; 0xffc
 800210c:	400b      	ands	r3, r1
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00a      	beq.n	8002128 <HAL_I2C_Init+0x138>
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	1e59      	subs	r1, r3, #1
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002120:	3301      	adds	r3, #1
 8002122:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002126:	e051      	b.n	80021cc <HAL_I2C_Init+0x1dc>
 8002128:	2304      	movs	r3, #4
 800212a:	e04f      	b.n	80021cc <HAL_I2C_Init+0x1dc>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d111      	bne.n	8002158 <HAL_I2C_Init+0x168>
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	1e58      	subs	r0, r3, #1
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6859      	ldr	r1, [r3, #4]
 800213c:	460b      	mov	r3, r1
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	440b      	add	r3, r1
 8002142:	fbb0 f3f3 	udiv	r3, r0, r3
 8002146:	3301      	adds	r3, #1
 8002148:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800214c:	2b00      	cmp	r3, #0
 800214e:	bf0c      	ite	eq
 8002150:	2301      	moveq	r3, #1
 8002152:	2300      	movne	r3, #0
 8002154:	b2db      	uxtb	r3, r3
 8002156:	e012      	b.n	800217e <HAL_I2C_Init+0x18e>
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	1e58      	subs	r0, r3, #1
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6859      	ldr	r1, [r3, #4]
 8002160:	460b      	mov	r3, r1
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	440b      	add	r3, r1
 8002166:	0099      	lsls	r1, r3, #2
 8002168:	440b      	add	r3, r1
 800216a:	fbb0 f3f3 	udiv	r3, r0, r3
 800216e:	3301      	adds	r3, #1
 8002170:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002174:	2b00      	cmp	r3, #0
 8002176:	bf0c      	ite	eq
 8002178:	2301      	moveq	r3, #1
 800217a:	2300      	movne	r3, #0
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <HAL_I2C_Init+0x196>
 8002182:	2301      	movs	r3, #1
 8002184:	e022      	b.n	80021cc <HAL_I2C_Init+0x1dc>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d10e      	bne.n	80021ac <HAL_I2C_Init+0x1bc>
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	1e58      	subs	r0, r3, #1
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6859      	ldr	r1, [r3, #4]
 8002196:	460b      	mov	r3, r1
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	440b      	add	r3, r1
 800219c:	fbb0 f3f3 	udiv	r3, r0, r3
 80021a0:	3301      	adds	r3, #1
 80021a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021aa:	e00f      	b.n	80021cc <HAL_I2C_Init+0x1dc>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	1e58      	subs	r0, r3, #1
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6859      	ldr	r1, [r3, #4]
 80021b4:	460b      	mov	r3, r1
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	440b      	add	r3, r1
 80021ba:	0099      	lsls	r1, r3, #2
 80021bc:	440b      	add	r3, r1
 80021be:	fbb0 f3f3 	udiv	r3, r0, r3
 80021c2:	3301      	adds	r3, #1
 80021c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021cc:	6879      	ldr	r1, [r7, #4]
 80021ce:	6809      	ldr	r1, [r1, #0]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	69da      	ldr	r2, [r3, #28]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a1b      	ldr	r3, [r3, #32]
 80021e6:	431a      	orrs	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	430a      	orrs	r2, r1
 80021ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80021fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	6911      	ldr	r1, [r2, #16]
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	68d2      	ldr	r2, [r2, #12]
 8002206:	4311      	orrs	r1, r2
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	6812      	ldr	r2, [r2, #0]
 800220c:	430b      	orrs	r3, r1
 800220e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	695a      	ldr	r2, [r3, #20]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	431a      	orrs	r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	430a      	orrs	r2, r1
 800222a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f042 0201 	orr.w	r2, r2, #1
 800223a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2220      	movs	r2, #32
 8002246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3710      	adds	r7, #16
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	000186a0 	.word	0x000186a0
 8002268:	001e847f 	.word	0x001e847f
 800226c:	003d08ff 	.word	0x003d08ff
 8002270:	431bde83 	.word	0x431bde83
 8002274:	10624dd3 	.word	0x10624dd3

08002278 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b088      	sub	sp, #32
 800227c:	af02      	add	r7, sp, #8
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	4608      	mov	r0, r1
 8002282:	4611      	mov	r1, r2
 8002284:	461a      	mov	r2, r3
 8002286:	4603      	mov	r3, r0
 8002288:	817b      	strh	r3, [r7, #10]
 800228a:	460b      	mov	r3, r1
 800228c:	813b      	strh	r3, [r7, #8]
 800228e:	4613      	mov	r3, r2
 8002290:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002292:	f7ff fb3b 	bl	800190c <HAL_GetTick>
 8002296:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	2b20      	cmp	r3, #32
 80022a2:	f040 80d9 	bne.w	8002458 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	9300      	str	r3, [sp, #0]
 80022aa:	2319      	movs	r3, #25
 80022ac:	2201      	movs	r2, #1
 80022ae:	496d      	ldr	r1, [pc, #436]	; (8002464 <HAL_I2C_Mem_Write+0x1ec>)
 80022b0:	68f8      	ldr	r0, [r7, #12]
 80022b2:	f000 f971 	bl	8002598 <I2C_WaitOnFlagUntilTimeout>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80022bc:	2302      	movs	r3, #2
 80022be:	e0cc      	b.n	800245a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d101      	bne.n	80022ce <HAL_I2C_Mem_Write+0x56>
 80022ca:	2302      	movs	r3, #2
 80022cc:	e0c5      	b.n	800245a <HAL_I2C_Mem_Write+0x1e2>
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2201      	movs	r2, #1
 80022d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0301 	and.w	r3, r3, #1
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d007      	beq.n	80022f4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f042 0201 	orr.w	r2, r2, #1
 80022f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002302:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2221      	movs	r2, #33	; 0x21
 8002308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2240      	movs	r2, #64	; 0x40
 8002310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2200      	movs	r2, #0
 8002318:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	6a3a      	ldr	r2, [r7, #32]
 800231e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002324:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800232a:	b29a      	uxth	r2, r3
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	4a4d      	ldr	r2, [pc, #308]	; (8002468 <HAL_I2C_Mem_Write+0x1f0>)
 8002334:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002336:	88f8      	ldrh	r0, [r7, #6]
 8002338:	893a      	ldrh	r2, [r7, #8]
 800233a:	8979      	ldrh	r1, [r7, #10]
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	9301      	str	r3, [sp, #4]
 8002340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002342:	9300      	str	r3, [sp, #0]
 8002344:	4603      	mov	r3, r0
 8002346:	68f8      	ldr	r0, [r7, #12]
 8002348:	f000 f890 	bl	800246c <I2C_RequestMemoryWrite>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d052      	beq.n	80023f8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e081      	b.n	800245a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002356:	697a      	ldr	r2, [r7, #20]
 8002358:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800235a:	68f8      	ldr	r0, [r7, #12]
 800235c:	f000 fa36 	bl	80027cc <I2C_WaitOnTXEFlagUntilTimeout>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d00d      	beq.n	8002382 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236a:	2b04      	cmp	r3, #4
 800236c:	d107      	bne.n	800237e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800237c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e06b      	b.n	800245a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002386:	781a      	ldrb	r2, [r3, #0]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002392:	1c5a      	adds	r2, r3, #1
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800239c:	3b01      	subs	r3, #1
 800239e:	b29a      	uxth	r2, r3
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	3b01      	subs	r3, #1
 80023ac:	b29a      	uxth	r2, r3
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	695b      	ldr	r3, [r3, #20]
 80023b8:	f003 0304 	and.w	r3, r3, #4
 80023bc:	2b04      	cmp	r3, #4
 80023be:	d11b      	bne.n	80023f8 <HAL_I2C_Mem_Write+0x180>
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d017      	beq.n	80023f8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023cc:	781a      	ldrb	r2, [r3, #0]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d8:	1c5a      	adds	r2, r3, #1
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e2:	3b01      	subs	r3, #1
 80023e4:	b29a      	uxth	r2, r3
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	3b01      	subs	r3, #1
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d1aa      	bne.n	8002356 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002400:	697a      	ldr	r2, [r7, #20]
 8002402:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002404:	68f8      	ldr	r0, [r7, #12]
 8002406:	f000 fa29 	bl	800285c <I2C_WaitOnBTFFlagUntilTimeout>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d00d      	beq.n	800242c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002414:	2b04      	cmp	r3, #4
 8002416:	d107      	bne.n	8002428 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002426:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e016      	b.n	800245a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800243a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2220      	movs	r2, #32
 8002440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002454:	2300      	movs	r3, #0
 8002456:	e000      	b.n	800245a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002458:	2302      	movs	r3, #2
  }
}
 800245a:	4618      	mov	r0, r3
 800245c:	3718      	adds	r7, #24
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	00100002 	.word	0x00100002
 8002468:	ffff0000 	.word	0xffff0000

0800246c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b088      	sub	sp, #32
 8002470:	af02      	add	r7, sp, #8
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	4608      	mov	r0, r1
 8002476:	4611      	mov	r1, r2
 8002478:	461a      	mov	r2, r3
 800247a:	4603      	mov	r3, r0
 800247c:	817b      	strh	r3, [r7, #10]
 800247e:	460b      	mov	r3, r1
 8002480:	813b      	strh	r3, [r7, #8]
 8002482:	4613      	mov	r3, r2
 8002484:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002494:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002498:	9300      	str	r3, [sp, #0]
 800249a:	6a3b      	ldr	r3, [r7, #32]
 800249c:	2200      	movs	r2, #0
 800249e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80024a2:	68f8      	ldr	r0, [r7, #12]
 80024a4:	f000 f878 	bl	8002598 <I2C_WaitOnFlagUntilTimeout>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d00d      	beq.n	80024ca <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024bc:	d103      	bne.n	80024c6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e05f      	b.n	800258a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80024ca:	897b      	ldrh	r3, [r7, #10]
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	461a      	mov	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80024d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024dc:	6a3a      	ldr	r2, [r7, #32]
 80024de:	492d      	ldr	r1, [pc, #180]	; (8002594 <I2C_RequestMemoryWrite+0x128>)
 80024e0:	68f8      	ldr	r0, [r7, #12]
 80024e2:	f000 f8d3 	bl	800268c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e04c      	b.n	800258a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024f0:	2300      	movs	r3, #0
 80024f2:	617b      	str	r3, [r7, #20]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	695b      	ldr	r3, [r3, #20]
 80024fa:	617b      	str	r3, [r7, #20]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	617b      	str	r3, [r7, #20]
 8002504:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002508:	6a39      	ldr	r1, [r7, #32]
 800250a:	68f8      	ldr	r0, [r7, #12]
 800250c:	f000 f95e 	bl	80027cc <I2C_WaitOnTXEFlagUntilTimeout>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00d      	beq.n	8002532 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251a:	2b04      	cmp	r3, #4
 800251c:	d107      	bne.n	800252e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800252c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e02b      	b.n	800258a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002532:	88fb      	ldrh	r3, [r7, #6]
 8002534:	2b01      	cmp	r3, #1
 8002536:	d105      	bne.n	8002544 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002538:	893b      	ldrh	r3, [r7, #8]
 800253a:	b2da      	uxtb	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	611a      	str	r2, [r3, #16]
 8002542:	e021      	b.n	8002588 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002544:	893b      	ldrh	r3, [r7, #8]
 8002546:	0a1b      	lsrs	r3, r3, #8
 8002548:	b29b      	uxth	r3, r3
 800254a:	b2da      	uxtb	r2, r3
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002554:	6a39      	ldr	r1, [r7, #32]
 8002556:	68f8      	ldr	r0, [r7, #12]
 8002558:	f000 f938 	bl	80027cc <I2C_WaitOnTXEFlagUntilTimeout>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00d      	beq.n	800257e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	2b04      	cmp	r3, #4
 8002568:	d107      	bne.n	800257a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002578:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e005      	b.n	800258a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800257e:	893b      	ldrh	r3, [r7, #8]
 8002580:	b2da      	uxtb	r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3718      	adds	r7, #24
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	00010002 	.word	0x00010002

08002598 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	603b      	str	r3, [r7, #0]
 80025a4:	4613      	mov	r3, r2
 80025a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025a8:	e048      	b.n	800263c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b0:	d044      	beq.n	800263c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025b2:	f7ff f9ab 	bl	800190c <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	683a      	ldr	r2, [r7, #0]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d302      	bcc.n	80025c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d139      	bne.n	800263c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	0c1b      	lsrs	r3, r3, #16
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d10d      	bne.n	80025ee <I2C_WaitOnFlagUntilTimeout+0x56>
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	695b      	ldr	r3, [r3, #20]
 80025d8:	43da      	mvns	r2, r3
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	4013      	ands	r3, r2
 80025de:	b29b      	uxth	r3, r3
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	bf0c      	ite	eq
 80025e4:	2301      	moveq	r3, #1
 80025e6:	2300      	movne	r3, #0
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	461a      	mov	r2, r3
 80025ec:	e00c      	b.n	8002608 <I2C_WaitOnFlagUntilTimeout+0x70>
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	43da      	mvns	r2, r3
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	4013      	ands	r3, r2
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	bf0c      	ite	eq
 8002600:	2301      	moveq	r3, #1
 8002602:	2300      	movne	r3, #0
 8002604:	b2db      	uxtb	r3, r3
 8002606:	461a      	mov	r2, r3
 8002608:	79fb      	ldrb	r3, [r7, #7]
 800260a:	429a      	cmp	r2, r3
 800260c:	d116      	bne.n	800263c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2200      	movs	r2, #0
 8002612:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2220      	movs	r2, #32
 8002618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002628:	f043 0220 	orr.w	r2, r3, #32
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2200      	movs	r2, #0
 8002634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e023      	b.n	8002684 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	0c1b      	lsrs	r3, r3, #16
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b01      	cmp	r3, #1
 8002644:	d10d      	bne.n	8002662 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	695b      	ldr	r3, [r3, #20]
 800264c:	43da      	mvns	r2, r3
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	4013      	ands	r3, r2
 8002652:	b29b      	uxth	r3, r3
 8002654:	2b00      	cmp	r3, #0
 8002656:	bf0c      	ite	eq
 8002658:	2301      	moveq	r3, #1
 800265a:	2300      	movne	r3, #0
 800265c:	b2db      	uxtb	r3, r3
 800265e:	461a      	mov	r2, r3
 8002660:	e00c      	b.n	800267c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	43da      	mvns	r2, r3
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	4013      	ands	r3, r2
 800266e:	b29b      	uxth	r3, r3
 8002670:	2b00      	cmp	r3, #0
 8002672:	bf0c      	ite	eq
 8002674:	2301      	moveq	r3, #1
 8002676:	2300      	movne	r3, #0
 8002678:	b2db      	uxtb	r3, r3
 800267a:	461a      	mov	r2, r3
 800267c:	79fb      	ldrb	r3, [r7, #7]
 800267e:	429a      	cmp	r2, r3
 8002680:	d093      	beq.n	80025aa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002682:	2300      	movs	r3, #0
}
 8002684:	4618      	mov	r0, r3
 8002686:	3710      	adds	r7, #16
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	607a      	str	r2, [r7, #4]
 8002698:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800269a:	e071      	b.n	8002780 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026aa:	d123      	bne.n	80026f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026ba:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80026c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2220      	movs	r2, #32
 80026d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e0:	f043 0204 	orr.w	r2, r3, #4
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e067      	b.n	80027c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026fa:	d041      	beq.n	8002780 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026fc:	f7ff f906 	bl	800190c <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	429a      	cmp	r2, r3
 800270a:	d302      	bcc.n	8002712 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d136      	bne.n	8002780 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	0c1b      	lsrs	r3, r3, #16
 8002716:	b2db      	uxtb	r3, r3
 8002718:	2b01      	cmp	r3, #1
 800271a:	d10c      	bne.n	8002736 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	43da      	mvns	r2, r3
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	4013      	ands	r3, r2
 8002728:	b29b      	uxth	r3, r3
 800272a:	2b00      	cmp	r3, #0
 800272c:	bf14      	ite	ne
 800272e:	2301      	movne	r3, #1
 8002730:	2300      	moveq	r3, #0
 8002732:	b2db      	uxtb	r3, r3
 8002734:	e00b      	b.n	800274e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	43da      	mvns	r2, r3
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	4013      	ands	r3, r2
 8002742:	b29b      	uxth	r3, r3
 8002744:	2b00      	cmp	r3, #0
 8002746:	bf14      	ite	ne
 8002748:	2301      	movne	r3, #1
 800274a:	2300      	moveq	r3, #0
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2b00      	cmp	r3, #0
 8002750:	d016      	beq.n	8002780 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2200      	movs	r2, #0
 8002756:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2220      	movs	r2, #32
 800275c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276c:	f043 0220 	orr.w	r2, r3, #32
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e021      	b.n	80027c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	0c1b      	lsrs	r3, r3, #16
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b01      	cmp	r3, #1
 8002788:	d10c      	bne.n	80027a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	695b      	ldr	r3, [r3, #20]
 8002790:	43da      	mvns	r2, r3
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	4013      	ands	r3, r2
 8002796:	b29b      	uxth	r3, r3
 8002798:	2b00      	cmp	r3, #0
 800279a:	bf14      	ite	ne
 800279c:	2301      	movne	r3, #1
 800279e:	2300      	moveq	r3, #0
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	e00b      	b.n	80027bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	43da      	mvns	r2, r3
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	4013      	ands	r3, r2
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	bf14      	ite	ne
 80027b6:	2301      	movne	r3, #1
 80027b8:	2300      	moveq	r3, #0
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	2b00      	cmp	r3, #0
 80027be:	f47f af6d 	bne.w	800269c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80027c2:	2300      	movs	r3, #0
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3710      	adds	r7, #16
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027d8:	e034      	b.n	8002844 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80027da:	68f8      	ldr	r0, [r7, #12]
 80027dc:	f000 f886 	bl	80028ec <I2C_IsAcknowledgeFailed>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e034      	b.n	8002854 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027f0:	d028      	beq.n	8002844 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027f2:	f7ff f88b 	bl	800190c <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	68ba      	ldr	r2, [r7, #8]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d302      	bcc.n	8002808 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d11d      	bne.n	8002844 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002812:	2b80      	cmp	r3, #128	; 0x80
 8002814:	d016      	beq.n	8002844 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2200      	movs	r2, #0
 800281a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2220      	movs	r2, #32
 8002820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002830:	f043 0220 	orr.w	r2, r3, #32
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2200      	movs	r2, #0
 800283c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e007      	b.n	8002854 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800284e:	2b80      	cmp	r3, #128	; 0x80
 8002850:	d1c3      	bne.n	80027da <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002852:	2300      	movs	r3, #0
}
 8002854:	4618      	mov	r0, r3
 8002856:	3710      	adds	r7, #16
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	60b9      	str	r1, [r7, #8]
 8002866:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002868:	e034      	b.n	80028d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800286a:	68f8      	ldr	r0, [r7, #12]
 800286c:	f000 f83e 	bl	80028ec <I2C_IsAcknowledgeFailed>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e034      	b.n	80028e4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002880:	d028      	beq.n	80028d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002882:	f7ff f843 	bl	800190c <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	68ba      	ldr	r2, [r7, #8]
 800288e:	429a      	cmp	r2, r3
 8002890:	d302      	bcc.n	8002898 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d11d      	bne.n	80028d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	f003 0304 	and.w	r3, r3, #4
 80028a2:	2b04      	cmp	r3, #4
 80028a4:	d016      	beq.n	80028d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2220      	movs	r2, #32
 80028b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c0:	f043 0220 	orr.w	r2, r3, #32
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e007      	b.n	80028e4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	695b      	ldr	r3, [r3, #20]
 80028da:	f003 0304 	and.w	r3, r3, #4
 80028de:	2b04      	cmp	r3, #4
 80028e0:	d1c3      	bne.n	800286a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3710      	adds	r7, #16
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002902:	d11b      	bne.n	800293c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800290c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2220      	movs	r2, #32
 8002918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002928:	f043 0204 	orr.w	r2, r3, #4
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e000      	b.n	800293e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	bc80      	pop	{r7}
 8002946:	4770      	bx	lr

08002948 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b086      	sub	sp, #24
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d101      	bne.n	800295a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e272      	b.n	8002e40 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	2b00      	cmp	r3, #0
 8002964:	f000 8087 	beq.w	8002a76 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002968:	4b92      	ldr	r3, [pc, #584]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f003 030c 	and.w	r3, r3, #12
 8002970:	2b04      	cmp	r3, #4
 8002972:	d00c      	beq.n	800298e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002974:	4b8f      	ldr	r3, [pc, #572]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f003 030c 	and.w	r3, r3, #12
 800297c:	2b08      	cmp	r3, #8
 800297e:	d112      	bne.n	80029a6 <HAL_RCC_OscConfig+0x5e>
 8002980:	4b8c      	ldr	r3, [pc, #560]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800298c:	d10b      	bne.n	80029a6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800298e:	4b89      	ldr	r3, [pc, #548]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d06c      	beq.n	8002a74 <HAL_RCC_OscConfig+0x12c>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d168      	bne.n	8002a74 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e24c      	b.n	8002e40 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029ae:	d106      	bne.n	80029be <HAL_RCC_OscConfig+0x76>
 80029b0:	4b80      	ldr	r3, [pc, #512]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a7f      	ldr	r2, [pc, #508]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 80029b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ba:	6013      	str	r3, [r2, #0]
 80029bc:	e02e      	b.n	8002a1c <HAL_RCC_OscConfig+0xd4>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d10c      	bne.n	80029e0 <HAL_RCC_OscConfig+0x98>
 80029c6:	4b7b      	ldr	r3, [pc, #492]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a7a      	ldr	r2, [pc, #488]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 80029cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029d0:	6013      	str	r3, [r2, #0]
 80029d2:	4b78      	ldr	r3, [pc, #480]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a77      	ldr	r2, [pc, #476]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 80029d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029dc:	6013      	str	r3, [r2, #0]
 80029de:	e01d      	b.n	8002a1c <HAL_RCC_OscConfig+0xd4>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029e8:	d10c      	bne.n	8002a04 <HAL_RCC_OscConfig+0xbc>
 80029ea:	4b72      	ldr	r3, [pc, #456]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a71      	ldr	r2, [pc, #452]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 80029f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029f4:	6013      	str	r3, [r2, #0]
 80029f6:	4b6f      	ldr	r3, [pc, #444]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a6e      	ldr	r2, [pc, #440]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 80029fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a00:	6013      	str	r3, [r2, #0]
 8002a02:	e00b      	b.n	8002a1c <HAL_RCC_OscConfig+0xd4>
 8002a04:	4b6b      	ldr	r3, [pc, #428]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a6a      	ldr	r2, [pc, #424]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 8002a0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a0e:	6013      	str	r3, [r2, #0]
 8002a10:	4b68      	ldr	r3, [pc, #416]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a67      	ldr	r2, [pc, #412]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 8002a16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a1a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d013      	beq.n	8002a4c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a24:	f7fe ff72 	bl	800190c <HAL_GetTick>
 8002a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a2a:	e008      	b.n	8002a3e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a2c:	f7fe ff6e 	bl	800190c <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b64      	cmp	r3, #100	; 0x64
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e200      	b.n	8002e40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a3e:	4b5d      	ldr	r3, [pc, #372]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d0f0      	beq.n	8002a2c <HAL_RCC_OscConfig+0xe4>
 8002a4a:	e014      	b.n	8002a76 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a4c:	f7fe ff5e 	bl	800190c <HAL_GetTick>
 8002a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a52:	e008      	b.n	8002a66 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a54:	f7fe ff5a 	bl	800190c <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b64      	cmp	r3, #100	; 0x64
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e1ec      	b.n	8002e40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a66:	4b53      	ldr	r3, [pc, #332]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1f0      	bne.n	8002a54 <HAL_RCC_OscConfig+0x10c>
 8002a72:	e000      	b.n	8002a76 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d063      	beq.n	8002b4a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a82:	4b4c      	ldr	r3, [pc, #304]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f003 030c 	and.w	r3, r3, #12
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00b      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002a8e:	4b49      	ldr	r3, [pc, #292]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f003 030c 	and.w	r3, r3, #12
 8002a96:	2b08      	cmp	r3, #8
 8002a98:	d11c      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x18c>
 8002a9a:	4b46      	ldr	r3, [pc, #280]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d116      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aa6:	4b43      	ldr	r3, [pc, #268]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d005      	beq.n	8002abe <HAL_RCC_OscConfig+0x176>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d001      	beq.n	8002abe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e1c0      	b.n	8002e40 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002abe:	4b3d      	ldr	r3, [pc, #244]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	4939      	ldr	r1, [pc, #228]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ad2:	e03a      	b.n	8002b4a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	691b      	ldr	r3, [r3, #16]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d020      	beq.n	8002b1e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002adc:	4b36      	ldr	r3, [pc, #216]	; (8002bb8 <HAL_RCC_OscConfig+0x270>)
 8002ade:	2201      	movs	r2, #1
 8002ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae2:	f7fe ff13 	bl	800190c <HAL_GetTick>
 8002ae6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ae8:	e008      	b.n	8002afc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aea:	f7fe ff0f 	bl	800190c <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d901      	bls.n	8002afc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e1a1      	b.n	8002e40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002afc:	4b2d      	ldr	r3, [pc, #180]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d0f0      	beq.n	8002aea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b08:	4b2a      	ldr	r3, [pc, #168]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	695b      	ldr	r3, [r3, #20]
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	4927      	ldr	r1, [pc, #156]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	600b      	str	r3, [r1, #0]
 8002b1c:	e015      	b.n	8002b4a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b1e:	4b26      	ldr	r3, [pc, #152]	; (8002bb8 <HAL_RCC_OscConfig+0x270>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b24:	f7fe fef2 	bl	800190c <HAL_GetTick>
 8002b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b2a:	e008      	b.n	8002b3e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b2c:	f7fe feee 	bl	800190c <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e180      	b.n	8002e40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b3e:	4b1d      	ldr	r3, [pc, #116]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1f0      	bne.n	8002b2c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0308 	and.w	r3, r3, #8
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d03a      	beq.n	8002bcc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d019      	beq.n	8002b92 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b5e:	4b17      	ldr	r3, [pc, #92]	; (8002bbc <HAL_RCC_OscConfig+0x274>)
 8002b60:	2201      	movs	r2, #1
 8002b62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b64:	f7fe fed2 	bl	800190c <HAL_GetTick>
 8002b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b6a:	e008      	b.n	8002b7e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b6c:	f7fe fece 	bl	800190c <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e160      	b.n	8002e40 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b7e:	4b0d      	ldr	r3, [pc, #52]	; (8002bb4 <HAL_RCC_OscConfig+0x26c>)
 8002b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d0f0      	beq.n	8002b6c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002b8a:	2001      	movs	r0, #1
 8002b8c:	f000 face 	bl	800312c <RCC_Delay>
 8002b90:	e01c      	b.n	8002bcc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b92:	4b0a      	ldr	r3, [pc, #40]	; (8002bbc <HAL_RCC_OscConfig+0x274>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b98:	f7fe feb8 	bl	800190c <HAL_GetTick>
 8002b9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b9e:	e00f      	b.n	8002bc0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ba0:	f7fe feb4 	bl	800190c <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d908      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e146      	b.n	8002e40 <HAL_RCC_OscConfig+0x4f8>
 8002bb2:	bf00      	nop
 8002bb4:	40021000 	.word	0x40021000
 8002bb8:	42420000 	.word	0x42420000
 8002bbc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bc0:	4b92      	ldr	r3, [pc, #584]	; (8002e0c <HAL_RCC_OscConfig+0x4c4>)
 8002bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc4:	f003 0302 	and.w	r3, r3, #2
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d1e9      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0304 	and.w	r3, r3, #4
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	f000 80a6 	beq.w	8002d26 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bde:	4b8b      	ldr	r3, [pc, #556]	; (8002e0c <HAL_RCC_OscConfig+0x4c4>)
 8002be0:	69db      	ldr	r3, [r3, #28]
 8002be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d10d      	bne.n	8002c06 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bea:	4b88      	ldr	r3, [pc, #544]	; (8002e0c <HAL_RCC_OscConfig+0x4c4>)
 8002bec:	69db      	ldr	r3, [r3, #28]
 8002bee:	4a87      	ldr	r2, [pc, #540]	; (8002e0c <HAL_RCC_OscConfig+0x4c4>)
 8002bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bf4:	61d3      	str	r3, [r2, #28]
 8002bf6:	4b85      	ldr	r3, [pc, #532]	; (8002e0c <HAL_RCC_OscConfig+0x4c4>)
 8002bf8:	69db      	ldr	r3, [r3, #28]
 8002bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bfe:	60bb      	str	r3, [r7, #8]
 8002c00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c02:	2301      	movs	r3, #1
 8002c04:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c06:	4b82      	ldr	r3, [pc, #520]	; (8002e10 <HAL_RCC_OscConfig+0x4c8>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d118      	bne.n	8002c44 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c12:	4b7f      	ldr	r3, [pc, #508]	; (8002e10 <HAL_RCC_OscConfig+0x4c8>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a7e      	ldr	r2, [pc, #504]	; (8002e10 <HAL_RCC_OscConfig+0x4c8>)
 8002c18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c1e:	f7fe fe75 	bl	800190c <HAL_GetTick>
 8002c22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c24:	e008      	b.n	8002c38 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c26:	f7fe fe71 	bl	800190c <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	2b64      	cmp	r3, #100	; 0x64
 8002c32:	d901      	bls.n	8002c38 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e103      	b.n	8002e40 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c38:	4b75      	ldr	r3, [pc, #468]	; (8002e10 <HAL_RCC_OscConfig+0x4c8>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d0f0      	beq.n	8002c26 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d106      	bne.n	8002c5a <HAL_RCC_OscConfig+0x312>
 8002c4c:	4b6f      	ldr	r3, [pc, #444]	; (8002e0c <HAL_RCC_OscConfig+0x4c4>)
 8002c4e:	6a1b      	ldr	r3, [r3, #32]
 8002c50:	4a6e      	ldr	r2, [pc, #440]	; (8002e0c <HAL_RCC_OscConfig+0x4c4>)
 8002c52:	f043 0301 	orr.w	r3, r3, #1
 8002c56:	6213      	str	r3, [r2, #32]
 8002c58:	e02d      	b.n	8002cb6 <HAL_RCC_OscConfig+0x36e>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d10c      	bne.n	8002c7c <HAL_RCC_OscConfig+0x334>
 8002c62:	4b6a      	ldr	r3, [pc, #424]	; (8002e0c <HAL_RCC_OscConfig+0x4c4>)
 8002c64:	6a1b      	ldr	r3, [r3, #32]
 8002c66:	4a69      	ldr	r2, [pc, #420]	; (8002e0c <HAL_RCC_OscConfig+0x4c4>)
 8002c68:	f023 0301 	bic.w	r3, r3, #1
 8002c6c:	6213      	str	r3, [r2, #32]
 8002c6e:	4b67      	ldr	r3, [pc, #412]	; (8002e0c <HAL_RCC_OscConfig+0x4c4>)
 8002c70:	6a1b      	ldr	r3, [r3, #32]
 8002c72:	4a66      	ldr	r2, [pc, #408]	; (8002e0c <HAL_RCC_OscConfig+0x4c4>)
 8002c74:	f023 0304 	bic.w	r3, r3, #4
 8002c78:	6213      	str	r3, [r2, #32]
 8002c7a:	e01c      	b.n	8002cb6 <HAL_RCC_OscConfig+0x36e>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	2b05      	cmp	r3, #5
 8002c82:	d10c      	bne.n	8002c9e <HAL_RCC_OscConfig+0x356>
 8002c84:	4b61      	ldr	r3, [pc, #388]	; (8002e0c <HAL_RCC_OscConfig+0x4c4>)
 8002c86:	6a1b      	ldr	r3, [r3, #32]
 8002c88:	4a60      	ldr	r2, [pc, #384]	; (8002e0c <HAL_RCC_OscConfig+0x4c4>)
 8002c8a:	f043 0304 	orr.w	r3, r3, #4
 8002c8e:	6213      	str	r3, [r2, #32]
 8002c90:	4b5e      	ldr	r3, [pc, #376]	; (8002e0c <HAL_RCC_OscConfig+0x4c4>)
 8002c92:	6a1b      	ldr	r3, [r3, #32]
 8002c94:	4a5d      	ldr	r2, [pc, #372]	; (8002e0c <HAL_RCC_OscConfig+0x4c4>)
 8002c96:	f043 0301 	orr.w	r3, r3, #1
 8002c9a:	6213      	str	r3, [r2, #32]
 8002c9c:	e00b      	b.n	8002cb6 <HAL_RCC_OscConfig+0x36e>
 8002c9e:	4b5b      	ldr	r3, [pc, #364]	; (8002e0c <HAL_RCC_OscConfig+0x4c4>)
 8002ca0:	6a1b      	ldr	r3, [r3, #32]
 8002ca2:	4a5a      	ldr	r2, [pc, #360]	; (8002e0c <HAL_RCC_OscConfig+0x4c4>)
 8002ca4:	f023 0301 	bic.w	r3, r3, #1
 8002ca8:	6213      	str	r3, [r2, #32]
 8002caa:	4b58      	ldr	r3, [pc, #352]	; (8002e0c <HAL_RCC_OscConfig+0x4c4>)
 8002cac:	6a1b      	ldr	r3, [r3, #32]
 8002cae:	4a57      	ldr	r2, [pc, #348]	; (8002e0c <HAL_RCC_OscConfig+0x4c4>)
 8002cb0:	f023 0304 	bic.w	r3, r3, #4
 8002cb4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d015      	beq.n	8002cea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cbe:	f7fe fe25 	bl	800190c <HAL_GetTick>
 8002cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cc4:	e00a      	b.n	8002cdc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cc6:	f7fe fe21 	bl	800190c <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d901      	bls.n	8002cdc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e0b1      	b.n	8002e40 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cdc:	4b4b      	ldr	r3, [pc, #300]	; (8002e0c <HAL_RCC_OscConfig+0x4c4>)
 8002cde:	6a1b      	ldr	r3, [r3, #32]
 8002ce0:	f003 0302 	and.w	r3, r3, #2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d0ee      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x37e>
 8002ce8:	e014      	b.n	8002d14 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cea:	f7fe fe0f 	bl	800190c <HAL_GetTick>
 8002cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cf0:	e00a      	b.n	8002d08 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cf2:	f7fe fe0b 	bl	800190c <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d901      	bls.n	8002d08 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e09b      	b.n	8002e40 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d08:	4b40      	ldr	r3, [pc, #256]	; (8002e0c <HAL_RCC_OscConfig+0x4c4>)
 8002d0a:	6a1b      	ldr	r3, [r3, #32]
 8002d0c:	f003 0302 	and.w	r3, r3, #2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d1ee      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d14:	7dfb      	ldrb	r3, [r7, #23]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d105      	bne.n	8002d26 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d1a:	4b3c      	ldr	r3, [pc, #240]	; (8002e0c <HAL_RCC_OscConfig+0x4c4>)
 8002d1c:	69db      	ldr	r3, [r3, #28]
 8002d1e:	4a3b      	ldr	r2, [pc, #236]	; (8002e0c <HAL_RCC_OscConfig+0x4c4>)
 8002d20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d24:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	69db      	ldr	r3, [r3, #28]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f000 8087 	beq.w	8002e3e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d30:	4b36      	ldr	r3, [pc, #216]	; (8002e0c <HAL_RCC_OscConfig+0x4c4>)
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f003 030c 	and.w	r3, r3, #12
 8002d38:	2b08      	cmp	r3, #8
 8002d3a:	d061      	beq.n	8002e00 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	69db      	ldr	r3, [r3, #28]
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d146      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d44:	4b33      	ldr	r3, [pc, #204]	; (8002e14 <HAL_RCC_OscConfig+0x4cc>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d4a:	f7fe fddf 	bl	800190c <HAL_GetTick>
 8002d4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d50:	e008      	b.n	8002d64 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d52:	f7fe fddb 	bl	800190c <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d901      	bls.n	8002d64 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e06d      	b.n	8002e40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d64:	4b29      	ldr	r3, [pc, #164]	; (8002e0c <HAL_RCC_OscConfig+0x4c4>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d1f0      	bne.n	8002d52 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a1b      	ldr	r3, [r3, #32]
 8002d74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d78:	d108      	bne.n	8002d8c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d7a:	4b24      	ldr	r3, [pc, #144]	; (8002e0c <HAL_RCC_OscConfig+0x4c4>)
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	4921      	ldr	r1, [pc, #132]	; (8002e0c <HAL_RCC_OscConfig+0x4c4>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d8c:	4b1f      	ldr	r3, [pc, #124]	; (8002e0c <HAL_RCC_OscConfig+0x4c4>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a19      	ldr	r1, [r3, #32]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9c:	430b      	orrs	r3, r1
 8002d9e:	491b      	ldr	r1, [pc, #108]	; (8002e0c <HAL_RCC_OscConfig+0x4c4>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002da4:	4b1b      	ldr	r3, [pc, #108]	; (8002e14 <HAL_RCC_OscConfig+0x4cc>)
 8002da6:	2201      	movs	r2, #1
 8002da8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002daa:	f7fe fdaf 	bl	800190c <HAL_GetTick>
 8002dae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002db0:	e008      	b.n	8002dc4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002db2:	f7fe fdab 	bl	800190c <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d901      	bls.n	8002dc4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e03d      	b.n	8002e40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dc4:	4b11      	ldr	r3, [pc, #68]	; (8002e0c <HAL_RCC_OscConfig+0x4c4>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d0f0      	beq.n	8002db2 <HAL_RCC_OscConfig+0x46a>
 8002dd0:	e035      	b.n	8002e3e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dd2:	4b10      	ldr	r3, [pc, #64]	; (8002e14 <HAL_RCC_OscConfig+0x4cc>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd8:	f7fe fd98 	bl	800190c <HAL_GetTick>
 8002ddc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dde:	e008      	b.n	8002df2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002de0:	f7fe fd94 	bl	800190c <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e026      	b.n	8002e40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002df2:	4b06      	ldr	r3, [pc, #24]	; (8002e0c <HAL_RCC_OscConfig+0x4c4>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1f0      	bne.n	8002de0 <HAL_RCC_OscConfig+0x498>
 8002dfe:	e01e      	b.n	8002e3e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	69db      	ldr	r3, [r3, #28]
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d107      	bne.n	8002e18 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e019      	b.n	8002e40 <HAL_RCC_OscConfig+0x4f8>
 8002e0c:	40021000 	.word	0x40021000
 8002e10:	40007000 	.word	0x40007000
 8002e14:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e18:	4b0b      	ldr	r3, [pc, #44]	; (8002e48 <HAL_RCC_OscConfig+0x500>)
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a1b      	ldr	r3, [r3, #32]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d106      	bne.n	8002e3a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d001      	beq.n	8002e3e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e000      	b.n	8002e40 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002e3e:	2300      	movs	r3, #0
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3718      	adds	r7, #24
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	40021000 	.word	0x40021000

08002e4c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d101      	bne.n	8002e60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e0d0      	b.n	8003002 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e60:	4b6a      	ldr	r3, [pc, #424]	; (800300c <HAL_RCC_ClockConfig+0x1c0>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0307 	and.w	r3, r3, #7
 8002e68:	683a      	ldr	r2, [r7, #0]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d910      	bls.n	8002e90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e6e:	4b67      	ldr	r3, [pc, #412]	; (800300c <HAL_RCC_ClockConfig+0x1c0>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f023 0207 	bic.w	r2, r3, #7
 8002e76:	4965      	ldr	r1, [pc, #404]	; (800300c <HAL_RCC_ClockConfig+0x1c0>)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e7e:	4b63      	ldr	r3, [pc, #396]	; (800300c <HAL_RCC_ClockConfig+0x1c0>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0307 	and.w	r3, r3, #7
 8002e86:	683a      	ldr	r2, [r7, #0]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d001      	beq.n	8002e90 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e0b8      	b.n	8003002 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d020      	beq.n	8002ede <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0304 	and.w	r3, r3, #4
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d005      	beq.n	8002eb4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ea8:	4b59      	ldr	r3, [pc, #356]	; (8003010 <HAL_RCC_ClockConfig+0x1c4>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	4a58      	ldr	r2, [pc, #352]	; (8003010 <HAL_RCC_ClockConfig+0x1c4>)
 8002eae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002eb2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0308 	and.w	r3, r3, #8
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d005      	beq.n	8002ecc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ec0:	4b53      	ldr	r3, [pc, #332]	; (8003010 <HAL_RCC_ClockConfig+0x1c4>)
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	4a52      	ldr	r2, [pc, #328]	; (8003010 <HAL_RCC_ClockConfig+0x1c4>)
 8002ec6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002eca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ecc:	4b50      	ldr	r3, [pc, #320]	; (8003010 <HAL_RCC_ClockConfig+0x1c4>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	494d      	ldr	r1, [pc, #308]	; (8003010 <HAL_RCC_ClockConfig+0x1c4>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d040      	beq.n	8002f6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d107      	bne.n	8002f02 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ef2:	4b47      	ldr	r3, [pc, #284]	; (8003010 <HAL_RCC_ClockConfig+0x1c4>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d115      	bne.n	8002f2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e07f      	b.n	8003002 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d107      	bne.n	8002f1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f0a:	4b41      	ldr	r3, [pc, #260]	; (8003010 <HAL_RCC_ClockConfig+0x1c4>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d109      	bne.n	8002f2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e073      	b.n	8003002 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f1a:	4b3d      	ldr	r3, [pc, #244]	; (8003010 <HAL_RCC_ClockConfig+0x1c4>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d101      	bne.n	8002f2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e06b      	b.n	8003002 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f2a:	4b39      	ldr	r3, [pc, #228]	; (8003010 <HAL_RCC_ClockConfig+0x1c4>)
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f023 0203 	bic.w	r2, r3, #3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	4936      	ldr	r1, [pc, #216]	; (8003010 <HAL_RCC_ClockConfig+0x1c4>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f3c:	f7fe fce6 	bl	800190c <HAL_GetTick>
 8002f40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f42:	e00a      	b.n	8002f5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f44:	f7fe fce2 	bl	800190c <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e053      	b.n	8003002 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f5a:	4b2d      	ldr	r3, [pc, #180]	; (8003010 <HAL_RCC_ClockConfig+0x1c4>)
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f003 020c 	and.w	r2, r3, #12
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d1eb      	bne.n	8002f44 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f6c:	4b27      	ldr	r3, [pc, #156]	; (800300c <HAL_RCC_ClockConfig+0x1c0>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0307 	and.w	r3, r3, #7
 8002f74:	683a      	ldr	r2, [r7, #0]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d210      	bcs.n	8002f9c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f7a:	4b24      	ldr	r3, [pc, #144]	; (800300c <HAL_RCC_ClockConfig+0x1c0>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f023 0207 	bic.w	r2, r3, #7
 8002f82:	4922      	ldr	r1, [pc, #136]	; (800300c <HAL_RCC_ClockConfig+0x1c0>)
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f8a:	4b20      	ldr	r3, [pc, #128]	; (800300c <HAL_RCC_ClockConfig+0x1c0>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0307 	and.w	r3, r3, #7
 8002f92:	683a      	ldr	r2, [r7, #0]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d001      	beq.n	8002f9c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e032      	b.n	8003002 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0304 	and.w	r3, r3, #4
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d008      	beq.n	8002fba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fa8:	4b19      	ldr	r3, [pc, #100]	; (8003010 <HAL_RCC_ClockConfig+0x1c4>)
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	4916      	ldr	r1, [pc, #88]	; (8003010 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0308 	and.w	r3, r3, #8
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d009      	beq.n	8002fda <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002fc6:	4b12      	ldr	r3, [pc, #72]	; (8003010 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	00db      	lsls	r3, r3, #3
 8002fd4:	490e      	ldr	r1, [pc, #56]	; (8003010 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002fda:	f000 f821 	bl	8003020 <HAL_RCC_GetSysClockFreq>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	4b0b      	ldr	r3, [pc, #44]	; (8003010 <HAL_RCC_ClockConfig+0x1c4>)
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	091b      	lsrs	r3, r3, #4
 8002fe6:	f003 030f 	and.w	r3, r3, #15
 8002fea:	490a      	ldr	r1, [pc, #40]	; (8003014 <HAL_RCC_ClockConfig+0x1c8>)
 8002fec:	5ccb      	ldrb	r3, [r1, r3]
 8002fee:	fa22 f303 	lsr.w	r3, r2, r3
 8002ff2:	4a09      	ldr	r2, [pc, #36]	; (8003018 <HAL_RCC_ClockConfig+0x1cc>)
 8002ff4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ff6:	4b09      	ldr	r3, [pc, #36]	; (800301c <HAL_RCC_ClockConfig+0x1d0>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7fe fc44 	bl	8001888 <HAL_InitTick>

  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3710      	adds	r7, #16
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	40022000 	.word	0x40022000
 8003010:	40021000 	.word	0x40021000
 8003014:	08009430 	.word	0x08009430
 8003018:	20000000 	.word	0x20000000
 800301c:	20000004 	.word	0x20000004

08003020 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003020:	b480      	push	{r7}
 8003022:	b087      	sub	sp, #28
 8003024:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003026:	2300      	movs	r3, #0
 8003028:	60fb      	str	r3, [r7, #12]
 800302a:	2300      	movs	r3, #0
 800302c:	60bb      	str	r3, [r7, #8]
 800302e:	2300      	movs	r3, #0
 8003030:	617b      	str	r3, [r7, #20]
 8003032:	2300      	movs	r3, #0
 8003034:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003036:	2300      	movs	r3, #0
 8003038:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800303a:	4b1e      	ldr	r3, [pc, #120]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x94>)
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f003 030c 	and.w	r3, r3, #12
 8003046:	2b04      	cmp	r3, #4
 8003048:	d002      	beq.n	8003050 <HAL_RCC_GetSysClockFreq+0x30>
 800304a:	2b08      	cmp	r3, #8
 800304c:	d003      	beq.n	8003056 <HAL_RCC_GetSysClockFreq+0x36>
 800304e:	e027      	b.n	80030a0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003050:	4b19      	ldr	r3, [pc, #100]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003052:	613b      	str	r3, [r7, #16]
      break;
 8003054:	e027      	b.n	80030a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	0c9b      	lsrs	r3, r3, #18
 800305a:	f003 030f 	and.w	r3, r3, #15
 800305e:	4a17      	ldr	r2, [pc, #92]	; (80030bc <HAL_RCC_GetSysClockFreq+0x9c>)
 8003060:	5cd3      	ldrb	r3, [r2, r3]
 8003062:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d010      	beq.n	8003090 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800306e:	4b11      	ldr	r3, [pc, #68]	; (80030b4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	0c5b      	lsrs	r3, r3, #17
 8003074:	f003 0301 	and.w	r3, r3, #1
 8003078:	4a11      	ldr	r2, [pc, #68]	; (80030c0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800307a:	5cd3      	ldrb	r3, [r2, r3]
 800307c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a0d      	ldr	r2, [pc, #52]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003082:	fb03 f202 	mul.w	r2, r3, r2
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	fbb2 f3f3 	udiv	r3, r2, r3
 800308c:	617b      	str	r3, [r7, #20]
 800308e:	e004      	b.n	800309a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4a0c      	ldr	r2, [pc, #48]	; (80030c4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003094:	fb02 f303 	mul.w	r3, r2, r3
 8003098:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	613b      	str	r3, [r7, #16]
      break;
 800309e:	e002      	b.n	80030a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80030a0:	4b05      	ldr	r3, [pc, #20]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x98>)
 80030a2:	613b      	str	r3, [r7, #16]
      break;
 80030a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030a6:	693b      	ldr	r3, [r7, #16]
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	371c      	adds	r7, #28
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bc80      	pop	{r7}
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	40021000 	.word	0x40021000
 80030b8:	007a1200 	.word	0x007a1200
 80030bc:	08009448 	.word	0x08009448
 80030c0:	08009458 	.word	0x08009458
 80030c4:	003d0900 	.word	0x003d0900

080030c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030cc:	4b02      	ldr	r3, [pc, #8]	; (80030d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80030ce:	681b      	ldr	r3, [r3, #0]
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bc80      	pop	{r7}
 80030d6:	4770      	bx	lr
 80030d8:	20000000 	.word	0x20000000

080030dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80030e0:	f7ff fff2 	bl	80030c8 <HAL_RCC_GetHCLKFreq>
 80030e4:	4602      	mov	r2, r0
 80030e6:	4b05      	ldr	r3, [pc, #20]	; (80030fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	0a1b      	lsrs	r3, r3, #8
 80030ec:	f003 0307 	and.w	r3, r3, #7
 80030f0:	4903      	ldr	r1, [pc, #12]	; (8003100 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030f2:	5ccb      	ldrb	r3, [r1, r3]
 80030f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	40021000 	.word	0x40021000
 8003100:	08009440 	.word	0x08009440

08003104 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003108:	f7ff ffde 	bl	80030c8 <HAL_RCC_GetHCLKFreq>
 800310c:	4602      	mov	r2, r0
 800310e:	4b05      	ldr	r3, [pc, #20]	; (8003124 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	0adb      	lsrs	r3, r3, #11
 8003114:	f003 0307 	and.w	r3, r3, #7
 8003118:	4903      	ldr	r1, [pc, #12]	; (8003128 <HAL_RCC_GetPCLK2Freq+0x24>)
 800311a:	5ccb      	ldrb	r3, [r1, r3]
 800311c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003120:	4618      	mov	r0, r3
 8003122:	bd80      	pop	{r7, pc}
 8003124:	40021000 	.word	0x40021000
 8003128:	08009440 	.word	0x08009440

0800312c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800312c:	b480      	push	{r7}
 800312e:	b085      	sub	sp, #20
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003134:	4b0a      	ldr	r3, [pc, #40]	; (8003160 <RCC_Delay+0x34>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a0a      	ldr	r2, [pc, #40]	; (8003164 <RCC_Delay+0x38>)
 800313a:	fba2 2303 	umull	r2, r3, r2, r3
 800313e:	0a5b      	lsrs	r3, r3, #9
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	fb02 f303 	mul.w	r3, r2, r3
 8003146:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003148:	bf00      	nop
  }
  while (Delay --);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	1e5a      	subs	r2, r3, #1
 800314e:	60fa      	str	r2, [r7, #12]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d1f9      	bne.n	8003148 <RCC_Delay+0x1c>
}
 8003154:	bf00      	nop
 8003156:	bf00      	nop
 8003158:	3714      	adds	r7, #20
 800315a:	46bd      	mov	sp, r7
 800315c:	bc80      	pop	{r7}
 800315e:	4770      	bx	lr
 8003160:	20000000 	.word	0x20000000
 8003164:	10624dd3 	.word	0x10624dd3

08003168 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d101      	bne.n	800317a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e042      	b.n	8003200 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003180:	b2db      	uxtb	r3, r3
 8003182:	2b00      	cmp	r3, #0
 8003184:	d106      	bne.n	8003194 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f7fe f9f4 	bl	800157c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2224      	movs	r2, #36	; 0x24
 8003198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68da      	ldr	r2, [r3, #12]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f000 fcd5 	bl	8003b5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	691a      	ldr	r2, [r3, #16]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	695a      	ldr	r2, [r3, #20]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68da      	ldr	r2, [r3, #12]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2220      	movs	r2, #32
 80031ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2220      	movs	r2, #32
 80031f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80031fe:	2300      	movs	r3, #0
}
 8003200:	4618      	mov	r0, r3
 8003202:	3708      	adds	r7, #8
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	4613      	mov	r3, r2
 8003214:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b20      	cmp	r3, #32
 8003220:	d112      	bne.n	8003248 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d002      	beq.n	800322e <HAL_UART_Receive_IT+0x26>
 8003228:	88fb      	ldrh	r3, [r7, #6]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e00b      	b.n	800324a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2200      	movs	r2, #0
 8003236:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003238:	88fb      	ldrh	r3, [r7, #6]
 800323a:	461a      	mov	r2, r3
 800323c:	68b9      	ldr	r1, [r7, #8]
 800323e:	68f8      	ldr	r0, [r7, #12]
 8003240:	f000 fab7 	bl	80037b2 <UART_Start_Receive_IT>
 8003244:	4603      	mov	r3, r0
 8003246:	e000      	b.n	800324a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003248:	2302      	movs	r3, #2
  }
}
 800324a:	4618      	mov	r0, r3
 800324c:	3710      	adds	r7, #16
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
	...

08003254 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b0ba      	sub	sp, #232	; 0xe8
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800327a:	2300      	movs	r3, #0
 800327c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003280:	2300      	movs	r3, #0
 8003282:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800328a:	f003 030f 	and.w	r3, r3, #15
 800328e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003292:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003296:	2b00      	cmp	r3, #0
 8003298:	d10f      	bne.n	80032ba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800329a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800329e:	f003 0320 	and.w	r3, r3, #32
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d009      	beq.n	80032ba <HAL_UART_IRQHandler+0x66>
 80032a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032aa:	f003 0320 	and.w	r3, r3, #32
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d003      	beq.n	80032ba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f000 fb93 	bl	80039de <UART_Receive_IT>
      return;
 80032b8:	e25b      	b.n	8003772 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80032ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80032be:	2b00      	cmp	r3, #0
 80032c0:	f000 80de 	beq.w	8003480 <HAL_UART_IRQHandler+0x22c>
 80032c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032c8:	f003 0301 	and.w	r3, r3, #1
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d106      	bne.n	80032de <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80032d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032d4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f000 80d1 	beq.w	8003480 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80032de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00b      	beq.n	8003302 <HAL_UART_IRQHandler+0xae>
 80032ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d005      	beq.n	8003302 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032fa:	f043 0201 	orr.w	r2, r3, #1
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003306:	f003 0304 	and.w	r3, r3, #4
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00b      	beq.n	8003326 <HAL_UART_IRQHandler+0xd2>
 800330e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	2b00      	cmp	r3, #0
 8003318:	d005      	beq.n	8003326 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800331e:	f043 0202 	orr.w	r2, r3, #2
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003326:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d00b      	beq.n	800334a <HAL_UART_IRQHandler+0xf6>
 8003332:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	2b00      	cmp	r3, #0
 800333c:	d005      	beq.n	800334a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003342:	f043 0204 	orr.w	r2, r3, #4
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800334a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800334e:	f003 0308 	and.w	r3, r3, #8
 8003352:	2b00      	cmp	r3, #0
 8003354:	d011      	beq.n	800337a <HAL_UART_IRQHandler+0x126>
 8003356:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800335a:	f003 0320 	and.w	r3, r3, #32
 800335e:	2b00      	cmp	r3, #0
 8003360:	d105      	bne.n	800336e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003362:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b00      	cmp	r3, #0
 800336c:	d005      	beq.n	800337a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003372:	f043 0208 	orr.w	r2, r3, #8
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800337e:	2b00      	cmp	r3, #0
 8003380:	f000 81f2 	beq.w	8003768 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003384:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003388:	f003 0320 	and.w	r3, r3, #32
 800338c:	2b00      	cmp	r3, #0
 800338e:	d008      	beq.n	80033a2 <HAL_UART_IRQHandler+0x14e>
 8003390:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003394:	f003 0320 	and.w	r3, r3, #32
 8003398:	2b00      	cmp	r3, #0
 800339a:	d002      	beq.n	80033a2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f000 fb1e 	bl	80039de <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	695b      	ldr	r3, [r3, #20]
 80033a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	bf14      	ite	ne
 80033b0:	2301      	movne	r3, #1
 80033b2:	2300      	moveq	r3, #0
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033be:	f003 0308 	and.w	r3, r3, #8
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d103      	bne.n	80033ce <HAL_UART_IRQHandler+0x17a>
 80033c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d04f      	beq.n	800346e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 fa28 	bl	8003824 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d041      	beq.n	8003466 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	3314      	adds	r3, #20
 80033e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80033f0:	e853 3f00 	ldrex	r3, [r3]
 80033f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80033f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80033fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003400:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	3314      	adds	r3, #20
 800340a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800340e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003412:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003416:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800341a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800341e:	e841 2300 	strex	r3, r2, [r1]
 8003422:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003426:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1d9      	bne.n	80033e2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003432:	2b00      	cmp	r3, #0
 8003434:	d013      	beq.n	800345e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800343a:	4a7e      	ldr	r2, [pc, #504]	; (8003634 <HAL_UART_IRQHandler+0x3e0>)
 800343c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003442:	4618      	mov	r0, r3
 8003444:	f7fe fbd8 	bl	8001bf8 <HAL_DMA_Abort_IT>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d016      	beq.n	800347c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003458:	4610      	mov	r0, r2
 800345a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800345c:	e00e      	b.n	800347c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 f993 	bl	800378a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003464:	e00a      	b.n	800347c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 f98f 	bl	800378a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800346c:	e006      	b.n	800347c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 f98b 	bl	800378a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800347a:	e175      	b.n	8003768 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800347c:	bf00      	nop
    return;
 800347e:	e173      	b.n	8003768 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003484:	2b01      	cmp	r3, #1
 8003486:	f040 814f 	bne.w	8003728 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800348a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800348e:	f003 0310 	and.w	r3, r3, #16
 8003492:	2b00      	cmp	r3, #0
 8003494:	f000 8148 	beq.w	8003728 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003498:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800349c:	f003 0310 	and.w	r3, r3, #16
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f000 8141 	beq.w	8003728 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80034a6:	2300      	movs	r3, #0
 80034a8:	60bb      	str	r3, [r7, #8]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	60bb      	str	r3, [r7, #8]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	60bb      	str	r3, [r7, #8]
 80034ba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	f000 80b6 	beq.w	8003638 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80034d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f000 8145 	beq.w	800376c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80034e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80034ea:	429a      	cmp	r2, r3
 80034ec:	f080 813e 	bcs.w	800376c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80034f6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034fc:	699b      	ldr	r3, [r3, #24]
 80034fe:	2b20      	cmp	r3, #32
 8003500:	f000 8088 	beq.w	8003614 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	330c      	adds	r3, #12
 800350a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800350e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003512:	e853 3f00 	ldrex	r3, [r3]
 8003516:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800351a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800351e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003522:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	330c      	adds	r3, #12
 800352c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003530:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003534:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003538:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800353c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003540:	e841 2300 	strex	r3, r2, [r1]
 8003544:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003548:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800354c:	2b00      	cmp	r3, #0
 800354e:	d1d9      	bne.n	8003504 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	3314      	adds	r3, #20
 8003556:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003558:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800355a:	e853 3f00 	ldrex	r3, [r3]
 800355e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003560:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003562:	f023 0301 	bic.w	r3, r3, #1
 8003566:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	3314      	adds	r3, #20
 8003570:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003574:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003578:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800357a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800357c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003580:	e841 2300 	strex	r3, r2, [r1]
 8003584:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003586:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003588:	2b00      	cmp	r3, #0
 800358a:	d1e1      	bne.n	8003550 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	3314      	adds	r3, #20
 8003592:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003594:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003596:	e853 3f00 	ldrex	r3, [r3]
 800359a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800359c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800359e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	3314      	adds	r3, #20
 80035ac:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80035b0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80035b2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80035b6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80035b8:	e841 2300 	strex	r3, r2, [r1]
 80035bc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80035be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d1e3      	bne.n	800358c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2220      	movs	r2, #32
 80035c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	330c      	adds	r3, #12
 80035d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035dc:	e853 3f00 	ldrex	r3, [r3]
 80035e0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80035e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035e4:	f023 0310 	bic.w	r3, r3, #16
 80035e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	330c      	adds	r3, #12
 80035f2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80035f6:	65ba      	str	r2, [r7, #88]	; 0x58
 80035f8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80035fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80035fe:	e841 2300 	strex	r3, r2, [r1]
 8003602:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003604:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1e3      	bne.n	80035d2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800360e:	4618      	mov	r0, r3
 8003610:	f7fe fab7 	bl	8001b82 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2202      	movs	r2, #2
 8003618:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003622:	b29b      	uxth	r3, r3
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	b29b      	uxth	r3, r3
 8003628:	4619      	mov	r1, r3
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 f8b6 	bl	800379c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003630:	e09c      	b.n	800376c <HAL_UART_IRQHandler+0x518>
 8003632:	bf00      	nop
 8003634:	080038e9 	.word	0x080038e9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003640:	b29b      	uxth	r3, r3
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800364c:	b29b      	uxth	r3, r3
 800364e:	2b00      	cmp	r3, #0
 8003650:	f000 808e 	beq.w	8003770 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003654:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003658:	2b00      	cmp	r3, #0
 800365a:	f000 8089 	beq.w	8003770 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	330c      	adds	r3, #12
 8003664:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003668:	e853 3f00 	ldrex	r3, [r3]
 800366c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800366e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003670:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003674:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	330c      	adds	r3, #12
 800367e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003682:	647a      	str	r2, [r7, #68]	; 0x44
 8003684:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003686:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003688:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800368a:	e841 2300 	strex	r3, r2, [r1]
 800368e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1e3      	bne.n	800365e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	3314      	adds	r3, #20
 800369c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800369e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a0:	e853 3f00 	ldrex	r3, [r3]
 80036a4:	623b      	str	r3, [r7, #32]
   return(result);
 80036a6:	6a3b      	ldr	r3, [r7, #32]
 80036a8:	f023 0301 	bic.w	r3, r3, #1
 80036ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	3314      	adds	r3, #20
 80036b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80036ba:	633a      	str	r2, [r7, #48]	; 0x30
 80036bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80036c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036c2:	e841 2300 	strex	r3, r2, [r1]
 80036c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80036c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1e3      	bne.n	8003696 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2220      	movs	r2, #32
 80036d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	330c      	adds	r3, #12
 80036e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	e853 3f00 	ldrex	r3, [r3]
 80036ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f023 0310 	bic.w	r3, r3, #16
 80036f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	330c      	adds	r3, #12
 80036fc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003700:	61fa      	str	r2, [r7, #28]
 8003702:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003704:	69b9      	ldr	r1, [r7, #24]
 8003706:	69fa      	ldr	r2, [r7, #28]
 8003708:	e841 2300 	strex	r3, r2, [r1]
 800370c:	617b      	str	r3, [r7, #20]
   return(result);
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d1e3      	bne.n	80036dc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2202      	movs	r2, #2
 8003718:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800371a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800371e:	4619      	mov	r1, r3
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f000 f83b 	bl	800379c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003726:	e023      	b.n	8003770 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003728:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800372c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003730:	2b00      	cmp	r3, #0
 8003732:	d009      	beq.n	8003748 <HAL_UART_IRQHandler+0x4f4>
 8003734:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003738:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800373c:	2b00      	cmp	r3, #0
 800373e:	d003      	beq.n	8003748 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 f8e5 	bl	8003910 <UART_Transmit_IT>
    return;
 8003746:	e014      	b.n	8003772 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003748:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800374c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00e      	beq.n	8003772 <HAL_UART_IRQHandler+0x51e>
 8003754:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800375c:	2b00      	cmp	r3, #0
 800375e:	d008      	beq.n	8003772 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f000 f924 	bl	80039ae <UART_EndTransmit_IT>
    return;
 8003766:	e004      	b.n	8003772 <HAL_UART_IRQHandler+0x51e>
    return;
 8003768:	bf00      	nop
 800376a:	e002      	b.n	8003772 <HAL_UART_IRQHandler+0x51e>
      return;
 800376c:	bf00      	nop
 800376e:	e000      	b.n	8003772 <HAL_UART_IRQHandler+0x51e>
      return;
 8003770:	bf00      	nop
  }
}
 8003772:	37e8      	adds	r7, #232	; 0xe8
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003780:	bf00      	nop
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	bc80      	pop	{r7}
 8003788:	4770      	bx	lr

0800378a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800378a:	b480      	push	{r7}
 800378c:	b083      	sub	sp, #12
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003792:	bf00      	nop
 8003794:	370c      	adds	r7, #12
 8003796:	46bd      	mov	sp, r7
 8003798:	bc80      	pop	{r7}
 800379a:	4770      	bx	lr

0800379c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	460b      	mov	r3, r1
 80037a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80037a8:	bf00      	nop
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bc80      	pop	{r7}
 80037b0:	4770      	bx	lr

080037b2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80037b2:	b480      	push	{r7}
 80037b4:	b085      	sub	sp, #20
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	60f8      	str	r0, [r7, #12]
 80037ba:	60b9      	str	r1, [r7, #8]
 80037bc:	4613      	mov	r3, r2
 80037be:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	68ba      	ldr	r2, [r7, #8]
 80037c4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	88fa      	ldrh	r2, [r7, #6]
 80037ca:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	88fa      	ldrh	r2, [r7, #6]
 80037d0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2222      	movs	r2, #34	; 0x22
 80037dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	691b      	ldr	r3, [r3, #16]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d007      	beq.n	80037f8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68da      	ldr	r2, [r3, #12]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037f6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	695a      	ldr	r2, [r3, #20]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f042 0201 	orr.w	r2, r2, #1
 8003806:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68da      	ldr	r2, [r3, #12]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f042 0220 	orr.w	r2, r2, #32
 8003816:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	3714      	adds	r7, #20
 800381e:	46bd      	mov	sp, r7
 8003820:	bc80      	pop	{r7}
 8003822:	4770      	bx	lr

08003824 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003824:	b480      	push	{r7}
 8003826:	b095      	sub	sp, #84	; 0x54
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	330c      	adds	r3, #12
 8003832:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003836:	e853 3f00 	ldrex	r3, [r3]
 800383a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800383c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800383e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003842:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	330c      	adds	r3, #12
 800384a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800384c:	643a      	str	r2, [r7, #64]	; 0x40
 800384e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003850:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003852:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003854:	e841 2300 	strex	r3, r2, [r1]
 8003858:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800385a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800385c:	2b00      	cmp	r3, #0
 800385e:	d1e5      	bne.n	800382c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	3314      	adds	r3, #20
 8003866:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003868:	6a3b      	ldr	r3, [r7, #32]
 800386a:	e853 3f00 	ldrex	r3, [r3]
 800386e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	f023 0301 	bic.w	r3, r3, #1
 8003876:	64bb      	str	r3, [r7, #72]	; 0x48
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	3314      	adds	r3, #20
 800387e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003880:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003882:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003884:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003886:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003888:	e841 2300 	strex	r3, r2, [r1]
 800388c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800388e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003890:	2b00      	cmp	r3, #0
 8003892:	d1e5      	bne.n	8003860 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003898:	2b01      	cmp	r3, #1
 800389a:	d119      	bne.n	80038d0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	330c      	adds	r3, #12
 80038a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	e853 3f00 	ldrex	r3, [r3]
 80038aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	f023 0310 	bic.w	r3, r3, #16
 80038b2:	647b      	str	r3, [r7, #68]	; 0x44
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	330c      	adds	r3, #12
 80038ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80038bc:	61ba      	str	r2, [r7, #24]
 80038be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c0:	6979      	ldr	r1, [r7, #20]
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	e841 2300 	strex	r3, r2, [r1]
 80038c8:	613b      	str	r3, [r7, #16]
   return(result);
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d1e5      	bne.n	800389c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2220      	movs	r2, #32
 80038d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80038de:	bf00      	nop
 80038e0:	3754      	adds	r7, #84	; 0x54
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bc80      	pop	{r7}
 80038e6:	4770      	bx	lr

080038e8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2200      	movs	r2, #0
 80038fa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	f7ff ff41 	bl	800378a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003908:	bf00      	nop
 800390a:	3710      	adds	r7, #16
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003910:	b480      	push	{r7}
 8003912:	b085      	sub	sp, #20
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800391e:	b2db      	uxtb	r3, r3
 8003920:	2b21      	cmp	r3, #33	; 0x21
 8003922:	d13e      	bne.n	80039a2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800392c:	d114      	bne.n	8003958 <UART_Transmit_IT+0x48>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d110      	bne.n	8003958 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a1b      	ldr	r3, [r3, #32]
 800393a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	881b      	ldrh	r3, [r3, #0]
 8003940:	461a      	mov	r2, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800394a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a1b      	ldr	r3, [r3, #32]
 8003950:	1c9a      	adds	r2, r3, #2
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	621a      	str	r2, [r3, #32]
 8003956:	e008      	b.n	800396a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6a1b      	ldr	r3, [r3, #32]
 800395c:	1c59      	adds	r1, r3, #1
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	6211      	str	r1, [r2, #32]
 8003962:	781a      	ldrb	r2, [r3, #0]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800396e:	b29b      	uxth	r3, r3
 8003970:	3b01      	subs	r3, #1
 8003972:	b29b      	uxth	r3, r3
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	4619      	mov	r1, r3
 8003978:	84d1      	strh	r1, [r2, #38]	; 0x26
 800397a:	2b00      	cmp	r3, #0
 800397c:	d10f      	bne.n	800399e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68da      	ldr	r2, [r3, #12]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800398c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68da      	ldr	r2, [r3, #12]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800399c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800399e:	2300      	movs	r3, #0
 80039a0:	e000      	b.n	80039a4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80039a2:	2302      	movs	r3, #2
  }
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3714      	adds	r7, #20
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bc80      	pop	{r7}
 80039ac:	4770      	bx	lr

080039ae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b082      	sub	sp, #8
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	68da      	ldr	r2, [r3, #12]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039c4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2220      	movs	r2, #32
 80039ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f7ff fed2 	bl	8003778 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3708      	adds	r7, #8
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}

080039de <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80039de:	b580      	push	{r7, lr}
 80039e0:	b08c      	sub	sp, #48	; 0x30
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	2b22      	cmp	r3, #34	; 0x22
 80039f0:	f040 80ae 	bne.w	8003b50 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039fc:	d117      	bne.n	8003a2e <UART_Receive_IT+0x50>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d113      	bne.n	8003a2e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003a06:	2300      	movs	r3, #0
 8003a08:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a0e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a1c:	b29a      	uxth	r2, r3
 8003a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a20:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a26:	1c9a      	adds	r2, r3, #2
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	629a      	str	r2, [r3, #40]	; 0x28
 8003a2c:	e026      	b.n	8003a7c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a32:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003a34:	2300      	movs	r3, #0
 8003a36:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a40:	d007      	beq.n	8003a52 <UART_Receive_IT+0x74>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d10a      	bne.n	8003a60 <UART_Receive_IT+0x82>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d106      	bne.n	8003a60 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	b2da      	uxtb	r2, r3
 8003a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a5c:	701a      	strb	r2, [r3, #0]
 8003a5e:	e008      	b.n	8003a72 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a6c:	b2da      	uxtb	r2, r3
 8003a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a70:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a76:	1c5a      	adds	r2, r3, #1
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	3b01      	subs	r3, #1
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	4619      	mov	r1, r3
 8003a8a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d15d      	bne.n	8003b4c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	68da      	ldr	r2, [r3, #12]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f022 0220 	bic.w	r2, r2, #32
 8003a9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	68da      	ldr	r2, [r3, #12]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003aae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	695a      	ldr	r2, [r3, #20]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f022 0201 	bic.w	r2, r2, #1
 8003abe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2220      	movs	r2, #32
 8003ac4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d135      	bne.n	8003b42 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	330c      	adds	r3, #12
 8003ae2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	e853 3f00 	ldrex	r3, [r3]
 8003aea:	613b      	str	r3, [r7, #16]
   return(result);
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	f023 0310 	bic.w	r3, r3, #16
 8003af2:	627b      	str	r3, [r7, #36]	; 0x24
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	330c      	adds	r3, #12
 8003afa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003afc:	623a      	str	r2, [r7, #32]
 8003afe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b00:	69f9      	ldr	r1, [r7, #28]
 8003b02:	6a3a      	ldr	r2, [r7, #32]
 8003b04:	e841 2300 	strex	r3, r2, [r1]
 8003b08:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d1e5      	bne.n	8003adc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0310 	and.w	r3, r3, #16
 8003b1a:	2b10      	cmp	r3, #16
 8003b1c:	d10a      	bne.n	8003b34 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b1e:	2300      	movs	r3, #0
 8003b20:	60fb      	str	r3, [r7, #12]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	60fb      	str	r3, [r7, #12]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	60fb      	str	r3, [r7, #12]
 8003b32:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b38:	4619      	mov	r1, r3
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f7ff fe2e 	bl	800379c <HAL_UARTEx_RxEventCallback>
 8003b40:	e002      	b.n	8003b48 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f7fd f95a 	bl	8000dfc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	e002      	b.n	8003b52 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	e000      	b.n	8003b52 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003b50:	2302      	movs	r3, #2
  }
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3730      	adds	r7, #48	; 0x30
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
	...

08003b5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	68da      	ldr	r2, [r3, #12]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	430a      	orrs	r2, r1
 8003b78:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	689a      	ldr	r2, [r3, #8]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	431a      	orrs	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	695b      	ldr	r3, [r3, #20]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003b96:	f023 030c 	bic.w	r3, r3, #12
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	6812      	ldr	r2, [r2, #0]
 8003b9e:	68b9      	ldr	r1, [r7, #8]
 8003ba0:	430b      	orrs	r3, r1
 8003ba2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	695b      	ldr	r3, [r3, #20]
 8003baa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	699a      	ldr	r2, [r3, #24]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	430a      	orrs	r2, r1
 8003bb8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a2c      	ldr	r2, [pc, #176]	; (8003c70 <UART_SetConfig+0x114>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d103      	bne.n	8003bcc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003bc4:	f7ff fa9e 	bl	8003104 <HAL_RCC_GetPCLK2Freq>
 8003bc8:	60f8      	str	r0, [r7, #12]
 8003bca:	e002      	b.n	8003bd2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003bcc:	f7ff fa86 	bl	80030dc <HAL_RCC_GetPCLK1Freq>
 8003bd0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	4413      	add	r3, r2
 8003bda:	009a      	lsls	r2, r3, #2
 8003bdc:	441a      	add	r2, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003be8:	4a22      	ldr	r2, [pc, #136]	; (8003c74 <UART_SetConfig+0x118>)
 8003bea:	fba2 2303 	umull	r2, r3, r2, r3
 8003bee:	095b      	lsrs	r3, r3, #5
 8003bf0:	0119      	lsls	r1, r3, #4
 8003bf2:	68fa      	ldr	r2, [r7, #12]
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	4413      	add	r3, r2
 8003bfa:	009a      	lsls	r2, r3, #2
 8003bfc:	441a      	add	r2, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c08:	4b1a      	ldr	r3, [pc, #104]	; (8003c74 <UART_SetConfig+0x118>)
 8003c0a:	fba3 0302 	umull	r0, r3, r3, r2
 8003c0e:	095b      	lsrs	r3, r3, #5
 8003c10:	2064      	movs	r0, #100	; 0x64
 8003c12:	fb00 f303 	mul.w	r3, r0, r3
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	011b      	lsls	r3, r3, #4
 8003c1a:	3332      	adds	r3, #50	; 0x32
 8003c1c:	4a15      	ldr	r2, [pc, #84]	; (8003c74 <UART_SetConfig+0x118>)
 8003c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c22:	095b      	lsrs	r3, r3, #5
 8003c24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c28:	4419      	add	r1, r3
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	4413      	add	r3, r2
 8003c32:	009a      	lsls	r2, r3, #2
 8003c34:	441a      	add	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c40:	4b0c      	ldr	r3, [pc, #48]	; (8003c74 <UART_SetConfig+0x118>)
 8003c42:	fba3 0302 	umull	r0, r3, r3, r2
 8003c46:	095b      	lsrs	r3, r3, #5
 8003c48:	2064      	movs	r0, #100	; 0x64
 8003c4a:	fb00 f303 	mul.w	r3, r0, r3
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	011b      	lsls	r3, r3, #4
 8003c52:	3332      	adds	r3, #50	; 0x32
 8003c54:	4a07      	ldr	r2, [pc, #28]	; (8003c74 <UART_SetConfig+0x118>)
 8003c56:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5a:	095b      	lsrs	r3, r3, #5
 8003c5c:	f003 020f 	and.w	r2, r3, #15
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	440a      	add	r2, r1
 8003c66:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003c68:	bf00      	nop
 8003c6a:	3710      	adds	r7, #16
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	40013800 	.word	0x40013800
 8003c74:	51eb851f 	.word	0x51eb851f

08003c78 <__cvt>:
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c7e:	461f      	mov	r7, r3
 8003c80:	bfbb      	ittet	lt
 8003c82:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003c86:	461f      	movlt	r7, r3
 8003c88:	2300      	movge	r3, #0
 8003c8a:	232d      	movlt	r3, #45	; 0x2d
 8003c8c:	b088      	sub	sp, #32
 8003c8e:	4614      	mov	r4, r2
 8003c90:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003c92:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003c94:	7013      	strb	r3, [r2, #0]
 8003c96:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003c98:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003c9c:	f023 0820 	bic.w	r8, r3, #32
 8003ca0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003ca4:	d005      	beq.n	8003cb2 <__cvt+0x3a>
 8003ca6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003caa:	d100      	bne.n	8003cae <__cvt+0x36>
 8003cac:	3501      	adds	r5, #1
 8003cae:	2302      	movs	r3, #2
 8003cb0:	e000      	b.n	8003cb4 <__cvt+0x3c>
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	aa07      	add	r2, sp, #28
 8003cb6:	9204      	str	r2, [sp, #16]
 8003cb8:	aa06      	add	r2, sp, #24
 8003cba:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003cbe:	e9cd 3500 	strd	r3, r5, [sp]
 8003cc2:	4622      	mov	r2, r4
 8003cc4:	463b      	mov	r3, r7
 8003cc6:	f001 f8db 	bl	8004e80 <_dtoa_r>
 8003cca:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003cce:	4606      	mov	r6, r0
 8003cd0:	d102      	bne.n	8003cd8 <__cvt+0x60>
 8003cd2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003cd4:	07db      	lsls	r3, r3, #31
 8003cd6:	d522      	bpl.n	8003d1e <__cvt+0xa6>
 8003cd8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003cdc:	eb06 0905 	add.w	r9, r6, r5
 8003ce0:	d110      	bne.n	8003d04 <__cvt+0x8c>
 8003ce2:	7833      	ldrb	r3, [r6, #0]
 8003ce4:	2b30      	cmp	r3, #48	; 0x30
 8003ce6:	d10a      	bne.n	8003cfe <__cvt+0x86>
 8003ce8:	2200      	movs	r2, #0
 8003cea:	2300      	movs	r3, #0
 8003cec:	4620      	mov	r0, r4
 8003cee:	4639      	mov	r1, r7
 8003cf0:	f7fc fe64 	bl	80009bc <__aeabi_dcmpeq>
 8003cf4:	b918      	cbnz	r0, 8003cfe <__cvt+0x86>
 8003cf6:	f1c5 0501 	rsb	r5, r5, #1
 8003cfa:	f8ca 5000 	str.w	r5, [sl]
 8003cfe:	f8da 3000 	ldr.w	r3, [sl]
 8003d02:	4499      	add	r9, r3
 8003d04:	2200      	movs	r2, #0
 8003d06:	2300      	movs	r3, #0
 8003d08:	4620      	mov	r0, r4
 8003d0a:	4639      	mov	r1, r7
 8003d0c:	f7fc fe56 	bl	80009bc <__aeabi_dcmpeq>
 8003d10:	b108      	cbz	r0, 8003d16 <__cvt+0x9e>
 8003d12:	f8cd 901c 	str.w	r9, [sp, #28]
 8003d16:	2230      	movs	r2, #48	; 0x30
 8003d18:	9b07      	ldr	r3, [sp, #28]
 8003d1a:	454b      	cmp	r3, r9
 8003d1c:	d307      	bcc.n	8003d2e <__cvt+0xb6>
 8003d1e:	4630      	mov	r0, r6
 8003d20:	9b07      	ldr	r3, [sp, #28]
 8003d22:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003d24:	1b9b      	subs	r3, r3, r6
 8003d26:	6013      	str	r3, [r2, #0]
 8003d28:	b008      	add	sp, #32
 8003d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d2e:	1c59      	adds	r1, r3, #1
 8003d30:	9107      	str	r1, [sp, #28]
 8003d32:	701a      	strb	r2, [r3, #0]
 8003d34:	e7f0      	b.n	8003d18 <__cvt+0xa0>

08003d36 <__exponent>:
 8003d36:	4603      	mov	r3, r0
 8003d38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d3a:	2900      	cmp	r1, #0
 8003d3c:	f803 2b02 	strb.w	r2, [r3], #2
 8003d40:	bfb6      	itet	lt
 8003d42:	222d      	movlt	r2, #45	; 0x2d
 8003d44:	222b      	movge	r2, #43	; 0x2b
 8003d46:	4249      	neglt	r1, r1
 8003d48:	2909      	cmp	r1, #9
 8003d4a:	7042      	strb	r2, [r0, #1]
 8003d4c:	dd2a      	ble.n	8003da4 <__exponent+0x6e>
 8003d4e:	f10d 0207 	add.w	r2, sp, #7
 8003d52:	4617      	mov	r7, r2
 8003d54:	260a      	movs	r6, #10
 8003d56:	fb91 f5f6 	sdiv	r5, r1, r6
 8003d5a:	4694      	mov	ip, r2
 8003d5c:	fb06 1415 	mls	r4, r6, r5, r1
 8003d60:	3430      	adds	r4, #48	; 0x30
 8003d62:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8003d66:	460c      	mov	r4, r1
 8003d68:	2c63      	cmp	r4, #99	; 0x63
 8003d6a:	4629      	mov	r1, r5
 8003d6c:	f102 32ff 	add.w	r2, r2, #4294967295
 8003d70:	dcf1      	bgt.n	8003d56 <__exponent+0x20>
 8003d72:	3130      	adds	r1, #48	; 0x30
 8003d74:	f1ac 0402 	sub.w	r4, ip, #2
 8003d78:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003d7c:	4622      	mov	r2, r4
 8003d7e:	1c41      	adds	r1, r0, #1
 8003d80:	42ba      	cmp	r2, r7
 8003d82:	d30a      	bcc.n	8003d9a <__exponent+0x64>
 8003d84:	f10d 0209 	add.w	r2, sp, #9
 8003d88:	eba2 020c 	sub.w	r2, r2, ip
 8003d8c:	42bc      	cmp	r4, r7
 8003d8e:	bf88      	it	hi
 8003d90:	2200      	movhi	r2, #0
 8003d92:	4413      	add	r3, r2
 8003d94:	1a18      	subs	r0, r3, r0
 8003d96:	b003      	add	sp, #12
 8003d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d9a:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003d9e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8003da2:	e7ed      	b.n	8003d80 <__exponent+0x4a>
 8003da4:	2330      	movs	r3, #48	; 0x30
 8003da6:	3130      	adds	r1, #48	; 0x30
 8003da8:	7083      	strb	r3, [r0, #2]
 8003daa:	70c1      	strb	r1, [r0, #3]
 8003dac:	1d03      	adds	r3, r0, #4
 8003dae:	e7f1      	b.n	8003d94 <__exponent+0x5e>

08003db0 <_printf_float>:
 8003db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003db4:	b091      	sub	sp, #68	; 0x44
 8003db6:	460c      	mov	r4, r1
 8003db8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003dbc:	4616      	mov	r6, r2
 8003dbe:	461f      	mov	r7, r3
 8003dc0:	4605      	mov	r5, r0
 8003dc2:	f000 ff39 	bl	8004c38 <_localeconv_r>
 8003dc6:	6803      	ldr	r3, [r0, #0]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	9309      	str	r3, [sp, #36]	; 0x24
 8003dcc:	f7fc f9ca 	bl	8000164 <strlen>
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	930e      	str	r3, [sp, #56]	; 0x38
 8003dd4:	f8d8 3000 	ldr.w	r3, [r8]
 8003dd8:	900a      	str	r0, [sp, #40]	; 0x28
 8003dda:	3307      	adds	r3, #7
 8003ddc:	f023 0307 	bic.w	r3, r3, #7
 8003de0:	f103 0208 	add.w	r2, r3, #8
 8003de4:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003de8:	f8d4 b000 	ldr.w	fp, [r4]
 8003dec:	f8c8 2000 	str.w	r2, [r8]
 8003df0:	e9d3 a800 	ldrd	sl, r8, [r3]
 8003df4:	4652      	mov	r2, sl
 8003df6:	4643      	mov	r3, r8
 8003df8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003dfc:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8003e00:	930b      	str	r3, [sp, #44]	; 0x2c
 8003e02:	f04f 32ff 	mov.w	r2, #4294967295
 8003e06:	4650      	mov	r0, sl
 8003e08:	4b9c      	ldr	r3, [pc, #624]	; (800407c <_printf_float+0x2cc>)
 8003e0a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003e0c:	f7fc fe08 	bl	8000a20 <__aeabi_dcmpun>
 8003e10:	bb70      	cbnz	r0, 8003e70 <_printf_float+0xc0>
 8003e12:	f04f 32ff 	mov.w	r2, #4294967295
 8003e16:	4650      	mov	r0, sl
 8003e18:	4b98      	ldr	r3, [pc, #608]	; (800407c <_printf_float+0x2cc>)
 8003e1a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003e1c:	f7fc fde2 	bl	80009e4 <__aeabi_dcmple>
 8003e20:	bb30      	cbnz	r0, 8003e70 <_printf_float+0xc0>
 8003e22:	2200      	movs	r2, #0
 8003e24:	2300      	movs	r3, #0
 8003e26:	4650      	mov	r0, sl
 8003e28:	4641      	mov	r1, r8
 8003e2a:	f7fc fdd1 	bl	80009d0 <__aeabi_dcmplt>
 8003e2e:	b110      	cbz	r0, 8003e36 <_printf_float+0x86>
 8003e30:	232d      	movs	r3, #45	; 0x2d
 8003e32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e36:	4a92      	ldr	r2, [pc, #584]	; (8004080 <_printf_float+0x2d0>)
 8003e38:	4b92      	ldr	r3, [pc, #584]	; (8004084 <_printf_float+0x2d4>)
 8003e3a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003e3e:	bf94      	ite	ls
 8003e40:	4690      	movls	r8, r2
 8003e42:	4698      	movhi	r8, r3
 8003e44:	2303      	movs	r3, #3
 8003e46:	f04f 0a00 	mov.w	sl, #0
 8003e4a:	6123      	str	r3, [r4, #16]
 8003e4c:	f02b 0304 	bic.w	r3, fp, #4
 8003e50:	6023      	str	r3, [r4, #0]
 8003e52:	4633      	mov	r3, r6
 8003e54:	4621      	mov	r1, r4
 8003e56:	4628      	mov	r0, r5
 8003e58:	9700      	str	r7, [sp, #0]
 8003e5a:	aa0f      	add	r2, sp, #60	; 0x3c
 8003e5c:	f000 f9d6 	bl	800420c <_printf_common>
 8003e60:	3001      	adds	r0, #1
 8003e62:	f040 8090 	bne.w	8003f86 <_printf_float+0x1d6>
 8003e66:	f04f 30ff 	mov.w	r0, #4294967295
 8003e6a:	b011      	add	sp, #68	; 0x44
 8003e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e70:	4652      	mov	r2, sl
 8003e72:	4643      	mov	r3, r8
 8003e74:	4650      	mov	r0, sl
 8003e76:	4641      	mov	r1, r8
 8003e78:	f7fc fdd2 	bl	8000a20 <__aeabi_dcmpun>
 8003e7c:	b148      	cbz	r0, 8003e92 <_printf_float+0xe2>
 8003e7e:	f1b8 0f00 	cmp.w	r8, #0
 8003e82:	bfb8      	it	lt
 8003e84:	232d      	movlt	r3, #45	; 0x2d
 8003e86:	4a80      	ldr	r2, [pc, #512]	; (8004088 <_printf_float+0x2d8>)
 8003e88:	bfb8      	it	lt
 8003e8a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003e8e:	4b7f      	ldr	r3, [pc, #508]	; (800408c <_printf_float+0x2dc>)
 8003e90:	e7d3      	b.n	8003e3a <_printf_float+0x8a>
 8003e92:	6863      	ldr	r3, [r4, #4]
 8003e94:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003e98:	1c5a      	adds	r2, r3, #1
 8003e9a:	d142      	bne.n	8003f22 <_printf_float+0x172>
 8003e9c:	2306      	movs	r3, #6
 8003e9e:	6063      	str	r3, [r4, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	9206      	str	r2, [sp, #24]
 8003ea4:	aa0e      	add	r2, sp, #56	; 0x38
 8003ea6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003eaa:	aa0d      	add	r2, sp, #52	; 0x34
 8003eac:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003eb0:	9203      	str	r2, [sp, #12]
 8003eb2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003eb6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003eba:	6023      	str	r3, [r4, #0]
 8003ebc:	6863      	ldr	r3, [r4, #4]
 8003ebe:	4652      	mov	r2, sl
 8003ec0:	9300      	str	r3, [sp, #0]
 8003ec2:	4628      	mov	r0, r5
 8003ec4:	4643      	mov	r3, r8
 8003ec6:	910b      	str	r1, [sp, #44]	; 0x2c
 8003ec8:	f7ff fed6 	bl	8003c78 <__cvt>
 8003ecc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003ece:	4680      	mov	r8, r0
 8003ed0:	2947      	cmp	r1, #71	; 0x47
 8003ed2:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003ed4:	d108      	bne.n	8003ee8 <_printf_float+0x138>
 8003ed6:	1cc8      	adds	r0, r1, #3
 8003ed8:	db02      	blt.n	8003ee0 <_printf_float+0x130>
 8003eda:	6863      	ldr	r3, [r4, #4]
 8003edc:	4299      	cmp	r1, r3
 8003ede:	dd40      	ble.n	8003f62 <_printf_float+0x1b2>
 8003ee0:	f1a9 0902 	sub.w	r9, r9, #2
 8003ee4:	fa5f f989 	uxtb.w	r9, r9
 8003ee8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003eec:	d81f      	bhi.n	8003f2e <_printf_float+0x17e>
 8003eee:	464a      	mov	r2, r9
 8003ef0:	3901      	subs	r1, #1
 8003ef2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003ef6:	910d      	str	r1, [sp, #52]	; 0x34
 8003ef8:	f7ff ff1d 	bl	8003d36 <__exponent>
 8003efc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003efe:	4682      	mov	sl, r0
 8003f00:	1813      	adds	r3, r2, r0
 8003f02:	2a01      	cmp	r2, #1
 8003f04:	6123      	str	r3, [r4, #16]
 8003f06:	dc02      	bgt.n	8003f0e <_printf_float+0x15e>
 8003f08:	6822      	ldr	r2, [r4, #0]
 8003f0a:	07d2      	lsls	r2, r2, #31
 8003f0c:	d501      	bpl.n	8003f12 <_printf_float+0x162>
 8003f0e:	3301      	adds	r3, #1
 8003f10:	6123      	str	r3, [r4, #16]
 8003f12:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d09b      	beq.n	8003e52 <_printf_float+0xa2>
 8003f1a:	232d      	movs	r3, #45	; 0x2d
 8003f1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f20:	e797      	b.n	8003e52 <_printf_float+0xa2>
 8003f22:	2947      	cmp	r1, #71	; 0x47
 8003f24:	d1bc      	bne.n	8003ea0 <_printf_float+0xf0>
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1ba      	bne.n	8003ea0 <_printf_float+0xf0>
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e7b7      	b.n	8003e9e <_printf_float+0xee>
 8003f2e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003f32:	d118      	bne.n	8003f66 <_printf_float+0x1b6>
 8003f34:	2900      	cmp	r1, #0
 8003f36:	6863      	ldr	r3, [r4, #4]
 8003f38:	dd0b      	ble.n	8003f52 <_printf_float+0x1a2>
 8003f3a:	6121      	str	r1, [r4, #16]
 8003f3c:	b913      	cbnz	r3, 8003f44 <_printf_float+0x194>
 8003f3e:	6822      	ldr	r2, [r4, #0]
 8003f40:	07d0      	lsls	r0, r2, #31
 8003f42:	d502      	bpl.n	8003f4a <_printf_float+0x19a>
 8003f44:	3301      	adds	r3, #1
 8003f46:	440b      	add	r3, r1
 8003f48:	6123      	str	r3, [r4, #16]
 8003f4a:	f04f 0a00 	mov.w	sl, #0
 8003f4e:	65a1      	str	r1, [r4, #88]	; 0x58
 8003f50:	e7df      	b.n	8003f12 <_printf_float+0x162>
 8003f52:	b913      	cbnz	r3, 8003f5a <_printf_float+0x1aa>
 8003f54:	6822      	ldr	r2, [r4, #0]
 8003f56:	07d2      	lsls	r2, r2, #31
 8003f58:	d501      	bpl.n	8003f5e <_printf_float+0x1ae>
 8003f5a:	3302      	adds	r3, #2
 8003f5c:	e7f4      	b.n	8003f48 <_printf_float+0x198>
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e7f2      	b.n	8003f48 <_printf_float+0x198>
 8003f62:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003f66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003f68:	4299      	cmp	r1, r3
 8003f6a:	db05      	blt.n	8003f78 <_printf_float+0x1c8>
 8003f6c:	6823      	ldr	r3, [r4, #0]
 8003f6e:	6121      	str	r1, [r4, #16]
 8003f70:	07d8      	lsls	r0, r3, #31
 8003f72:	d5ea      	bpl.n	8003f4a <_printf_float+0x19a>
 8003f74:	1c4b      	adds	r3, r1, #1
 8003f76:	e7e7      	b.n	8003f48 <_printf_float+0x198>
 8003f78:	2900      	cmp	r1, #0
 8003f7a:	bfcc      	ite	gt
 8003f7c:	2201      	movgt	r2, #1
 8003f7e:	f1c1 0202 	rsble	r2, r1, #2
 8003f82:	4413      	add	r3, r2
 8003f84:	e7e0      	b.n	8003f48 <_printf_float+0x198>
 8003f86:	6823      	ldr	r3, [r4, #0]
 8003f88:	055a      	lsls	r2, r3, #21
 8003f8a:	d407      	bmi.n	8003f9c <_printf_float+0x1ec>
 8003f8c:	6923      	ldr	r3, [r4, #16]
 8003f8e:	4642      	mov	r2, r8
 8003f90:	4631      	mov	r1, r6
 8003f92:	4628      	mov	r0, r5
 8003f94:	47b8      	blx	r7
 8003f96:	3001      	adds	r0, #1
 8003f98:	d12b      	bne.n	8003ff2 <_printf_float+0x242>
 8003f9a:	e764      	b.n	8003e66 <_printf_float+0xb6>
 8003f9c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003fa0:	f240 80dd 	bls.w	800415e <_printf_float+0x3ae>
 8003fa4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003fa8:	2200      	movs	r2, #0
 8003faa:	2300      	movs	r3, #0
 8003fac:	f7fc fd06 	bl	80009bc <__aeabi_dcmpeq>
 8003fb0:	2800      	cmp	r0, #0
 8003fb2:	d033      	beq.n	800401c <_printf_float+0x26c>
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	4631      	mov	r1, r6
 8003fb8:	4628      	mov	r0, r5
 8003fba:	4a35      	ldr	r2, [pc, #212]	; (8004090 <_printf_float+0x2e0>)
 8003fbc:	47b8      	blx	r7
 8003fbe:	3001      	adds	r0, #1
 8003fc0:	f43f af51 	beq.w	8003e66 <_printf_float+0xb6>
 8003fc4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	db02      	blt.n	8003fd2 <_printf_float+0x222>
 8003fcc:	6823      	ldr	r3, [r4, #0]
 8003fce:	07d8      	lsls	r0, r3, #31
 8003fd0:	d50f      	bpl.n	8003ff2 <_printf_float+0x242>
 8003fd2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003fd6:	4631      	mov	r1, r6
 8003fd8:	4628      	mov	r0, r5
 8003fda:	47b8      	blx	r7
 8003fdc:	3001      	adds	r0, #1
 8003fde:	f43f af42 	beq.w	8003e66 <_printf_float+0xb6>
 8003fe2:	f04f 0800 	mov.w	r8, #0
 8003fe6:	f104 091a 	add.w	r9, r4, #26
 8003fea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003fec:	3b01      	subs	r3, #1
 8003fee:	4543      	cmp	r3, r8
 8003ff0:	dc09      	bgt.n	8004006 <_printf_float+0x256>
 8003ff2:	6823      	ldr	r3, [r4, #0]
 8003ff4:	079b      	lsls	r3, r3, #30
 8003ff6:	f100 8104 	bmi.w	8004202 <_printf_float+0x452>
 8003ffa:	68e0      	ldr	r0, [r4, #12]
 8003ffc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003ffe:	4298      	cmp	r0, r3
 8004000:	bfb8      	it	lt
 8004002:	4618      	movlt	r0, r3
 8004004:	e731      	b.n	8003e6a <_printf_float+0xba>
 8004006:	2301      	movs	r3, #1
 8004008:	464a      	mov	r2, r9
 800400a:	4631      	mov	r1, r6
 800400c:	4628      	mov	r0, r5
 800400e:	47b8      	blx	r7
 8004010:	3001      	adds	r0, #1
 8004012:	f43f af28 	beq.w	8003e66 <_printf_float+0xb6>
 8004016:	f108 0801 	add.w	r8, r8, #1
 800401a:	e7e6      	b.n	8003fea <_printf_float+0x23a>
 800401c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800401e:	2b00      	cmp	r3, #0
 8004020:	dc38      	bgt.n	8004094 <_printf_float+0x2e4>
 8004022:	2301      	movs	r3, #1
 8004024:	4631      	mov	r1, r6
 8004026:	4628      	mov	r0, r5
 8004028:	4a19      	ldr	r2, [pc, #100]	; (8004090 <_printf_float+0x2e0>)
 800402a:	47b8      	blx	r7
 800402c:	3001      	adds	r0, #1
 800402e:	f43f af1a 	beq.w	8003e66 <_printf_float+0xb6>
 8004032:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004036:	4313      	orrs	r3, r2
 8004038:	d102      	bne.n	8004040 <_printf_float+0x290>
 800403a:	6823      	ldr	r3, [r4, #0]
 800403c:	07d9      	lsls	r1, r3, #31
 800403e:	d5d8      	bpl.n	8003ff2 <_printf_float+0x242>
 8004040:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004044:	4631      	mov	r1, r6
 8004046:	4628      	mov	r0, r5
 8004048:	47b8      	blx	r7
 800404a:	3001      	adds	r0, #1
 800404c:	f43f af0b 	beq.w	8003e66 <_printf_float+0xb6>
 8004050:	f04f 0900 	mov.w	r9, #0
 8004054:	f104 0a1a 	add.w	sl, r4, #26
 8004058:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800405a:	425b      	negs	r3, r3
 800405c:	454b      	cmp	r3, r9
 800405e:	dc01      	bgt.n	8004064 <_printf_float+0x2b4>
 8004060:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004062:	e794      	b.n	8003f8e <_printf_float+0x1de>
 8004064:	2301      	movs	r3, #1
 8004066:	4652      	mov	r2, sl
 8004068:	4631      	mov	r1, r6
 800406a:	4628      	mov	r0, r5
 800406c:	47b8      	blx	r7
 800406e:	3001      	adds	r0, #1
 8004070:	f43f aef9 	beq.w	8003e66 <_printf_float+0xb6>
 8004074:	f109 0901 	add.w	r9, r9, #1
 8004078:	e7ee      	b.n	8004058 <_printf_float+0x2a8>
 800407a:	bf00      	nop
 800407c:	7fefffff 	.word	0x7fefffff
 8004080:	0800945a 	.word	0x0800945a
 8004084:	0800945e 	.word	0x0800945e
 8004088:	08009462 	.word	0x08009462
 800408c:	08009466 	.word	0x08009466
 8004090:	080097f0 	.word	0x080097f0
 8004094:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004096:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004098:	429a      	cmp	r2, r3
 800409a:	bfa8      	it	ge
 800409c:	461a      	movge	r2, r3
 800409e:	2a00      	cmp	r2, #0
 80040a0:	4691      	mov	r9, r2
 80040a2:	dc37      	bgt.n	8004114 <_printf_float+0x364>
 80040a4:	f04f 0b00 	mov.w	fp, #0
 80040a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80040ac:	f104 021a 	add.w	r2, r4, #26
 80040b0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80040b4:	ebaa 0309 	sub.w	r3, sl, r9
 80040b8:	455b      	cmp	r3, fp
 80040ba:	dc33      	bgt.n	8004124 <_printf_float+0x374>
 80040bc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80040c0:	429a      	cmp	r2, r3
 80040c2:	db3b      	blt.n	800413c <_printf_float+0x38c>
 80040c4:	6823      	ldr	r3, [r4, #0]
 80040c6:	07da      	lsls	r2, r3, #31
 80040c8:	d438      	bmi.n	800413c <_printf_float+0x38c>
 80040ca:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80040ce:	eba2 0903 	sub.w	r9, r2, r3
 80040d2:	eba2 020a 	sub.w	r2, r2, sl
 80040d6:	4591      	cmp	r9, r2
 80040d8:	bfa8      	it	ge
 80040da:	4691      	movge	r9, r2
 80040dc:	f1b9 0f00 	cmp.w	r9, #0
 80040e0:	dc34      	bgt.n	800414c <_printf_float+0x39c>
 80040e2:	f04f 0800 	mov.w	r8, #0
 80040e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80040ea:	f104 0a1a 	add.w	sl, r4, #26
 80040ee:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80040f2:	1a9b      	subs	r3, r3, r2
 80040f4:	eba3 0309 	sub.w	r3, r3, r9
 80040f8:	4543      	cmp	r3, r8
 80040fa:	f77f af7a 	ble.w	8003ff2 <_printf_float+0x242>
 80040fe:	2301      	movs	r3, #1
 8004100:	4652      	mov	r2, sl
 8004102:	4631      	mov	r1, r6
 8004104:	4628      	mov	r0, r5
 8004106:	47b8      	blx	r7
 8004108:	3001      	adds	r0, #1
 800410a:	f43f aeac 	beq.w	8003e66 <_printf_float+0xb6>
 800410e:	f108 0801 	add.w	r8, r8, #1
 8004112:	e7ec      	b.n	80040ee <_printf_float+0x33e>
 8004114:	4613      	mov	r3, r2
 8004116:	4631      	mov	r1, r6
 8004118:	4642      	mov	r2, r8
 800411a:	4628      	mov	r0, r5
 800411c:	47b8      	blx	r7
 800411e:	3001      	adds	r0, #1
 8004120:	d1c0      	bne.n	80040a4 <_printf_float+0x2f4>
 8004122:	e6a0      	b.n	8003e66 <_printf_float+0xb6>
 8004124:	2301      	movs	r3, #1
 8004126:	4631      	mov	r1, r6
 8004128:	4628      	mov	r0, r5
 800412a:	920b      	str	r2, [sp, #44]	; 0x2c
 800412c:	47b8      	blx	r7
 800412e:	3001      	adds	r0, #1
 8004130:	f43f ae99 	beq.w	8003e66 <_printf_float+0xb6>
 8004134:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004136:	f10b 0b01 	add.w	fp, fp, #1
 800413a:	e7b9      	b.n	80040b0 <_printf_float+0x300>
 800413c:	4631      	mov	r1, r6
 800413e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004142:	4628      	mov	r0, r5
 8004144:	47b8      	blx	r7
 8004146:	3001      	adds	r0, #1
 8004148:	d1bf      	bne.n	80040ca <_printf_float+0x31a>
 800414a:	e68c      	b.n	8003e66 <_printf_float+0xb6>
 800414c:	464b      	mov	r3, r9
 800414e:	4631      	mov	r1, r6
 8004150:	4628      	mov	r0, r5
 8004152:	eb08 020a 	add.w	r2, r8, sl
 8004156:	47b8      	blx	r7
 8004158:	3001      	adds	r0, #1
 800415a:	d1c2      	bne.n	80040e2 <_printf_float+0x332>
 800415c:	e683      	b.n	8003e66 <_printf_float+0xb6>
 800415e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004160:	2a01      	cmp	r2, #1
 8004162:	dc01      	bgt.n	8004168 <_printf_float+0x3b8>
 8004164:	07db      	lsls	r3, r3, #31
 8004166:	d539      	bpl.n	80041dc <_printf_float+0x42c>
 8004168:	2301      	movs	r3, #1
 800416a:	4642      	mov	r2, r8
 800416c:	4631      	mov	r1, r6
 800416e:	4628      	mov	r0, r5
 8004170:	47b8      	blx	r7
 8004172:	3001      	adds	r0, #1
 8004174:	f43f ae77 	beq.w	8003e66 <_printf_float+0xb6>
 8004178:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800417c:	4631      	mov	r1, r6
 800417e:	4628      	mov	r0, r5
 8004180:	47b8      	blx	r7
 8004182:	3001      	adds	r0, #1
 8004184:	f43f ae6f 	beq.w	8003e66 <_printf_float+0xb6>
 8004188:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800418c:	2200      	movs	r2, #0
 800418e:	2300      	movs	r3, #0
 8004190:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8004194:	f7fc fc12 	bl	80009bc <__aeabi_dcmpeq>
 8004198:	b9d8      	cbnz	r0, 80041d2 <_printf_float+0x422>
 800419a:	f109 33ff 	add.w	r3, r9, #4294967295
 800419e:	f108 0201 	add.w	r2, r8, #1
 80041a2:	4631      	mov	r1, r6
 80041a4:	4628      	mov	r0, r5
 80041a6:	47b8      	blx	r7
 80041a8:	3001      	adds	r0, #1
 80041aa:	d10e      	bne.n	80041ca <_printf_float+0x41a>
 80041ac:	e65b      	b.n	8003e66 <_printf_float+0xb6>
 80041ae:	2301      	movs	r3, #1
 80041b0:	464a      	mov	r2, r9
 80041b2:	4631      	mov	r1, r6
 80041b4:	4628      	mov	r0, r5
 80041b6:	47b8      	blx	r7
 80041b8:	3001      	adds	r0, #1
 80041ba:	f43f ae54 	beq.w	8003e66 <_printf_float+0xb6>
 80041be:	f108 0801 	add.w	r8, r8, #1
 80041c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80041c4:	3b01      	subs	r3, #1
 80041c6:	4543      	cmp	r3, r8
 80041c8:	dcf1      	bgt.n	80041ae <_printf_float+0x3fe>
 80041ca:	4653      	mov	r3, sl
 80041cc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80041d0:	e6de      	b.n	8003f90 <_printf_float+0x1e0>
 80041d2:	f04f 0800 	mov.w	r8, #0
 80041d6:	f104 091a 	add.w	r9, r4, #26
 80041da:	e7f2      	b.n	80041c2 <_printf_float+0x412>
 80041dc:	2301      	movs	r3, #1
 80041de:	4642      	mov	r2, r8
 80041e0:	e7df      	b.n	80041a2 <_printf_float+0x3f2>
 80041e2:	2301      	movs	r3, #1
 80041e4:	464a      	mov	r2, r9
 80041e6:	4631      	mov	r1, r6
 80041e8:	4628      	mov	r0, r5
 80041ea:	47b8      	blx	r7
 80041ec:	3001      	adds	r0, #1
 80041ee:	f43f ae3a 	beq.w	8003e66 <_printf_float+0xb6>
 80041f2:	f108 0801 	add.w	r8, r8, #1
 80041f6:	68e3      	ldr	r3, [r4, #12]
 80041f8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80041fa:	1a5b      	subs	r3, r3, r1
 80041fc:	4543      	cmp	r3, r8
 80041fe:	dcf0      	bgt.n	80041e2 <_printf_float+0x432>
 8004200:	e6fb      	b.n	8003ffa <_printf_float+0x24a>
 8004202:	f04f 0800 	mov.w	r8, #0
 8004206:	f104 0919 	add.w	r9, r4, #25
 800420a:	e7f4      	b.n	80041f6 <_printf_float+0x446>

0800420c <_printf_common>:
 800420c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004210:	4616      	mov	r6, r2
 8004212:	4699      	mov	r9, r3
 8004214:	688a      	ldr	r2, [r1, #8]
 8004216:	690b      	ldr	r3, [r1, #16]
 8004218:	4607      	mov	r7, r0
 800421a:	4293      	cmp	r3, r2
 800421c:	bfb8      	it	lt
 800421e:	4613      	movlt	r3, r2
 8004220:	6033      	str	r3, [r6, #0]
 8004222:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004226:	460c      	mov	r4, r1
 8004228:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800422c:	b10a      	cbz	r2, 8004232 <_printf_common+0x26>
 800422e:	3301      	adds	r3, #1
 8004230:	6033      	str	r3, [r6, #0]
 8004232:	6823      	ldr	r3, [r4, #0]
 8004234:	0699      	lsls	r1, r3, #26
 8004236:	bf42      	ittt	mi
 8004238:	6833      	ldrmi	r3, [r6, #0]
 800423a:	3302      	addmi	r3, #2
 800423c:	6033      	strmi	r3, [r6, #0]
 800423e:	6825      	ldr	r5, [r4, #0]
 8004240:	f015 0506 	ands.w	r5, r5, #6
 8004244:	d106      	bne.n	8004254 <_printf_common+0x48>
 8004246:	f104 0a19 	add.w	sl, r4, #25
 800424a:	68e3      	ldr	r3, [r4, #12]
 800424c:	6832      	ldr	r2, [r6, #0]
 800424e:	1a9b      	subs	r3, r3, r2
 8004250:	42ab      	cmp	r3, r5
 8004252:	dc2b      	bgt.n	80042ac <_printf_common+0xa0>
 8004254:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004258:	1e13      	subs	r3, r2, #0
 800425a:	6822      	ldr	r2, [r4, #0]
 800425c:	bf18      	it	ne
 800425e:	2301      	movne	r3, #1
 8004260:	0692      	lsls	r2, r2, #26
 8004262:	d430      	bmi.n	80042c6 <_printf_common+0xba>
 8004264:	4649      	mov	r1, r9
 8004266:	4638      	mov	r0, r7
 8004268:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800426c:	47c0      	blx	r8
 800426e:	3001      	adds	r0, #1
 8004270:	d023      	beq.n	80042ba <_printf_common+0xae>
 8004272:	6823      	ldr	r3, [r4, #0]
 8004274:	6922      	ldr	r2, [r4, #16]
 8004276:	f003 0306 	and.w	r3, r3, #6
 800427a:	2b04      	cmp	r3, #4
 800427c:	bf14      	ite	ne
 800427e:	2500      	movne	r5, #0
 8004280:	6833      	ldreq	r3, [r6, #0]
 8004282:	f04f 0600 	mov.w	r6, #0
 8004286:	bf08      	it	eq
 8004288:	68e5      	ldreq	r5, [r4, #12]
 800428a:	f104 041a 	add.w	r4, r4, #26
 800428e:	bf08      	it	eq
 8004290:	1aed      	subeq	r5, r5, r3
 8004292:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004296:	bf08      	it	eq
 8004298:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800429c:	4293      	cmp	r3, r2
 800429e:	bfc4      	itt	gt
 80042a0:	1a9b      	subgt	r3, r3, r2
 80042a2:	18ed      	addgt	r5, r5, r3
 80042a4:	42b5      	cmp	r5, r6
 80042a6:	d11a      	bne.n	80042de <_printf_common+0xd2>
 80042a8:	2000      	movs	r0, #0
 80042aa:	e008      	b.n	80042be <_printf_common+0xb2>
 80042ac:	2301      	movs	r3, #1
 80042ae:	4652      	mov	r2, sl
 80042b0:	4649      	mov	r1, r9
 80042b2:	4638      	mov	r0, r7
 80042b4:	47c0      	blx	r8
 80042b6:	3001      	adds	r0, #1
 80042b8:	d103      	bne.n	80042c2 <_printf_common+0xb6>
 80042ba:	f04f 30ff 	mov.w	r0, #4294967295
 80042be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042c2:	3501      	adds	r5, #1
 80042c4:	e7c1      	b.n	800424a <_printf_common+0x3e>
 80042c6:	2030      	movs	r0, #48	; 0x30
 80042c8:	18e1      	adds	r1, r4, r3
 80042ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80042ce:	1c5a      	adds	r2, r3, #1
 80042d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80042d4:	4422      	add	r2, r4
 80042d6:	3302      	adds	r3, #2
 80042d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80042dc:	e7c2      	b.n	8004264 <_printf_common+0x58>
 80042de:	2301      	movs	r3, #1
 80042e0:	4622      	mov	r2, r4
 80042e2:	4649      	mov	r1, r9
 80042e4:	4638      	mov	r0, r7
 80042e6:	47c0      	blx	r8
 80042e8:	3001      	adds	r0, #1
 80042ea:	d0e6      	beq.n	80042ba <_printf_common+0xae>
 80042ec:	3601      	adds	r6, #1
 80042ee:	e7d9      	b.n	80042a4 <_printf_common+0x98>

080042f0 <_printf_i>:
 80042f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042f4:	7e0f      	ldrb	r7, [r1, #24]
 80042f6:	4691      	mov	r9, r2
 80042f8:	2f78      	cmp	r7, #120	; 0x78
 80042fa:	4680      	mov	r8, r0
 80042fc:	460c      	mov	r4, r1
 80042fe:	469a      	mov	sl, r3
 8004300:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004302:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004306:	d807      	bhi.n	8004318 <_printf_i+0x28>
 8004308:	2f62      	cmp	r7, #98	; 0x62
 800430a:	d80a      	bhi.n	8004322 <_printf_i+0x32>
 800430c:	2f00      	cmp	r7, #0
 800430e:	f000 80d5 	beq.w	80044bc <_printf_i+0x1cc>
 8004312:	2f58      	cmp	r7, #88	; 0x58
 8004314:	f000 80c1 	beq.w	800449a <_printf_i+0x1aa>
 8004318:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800431c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004320:	e03a      	b.n	8004398 <_printf_i+0xa8>
 8004322:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004326:	2b15      	cmp	r3, #21
 8004328:	d8f6      	bhi.n	8004318 <_printf_i+0x28>
 800432a:	a101      	add	r1, pc, #4	; (adr r1, 8004330 <_printf_i+0x40>)
 800432c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004330:	08004389 	.word	0x08004389
 8004334:	0800439d 	.word	0x0800439d
 8004338:	08004319 	.word	0x08004319
 800433c:	08004319 	.word	0x08004319
 8004340:	08004319 	.word	0x08004319
 8004344:	08004319 	.word	0x08004319
 8004348:	0800439d 	.word	0x0800439d
 800434c:	08004319 	.word	0x08004319
 8004350:	08004319 	.word	0x08004319
 8004354:	08004319 	.word	0x08004319
 8004358:	08004319 	.word	0x08004319
 800435c:	080044a3 	.word	0x080044a3
 8004360:	080043c9 	.word	0x080043c9
 8004364:	0800445d 	.word	0x0800445d
 8004368:	08004319 	.word	0x08004319
 800436c:	08004319 	.word	0x08004319
 8004370:	080044c5 	.word	0x080044c5
 8004374:	08004319 	.word	0x08004319
 8004378:	080043c9 	.word	0x080043c9
 800437c:	08004319 	.word	0x08004319
 8004380:	08004319 	.word	0x08004319
 8004384:	08004465 	.word	0x08004465
 8004388:	682b      	ldr	r3, [r5, #0]
 800438a:	1d1a      	adds	r2, r3, #4
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	602a      	str	r2, [r5, #0]
 8004390:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004394:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004398:	2301      	movs	r3, #1
 800439a:	e0a0      	b.n	80044de <_printf_i+0x1ee>
 800439c:	6820      	ldr	r0, [r4, #0]
 800439e:	682b      	ldr	r3, [r5, #0]
 80043a0:	0607      	lsls	r7, r0, #24
 80043a2:	f103 0104 	add.w	r1, r3, #4
 80043a6:	6029      	str	r1, [r5, #0]
 80043a8:	d501      	bpl.n	80043ae <_printf_i+0xbe>
 80043aa:	681e      	ldr	r6, [r3, #0]
 80043ac:	e003      	b.n	80043b6 <_printf_i+0xc6>
 80043ae:	0646      	lsls	r6, r0, #25
 80043b0:	d5fb      	bpl.n	80043aa <_printf_i+0xba>
 80043b2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80043b6:	2e00      	cmp	r6, #0
 80043b8:	da03      	bge.n	80043c2 <_printf_i+0xd2>
 80043ba:	232d      	movs	r3, #45	; 0x2d
 80043bc:	4276      	negs	r6, r6
 80043be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043c2:	230a      	movs	r3, #10
 80043c4:	4859      	ldr	r0, [pc, #356]	; (800452c <_printf_i+0x23c>)
 80043c6:	e012      	b.n	80043ee <_printf_i+0xfe>
 80043c8:	682b      	ldr	r3, [r5, #0]
 80043ca:	6820      	ldr	r0, [r4, #0]
 80043cc:	1d19      	adds	r1, r3, #4
 80043ce:	6029      	str	r1, [r5, #0]
 80043d0:	0605      	lsls	r5, r0, #24
 80043d2:	d501      	bpl.n	80043d8 <_printf_i+0xe8>
 80043d4:	681e      	ldr	r6, [r3, #0]
 80043d6:	e002      	b.n	80043de <_printf_i+0xee>
 80043d8:	0641      	lsls	r1, r0, #25
 80043da:	d5fb      	bpl.n	80043d4 <_printf_i+0xe4>
 80043dc:	881e      	ldrh	r6, [r3, #0]
 80043de:	2f6f      	cmp	r7, #111	; 0x6f
 80043e0:	bf0c      	ite	eq
 80043e2:	2308      	moveq	r3, #8
 80043e4:	230a      	movne	r3, #10
 80043e6:	4851      	ldr	r0, [pc, #324]	; (800452c <_printf_i+0x23c>)
 80043e8:	2100      	movs	r1, #0
 80043ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80043ee:	6865      	ldr	r5, [r4, #4]
 80043f0:	2d00      	cmp	r5, #0
 80043f2:	bfa8      	it	ge
 80043f4:	6821      	ldrge	r1, [r4, #0]
 80043f6:	60a5      	str	r5, [r4, #8]
 80043f8:	bfa4      	itt	ge
 80043fa:	f021 0104 	bicge.w	r1, r1, #4
 80043fe:	6021      	strge	r1, [r4, #0]
 8004400:	b90e      	cbnz	r6, 8004406 <_printf_i+0x116>
 8004402:	2d00      	cmp	r5, #0
 8004404:	d04b      	beq.n	800449e <_printf_i+0x1ae>
 8004406:	4615      	mov	r5, r2
 8004408:	fbb6 f1f3 	udiv	r1, r6, r3
 800440c:	fb03 6711 	mls	r7, r3, r1, r6
 8004410:	5dc7      	ldrb	r7, [r0, r7]
 8004412:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004416:	4637      	mov	r7, r6
 8004418:	42bb      	cmp	r3, r7
 800441a:	460e      	mov	r6, r1
 800441c:	d9f4      	bls.n	8004408 <_printf_i+0x118>
 800441e:	2b08      	cmp	r3, #8
 8004420:	d10b      	bne.n	800443a <_printf_i+0x14a>
 8004422:	6823      	ldr	r3, [r4, #0]
 8004424:	07de      	lsls	r6, r3, #31
 8004426:	d508      	bpl.n	800443a <_printf_i+0x14a>
 8004428:	6923      	ldr	r3, [r4, #16]
 800442a:	6861      	ldr	r1, [r4, #4]
 800442c:	4299      	cmp	r1, r3
 800442e:	bfde      	ittt	le
 8004430:	2330      	movle	r3, #48	; 0x30
 8004432:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004436:	f105 35ff 	addle.w	r5, r5, #4294967295
 800443a:	1b52      	subs	r2, r2, r5
 800443c:	6122      	str	r2, [r4, #16]
 800443e:	464b      	mov	r3, r9
 8004440:	4621      	mov	r1, r4
 8004442:	4640      	mov	r0, r8
 8004444:	f8cd a000 	str.w	sl, [sp]
 8004448:	aa03      	add	r2, sp, #12
 800444a:	f7ff fedf 	bl	800420c <_printf_common>
 800444e:	3001      	adds	r0, #1
 8004450:	d14a      	bne.n	80044e8 <_printf_i+0x1f8>
 8004452:	f04f 30ff 	mov.w	r0, #4294967295
 8004456:	b004      	add	sp, #16
 8004458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800445c:	6823      	ldr	r3, [r4, #0]
 800445e:	f043 0320 	orr.w	r3, r3, #32
 8004462:	6023      	str	r3, [r4, #0]
 8004464:	2778      	movs	r7, #120	; 0x78
 8004466:	4832      	ldr	r0, [pc, #200]	; (8004530 <_printf_i+0x240>)
 8004468:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800446c:	6823      	ldr	r3, [r4, #0]
 800446e:	6829      	ldr	r1, [r5, #0]
 8004470:	061f      	lsls	r7, r3, #24
 8004472:	f851 6b04 	ldr.w	r6, [r1], #4
 8004476:	d402      	bmi.n	800447e <_printf_i+0x18e>
 8004478:	065f      	lsls	r7, r3, #25
 800447a:	bf48      	it	mi
 800447c:	b2b6      	uxthmi	r6, r6
 800447e:	07df      	lsls	r7, r3, #31
 8004480:	bf48      	it	mi
 8004482:	f043 0320 	orrmi.w	r3, r3, #32
 8004486:	6029      	str	r1, [r5, #0]
 8004488:	bf48      	it	mi
 800448a:	6023      	strmi	r3, [r4, #0]
 800448c:	b91e      	cbnz	r6, 8004496 <_printf_i+0x1a6>
 800448e:	6823      	ldr	r3, [r4, #0]
 8004490:	f023 0320 	bic.w	r3, r3, #32
 8004494:	6023      	str	r3, [r4, #0]
 8004496:	2310      	movs	r3, #16
 8004498:	e7a6      	b.n	80043e8 <_printf_i+0xf8>
 800449a:	4824      	ldr	r0, [pc, #144]	; (800452c <_printf_i+0x23c>)
 800449c:	e7e4      	b.n	8004468 <_printf_i+0x178>
 800449e:	4615      	mov	r5, r2
 80044a0:	e7bd      	b.n	800441e <_printf_i+0x12e>
 80044a2:	682b      	ldr	r3, [r5, #0]
 80044a4:	6826      	ldr	r6, [r4, #0]
 80044a6:	1d18      	adds	r0, r3, #4
 80044a8:	6961      	ldr	r1, [r4, #20]
 80044aa:	6028      	str	r0, [r5, #0]
 80044ac:	0635      	lsls	r5, r6, #24
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	d501      	bpl.n	80044b6 <_printf_i+0x1c6>
 80044b2:	6019      	str	r1, [r3, #0]
 80044b4:	e002      	b.n	80044bc <_printf_i+0x1cc>
 80044b6:	0670      	lsls	r0, r6, #25
 80044b8:	d5fb      	bpl.n	80044b2 <_printf_i+0x1c2>
 80044ba:	8019      	strh	r1, [r3, #0]
 80044bc:	2300      	movs	r3, #0
 80044be:	4615      	mov	r5, r2
 80044c0:	6123      	str	r3, [r4, #16]
 80044c2:	e7bc      	b.n	800443e <_printf_i+0x14e>
 80044c4:	682b      	ldr	r3, [r5, #0]
 80044c6:	2100      	movs	r1, #0
 80044c8:	1d1a      	adds	r2, r3, #4
 80044ca:	602a      	str	r2, [r5, #0]
 80044cc:	681d      	ldr	r5, [r3, #0]
 80044ce:	6862      	ldr	r2, [r4, #4]
 80044d0:	4628      	mov	r0, r5
 80044d2:	f000 fc28 	bl	8004d26 <memchr>
 80044d6:	b108      	cbz	r0, 80044dc <_printf_i+0x1ec>
 80044d8:	1b40      	subs	r0, r0, r5
 80044da:	6060      	str	r0, [r4, #4]
 80044dc:	6863      	ldr	r3, [r4, #4]
 80044de:	6123      	str	r3, [r4, #16]
 80044e0:	2300      	movs	r3, #0
 80044e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044e6:	e7aa      	b.n	800443e <_printf_i+0x14e>
 80044e8:	462a      	mov	r2, r5
 80044ea:	4649      	mov	r1, r9
 80044ec:	4640      	mov	r0, r8
 80044ee:	6923      	ldr	r3, [r4, #16]
 80044f0:	47d0      	blx	sl
 80044f2:	3001      	adds	r0, #1
 80044f4:	d0ad      	beq.n	8004452 <_printf_i+0x162>
 80044f6:	6823      	ldr	r3, [r4, #0]
 80044f8:	079b      	lsls	r3, r3, #30
 80044fa:	d413      	bmi.n	8004524 <_printf_i+0x234>
 80044fc:	68e0      	ldr	r0, [r4, #12]
 80044fe:	9b03      	ldr	r3, [sp, #12]
 8004500:	4298      	cmp	r0, r3
 8004502:	bfb8      	it	lt
 8004504:	4618      	movlt	r0, r3
 8004506:	e7a6      	b.n	8004456 <_printf_i+0x166>
 8004508:	2301      	movs	r3, #1
 800450a:	4632      	mov	r2, r6
 800450c:	4649      	mov	r1, r9
 800450e:	4640      	mov	r0, r8
 8004510:	47d0      	blx	sl
 8004512:	3001      	adds	r0, #1
 8004514:	d09d      	beq.n	8004452 <_printf_i+0x162>
 8004516:	3501      	adds	r5, #1
 8004518:	68e3      	ldr	r3, [r4, #12]
 800451a:	9903      	ldr	r1, [sp, #12]
 800451c:	1a5b      	subs	r3, r3, r1
 800451e:	42ab      	cmp	r3, r5
 8004520:	dcf2      	bgt.n	8004508 <_printf_i+0x218>
 8004522:	e7eb      	b.n	80044fc <_printf_i+0x20c>
 8004524:	2500      	movs	r5, #0
 8004526:	f104 0619 	add.w	r6, r4, #25
 800452a:	e7f5      	b.n	8004518 <_printf_i+0x228>
 800452c:	0800946a 	.word	0x0800946a
 8004530:	0800947b 	.word	0x0800947b

08004534 <_scanf_float>:
 8004534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004538:	b087      	sub	sp, #28
 800453a:	9303      	str	r3, [sp, #12]
 800453c:	688b      	ldr	r3, [r1, #8]
 800453e:	4617      	mov	r7, r2
 8004540:	1e5a      	subs	r2, r3, #1
 8004542:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004546:	bf85      	ittet	hi
 8004548:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800454c:	195b      	addhi	r3, r3, r5
 800454e:	2300      	movls	r3, #0
 8004550:	9302      	strhi	r3, [sp, #8]
 8004552:	bf88      	it	hi
 8004554:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004558:	468b      	mov	fp, r1
 800455a:	f04f 0500 	mov.w	r5, #0
 800455e:	bf8c      	ite	hi
 8004560:	608b      	strhi	r3, [r1, #8]
 8004562:	9302      	strls	r3, [sp, #8]
 8004564:	680b      	ldr	r3, [r1, #0]
 8004566:	4680      	mov	r8, r0
 8004568:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800456c:	f84b 3b1c 	str.w	r3, [fp], #28
 8004570:	460c      	mov	r4, r1
 8004572:	465e      	mov	r6, fp
 8004574:	46aa      	mov	sl, r5
 8004576:	46a9      	mov	r9, r5
 8004578:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800457c:	9501      	str	r5, [sp, #4]
 800457e:	68a2      	ldr	r2, [r4, #8]
 8004580:	b152      	cbz	r2, 8004598 <_scanf_float+0x64>
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	2b4e      	cmp	r3, #78	; 0x4e
 8004588:	d864      	bhi.n	8004654 <_scanf_float+0x120>
 800458a:	2b40      	cmp	r3, #64	; 0x40
 800458c:	d83c      	bhi.n	8004608 <_scanf_float+0xd4>
 800458e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8004592:	b2c8      	uxtb	r0, r1
 8004594:	280e      	cmp	r0, #14
 8004596:	d93a      	bls.n	800460e <_scanf_float+0xda>
 8004598:	f1b9 0f00 	cmp.w	r9, #0
 800459c:	d003      	beq.n	80045a6 <_scanf_float+0x72>
 800459e:	6823      	ldr	r3, [r4, #0]
 80045a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045a4:	6023      	str	r3, [r4, #0]
 80045a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80045aa:	f1ba 0f01 	cmp.w	sl, #1
 80045ae:	f200 8113 	bhi.w	80047d8 <_scanf_float+0x2a4>
 80045b2:	455e      	cmp	r6, fp
 80045b4:	f200 8105 	bhi.w	80047c2 <_scanf_float+0x28e>
 80045b8:	2501      	movs	r5, #1
 80045ba:	4628      	mov	r0, r5
 80045bc:	b007      	add	sp, #28
 80045be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045c2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80045c6:	2a0d      	cmp	r2, #13
 80045c8:	d8e6      	bhi.n	8004598 <_scanf_float+0x64>
 80045ca:	a101      	add	r1, pc, #4	; (adr r1, 80045d0 <_scanf_float+0x9c>)
 80045cc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80045d0:	0800470f 	.word	0x0800470f
 80045d4:	08004599 	.word	0x08004599
 80045d8:	08004599 	.word	0x08004599
 80045dc:	08004599 	.word	0x08004599
 80045e0:	0800476f 	.word	0x0800476f
 80045e4:	08004747 	.word	0x08004747
 80045e8:	08004599 	.word	0x08004599
 80045ec:	08004599 	.word	0x08004599
 80045f0:	0800471d 	.word	0x0800471d
 80045f4:	08004599 	.word	0x08004599
 80045f8:	08004599 	.word	0x08004599
 80045fc:	08004599 	.word	0x08004599
 8004600:	08004599 	.word	0x08004599
 8004604:	080046d5 	.word	0x080046d5
 8004608:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800460c:	e7db      	b.n	80045c6 <_scanf_float+0x92>
 800460e:	290e      	cmp	r1, #14
 8004610:	d8c2      	bhi.n	8004598 <_scanf_float+0x64>
 8004612:	a001      	add	r0, pc, #4	; (adr r0, 8004618 <_scanf_float+0xe4>)
 8004614:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004618:	080046c7 	.word	0x080046c7
 800461c:	08004599 	.word	0x08004599
 8004620:	080046c7 	.word	0x080046c7
 8004624:	0800475b 	.word	0x0800475b
 8004628:	08004599 	.word	0x08004599
 800462c:	08004675 	.word	0x08004675
 8004630:	080046b1 	.word	0x080046b1
 8004634:	080046b1 	.word	0x080046b1
 8004638:	080046b1 	.word	0x080046b1
 800463c:	080046b1 	.word	0x080046b1
 8004640:	080046b1 	.word	0x080046b1
 8004644:	080046b1 	.word	0x080046b1
 8004648:	080046b1 	.word	0x080046b1
 800464c:	080046b1 	.word	0x080046b1
 8004650:	080046b1 	.word	0x080046b1
 8004654:	2b6e      	cmp	r3, #110	; 0x6e
 8004656:	d809      	bhi.n	800466c <_scanf_float+0x138>
 8004658:	2b60      	cmp	r3, #96	; 0x60
 800465a:	d8b2      	bhi.n	80045c2 <_scanf_float+0x8e>
 800465c:	2b54      	cmp	r3, #84	; 0x54
 800465e:	d077      	beq.n	8004750 <_scanf_float+0x21c>
 8004660:	2b59      	cmp	r3, #89	; 0x59
 8004662:	d199      	bne.n	8004598 <_scanf_float+0x64>
 8004664:	2d07      	cmp	r5, #7
 8004666:	d197      	bne.n	8004598 <_scanf_float+0x64>
 8004668:	2508      	movs	r5, #8
 800466a:	e029      	b.n	80046c0 <_scanf_float+0x18c>
 800466c:	2b74      	cmp	r3, #116	; 0x74
 800466e:	d06f      	beq.n	8004750 <_scanf_float+0x21c>
 8004670:	2b79      	cmp	r3, #121	; 0x79
 8004672:	e7f6      	b.n	8004662 <_scanf_float+0x12e>
 8004674:	6821      	ldr	r1, [r4, #0]
 8004676:	05c8      	lsls	r0, r1, #23
 8004678:	d51a      	bpl.n	80046b0 <_scanf_float+0x17c>
 800467a:	9b02      	ldr	r3, [sp, #8]
 800467c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004680:	6021      	str	r1, [r4, #0]
 8004682:	f109 0901 	add.w	r9, r9, #1
 8004686:	b11b      	cbz	r3, 8004690 <_scanf_float+0x15c>
 8004688:	3b01      	subs	r3, #1
 800468a:	3201      	adds	r2, #1
 800468c:	9302      	str	r3, [sp, #8]
 800468e:	60a2      	str	r2, [r4, #8]
 8004690:	68a3      	ldr	r3, [r4, #8]
 8004692:	3b01      	subs	r3, #1
 8004694:	60a3      	str	r3, [r4, #8]
 8004696:	6923      	ldr	r3, [r4, #16]
 8004698:	3301      	adds	r3, #1
 800469a:	6123      	str	r3, [r4, #16]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	3b01      	subs	r3, #1
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	607b      	str	r3, [r7, #4]
 80046a4:	f340 8084 	ble.w	80047b0 <_scanf_float+0x27c>
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	3301      	adds	r3, #1
 80046ac:	603b      	str	r3, [r7, #0]
 80046ae:	e766      	b.n	800457e <_scanf_float+0x4a>
 80046b0:	eb1a 0f05 	cmn.w	sl, r5
 80046b4:	f47f af70 	bne.w	8004598 <_scanf_float+0x64>
 80046b8:	6822      	ldr	r2, [r4, #0]
 80046ba:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80046be:	6022      	str	r2, [r4, #0]
 80046c0:	f806 3b01 	strb.w	r3, [r6], #1
 80046c4:	e7e4      	b.n	8004690 <_scanf_float+0x15c>
 80046c6:	6822      	ldr	r2, [r4, #0]
 80046c8:	0610      	lsls	r0, r2, #24
 80046ca:	f57f af65 	bpl.w	8004598 <_scanf_float+0x64>
 80046ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046d2:	e7f4      	b.n	80046be <_scanf_float+0x18a>
 80046d4:	f1ba 0f00 	cmp.w	sl, #0
 80046d8:	d10e      	bne.n	80046f8 <_scanf_float+0x1c4>
 80046da:	f1b9 0f00 	cmp.w	r9, #0
 80046de:	d10e      	bne.n	80046fe <_scanf_float+0x1ca>
 80046e0:	6822      	ldr	r2, [r4, #0]
 80046e2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80046e6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80046ea:	d108      	bne.n	80046fe <_scanf_float+0x1ca>
 80046ec:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80046f0:	f04f 0a01 	mov.w	sl, #1
 80046f4:	6022      	str	r2, [r4, #0]
 80046f6:	e7e3      	b.n	80046c0 <_scanf_float+0x18c>
 80046f8:	f1ba 0f02 	cmp.w	sl, #2
 80046fc:	d055      	beq.n	80047aa <_scanf_float+0x276>
 80046fe:	2d01      	cmp	r5, #1
 8004700:	d002      	beq.n	8004708 <_scanf_float+0x1d4>
 8004702:	2d04      	cmp	r5, #4
 8004704:	f47f af48 	bne.w	8004598 <_scanf_float+0x64>
 8004708:	3501      	adds	r5, #1
 800470a:	b2ed      	uxtb	r5, r5
 800470c:	e7d8      	b.n	80046c0 <_scanf_float+0x18c>
 800470e:	f1ba 0f01 	cmp.w	sl, #1
 8004712:	f47f af41 	bne.w	8004598 <_scanf_float+0x64>
 8004716:	f04f 0a02 	mov.w	sl, #2
 800471a:	e7d1      	b.n	80046c0 <_scanf_float+0x18c>
 800471c:	b97d      	cbnz	r5, 800473e <_scanf_float+0x20a>
 800471e:	f1b9 0f00 	cmp.w	r9, #0
 8004722:	f47f af3c 	bne.w	800459e <_scanf_float+0x6a>
 8004726:	6822      	ldr	r2, [r4, #0]
 8004728:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800472c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004730:	f47f af39 	bne.w	80045a6 <_scanf_float+0x72>
 8004734:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004738:	2501      	movs	r5, #1
 800473a:	6022      	str	r2, [r4, #0]
 800473c:	e7c0      	b.n	80046c0 <_scanf_float+0x18c>
 800473e:	2d03      	cmp	r5, #3
 8004740:	d0e2      	beq.n	8004708 <_scanf_float+0x1d4>
 8004742:	2d05      	cmp	r5, #5
 8004744:	e7de      	b.n	8004704 <_scanf_float+0x1d0>
 8004746:	2d02      	cmp	r5, #2
 8004748:	f47f af26 	bne.w	8004598 <_scanf_float+0x64>
 800474c:	2503      	movs	r5, #3
 800474e:	e7b7      	b.n	80046c0 <_scanf_float+0x18c>
 8004750:	2d06      	cmp	r5, #6
 8004752:	f47f af21 	bne.w	8004598 <_scanf_float+0x64>
 8004756:	2507      	movs	r5, #7
 8004758:	e7b2      	b.n	80046c0 <_scanf_float+0x18c>
 800475a:	6822      	ldr	r2, [r4, #0]
 800475c:	0591      	lsls	r1, r2, #22
 800475e:	f57f af1b 	bpl.w	8004598 <_scanf_float+0x64>
 8004762:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8004766:	6022      	str	r2, [r4, #0]
 8004768:	f8cd 9004 	str.w	r9, [sp, #4]
 800476c:	e7a8      	b.n	80046c0 <_scanf_float+0x18c>
 800476e:	6822      	ldr	r2, [r4, #0]
 8004770:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004774:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004778:	d006      	beq.n	8004788 <_scanf_float+0x254>
 800477a:	0550      	lsls	r0, r2, #21
 800477c:	f57f af0c 	bpl.w	8004598 <_scanf_float+0x64>
 8004780:	f1b9 0f00 	cmp.w	r9, #0
 8004784:	f43f af0f 	beq.w	80045a6 <_scanf_float+0x72>
 8004788:	0591      	lsls	r1, r2, #22
 800478a:	bf58      	it	pl
 800478c:	9901      	ldrpl	r1, [sp, #4]
 800478e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004792:	bf58      	it	pl
 8004794:	eba9 0101 	subpl.w	r1, r9, r1
 8004798:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800479c:	f04f 0900 	mov.w	r9, #0
 80047a0:	bf58      	it	pl
 80047a2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80047a6:	6022      	str	r2, [r4, #0]
 80047a8:	e78a      	b.n	80046c0 <_scanf_float+0x18c>
 80047aa:	f04f 0a03 	mov.w	sl, #3
 80047ae:	e787      	b.n	80046c0 <_scanf_float+0x18c>
 80047b0:	4639      	mov	r1, r7
 80047b2:	4640      	mov	r0, r8
 80047b4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80047b8:	4798      	blx	r3
 80047ba:	2800      	cmp	r0, #0
 80047bc:	f43f aedf 	beq.w	800457e <_scanf_float+0x4a>
 80047c0:	e6ea      	b.n	8004598 <_scanf_float+0x64>
 80047c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80047c6:	463a      	mov	r2, r7
 80047c8:	4640      	mov	r0, r8
 80047ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80047ce:	4798      	blx	r3
 80047d0:	6923      	ldr	r3, [r4, #16]
 80047d2:	3b01      	subs	r3, #1
 80047d4:	6123      	str	r3, [r4, #16]
 80047d6:	e6ec      	b.n	80045b2 <_scanf_float+0x7e>
 80047d8:	1e6b      	subs	r3, r5, #1
 80047da:	2b06      	cmp	r3, #6
 80047dc:	d825      	bhi.n	800482a <_scanf_float+0x2f6>
 80047de:	2d02      	cmp	r5, #2
 80047e0:	d836      	bhi.n	8004850 <_scanf_float+0x31c>
 80047e2:	455e      	cmp	r6, fp
 80047e4:	f67f aee8 	bls.w	80045b8 <_scanf_float+0x84>
 80047e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80047ec:	463a      	mov	r2, r7
 80047ee:	4640      	mov	r0, r8
 80047f0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80047f4:	4798      	blx	r3
 80047f6:	6923      	ldr	r3, [r4, #16]
 80047f8:	3b01      	subs	r3, #1
 80047fa:	6123      	str	r3, [r4, #16]
 80047fc:	e7f1      	b.n	80047e2 <_scanf_float+0x2ae>
 80047fe:	9802      	ldr	r0, [sp, #8]
 8004800:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004804:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004808:	463a      	mov	r2, r7
 800480a:	9002      	str	r0, [sp, #8]
 800480c:	4640      	mov	r0, r8
 800480e:	4798      	blx	r3
 8004810:	6923      	ldr	r3, [r4, #16]
 8004812:	3b01      	subs	r3, #1
 8004814:	6123      	str	r3, [r4, #16]
 8004816:	f10a 3aff 	add.w	sl, sl, #4294967295
 800481a:	fa5f fa8a 	uxtb.w	sl, sl
 800481e:	f1ba 0f02 	cmp.w	sl, #2
 8004822:	d1ec      	bne.n	80047fe <_scanf_float+0x2ca>
 8004824:	3d03      	subs	r5, #3
 8004826:	b2ed      	uxtb	r5, r5
 8004828:	1b76      	subs	r6, r6, r5
 800482a:	6823      	ldr	r3, [r4, #0]
 800482c:	05da      	lsls	r2, r3, #23
 800482e:	d52f      	bpl.n	8004890 <_scanf_float+0x35c>
 8004830:	055b      	lsls	r3, r3, #21
 8004832:	d510      	bpl.n	8004856 <_scanf_float+0x322>
 8004834:	455e      	cmp	r6, fp
 8004836:	f67f aebf 	bls.w	80045b8 <_scanf_float+0x84>
 800483a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800483e:	463a      	mov	r2, r7
 8004840:	4640      	mov	r0, r8
 8004842:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004846:	4798      	blx	r3
 8004848:	6923      	ldr	r3, [r4, #16]
 800484a:	3b01      	subs	r3, #1
 800484c:	6123      	str	r3, [r4, #16]
 800484e:	e7f1      	b.n	8004834 <_scanf_float+0x300>
 8004850:	46aa      	mov	sl, r5
 8004852:	9602      	str	r6, [sp, #8]
 8004854:	e7df      	b.n	8004816 <_scanf_float+0x2e2>
 8004856:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800485a:	6923      	ldr	r3, [r4, #16]
 800485c:	2965      	cmp	r1, #101	; 0x65
 800485e:	f103 33ff 	add.w	r3, r3, #4294967295
 8004862:	f106 35ff 	add.w	r5, r6, #4294967295
 8004866:	6123      	str	r3, [r4, #16]
 8004868:	d00c      	beq.n	8004884 <_scanf_float+0x350>
 800486a:	2945      	cmp	r1, #69	; 0x45
 800486c:	d00a      	beq.n	8004884 <_scanf_float+0x350>
 800486e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004872:	463a      	mov	r2, r7
 8004874:	4640      	mov	r0, r8
 8004876:	4798      	blx	r3
 8004878:	6923      	ldr	r3, [r4, #16]
 800487a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800487e:	3b01      	subs	r3, #1
 8004880:	1eb5      	subs	r5, r6, #2
 8004882:	6123      	str	r3, [r4, #16]
 8004884:	463a      	mov	r2, r7
 8004886:	4640      	mov	r0, r8
 8004888:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800488c:	4798      	blx	r3
 800488e:	462e      	mov	r6, r5
 8004890:	6825      	ldr	r5, [r4, #0]
 8004892:	f015 0510 	ands.w	r5, r5, #16
 8004896:	d155      	bne.n	8004944 <_scanf_float+0x410>
 8004898:	7035      	strb	r5, [r6, #0]
 800489a:	6823      	ldr	r3, [r4, #0]
 800489c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80048a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048a4:	d11d      	bne.n	80048e2 <_scanf_float+0x3ae>
 80048a6:	9b01      	ldr	r3, [sp, #4]
 80048a8:	454b      	cmp	r3, r9
 80048aa:	eba3 0209 	sub.w	r2, r3, r9
 80048ae:	d125      	bne.n	80048fc <_scanf_float+0x3c8>
 80048b0:	2200      	movs	r2, #0
 80048b2:	4659      	mov	r1, fp
 80048b4:	4640      	mov	r0, r8
 80048b6:	f002 fc77 	bl	80071a8 <_strtod_r>
 80048ba:	9b03      	ldr	r3, [sp, #12]
 80048bc:	f8d4 c000 	ldr.w	ip, [r4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f01c 0f02 	tst.w	ip, #2
 80048c6:	4606      	mov	r6, r0
 80048c8:	460f      	mov	r7, r1
 80048ca:	f103 0204 	add.w	r2, r3, #4
 80048ce:	d020      	beq.n	8004912 <_scanf_float+0x3de>
 80048d0:	9903      	ldr	r1, [sp, #12]
 80048d2:	600a      	str	r2, [r1, #0]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	e9c3 6700 	strd	r6, r7, [r3]
 80048da:	68e3      	ldr	r3, [r4, #12]
 80048dc:	3301      	adds	r3, #1
 80048de:	60e3      	str	r3, [r4, #12]
 80048e0:	e66b      	b.n	80045ba <_scanf_float+0x86>
 80048e2:	9b04      	ldr	r3, [sp, #16]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d0e3      	beq.n	80048b0 <_scanf_float+0x37c>
 80048e8:	9905      	ldr	r1, [sp, #20]
 80048ea:	230a      	movs	r3, #10
 80048ec:	462a      	mov	r2, r5
 80048ee:	4640      	mov	r0, r8
 80048f0:	3101      	adds	r1, #1
 80048f2:	f002 fcdd 	bl	80072b0 <_strtol_r>
 80048f6:	9b04      	ldr	r3, [sp, #16]
 80048f8:	9e05      	ldr	r6, [sp, #20]
 80048fa:	1ac2      	subs	r2, r0, r3
 80048fc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004900:	429e      	cmp	r6, r3
 8004902:	bf28      	it	cs
 8004904:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8004908:	4630      	mov	r0, r6
 800490a:	490f      	ldr	r1, [pc, #60]	; (8004948 <_scanf_float+0x414>)
 800490c:	f000 f8e2 	bl	8004ad4 <siprintf>
 8004910:	e7ce      	b.n	80048b0 <_scanf_float+0x37c>
 8004912:	f01c 0f04 	tst.w	ip, #4
 8004916:	d1db      	bne.n	80048d0 <_scanf_float+0x39c>
 8004918:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800491c:	f8cc 2000 	str.w	r2, [ip]
 8004920:	f8d3 8000 	ldr.w	r8, [r3]
 8004924:	4602      	mov	r2, r0
 8004926:	460b      	mov	r3, r1
 8004928:	f7fc f87a 	bl	8000a20 <__aeabi_dcmpun>
 800492c:	b128      	cbz	r0, 800493a <_scanf_float+0x406>
 800492e:	4807      	ldr	r0, [pc, #28]	; (800494c <_scanf_float+0x418>)
 8004930:	f000 fa16 	bl	8004d60 <nanf>
 8004934:	f8c8 0000 	str.w	r0, [r8]
 8004938:	e7cf      	b.n	80048da <_scanf_float+0x3a6>
 800493a:	4630      	mov	r0, r6
 800493c:	4639      	mov	r1, r7
 800493e:	f7fc f8cd 	bl	8000adc <__aeabi_d2f>
 8004942:	e7f7      	b.n	8004934 <_scanf_float+0x400>
 8004944:	2500      	movs	r5, #0
 8004946:	e638      	b.n	80045ba <_scanf_float+0x86>
 8004948:	0800948c 	.word	0x0800948c
 800494c:	08009838 	.word	0x08009838

08004950 <std>:
 8004950:	2300      	movs	r3, #0
 8004952:	b510      	push	{r4, lr}
 8004954:	4604      	mov	r4, r0
 8004956:	e9c0 3300 	strd	r3, r3, [r0]
 800495a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800495e:	6083      	str	r3, [r0, #8]
 8004960:	8181      	strh	r1, [r0, #12]
 8004962:	6643      	str	r3, [r0, #100]	; 0x64
 8004964:	81c2      	strh	r2, [r0, #14]
 8004966:	6183      	str	r3, [r0, #24]
 8004968:	4619      	mov	r1, r3
 800496a:	2208      	movs	r2, #8
 800496c:	305c      	adds	r0, #92	; 0x5c
 800496e:	f000 f95a 	bl	8004c26 <memset>
 8004972:	4b0d      	ldr	r3, [pc, #52]	; (80049a8 <std+0x58>)
 8004974:	6224      	str	r4, [r4, #32]
 8004976:	6263      	str	r3, [r4, #36]	; 0x24
 8004978:	4b0c      	ldr	r3, [pc, #48]	; (80049ac <std+0x5c>)
 800497a:	62a3      	str	r3, [r4, #40]	; 0x28
 800497c:	4b0c      	ldr	r3, [pc, #48]	; (80049b0 <std+0x60>)
 800497e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004980:	4b0c      	ldr	r3, [pc, #48]	; (80049b4 <std+0x64>)
 8004982:	6323      	str	r3, [r4, #48]	; 0x30
 8004984:	4b0c      	ldr	r3, [pc, #48]	; (80049b8 <std+0x68>)
 8004986:	429c      	cmp	r4, r3
 8004988:	d006      	beq.n	8004998 <std+0x48>
 800498a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800498e:	4294      	cmp	r4, r2
 8004990:	d002      	beq.n	8004998 <std+0x48>
 8004992:	33d0      	adds	r3, #208	; 0xd0
 8004994:	429c      	cmp	r4, r3
 8004996:	d105      	bne.n	80049a4 <std+0x54>
 8004998:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800499c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049a0:	f000 b9be 	b.w	8004d20 <__retarget_lock_init_recursive>
 80049a4:	bd10      	pop	{r4, pc}
 80049a6:	bf00      	nop
 80049a8:	08004b69 	.word	0x08004b69
 80049ac:	08004b8f 	.word	0x08004b8f
 80049b0:	08004bc7 	.word	0x08004bc7
 80049b4:	08004beb 	.word	0x08004beb
 80049b8:	200006f4 	.word	0x200006f4

080049bc <stdio_exit_handler>:
 80049bc:	4a02      	ldr	r2, [pc, #8]	; (80049c8 <stdio_exit_handler+0xc>)
 80049be:	4903      	ldr	r1, [pc, #12]	; (80049cc <stdio_exit_handler+0x10>)
 80049c0:	4803      	ldr	r0, [pc, #12]	; (80049d0 <stdio_exit_handler+0x14>)
 80049c2:	f000 b869 	b.w	8004a98 <_fwalk_sglue>
 80049c6:	bf00      	nop
 80049c8:	2000000c 	.word	0x2000000c
 80049cc:	08007ca5 	.word	0x08007ca5
 80049d0:	20000018 	.word	0x20000018

080049d4 <cleanup_stdio>:
 80049d4:	6841      	ldr	r1, [r0, #4]
 80049d6:	4b0c      	ldr	r3, [pc, #48]	; (8004a08 <cleanup_stdio+0x34>)
 80049d8:	b510      	push	{r4, lr}
 80049da:	4299      	cmp	r1, r3
 80049dc:	4604      	mov	r4, r0
 80049de:	d001      	beq.n	80049e4 <cleanup_stdio+0x10>
 80049e0:	f003 f960 	bl	8007ca4 <_fflush_r>
 80049e4:	68a1      	ldr	r1, [r4, #8]
 80049e6:	4b09      	ldr	r3, [pc, #36]	; (8004a0c <cleanup_stdio+0x38>)
 80049e8:	4299      	cmp	r1, r3
 80049ea:	d002      	beq.n	80049f2 <cleanup_stdio+0x1e>
 80049ec:	4620      	mov	r0, r4
 80049ee:	f003 f959 	bl	8007ca4 <_fflush_r>
 80049f2:	68e1      	ldr	r1, [r4, #12]
 80049f4:	4b06      	ldr	r3, [pc, #24]	; (8004a10 <cleanup_stdio+0x3c>)
 80049f6:	4299      	cmp	r1, r3
 80049f8:	d004      	beq.n	8004a04 <cleanup_stdio+0x30>
 80049fa:	4620      	mov	r0, r4
 80049fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a00:	f003 b950 	b.w	8007ca4 <_fflush_r>
 8004a04:	bd10      	pop	{r4, pc}
 8004a06:	bf00      	nop
 8004a08:	200006f4 	.word	0x200006f4
 8004a0c:	2000075c 	.word	0x2000075c
 8004a10:	200007c4 	.word	0x200007c4

08004a14 <global_stdio_init.part.0>:
 8004a14:	b510      	push	{r4, lr}
 8004a16:	4b0b      	ldr	r3, [pc, #44]	; (8004a44 <global_stdio_init.part.0+0x30>)
 8004a18:	4c0b      	ldr	r4, [pc, #44]	; (8004a48 <global_stdio_init.part.0+0x34>)
 8004a1a:	4a0c      	ldr	r2, [pc, #48]	; (8004a4c <global_stdio_init.part.0+0x38>)
 8004a1c:	4620      	mov	r0, r4
 8004a1e:	601a      	str	r2, [r3, #0]
 8004a20:	2104      	movs	r1, #4
 8004a22:	2200      	movs	r2, #0
 8004a24:	f7ff ff94 	bl	8004950 <std>
 8004a28:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	2109      	movs	r1, #9
 8004a30:	f7ff ff8e 	bl	8004950 <std>
 8004a34:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004a38:	2202      	movs	r2, #2
 8004a3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a3e:	2112      	movs	r1, #18
 8004a40:	f7ff bf86 	b.w	8004950 <std>
 8004a44:	2000082c 	.word	0x2000082c
 8004a48:	200006f4 	.word	0x200006f4
 8004a4c:	080049bd 	.word	0x080049bd

08004a50 <__sfp_lock_acquire>:
 8004a50:	4801      	ldr	r0, [pc, #4]	; (8004a58 <__sfp_lock_acquire+0x8>)
 8004a52:	f000 b966 	b.w	8004d22 <__retarget_lock_acquire_recursive>
 8004a56:	bf00      	nop
 8004a58:	20000835 	.word	0x20000835

08004a5c <__sfp_lock_release>:
 8004a5c:	4801      	ldr	r0, [pc, #4]	; (8004a64 <__sfp_lock_release+0x8>)
 8004a5e:	f000 b961 	b.w	8004d24 <__retarget_lock_release_recursive>
 8004a62:	bf00      	nop
 8004a64:	20000835 	.word	0x20000835

08004a68 <__sinit>:
 8004a68:	b510      	push	{r4, lr}
 8004a6a:	4604      	mov	r4, r0
 8004a6c:	f7ff fff0 	bl	8004a50 <__sfp_lock_acquire>
 8004a70:	6a23      	ldr	r3, [r4, #32]
 8004a72:	b11b      	cbz	r3, 8004a7c <__sinit+0x14>
 8004a74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a78:	f7ff bff0 	b.w	8004a5c <__sfp_lock_release>
 8004a7c:	4b04      	ldr	r3, [pc, #16]	; (8004a90 <__sinit+0x28>)
 8004a7e:	6223      	str	r3, [r4, #32]
 8004a80:	4b04      	ldr	r3, [pc, #16]	; (8004a94 <__sinit+0x2c>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d1f5      	bne.n	8004a74 <__sinit+0xc>
 8004a88:	f7ff ffc4 	bl	8004a14 <global_stdio_init.part.0>
 8004a8c:	e7f2      	b.n	8004a74 <__sinit+0xc>
 8004a8e:	bf00      	nop
 8004a90:	080049d5 	.word	0x080049d5
 8004a94:	2000082c 	.word	0x2000082c

08004a98 <_fwalk_sglue>:
 8004a98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a9c:	4607      	mov	r7, r0
 8004a9e:	4688      	mov	r8, r1
 8004aa0:	4614      	mov	r4, r2
 8004aa2:	2600      	movs	r6, #0
 8004aa4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004aa8:	f1b9 0901 	subs.w	r9, r9, #1
 8004aac:	d505      	bpl.n	8004aba <_fwalk_sglue+0x22>
 8004aae:	6824      	ldr	r4, [r4, #0]
 8004ab0:	2c00      	cmp	r4, #0
 8004ab2:	d1f7      	bne.n	8004aa4 <_fwalk_sglue+0xc>
 8004ab4:	4630      	mov	r0, r6
 8004ab6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004aba:	89ab      	ldrh	r3, [r5, #12]
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d907      	bls.n	8004ad0 <_fwalk_sglue+0x38>
 8004ac0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	d003      	beq.n	8004ad0 <_fwalk_sglue+0x38>
 8004ac8:	4629      	mov	r1, r5
 8004aca:	4638      	mov	r0, r7
 8004acc:	47c0      	blx	r8
 8004ace:	4306      	orrs	r6, r0
 8004ad0:	3568      	adds	r5, #104	; 0x68
 8004ad2:	e7e9      	b.n	8004aa8 <_fwalk_sglue+0x10>

08004ad4 <siprintf>:
 8004ad4:	b40e      	push	{r1, r2, r3}
 8004ad6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004ada:	b500      	push	{lr}
 8004adc:	b09c      	sub	sp, #112	; 0x70
 8004ade:	ab1d      	add	r3, sp, #116	; 0x74
 8004ae0:	9002      	str	r0, [sp, #8]
 8004ae2:	9006      	str	r0, [sp, #24]
 8004ae4:	9107      	str	r1, [sp, #28]
 8004ae6:	9104      	str	r1, [sp, #16]
 8004ae8:	4808      	ldr	r0, [pc, #32]	; (8004b0c <siprintf+0x38>)
 8004aea:	4909      	ldr	r1, [pc, #36]	; (8004b10 <siprintf+0x3c>)
 8004aec:	f853 2b04 	ldr.w	r2, [r3], #4
 8004af0:	9105      	str	r1, [sp, #20]
 8004af2:	6800      	ldr	r0, [r0, #0]
 8004af4:	a902      	add	r1, sp, #8
 8004af6:	9301      	str	r3, [sp, #4]
 8004af8:	f002 fc36 	bl	8007368 <_svfiprintf_r>
 8004afc:	2200      	movs	r2, #0
 8004afe:	9b02      	ldr	r3, [sp, #8]
 8004b00:	701a      	strb	r2, [r3, #0]
 8004b02:	b01c      	add	sp, #112	; 0x70
 8004b04:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b08:	b003      	add	sp, #12
 8004b0a:	4770      	bx	lr
 8004b0c:	20000064 	.word	0x20000064
 8004b10:	ffff0208 	.word	0xffff0208

08004b14 <siscanf>:
 8004b14:	b40e      	push	{r1, r2, r3}
 8004b16:	f44f 7201 	mov.w	r2, #516	; 0x204
 8004b1a:	b530      	push	{r4, r5, lr}
 8004b1c:	b09c      	sub	sp, #112	; 0x70
 8004b1e:	ac1f      	add	r4, sp, #124	; 0x7c
 8004b20:	f854 5b04 	ldr.w	r5, [r4], #4
 8004b24:	f8ad 2014 	strh.w	r2, [sp, #20]
 8004b28:	9002      	str	r0, [sp, #8]
 8004b2a:	9006      	str	r0, [sp, #24]
 8004b2c:	f7fb fb1a 	bl	8000164 <strlen>
 8004b30:	4b0b      	ldr	r3, [pc, #44]	; (8004b60 <siscanf+0x4c>)
 8004b32:	9003      	str	r0, [sp, #12]
 8004b34:	930b      	str	r3, [sp, #44]	; 0x2c
 8004b36:	2300      	movs	r3, #0
 8004b38:	930f      	str	r3, [sp, #60]	; 0x3c
 8004b3a:	9314      	str	r3, [sp, #80]	; 0x50
 8004b3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b40:	9007      	str	r0, [sp, #28]
 8004b42:	4808      	ldr	r0, [pc, #32]	; (8004b64 <siscanf+0x50>)
 8004b44:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004b48:	462a      	mov	r2, r5
 8004b4a:	4623      	mov	r3, r4
 8004b4c:	a902      	add	r1, sp, #8
 8004b4e:	6800      	ldr	r0, [r0, #0]
 8004b50:	9401      	str	r4, [sp, #4]
 8004b52:	f002 fd61 	bl	8007618 <__ssvfiscanf_r>
 8004b56:	b01c      	add	sp, #112	; 0x70
 8004b58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b5c:	b003      	add	sp, #12
 8004b5e:	4770      	bx	lr
 8004b60:	08004b8b 	.word	0x08004b8b
 8004b64:	20000064 	.word	0x20000064

08004b68 <__sread>:
 8004b68:	b510      	push	{r4, lr}
 8004b6a:	460c      	mov	r4, r1
 8004b6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b70:	f000 f888 	bl	8004c84 <_read_r>
 8004b74:	2800      	cmp	r0, #0
 8004b76:	bfab      	itete	ge
 8004b78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004b7a:	89a3      	ldrhlt	r3, [r4, #12]
 8004b7c:	181b      	addge	r3, r3, r0
 8004b7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004b82:	bfac      	ite	ge
 8004b84:	6563      	strge	r3, [r4, #84]	; 0x54
 8004b86:	81a3      	strhlt	r3, [r4, #12]
 8004b88:	bd10      	pop	{r4, pc}

08004b8a <__seofread>:
 8004b8a:	2000      	movs	r0, #0
 8004b8c:	4770      	bx	lr

08004b8e <__swrite>:
 8004b8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b92:	461f      	mov	r7, r3
 8004b94:	898b      	ldrh	r3, [r1, #12]
 8004b96:	4605      	mov	r5, r0
 8004b98:	05db      	lsls	r3, r3, #23
 8004b9a:	460c      	mov	r4, r1
 8004b9c:	4616      	mov	r6, r2
 8004b9e:	d505      	bpl.n	8004bac <__swrite+0x1e>
 8004ba0:	2302      	movs	r3, #2
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ba8:	f000 f85a 	bl	8004c60 <_lseek_r>
 8004bac:	89a3      	ldrh	r3, [r4, #12]
 8004bae:	4632      	mov	r2, r6
 8004bb0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004bb4:	81a3      	strh	r3, [r4, #12]
 8004bb6:	4628      	mov	r0, r5
 8004bb8:	463b      	mov	r3, r7
 8004bba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004bbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004bc2:	f000 b871 	b.w	8004ca8 <_write_r>

08004bc6 <__sseek>:
 8004bc6:	b510      	push	{r4, lr}
 8004bc8:	460c      	mov	r4, r1
 8004bca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bce:	f000 f847 	bl	8004c60 <_lseek_r>
 8004bd2:	1c43      	adds	r3, r0, #1
 8004bd4:	89a3      	ldrh	r3, [r4, #12]
 8004bd6:	bf15      	itete	ne
 8004bd8:	6560      	strne	r0, [r4, #84]	; 0x54
 8004bda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004bde:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004be2:	81a3      	strheq	r3, [r4, #12]
 8004be4:	bf18      	it	ne
 8004be6:	81a3      	strhne	r3, [r4, #12]
 8004be8:	bd10      	pop	{r4, pc}

08004bea <__sclose>:
 8004bea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bee:	f000 b827 	b.w	8004c40 <_close_r>

08004bf2 <memmove>:
 8004bf2:	4288      	cmp	r0, r1
 8004bf4:	b510      	push	{r4, lr}
 8004bf6:	eb01 0402 	add.w	r4, r1, r2
 8004bfa:	d902      	bls.n	8004c02 <memmove+0x10>
 8004bfc:	4284      	cmp	r4, r0
 8004bfe:	4623      	mov	r3, r4
 8004c00:	d807      	bhi.n	8004c12 <memmove+0x20>
 8004c02:	1e43      	subs	r3, r0, #1
 8004c04:	42a1      	cmp	r1, r4
 8004c06:	d008      	beq.n	8004c1a <memmove+0x28>
 8004c08:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c0c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004c10:	e7f8      	b.n	8004c04 <memmove+0x12>
 8004c12:	4601      	mov	r1, r0
 8004c14:	4402      	add	r2, r0
 8004c16:	428a      	cmp	r2, r1
 8004c18:	d100      	bne.n	8004c1c <memmove+0x2a>
 8004c1a:	bd10      	pop	{r4, pc}
 8004c1c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c20:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004c24:	e7f7      	b.n	8004c16 <memmove+0x24>

08004c26 <memset>:
 8004c26:	4603      	mov	r3, r0
 8004c28:	4402      	add	r2, r0
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d100      	bne.n	8004c30 <memset+0xa>
 8004c2e:	4770      	bx	lr
 8004c30:	f803 1b01 	strb.w	r1, [r3], #1
 8004c34:	e7f9      	b.n	8004c2a <memset+0x4>
	...

08004c38 <_localeconv_r>:
 8004c38:	4800      	ldr	r0, [pc, #0]	; (8004c3c <_localeconv_r+0x4>)
 8004c3a:	4770      	bx	lr
 8004c3c:	20000158 	.word	0x20000158

08004c40 <_close_r>:
 8004c40:	b538      	push	{r3, r4, r5, lr}
 8004c42:	2300      	movs	r3, #0
 8004c44:	4d05      	ldr	r5, [pc, #20]	; (8004c5c <_close_r+0x1c>)
 8004c46:	4604      	mov	r4, r0
 8004c48:	4608      	mov	r0, r1
 8004c4a:	602b      	str	r3, [r5, #0]
 8004c4c:	f7fc fd74 	bl	8001738 <_close>
 8004c50:	1c43      	adds	r3, r0, #1
 8004c52:	d102      	bne.n	8004c5a <_close_r+0x1a>
 8004c54:	682b      	ldr	r3, [r5, #0]
 8004c56:	b103      	cbz	r3, 8004c5a <_close_r+0x1a>
 8004c58:	6023      	str	r3, [r4, #0]
 8004c5a:	bd38      	pop	{r3, r4, r5, pc}
 8004c5c:	20000830 	.word	0x20000830

08004c60 <_lseek_r>:
 8004c60:	b538      	push	{r3, r4, r5, lr}
 8004c62:	4604      	mov	r4, r0
 8004c64:	4608      	mov	r0, r1
 8004c66:	4611      	mov	r1, r2
 8004c68:	2200      	movs	r2, #0
 8004c6a:	4d05      	ldr	r5, [pc, #20]	; (8004c80 <_lseek_r+0x20>)
 8004c6c:	602a      	str	r2, [r5, #0]
 8004c6e:	461a      	mov	r2, r3
 8004c70:	f7fc fd86 	bl	8001780 <_lseek>
 8004c74:	1c43      	adds	r3, r0, #1
 8004c76:	d102      	bne.n	8004c7e <_lseek_r+0x1e>
 8004c78:	682b      	ldr	r3, [r5, #0]
 8004c7a:	b103      	cbz	r3, 8004c7e <_lseek_r+0x1e>
 8004c7c:	6023      	str	r3, [r4, #0]
 8004c7e:	bd38      	pop	{r3, r4, r5, pc}
 8004c80:	20000830 	.word	0x20000830

08004c84 <_read_r>:
 8004c84:	b538      	push	{r3, r4, r5, lr}
 8004c86:	4604      	mov	r4, r0
 8004c88:	4608      	mov	r0, r1
 8004c8a:	4611      	mov	r1, r2
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	4d05      	ldr	r5, [pc, #20]	; (8004ca4 <_read_r+0x20>)
 8004c90:	602a      	str	r2, [r5, #0]
 8004c92:	461a      	mov	r2, r3
 8004c94:	f7fc fd17 	bl	80016c6 <_read>
 8004c98:	1c43      	adds	r3, r0, #1
 8004c9a:	d102      	bne.n	8004ca2 <_read_r+0x1e>
 8004c9c:	682b      	ldr	r3, [r5, #0]
 8004c9e:	b103      	cbz	r3, 8004ca2 <_read_r+0x1e>
 8004ca0:	6023      	str	r3, [r4, #0]
 8004ca2:	bd38      	pop	{r3, r4, r5, pc}
 8004ca4:	20000830 	.word	0x20000830

08004ca8 <_write_r>:
 8004ca8:	b538      	push	{r3, r4, r5, lr}
 8004caa:	4604      	mov	r4, r0
 8004cac:	4608      	mov	r0, r1
 8004cae:	4611      	mov	r1, r2
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	4d05      	ldr	r5, [pc, #20]	; (8004cc8 <_write_r+0x20>)
 8004cb4:	602a      	str	r2, [r5, #0]
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	f7fc fd22 	bl	8001700 <_write>
 8004cbc:	1c43      	adds	r3, r0, #1
 8004cbe:	d102      	bne.n	8004cc6 <_write_r+0x1e>
 8004cc0:	682b      	ldr	r3, [r5, #0]
 8004cc2:	b103      	cbz	r3, 8004cc6 <_write_r+0x1e>
 8004cc4:	6023      	str	r3, [r4, #0]
 8004cc6:	bd38      	pop	{r3, r4, r5, pc}
 8004cc8:	20000830 	.word	0x20000830

08004ccc <__errno>:
 8004ccc:	4b01      	ldr	r3, [pc, #4]	; (8004cd4 <__errno+0x8>)
 8004cce:	6818      	ldr	r0, [r3, #0]
 8004cd0:	4770      	bx	lr
 8004cd2:	bf00      	nop
 8004cd4:	20000064 	.word	0x20000064

08004cd8 <__libc_init_array>:
 8004cd8:	b570      	push	{r4, r5, r6, lr}
 8004cda:	2600      	movs	r6, #0
 8004cdc:	4d0c      	ldr	r5, [pc, #48]	; (8004d10 <__libc_init_array+0x38>)
 8004cde:	4c0d      	ldr	r4, [pc, #52]	; (8004d14 <__libc_init_array+0x3c>)
 8004ce0:	1b64      	subs	r4, r4, r5
 8004ce2:	10a4      	asrs	r4, r4, #2
 8004ce4:	42a6      	cmp	r6, r4
 8004ce6:	d109      	bne.n	8004cfc <__libc_init_array+0x24>
 8004ce8:	f003 ffac 	bl	8008c44 <_init>
 8004cec:	2600      	movs	r6, #0
 8004cee:	4d0a      	ldr	r5, [pc, #40]	; (8004d18 <__libc_init_array+0x40>)
 8004cf0:	4c0a      	ldr	r4, [pc, #40]	; (8004d1c <__libc_init_array+0x44>)
 8004cf2:	1b64      	subs	r4, r4, r5
 8004cf4:	10a4      	asrs	r4, r4, #2
 8004cf6:	42a6      	cmp	r6, r4
 8004cf8:	d105      	bne.n	8004d06 <__libc_init_array+0x2e>
 8004cfa:	bd70      	pop	{r4, r5, r6, pc}
 8004cfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d00:	4798      	blx	r3
 8004d02:	3601      	adds	r6, #1
 8004d04:	e7ee      	b.n	8004ce4 <__libc_init_array+0xc>
 8004d06:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d0a:	4798      	blx	r3
 8004d0c:	3601      	adds	r6, #1
 8004d0e:	e7f2      	b.n	8004cf6 <__libc_init_array+0x1e>
 8004d10:	0800989c 	.word	0x0800989c
 8004d14:	0800989c 	.word	0x0800989c
 8004d18:	0800989c 	.word	0x0800989c
 8004d1c:	080098a0 	.word	0x080098a0

08004d20 <__retarget_lock_init_recursive>:
 8004d20:	4770      	bx	lr

08004d22 <__retarget_lock_acquire_recursive>:
 8004d22:	4770      	bx	lr

08004d24 <__retarget_lock_release_recursive>:
 8004d24:	4770      	bx	lr

08004d26 <memchr>:
 8004d26:	4603      	mov	r3, r0
 8004d28:	b510      	push	{r4, lr}
 8004d2a:	b2c9      	uxtb	r1, r1
 8004d2c:	4402      	add	r2, r0
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	4618      	mov	r0, r3
 8004d32:	d101      	bne.n	8004d38 <memchr+0x12>
 8004d34:	2000      	movs	r0, #0
 8004d36:	e003      	b.n	8004d40 <memchr+0x1a>
 8004d38:	7804      	ldrb	r4, [r0, #0]
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	428c      	cmp	r4, r1
 8004d3e:	d1f6      	bne.n	8004d2e <memchr+0x8>
 8004d40:	bd10      	pop	{r4, pc}

08004d42 <memcpy>:
 8004d42:	440a      	add	r2, r1
 8004d44:	4291      	cmp	r1, r2
 8004d46:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d4a:	d100      	bne.n	8004d4e <memcpy+0xc>
 8004d4c:	4770      	bx	lr
 8004d4e:	b510      	push	{r4, lr}
 8004d50:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d54:	4291      	cmp	r1, r2
 8004d56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d5a:	d1f9      	bne.n	8004d50 <memcpy+0xe>
 8004d5c:	bd10      	pop	{r4, pc}
	...

08004d60 <nanf>:
 8004d60:	4800      	ldr	r0, [pc, #0]	; (8004d64 <nanf+0x4>)
 8004d62:	4770      	bx	lr
 8004d64:	7fc00000 	.word	0x7fc00000

08004d68 <quorem>:
 8004d68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d6c:	6903      	ldr	r3, [r0, #16]
 8004d6e:	690c      	ldr	r4, [r1, #16]
 8004d70:	4607      	mov	r7, r0
 8004d72:	42a3      	cmp	r3, r4
 8004d74:	db7f      	blt.n	8004e76 <quorem+0x10e>
 8004d76:	3c01      	subs	r4, #1
 8004d78:	f100 0514 	add.w	r5, r0, #20
 8004d7c:	f101 0814 	add.w	r8, r1, #20
 8004d80:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004d84:	9301      	str	r3, [sp, #4]
 8004d86:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004d8a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004d8e:	3301      	adds	r3, #1
 8004d90:	429a      	cmp	r2, r3
 8004d92:	fbb2 f6f3 	udiv	r6, r2, r3
 8004d96:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004d9a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004d9e:	d331      	bcc.n	8004e04 <quorem+0x9c>
 8004da0:	f04f 0e00 	mov.w	lr, #0
 8004da4:	4640      	mov	r0, r8
 8004da6:	46ac      	mov	ip, r5
 8004da8:	46f2      	mov	sl, lr
 8004daa:	f850 2b04 	ldr.w	r2, [r0], #4
 8004dae:	b293      	uxth	r3, r2
 8004db0:	fb06 e303 	mla	r3, r6, r3, lr
 8004db4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004db8:	0c1a      	lsrs	r2, r3, #16
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	fb06 220e 	mla	r2, r6, lr, r2
 8004dc0:	ebaa 0303 	sub.w	r3, sl, r3
 8004dc4:	f8dc a000 	ldr.w	sl, [ip]
 8004dc8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004dcc:	fa1f fa8a 	uxth.w	sl, sl
 8004dd0:	4453      	add	r3, sl
 8004dd2:	f8dc a000 	ldr.w	sl, [ip]
 8004dd6:	b292      	uxth	r2, r2
 8004dd8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004ddc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004de6:	4581      	cmp	r9, r0
 8004de8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004dec:	f84c 3b04 	str.w	r3, [ip], #4
 8004df0:	d2db      	bcs.n	8004daa <quorem+0x42>
 8004df2:	f855 300b 	ldr.w	r3, [r5, fp]
 8004df6:	b92b      	cbnz	r3, 8004e04 <quorem+0x9c>
 8004df8:	9b01      	ldr	r3, [sp, #4]
 8004dfa:	3b04      	subs	r3, #4
 8004dfc:	429d      	cmp	r5, r3
 8004dfe:	461a      	mov	r2, r3
 8004e00:	d32d      	bcc.n	8004e5e <quorem+0xf6>
 8004e02:	613c      	str	r4, [r7, #16]
 8004e04:	4638      	mov	r0, r7
 8004e06:	f001 f9df 	bl	80061c8 <__mcmp>
 8004e0a:	2800      	cmp	r0, #0
 8004e0c:	db23      	blt.n	8004e56 <quorem+0xee>
 8004e0e:	4629      	mov	r1, r5
 8004e10:	2000      	movs	r0, #0
 8004e12:	3601      	adds	r6, #1
 8004e14:	f858 2b04 	ldr.w	r2, [r8], #4
 8004e18:	f8d1 c000 	ldr.w	ip, [r1]
 8004e1c:	b293      	uxth	r3, r2
 8004e1e:	1ac3      	subs	r3, r0, r3
 8004e20:	0c12      	lsrs	r2, r2, #16
 8004e22:	fa1f f08c 	uxth.w	r0, ip
 8004e26:	4403      	add	r3, r0
 8004e28:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8004e2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004e36:	45c1      	cmp	r9, r8
 8004e38:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004e3c:	f841 3b04 	str.w	r3, [r1], #4
 8004e40:	d2e8      	bcs.n	8004e14 <quorem+0xac>
 8004e42:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004e46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004e4a:	b922      	cbnz	r2, 8004e56 <quorem+0xee>
 8004e4c:	3b04      	subs	r3, #4
 8004e4e:	429d      	cmp	r5, r3
 8004e50:	461a      	mov	r2, r3
 8004e52:	d30a      	bcc.n	8004e6a <quorem+0x102>
 8004e54:	613c      	str	r4, [r7, #16]
 8004e56:	4630      	mov	r0, r6
 8004e58:	b003      	add	sp, #12
 8004e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e5e:	6812      	ldr	r2, [r2, #0]
 8004e60:	3b04      	subs	r3, #4
 8004e62:	2a00      	cmp	r2, #0
 8004e64:	d1cd      	bne.n	8004e02 <quorem+0x9a>
 8004e66:	3c01      	subs	r4, #1
 8004e68:	e7c8      	b.n	8004dfc <quorem+0x94>
 8004e6a:	6812      	ldr	r2, [r2, #0]
 8004e6c:	3b04      	subs	r3, #4
 8004e6e:	2a00      	cmp	r2, #0
 8004e70:	d1f0      	bne.n	8004e54 <quorem+0xec>
 8004e72:	3c01      	subs	r4, #1
 8004e74:	e7eb      	b.n	8004e4e <quorem+0xe6>
 8004e76:	2000      	movs	r0, #0
 8004e78:	e7ee      	b.n	8004e58 <quorem+0xf0>
 8004e7a:	0000      	movs	r0, r0
 8004e7c:	0000      	movs	r0, r0
	...

08004e80 <_dtoa_r>:
 8004e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e84:	4616      	mov	r6, r2
 8004e86:	461f      	mov	r7, r3
 8004e88:	69c4      	ldr	r4, [r0, #28]
 8004e8a:	b099      	sub	sp, #100	; 0x64
 8004e8c:	4605      	mov	r5, r0
 8004e8e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004e92:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004e96:	b974      	cbnz	r4, 8004eb6 <_dtoa_r+0x36>
 8004e98:	2010      	movs	r0, #16
 8004e9a:	f000 fe1d 	bl	8005ad8 <malloc>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	61e8      	str	r0, [r5, #28]
 8004ea2:	b920      	cbnz	r0, 8004eae <_dtoa_r+0x2e>
 8004ea4:	21ef      	movs	r1, #239	; 0xef
 8004ea6:	4bac      	ldr	r3, [pc, #688]	; (8005158 <_dtoa_r+0x2d8>)
 8004ea8:	48ac      	ldr	r0, [pc, #688]	; (800515c <_dtoa_r+0x2dc>)
 8004eaa:	f002 ffbd 	bl	8007e28 <__assert_func>
 8004eae:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004eb2:	6004      	str	r4, [r0, #0]
 8004eb4:	60c4      	str	r4, [r0, #12]
 8004eb6:	69eb      	ldr	r3, [r5, #28]
 8004eb8:	6819      	ldr	r1, [r3, #0]
 8004eba:	b151      	cbz	r1, 8004ed2 <_dtoa_r+0x52>
 8004ebc:	685a      	ldr	r2, [r3, #4]
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	4093      	lsls	r3, r2
 8004ec2:	604a      	str	r2, [r1, #4]
 8004ec4:	608b      	str	r3, [r1, #8]
 8004ec6:	4628      	mov	r0, r5
 8004ec8:	f000 fefa 	bl	8005cc0 <_Bfree>
 8004ecc:	2200      	movs	r2, #0
 8004ece:	69eb      	ldr	r3, [r5, #28]
 8004ed0:	601a      	str	r2, [r3, #0]
 8004ed2:	1e3b      	subs	r3, r7, #0
 8004ed4:	bfaf      	iteee	ge
 8004ed6:	2300      	movge	r3, #0
 8004ed8:	2201      	movlt	r2, #1
 8004eda:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004ede:	9305      	strlt	r3, [sp, #20]
 8004ee0:	bfa8      	it	ge
 8004ee2:	f8c8 3000 	strge.w	r3, [r8]
 8004ee6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004eea:	4b9d      	ldr	r3, [pc, #628]	; (8005160 <_dtoa_r+0x2e0>)
 8004eec:	bfb8      	it	lt
 8004eee:	f8c8 2000 	strlt.w	r2, [r8]
 8004ef2:	ea33 0309 	bics.w	r3, r3, r9
 8004ef6:	d119      	bne.n	8004f2c <_dtoa_r+0xac>
 8004ef8:	f242 730f 	movw	r3, #9999	; 0x270f
 8004efc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004efe:	6013      	str	r3, [r2, #0]
 8004f00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004f04:	4333      	orrs	r3, r6
 8004f06:	f000 8589 	beq.w	8005a1c <_dtoa_r+0xb9c>
 8004f0a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004f0c:	b953      	cbnz	r3, 8004f24 <_dtoa_r+0xa4>
 8004f0e:	4b95      	ldr	r3, [pc, #596]	; (8005164 <_dtoa_r+0x2e4>)
 8004f10:	e023      	b.n	8004f5a <_dtoa_r+0xda>
 8004f12:	4b95      	ldr	r3, [pc, #596]	; (8005168 <_dtoa_r+0x2e8>)
 8004f14:	9303      	str	r3, [sp, #12]
 8004f16:	3308      	adds	r3, #8
 8004f18:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004f1a:	6013      	str	r3, [r2, #0]
 8004f1c:	9803      	ldr	r0, [sp, #12]
 8004f1e:	b019      	add	sp, #100	; 0x64
 8004f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f24:	4b8f      	ldr	r3, [pc, #572]	; (8005164 <_dtoa_r+0x2e4>)
 8004f26:	9303      	str	r3, [sp, #12]
 8004f28:	3303      	adds	r3, #3
 8004f2a:	e7f5      	b.n	8004f18 <_dtoa_r+0x98>
 8004f2c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004f30:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004f34:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004f38:	2200      	movs	r2, #0
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	f7fb fd3e 	bl	80009bc <__aeabi_dcmpeq>
 8004f40:	4680      	mov	r8, r0
 8004f42:	b160      	cbz	r0, 8004f5e <_dtoa_r+0xde>
 8004f44:	2301      	movs	r3, #1
 8004f46:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004f48:	6013      	str	r3, [r2, #0]
 8004f4a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	f000 8562 	beq.w	8005a16 <_dtoa_r+0xb96>
 8004f52:	4b86      	ldr	r3, [pc, #536]	; (800516c <_dtoa_r+0x2ec>)
 8004f54:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004f56:	6013      	str	r3, [r2, #0]
 8004f58:	3b01      	subs	r3, #1
 8004f5a:	9303      	str	r3, [sp, #12]
 8004f5c:	e7de      	b.n	8004f1c <_dtoa_r+0x9c>
 8004f5e:	ab16      	add	r3, sp, #88	; 0x58
 8004f60:	9301      	str	r3, [sp, #4]
 8004f62:	ab17      	add	r3, sp, #92	; 0x5c
 8004f64:	9300      	str	r3, [sp, #0]
 8004f66:	4628      	mov	r0, r5
 8004f68:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004f6c:	f001 fa3c 	bl	80063e8 <__d2b>
 8004f70:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004f74:	4682      	mov	sl, r0
 8004f76:	2c00      	cmp	r4, #0
 8004f78:	d07e      	beq.n	8005078 <_dtoa_r+0x1f8>
 8004f7a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004f7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f80:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004f84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f88:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8004f8c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004f90:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004f94:	4619      	mov	r1, r3
 8004f96:	2200      	movs	r2, #0
 8004f98:	4b75      	ldr	r3, [pc, #468]	; (8005170 <_dtoa_r+0x2f0>)
 8004f9a:	f7fb f8ef 	bl	800017c <__aeabi_dsub>
 8004f9e:	a368      	add	r3, pc, #416	; (adr r3, 8005140 <_dtoa_r+0x2c0>)
 8004fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa4:	f7fb faa2 	bl	80004ec <__aeabi_dmul>
 8004fa8:	a367      	add	r3, pc, #412	; (adr r3, 8005148 <_dtoa_r+0x2c8>)
 8004faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fae:	f7fb f8e7 	bl	8000180 <__adddf3>
 8004fb2:	4606      	mov	r6, r0
 8004fb4:	4620      	mov	r0, r4
 8004fb6:	460f      	mov	r7, r1
 8004fb8:	f7fb fa2e 	bl	8000418 <__aeabi_i2d>
 8004fbc:	a364      	add	r3, pc, #400	; (adr r3, 8005150 <_dtoa_r+0x2d0>)
 8004fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc2:	f7fb fa93 	bl	80004ec <__aeabi_dmul>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	460b      	mov	r3, r1
 8004fca:	4630      	mov	r0, r6
 8004fcc:	4639      	mov	r1, r7
 8004fce:	f7fb f8d7 	bl	8000180 <__adddf3>
 8004fd2:	4606      	mov	r6, r0
 8004fd4:	460f      	mov	r7, r1
 8004fd6:	f7fb fd39 	bl	8000a4c <__aeabi_d2iz>
 8004fda:	2200      	movs	r2, #0
 8004fdc:	4683      	mov	fp, r0
 8004fde:	2300      	movs	r3, #0
 8004fe0:	4630      	mov	r0, r6
 8004fe2:	4639      	mov	r1, r7
 8004fe4:	f7fb fcf4 	bl	80009d0 <__aeabi_dcmplt>
 8004fe8:	b148      	cbz	r0, 8004ffe <_dtoa_r+0x17e>
 8004fea:	4658      	mov	r0, fp
 8004fec:	f7fb fa14 	bl	8000418 <__aeabi_i2d>
 8004ff0:	4632      	mov	r2, r6
 8004ff2:	463b      	mov	r3, r7
 8004ff4:	f7fb fce2 	bl	80009bc <__aeabi_dcmpeq>
 8004ff8:	b908      	cbnz	r0, 8004ffe <_dtoa_r+0x17e>
 8004ffa:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004ffe:	f1bb 0f16 	cmp.w	fp, #22
 8005002:	d857      	bhi.n	80050b4 <_dtoa_r+0x234>
 8005004:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005008:	4b5a      	ldr	r3, [pc, #360]	; (8005174 <_dtoa_r+0x2f4>)
 800500a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800500e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005012:	f7fb fcdd 	bl	80009d0 <__aeabi_dcmplt>
 8005016:	2800      	cmp	r0, #0
 8005018:	d04e      	beq.n	80050b8 <_dtoa_r+0x238>
 800501a:	2300      	movs	r3, #0
 800501c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005020:	930f      	str	r3, [sp, #60]	; 0x3c
 8005022:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005024:	1b1b      	subs	r3, r3, r4
 8005026:	1e5a      	subs	r2, r3, #1
 8005028:	bf46      	itte	mi
 800502a:	f1c3 0901 	rsbmi	r9, r3, #1
 800502e:	2300      	movmi	r3, #0
 8005030:	f04f 0900 	movpl.w	r9, #0
 8005034:	9209      	str	r2, [sp, #36]	; 0x24
 8005036:	bf48      	it	mi
 8005038:	9309      	strmi	r3, [sp, #36]	; 0x24
 800503a:	f1bb 0f00 	cmp.w	fp, #0
 800503e:	db3d      	blt.n	80050bc <_dtoa_r+0x23c>
 8005040:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005042:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8005046:	445b      	add	r3, fp
 8005048:	9309      	str	r3, [sp, #36]	; 0x24
 800504a:	2300      	movs	r3, #0
 800504c:	930a      	str	r3, [sp, #40]	; 0x28
 800504e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005050:	2b09      	cmp	r3, #9
 8005052:	d867      	bhi.n	8005124 <_dtoa_r+0x2a4>
 8005054:	2b05      	cmp	r3, #5
 8005056:	bfc4      	itt	gt
 8005058:	3b04      	subgt	r3, #4
 800505a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800505c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800505e:	bfc8      	it	gt
 8005060:	2400      	movgt	r4, #0
 8005062:	f1a3 0302 	sub.w	r3, r3, #2
 8005066:	bfd8      	it	le
 8005068:	2401      	movle	r4, #1
 800506a:	2b03      	cmp	r3, #3
 800506c:	f200 8086 	bhi.w	800517c <_dtoa_r+0x2fc>
 8005070:	e8df f003 	tbb	[pc, r3]
 8005074:	5637392c 	.word	0x5637392c
 8005078:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800507c:	441c      	add	r4, r3
 800507e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005082:	2b20      	cmp	r3, #32
 8005084:	bfc1      	itttt	gt
 8005086:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800508a:	fa09 f903 	lslgt.w	r9, r9, r3
 800508e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8005092:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005096:	bfd6      	itet	le
 8005098:	f1c3 0320 	rsble	r3, r3, #32
 800509c:	ea49 0003 	orrgt.w	r0, r9, r3
 80050a0:	fa06 f003 	lslle.w	r0, r6, r3
 80050a4:	f7fb f9a8 	bl	80003f8 <__aeabi_ui2d>
 80050a8:	2201      	movs	r2, #1
 80050aa:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80050ae:	3c01      	subs	r4, #1
 80050b0:	9213      	str	r2, [sp, #76]	; 0x4c
 80050b2:	e76f      	b.n	8004f94 <_dtoa_r+0x114>
 80050b4:	2301      	movs	r3, #1
 80050b6:	e7b3      	b.n	8005020 <_dtoa_r+0x1a0>
 80050b8:	900f      	str	r0, [sp, #60]	; 0x3c
 80050ba:	e7b2      	b.n	8005022 <_dtoa_r+0x1a2>
 80050bc:	f1cb 0300 	rsb	r3, fp, #0
 80050c0:	930a      	str	r3, [sp, #40]	; 0x28
 80050c2:	2300      	movs	r3, #0
 80050c4:	eba9 090b 	sub.w	r9, r9, fp
 80050c8:	930e      	str	r3, [sp, #56]	; 0x38
 80050ca:	e7c0      	b.n	800504e <_dtoa_r+0x1ce>
 80050cc:	2300      	movs	r3, #0
 80050ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80050d0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	dc55      	bgt.n	8005182 <_dtoa_r+0x302>
 80050d6:	2301      	movs	r3, #1
 80050d8:	461a      	mov	r2, r3
 80050da:	9306      	str	r3, [sp, #24]
 80050dc:	9308      	str	r3, [sp, #32]
 80050de:	9223      	str	r2, [sp, #140]	; 0x8c
 80050e0:	e00b      	b.n	80050fa <_dtoa_r+0x27a>
 80050e2:	2301      	movs	r3, #1
 80050e4:	e7f3      	b.n	80050ce <_dtoa_r+0x24e>
 80050e6:	2300      	movs	r3, #0
 80050e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80050ea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80050ec:	445b      	add	r3, fp
 80050ee:	9306      	str	r3, [sp, #24]
 80050f0:	3301      	adds	r3, #1
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	9308      	str	r3, [sp, #32]
 80050f6:	bfb8      	it	lt
 80050f8:	2301      	movlt	r3, #1
 80050fa:	2100      	movs	r1, #0
 80050fc:	2204      	movs	r2, #4
 80050fe:	69e8      	ldr	r0, [r5, #28]
 8005100:	f102 0614 	add.w	r6, r2, #20
 8005104:	429e      	cmp	r6, r3
 8005106:	d940      	bls.n	800518a <_dtoa_r+0x30a>
 8005108:	6041      	str	r1, [r0, #4]
 800510a:	4628      	mov	r0, r5
 800510c:	f000 fd98 	bl	8005c40 <_Balloc>
 8005110:	9003      	str	r0, [sp, #12]
 8005112:	2800      	cmp	r0, #0
 8005114:	d13c      	bne.n	8005190 <_dtoa_r+0x310>
 8005116:	4602      	mov	r2, r0
 8005118:	f240 11af 	movw	r1, #431	; 0x1af
 800511c:	4b16      	ldr	r3, [pc, #88]	; (8005178 <_dtoa_r+0x2f8>)
 800511e:	e6c3      	b.n	8004ea8 <_dtoa_r+0x28>
 8005120:	2301      	movs	r3, #1
 8005122:	e7e1      	b.n	80050e8 <_dtoa_r+0x268>
 8005124:	2401      	movs	r4, #1
 8005126:	2300      	movs	r3, #0
 8005128:	940b      	str	r4, [sp, #44]	; 0x2c
 800512a:	9322      	str	r3, [sp, #136]	; 0x88
 800512c:	f04f 33ff 	mov.w	r3, #4294967295
 8005130:	2200      	movs	r2, #0
 8005132:	9306      	str	r3, [sp, #24]
 8005134:	9308      	str	r3, [sp, #32]
 8005136:	2312      	movs	r3, #18
 8005138:	e7d1      	b.n	80050de <_dtoa_r+0x25e>
 800513a:	bf00      	nop
 800513c:	f3af 8000 	nop.w
 8005140:	636f4361 	.word	0x636f4361
 8005144:	3fd287a7 	.word	0x3fd287a7
 8005148:	8b60c8b3 	.word	0x8b60c8b3
 800514c:	3fc68a28 	.word	0x3fc68a28
 8005150:	509f79fb 	.word	0x509f79fb
 8005154:	3fd34413 	.word	0x3fd34413
 8005158:	0800949e 	.word	0x0800949e
 800515c:	080094b5 	.word	0x080094b5
 8005160:	7ff00000 	.word	0x7ff00000
 8005164:	0800949a 	.word	0x0800949a
 8005168:	08009491 	.word	0x08009491
 800516c:	080097f1 	.word	0x080097f1
 8005170:	3ff80000 	.word	0x3ff80000
 8005174:	080095a0 	.word	0x080095a0
 8005178:	0800950d 	.word	0x0800950d
 800517c:	2301      	movs	r3, #1
 800517e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005180:	e7d4      	b.n	800512c <_dtoa_r+0x2ac>
 8005182:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005184:	9306      	str	r3, [sp, #24]
 8005186:	9308      	str	r3, [sp, #32]
 8005188:	e7b7      	b.n	80050fa <_dtoa_r+0x27a>
 800518a:	3101      	adds	r1, #1
 800518c:	0052      	lsls	r2, r2, #1
 800518e:	e7b7      	b.n	8005100 <_dtoa_r+0x280>
 8005190:	69eb      	ldr	r3, [r5, #28]
 8005192:	9a03      	ldr	r2, [sp, #12]
 8005194:	601a      	str	r2, [r3, #0]
 8005196:	9b08      	ldr	r3, [sp, #32]
 8005198:	2b0e      	cmp	r3, #14
 800519a:	f200 80a8 	bhi.w	80052ee <_dtoa_r+0x46e>
 800519e:	2c00      	cmp	r4, #0
 80051a0:	f000 80a5 	beq.w	80052ee <_dtoa_r+0x46e>
 80051a4:	f1bb 0f00 	cmp.w	fp, #0
 80051a8:	dd34      	ble.n	8005214 <_dtoa_r+0x394>
 80051aa:	4b9a      	ldr	r3, [pc, #616]	; (8005414 <_dtoa_r+0x594>)
 80051ac:	f00b 020f 	and.w	r2, fp, #15
 80051b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80051b4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80051b8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80051bc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80051c0:	ea4f 142b 	mov.w	r4, fp, asr #4
 80051c4:	d016      	beq.n	80051f4 <_dtoa_r+0x374>
 80051c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80051ca:	4b93      	ldr	r3, [pc, #588]	; (8005418 <_dtoa_r+0x598>)
 80051cc:	2703      	movs	r7, #3
 80051ce:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80051d2:	f7fb fab5 	bl	8000740 <__aeabi_ddiv>
 80051d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80051da:	f004 040f 	and.w	r4, r4, #15
 80051de:	4e8e      	ldr	r6, [pc, #568]	; (8005418 <_dtoa_r+0x598>)
 80051e0:	b954      	cbnz	r4, 80051f8 <_dtoa_r+0x378>
 80051e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80051e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80051ea:	f7fb faa9 	bl	8000740 <__aeabi_ddiv>
 80051ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80051f2:	e029      	b.n	8005248 <_dtoa_r+0x3c8>
 80051f4:	2702      	movs	r7, #2
 80051f6:	e7f2      	b.n	80051de <_dtoa_r+0x35e>
 80051f8:	07e1      	lsls	r1, r4, #31
 80051fa:	d508      	bpl.n	800520e <_dtoa_r+0x38e>
 80051fc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005200:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005204:	f7fb f972 	bl	80004ec <__aeabi_dmul>
 8005208:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800520c:	3701      	adds	r7, #1
 800520e:	1064      	asrs	r4, r4, #1
 8005210:	3608      	adds	r6, #8
 8005212:	e7e5      	b.n	80051e0 <_dtoa_r+0x360>
 8005214:	f000 80a5 	beq.w	8005362 <_dtoa_r+0x4e2>
 8005218:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800521c:	f1cb 0400 	rsb	r4, fp, #0
 8005220:	4b7c      	ldr	r3, [pc, #496]	; (8005414 <_dtoa_r+0x594>)
 8005222:	f004 020f 	and.w	r2, r4, #15
 8005226:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800522a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800522e:	f7fb f95d 	bl	80004ec <__aeabi_dmul>
 8005232:	2702      	movs	r7, #2
 8005234:	2300      	movs	r3, #0
 8005236:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800523a:	4e77      	ldr	r6, [pc, #476]	; (8005418 <_dtoa_r+0x598>)
 800523c:	1124      	asrs	r4, r4, #4
 800523e:	2c00      	cmp	r4, #0
 8005240:	f040 8084 	bne.w	800534c <_dtoa_r+0x4cc>
 8005244:	2b00      	cmp	r3, #0
 8005246:	d1d2      	bne.n	80051ee <_dtoa_r+0x36e>
 8005248:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800524c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005250:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005252:	2b00      	cmp	r3, #0
 8005254:	f000 8087 	beq.w	8005366 <_dtoa_r+0x4e6>
 8005258:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800525c:	2200      	movs	r2, #0
 800525e:	4b6f      	ldr	r3, [pc, #444]	; (800541c <_dtoa_r+0x59c>)
 8005260:	f7fb fbb6 	bl	80009d0 <__aeabi_dcmplt>
 8005264:	2800      	cmp	r0, #0
 8005266:	d07e      	beq.n	8005366 <_dtoa_r+0x4e6>
 8005268:	9b08      	ldr	r3, [sp, #32]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d07b      	beq.n	8005366 <_dtoa_r+0x4e6>
 800526e:	9b06      	ldr	r3, [sp, #24]
 8005270:	2b00      	cmp	r3, #0
 8005272:	dd38      	ble.n	80052e6 <_dtoa_r+0x466>
 8005274:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005278:	2200      	movs	r2, #0
 800527a:	4b69      	ldr	r3, [pc, #420]	; (8005420 <_dtoa_r+0x5a0>)
 800527c:	f7fb f936 	bl	80004ec <__aeabi_dmul>
 8005280:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005284:	9c06      	ldr	r4, [sp, #24]
 8005286:	f10b 38ff 	add.w	r8, fp, #4294967295
 800528a:	3701      	adds	r7, #1
 800528c:	4638      	mov	r0, r7
 800528e:	f7fb f8c3 	bl	8000418 <__aeabi_i2d>
 8005292:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005296:	f7fb f929 	bl	80004ec <__aeabi_dmul>
 800529a:	2200      	movs	r2, #0
 800529c:	4b61      	ldr	r3, [pc, #388]	; (8005424 <_dtoa_r+0x5a4>)
 800529e:	f7fa ff6f 	bl	8000180 <__adddf3>
 80052a2:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80052a6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80052aa:	9611      	str	r6, [sp, #68]	; 0x44
 80052ac:	2c00      	cmp	r4, #0
 80052ae:	d15d      	bne.n	800536c <_dtoa_r+0x4ec>
 80052b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80052b4:	2200      	movs	r2, #0
 80052b6:	4b5c      	ldr	r3, [pc, #368]	; (8005428 <_dtoa_r+0x5a8>)
 80052b8:	f7fa ff60 	bl	800017c <__aeabi_dsub>
 80052bc:	4602      	mov	r2, r0
 80052be:	460b      	mov	r3, r1
 80052c0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80052c4:	4633      	mov	r3, r6
 80052c6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80052c8:	f7fb fba0 	bl	8000a0c <__aeabi_dcmpgt>
 80052cc:	2800      	cmp	r0, #0
 80052ce:	f040 8295 	bne.w	80057fc <_dtoa_r+0x97c>
 80052d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80052d6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80052d8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80052dc:	f7fb fb78 	bl	80009d0 <__aeabi_dcmplt>
 80052e0:	2800      	cmp	r0, #0
 80052e2:	f040 8289 	bne.w	80057f8 <_dtoa_r+0x978>
 80052e6:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80052ea:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80052ee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	f2c0 8151 	blt.w	8005598 <_dtoa_r+0x718>
 80052f6:	f1bb 0f0e 	cmp.w	fp, #14
 80052fa:	f300 814d 	bgt.w	8005598 <_dtoa_r+0x718>
 80052fe:	4b45      	ldr	r3, [pc, #276]	; (8005414 <_dtoa_r+0x594>)
 8005300:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005304:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005308:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800530c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800530e:	2b00      	cmp	r3, #0
 8005310:	f280 80da 	bge.w	80054c8 <_dtoa_r+0x648>
 8005314:	9b08      	ldr	r3, [sp, #32]
 8005316:	2b00      	cmp	r3, #0
 8005318:	f300 80d6 	bgt.w	80054c8 <_dtoa_r+0x648>
 800531c:	f040 826b 	bne.w	80057f6 <_dtoa_r+0x976>
 8005320:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005324:	2200      	movs	r2, #0
 8005326:	4b40      	ldr	r3, [pc, #256]	; (8005428 <_dtoa_r+0x5a8>)
 8005328:	f7fb f8e0 	bl	80004ec <__aeabi_dmul>
 800532c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005330:	f7fb fb62 	bl	80009f8 <__aeabi_dcmpge>
 8005334:	9c08      	ldr	r4, [sp, #32]
 8005336:	4626      	mov	r6, r4
 8005338:	2800      	cmp	r0, #0
 800533a:	f040 8241 	bne.w	80057c0 <_dtoa_r+0x940>
 800533e:	2331      	movs	r3, #49	; 0x31
 8005340:	9f03      	ldr	r7, [sp, #12]
 8005342:	f10b 0b01 	add.w	fp, fp, #1
 8005346:	f807 3b01 	strb.w	r3, [r7], #1
 800534a:	e23d      	b.n	80057c8 <_dtoa_r+0x948>
 800534c:	07e2      	lsls	r2, r4, #31
 800534e:	d505      	bpl.n	800535c <_dtoa_r+0x4dc>
 8005350:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005354:	f7fb f8ca 	bl	80004ec <__aeabi_dmul>
 8005358:	2301      	movs	r3, #1
 800535a:	3701      	adds	r7, #1
 800535c:	1064      	asrs	r4, r4, #1
 800535e:	3608      	adds	r6, #8
 8005360:	e76d      	b.n	800523e <_dtoa_r+0x3be>
 8005362:	2702      	movs	r7, #2
 8005364:	e770      	b.n	8005248 <_dtoa_r+0x3c8>
 8005366:	46d8      	mov	r8, fp
 8005368:	9c08      	ldr	r4, [sp, #32]
 800536a:	e78f      	b.n	800528c <_dtoa_r+0x40c>
 800536c:	9903      	ldr	r1, [sp, #12]
 800536e:	4b29      	ldr	r3, [pc, #164]	; (8005414 <_dtoa_r+0x594>)
 8005370:	4421      	add	r1, r4
 8005372:	9112      	str	r1, [sp, #72]	; 0x48
 8005374:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005376:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800537a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800537e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005382:	2900      	cmp	r1, #0
 8005384:	d054      	beq.n	8005430 <_dtoa_r+0x5b0>
 8005386:	2000      	movs	r0, #0
 8005388:	4928      	ldr	r1, [pc, #160]	; (800542c <_dtoa_r+0x5ac>)
 800538a:	f7fb f9d9 	bl	8000740 <__aeabi_ddiv>
 800538e:	463b      	mov	r3, r7
 8005390:	4632      	mov	r2, r6
 8005392:	f7fa fef3 	bl	800017c <__aeabi_dsub>
 8005396:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800539a:	9f03      	ldr	r7, [sp, #12]
 800539c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80053a0:	f7fb fb54 	bl	8000a4c <__aeabi_d2iz>
 80053a4:	4604      	mov	r4, r0
 80053a6:	f7fb f837 	bl	8000418 <__aeabi_i2d>
 80053aa:	4602      	mov	r2, r0
 80053ac:	460b      	mov	r3, r1
 80053ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80053b2:	f7fa fee3 	bl	800017c <__aeabi_dsub>
 80053b6:	4602      	mov	r2, r0
 80053b8:	460b      	mov	r3, r1
 80053ba:	3430      	adds	r4, #48	; 0x30
 80053bc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80053c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80053c4:	f807 4b01 	strb.w	r4, [r7], #1
 80053c8:	f7fb fb02 	bl	80009d0 <__aeabi_dcmplt>
 80053cc:	2800      	cmp	r0, #0
 80053ce:	d173      	bne.n	80054b8 <_dtoa_r+0x638>
 80053d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053d4:	2000      	movs	r0, #0
 80053d6:	4911      	ldr	r1, [pc, #68]	; (800541c <_dtoa_r+0x59c>)
 80053d8:	f7fa fed0 	bl	800017c <__aeabi_dsub>
 80053dc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80053e0:	f7fb faf6 	bl	80009d0 <__aeabi_dcmplt>
 80053e4:	2800      	cmp	r0, #0
 80053e6:	f040 80b6 	bne.w	8005556 <_dtoa_r+0x6d6>
 80053ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80053ec:	429f      	cmp	r7, r3
 80053ee:	f43f af7a 	beq.w	80052e6 <_dtoa_r+0x466>
 80053f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80053f6:	2200      	movs	r2, #0
 80053f8:	4b09      	ldr	r3, [pc, #36]	; (8005420 <_dtoa_r+0x5a0>)
 80053fa:	f7fb f877 	bl	80004ec <__aeabi_dmul>
 80053fe:	2200      	movs	r2, #0
 8005400:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005404:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005408:	4b05      	ldr	r3, [pc, #20]	; (8005420 <_dtoa_r+0x5a0>)
 800540a:	f7fb f86f 	bl	80004ec <__aeabi_dmul>
 800540e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005412:	e7c3      	b.n	800539c <_dtoa_r+0x51c>
 8005414:	080095a0 	.word	0x080095a0
 8005418:	08009578 	.word	0x08009578
 800541c:	3ff00000 	.word	0x3ff00000
 8005420:	40240000 	.word	0x40240000
 8005424:	401c0000 	.word	0x401c0000
 8005428:	40140000 	.word	0x40140000
 800542c:	3fe00000 	.word	0x3fe00000
 8005430:	4630      	mov	r0, r6
 8005432:	4639      	mov	r1, r7
 8005434:	f7fb f85a 	bl	80004ec <__aeabi_dmul>
 8005438:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800543a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800543e:	9c03      	ldr	r4, [sp, #12]
 8005440:	9314      	str	r3, [sp, #80]	; 0x50
 8005442:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005446:	f7fb fb01 	bl	8000a4c <__aeabi_d2iz>
 800544a:	9015      	str	r0, [sp, #84]	; 0x54
 800544c:	f7fa ffe4 	bl	8000418 <__aeabi_i2d>
 8005450:	4602      	mov	r2, r0
 8005452:	460b      	mov	r3, r1
 8005454:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005458:	f7fa fe90 	bl	800017c <__aeabi_dsub>
 800545c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800545e:	4606      	mov	r6, r0
 8005460:	3330      	adds	r3, #48	; 0x30
 8005462:	f804 3b01 	strb.w	r3, [r4], #1
 8005466:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005468:	460f      	mov	r7, r1
 800546a:	429c      	cmp	r4, r3
 800546c:	f04f 0200 	mov.w	r2, #0
 8005470:	d124      	bne.n	80054bc <_dtoa_r+0x63c>
 8005472:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005476:	4baf      	ldr	r3, [pc, #700]	; (8005734 <_dtoa_r+0x8b4>)
 8005478:	f7fa fe82 	bl	8000180 <__adddf3>
 800547c:	4602      	mov	r2, r0
 800547e:	460b      	mov	r3, r1
 8005480:	4630      	mov	r0, r6
 8005482:	4639      	mov	r1, r7
 8005484:	f7fb fac2 	bl	8000a0c <__aeabi_dcmpgt>
 8005488:	2800      	cmp	r0, #0
 800548a:	d163      	bne.n	8005554 <_dtoa_r+0x6d4>
 800548c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005490:	2000      	movs	r0, #0
 8005492:	49a8      	ldr	r1, [pc, #672]	; (8005734 <_dtoa_r+0x8b4>)
 8005494:	f7fa fe72 	bl	800017c <__aeabi_dsub>
 8005498:	4602      	mov	r2, r0
 800549a:	460b      	mov	r3, r1
 800549c:	4630      	mov	r0, r6
 800549e:	4639      	mov	r1, r7
 80054a0:	f7fb fa96 	bl	80009d0 <__aeabi_dcmplt>
 80054a4:	2800      	cmp	r0, #0
 80054a6:	f43f af1e 	beq.w	80052e6 <_dtoa_r+0x466>
 80054aa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80054ac:	1e7b      	subs	r3, r7, #1
 80054ae:	9314      	str	r3, [sp, #80]	; 0x50
 80054b0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80054b4:	2b30      	cmp	r3, #48	; 0x30
 80054b6:	d0f8      	beq.n	80054aa <_dtoa_r+0x62a>
 80054b8:	46c3      	mov	fp, r8
 80054ba:	e03b      	b.n	8005534 <_dtoa_r+0x6b4>
 80054bc:	4b9e      	ldr	r3, [pc, #632]	; (8005738 <_dtoa_r+0x8b8>)
 80054be:	f7fb f815 	bl	80004ec <__aeabi_dmul>
 80054c2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80054c6:	e7bc      	b.n	8005442 <_dtoa_r+0x5c2>
 80054c8:	9f03      	ldr	r7, [sp, #12]
 80054ca:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80054ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80054d2:	4640      	mov	r0, r8
 80054d4:	4649      	mov	r1, r9
 80054d6:	f7fb f933 	bl	8000740 <__aeabi_ddiv>
 80054da:	f7fb fab7 	bl	8000a4c <__aeabi_d2iz>
 80054de:	4604      	mov	r4, r0
 80054e0:	f7fa ff9a 	bl	8000418 <__aeabi_i2d>
 80054e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80054e8:	f7fb f800 	bl	80004ec <__aeabi_dmul>
 80054ec:	4602      	mov	r2, r0
 80054ee:	460b      	mov	r3, r1
 80054f0:	4640      	mov	r0, r8
 80054f2:	4649      	mov	r1, r9
 80054f4:	f7fa fe42 	bl	800017c <__aeabi_dsub>
 80054f8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80054fc:	f807 6b01 	strb.w	r6, [r7], #1
 8005500:	9e03      	ldr	r6, [sp, #12]
 8005502:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005506:	1bbe      	subs	r6, r7, r6
 8005508:	45b4      	cmp	ip, r6
 800550a:	4602      	mov	r2, r0
 800550c:	460b      	mov	r3, r1
 800550e:	d136      	bne.n	800557e <_dtoa_r+0x6fe>
 8005510:	f7fa fe36 	bl	8000180 <__adddf3>
 8005514:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005518:	4680      	mov	r8, r0
 800551a:	4689      	mov	r9, r1
 800551c:	f7fb fa76 	bl	8000a0c <__aeabi_dcmpgt>
 8005520:	bb58      	cbnz	r0, 800557a <_dtoa_r+0x6fa>
 8005522:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005526:	4640      	mov	r0, r8
 8005528:	4649      	mov	r1, r9
 800552a:	f7fb fa47 	bl	80009bc <__aeabi_dcmpeq>
 800552e:	b108      	cbz	r0, 8005534 <_dtoa_r+0x6b4>
 8005530:	07e3      	lsls	r3, r4, #31
 8005532:	d422      	bmi.n	800557a <_dtoa_r+0x6fa>
 8005534:	4651      	mov	r1, sl
 8005536:	4628      	mov	r0, r5
 8005538:	f000 fbc2 	bl	8005cc0 <_Bfree>
 800553c:	2300      	movs	r3, #0
 800553e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005540:	703b      	strb	r3, [r7, #0]
 8005542:	f10b 0301 	add.w	r3, fp, #1
 8005546:	6013      	str	r3, [r2, #0]
 8005548:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800554a:	2b00      	cmp	r3, #0
 800554c:	f43f ace6 	beq.w	8004f1c <_dtoa_r+0x9c>
 8005550:	601f      	str	r7, [r3, #0]
 8005552:	e4e3      	b.n	8004f1c <_dtoa_r+0x9c>
 8005554:	4627      	mov	r7, r4
 8005556:	463b      	mov	r3, r7
 8005558:	461f      	mov	r7, r3
 800555a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800555e:	2a39      	cmp	r2, #57	; 0x39
 8005560:	d107      	bne.n	8005572 <_dtoa_r+0x6f2>
 8005562:	9a03      	ldr	r2, [sp, #12]
 8005564:	429a      	cmp	r2, r3
 8005566:	d1f7      	bne.n	8005558 <_dtoa_r+0x6d8>
 8005568:	2230      	movs	r2, #48	; 0x30
 800556a:	9903      	ldr	r1, [sp, #12]
 800556c:	f108 0801 	add.w	r8, r8, #1
 8005570:	700a      	strb	r2, [r1, #0]
 8005572:	781a      	ldrb	r2, [r3, #0]
 8005574:	3201      	adds	r2, #1
 8005576:	701a      	strb	r2, [r3, #0]
 8005578:	e79e      	b.n	80054b8 <_dtoa_r+0x638>
 800557a:	46d8      	mov	r8, fp
 800557c:	e7eb      	b.n	8005556 <_dtoa_r+0x6d6>
 800557e:	2200      	movs	r2, #0
 8005580:	4b6d      	ldr	r3, [pc, #436]	; (8005738 <_dtoa_r+0x8b8>)
 8005582:	f7fa ffb3 	bl	80004ec <__aeabi_dmul>
 8005586:	2200      	movs	r2, #0
 8005588:	2300      	movs	r3, #0
 800558a:	4680      	mov	r8, r0
 800558c:	4689      	mov	r9, r1
 800558e:	f7fb fa15 	bl	80009bc <__aeabi_dcmpeq>
 8005592:	2800      	cmp	r0, #0
 8005594:	d09b      	beq.n	80054ce <_dtoa_r+0x64e>
 8005596:	e7cd      	b.n	8005534 <_dtoa_r+0x6b4>
 8005598:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800559a:	2a00      	cmp	r2, #0
 800559c:	f000 80c4 	beq.w	8005728 <_dtoa_r+0x8a8>
 80055a0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80055a2:	2a01      	cmp	r2, #1
 80055a4:	f300 80a8 	bgt.w	80056f8 <_dtoa_r+0x878>
 80055a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80055aa:	2a00      	cmp	r2, #0
 80055ac:	f000 80a0 	beq.w	80056f0 <_dtoa_r+0x870>
 80055b0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80055b4:	464f      	mov	r7, r9
 80055b6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80055b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055ba:	2101      	movs	r1, #1
 80055bc:	441a      	add	r2, r3
 80055be:	4628      	mov	r0, r5
 80055c0:	4499      	add	r9, r3
 80055c2:	9209      	str	r2, [sp, #36]	; 0x24
 80055c4:	f000 fc7c 	bl	8005ec0 <__i2b>
 80055c8:	4606      	mov	r6, r0
 80055ca:	b15f      	cbz	r7, 80055e4 <_dtoa_r+0x764>
 80055cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	dd08      	ble.n	80055e4 <_dtoa_r+0x764>
 80055d2:	42bb      	cmp	r3, r7
 80055d4:	bfa8      	it	ge
 80055d6:	463b      	movge	r3, r7
 80055d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055da:	eba9 0903 	sub.w	r9, r9, r3
 80055de:	1aff      	subs	r7, r7, r3
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	9309      	str	r3, [sp, #36]	; 0x24
 80055e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055e6:	b1f3      	cbz	r3, 8005626 <_dtoa_r+0x7a6>
 80055e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	f000 80a0 	beq.w	8005730 <_dtoa_r+0x8b0>
 80055f0:	2c00      	cmp	r4, #0
 80055f2:	dd10      	ble.n	8005616 <_dtoa_r+0x796>
 80055f4:	4631      	mov	r1, r6
 80055f6:	4622      	mov	r2, r4
 80055f8:	4628      	mov	r0, r5
 80055fa:	f000 fd1f 	bl	800603c <__pow5mult>
 80055fe:	4652      	mov	r2, sl
 8005600:	4601      	mov	r1, r0
 8005602:	4606      	mov	r6, r0
 8005604:	4628      	mov	r0, r5
 8005606:	f000 fc71 	bl	8005eec <__multiply>
 800560a:	4680      	mov	r8, r0
 800560c:	4651      	mov	r1, sl
 800560e:	4628      	mov	r0, r5
 8005610:	f000 fb56 	bl	8005cc0 <_Bfree>
 8005614:	46c2      	mov	sl, r8
 8005616:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005618:	1b1a      	subs	r2, r3, r4
 800561a:	d004      	beq.n	8005626 <_dtoa_r+0x7a6>
 800561c:	4651      	mov	r1, sl
 800561e:	4628      	mov	r0, r5
 8005620:	f000 fd0c 	bl	800603c <__pow5mult>
 8005624:	4682      	mov	sl, r0
 8005626:	2101      	movs	r1, #1
 8005628:	4628      	mov	r0, r5
 800562a:	f000 fc49 	bl	8005ec0 <__i2b>
 800562e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005630:	4604      	mov	r4, r0
 8005632:	2b00      	cmp	r3, #0
 8005634:	f340 8082 	ble.w	800573c <_dtoa_r+0x8bc>
 8005638:	461a      	mov	r2, r3
 800563a:	4601      	mov	r1, r0
 800563c:	4628      	mov	r0, r5
 800563e:	f000 fcfd 	bl	800603c <__pow5mult>
 8005642:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005644:	4604      	mov	r4, r0
 8005646:	2b01      	cmp	r3, #1
 8005648:	dd7b      	ble.n	8005742 <_dtoa_r+0x8c2>
 800564a:	f04f 0800 	mov.w	r8, #0
 800564e:	6923      	ldr	r3, [r4, #16]
 8005650:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005654:	6918      	ldr	r0, [r3, #16]
 8005656:	f000 fbe5 	bl	8005e24 <__hi0bits>
 800565a:	f1c0 0020 	rsb	r0, r0, #32
 800565e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005660:	4418      	add	r0, r3
 8005662:	f010 001f 	ands.w	r0, r0, #31
 8005666:	f000 8092 	beq.w	800578e <_dtoa_r+0x90e>
 800566a:	f1c0 0320 	rsb	r3, r0, #32
 800566e:	2b04      	cmp	r3, #4
 8005670:	f340 8085 	ble.w	800577e <_dtoa_r+0x8fe>
 8005674:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005676:	f1c0 001c 	rsb	r0, r0, #28
 800567a:	4403      	add	r3, r0
 800567c:	4481      	add	r9, r0
 800567e:	4407      	add	r7, r0
 8005680:	9309      	str	r3, [sp, #36]	; 0x24
 8005682:	f1b9 0f00 	cmp.w	r9, #0
 8005686:	dd05      	ble.n	8005694 <_dtoa_r+0x814>
 8005688:	4651      	mov	r1, sl
 800568a:	464a      	mov	r2, r9
 800568c:	4628      	mov	r0, r5
 800568e:	f000 fd2f 	bl	80060f0 <__lshift>
 8005692:	4682      	mov	sl, r0
 8005694:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005696:	2b00      	cmp	r3, #0
 8005698:	dd05      	ble.n	80056a6 <_dtoa_r+0x826>
 800569a:	4621      	mov	r1, r4
 800569c:	461a      	mov	r2, r3
 800569e:	4628      	mov	r0, r5
 80056a0:	f000 fd26 	bl	80060f0 <__lshift>
 80056a4:	4604      	mov	r4, r0
 80056a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d072      	beq.n	8005792 <_dtoa_r+0x912>
 80056ac:	4621      	mov	r1, r4
 80056ae:	4650      	mov	r0, sl
 80056b0:	f000 fd8a 	bl	80061c8 <__mcmp>
 80056b4:	2800      	cmp	r0, #0
 80056b6:	da6c      	bge.n	8005792 <_dtoa_r+0x912>
 80056b8:	2300      	movs	r3, #0
 80056ba:	4651      	mov	r1, sl
 80056bc:	220a      	movs	r2, #10
 80056be:	4628      	mov	r0, r5
 80056c0:	f000 fb20 	bl	8005d04 <__multadd>
 80056c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056c6:	4682      	mov	sl, r0
 80056c8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	f000 81ac 	beq.w	8005a2a <_dtoa_r+0xbaa>
 80056d2:	2300      	movs	r3, #0
 80056d4:	4631      	mov	r1, r6
 80056d6:	220a      	movs	r2, #10
 80056d8:	4628      	mov	r0, r5
 80056da:	f000 fb13 	bl	8005d04 <__multadd>
 80056de:	9b06      	ldr	r3, [sp, #24]
 80056e0:	4606      	mov	r6, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	f300 8093 	bgt.w	800580e <_dtoa_r+0x98e>
 80056e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80056ea:	2b02      	cmp	r3, #2
 80056ec:	dc59      	bgt.n	80057a2 <_dtoa_r+0x922>
 80056ee:	e08e      	b.n	800580e <_dtoa_r+0x98e>
 80056f0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80056f2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80056f6:	e75d      	b.n	80055b4 <_dtoa_r+0x734>
 80056f8:	9b08      	ldr	r3, [sp, #32]
 80056fa:	1e5c      	subs	r4, r3, #1
 80056fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056fe:	42a3      	cmp	r3, r4
 8005700:	bfbf      	itttt	lt
 8005702:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005704:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8005706:	1ae3      	sublt	r3, r4, r3
 8005708:	18d2      	addlt	r2, r2, r3
 800570a:	bfa8      	it	ge
 800570c:	1b1c      	subge	r4, r3, r4
 800570e:	9b08      	ldr	r3, [sp, #32]
 8005710:	bfbe      	ittt	lt
 8005712:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005714:	920e      	strlt	r2, [sp, #56]	; 0x38
 8005716:	2400      	movlt	r4, #0
 8005718:	2b00      	cmp	r3, #0
 800571a:	bfb5      	itete	lt
 800571c:	eba9 0703 	sublt.w	r7, r9, r3
 8005720:	464f      	movge	r7, r9
 8005722:	2300      	movlt	r3, #0
 8005724:	9b08      	ldrge	r3, [sp, #32]
 8005726:	e747      	b.n	80055b8 <_dtoa_r+0x738>
 8005728:	464f      	mov	r7, r9
 800572a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800572c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800572e:	e74c      	b.n	80055ca <_dtoa_r+0x74a>
 8005730:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005732:	e773      	b.n	800561c <_dtoa_r+0x79c>
 8005734:	3fe00000 	.word	0x3fe00000
 8005738:	40240000 	.word	0x40240000
 800573c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800573e:	2b01      	cmp	r3, #1
 8005740:	dc18      	bgt.n	8005774 <_dtoa_r+0x8f4>
 8005742:	9b04      	ldr	r3, [sp, #16]
 8005744:	b9b3      	cbnz	r3, 8005774 <_dtoa_r+0x8f4>
 8005746:	9b05      	ldr	r3, [sp, #20]
 8005748:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800574c:	b993      	cbnz	r3, 8005774 <_dtoa_r+0x8f4>
 800574e:	9b05      	ldr	r3, [sp, #20]
 8005750:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005754:	0d1b      	lsrs	r3, r3, #20
 8005756:	051b      	lsls	r3, r3, #20
 8005758:	b17b      	cbz	r3, 800577a <_dtoa_r+0x8fa>
 800575a:	f04f 0801 	mov.w	r8, #1
 800575e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005760:	f109 0901 	add.w	r9, r9, #1
 8005764:	3301      	adds	r3, #1
 8005766:	9309      	str	r3, [sp, #36]	; 0x24
 8005768:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800576a:	2b00      	cmp	r3, #0
 800576c:	f47f af6f 	bne.w	800564e <_dtoa_r+0x7ce>
 8005770:	2001      	movs	r0, #1
 8005772:	e774      	b.n	800565e <_dtoa_r+0x7de>
 8005774:	f04f 0800 	mov.w	r8, #0
 8005778:	e7f6      	b.n	8005768 <_dtoa_r+0x8e8>
 800577a:	4698      	mov	r8, r3
 800577c:	e7f4      	b.n	8005768 <_dtoa_r+0x8e8>
 800577e:	d080      	beq.n	8005682 <_dtoa_r+0x802>
 8005780:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005782:	331c      	adds	r3, #28
 8005784:	441a      	add	r2, r3
 8005786:	4499      	add	r9, r3
 8005788:	441f      	add	r7, r3
 800578a:	9209      	str	r2, [sp, #36]	; 0x24
 800578c:	e779      	b.n	8005682 <_dtoa_r+0x802>
 800578e:	4603      	mov	r3, r0
 8005790:	e7f6      	b.n	8005780 <_dtoa_r+0x900>
 8005792:	9b08      	ldr	r3, [sp, #32]
 8005794:	2b00      	cmp	r3, #0
 8005796:	dc34      	bgt.n	8005802 <_dtoa_r+0x982>
 8005798:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800579a:	2b02      	cmp	r3, #2
 800579c:	dd31      	ble.n	8005802 <_dtoa_r+0x982>
 800579e:	9b08      	ldr	r3, [sp, #32]
 80057a0:	9306      	str	r3, [sp, #24]
 80057a2:	9b06      	ldr	r3, [sp, #24]
 80057a4:	b963      	cbnz	r3, 80057c0 <_dtoa_r+0x940>
 80057a6:	4621      	mov	r1, r4
 80057a8:	2205      	movs	r2, #5
 80057aa:	4628      	mov	r0, r5
 80057ac:	f000 faaa 	bl	8005d04 <__multadd>
 80057b0:	4601      	mov	r1, r0
 80057b2:	4604      	mov	r4, r0
 80057b4:	4650      	mov	r0, sl
 80057b6:	f000 fd07 	bl	80061c8 <__mcmp>
 80057ba:	2800      	cmp	r0, #0
 80057bc:	f73f adbf 	bgt.w	800533e <_dtoa_r+0x4be>
 80057c0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80057c2:	9f03      	ldr	r7, [sp, #12]
 80057c4:	ea6f 0b03 	mvn.w	fp, r3
 80057c8:	f04f 0800 	mov.w	r8, #0
 80057cc:	4621      	mov	r1, r4
 80057ce:	4628      	mov	r0, r5
 80057d0:	f000 fa76 	bl	8005cc0 <_Bfree>
 80057d4:	2e00      	cmp	r6, #0
 80057d6:	f43f aead 	beq.w	8005534 <_dtoa_r+0x6b4>
 80057da:	f1b8 0f00 	cmp.w	r8, #0
 80057de:	d005      	beq.n	80057ec <_dtoa_r+0x96c>
 80057e0:	45b0      	cmp	r8, r6
 80057e2:	d003      	beq.n	80057ec <_dtoa_r+0x96c>
 80057e4:	4641      	mov	r1, r8
 80057e6:	4628      	mov	r0, r5
 80057e8:	f000 fa6a 	bl	8005cc0 <_Bfree>
 80057ec:	4631      	mov	r1, r6
 80057ee:	4628      	mov	r0, r5
 80057f0:	f000 fa66 	bl	8005cc0 <_Bfree>
 80057f4:	e69e      	b.n	8005534 <_dtoa_r+0x6b4>
 80057f6:	2400      	movs	r4, #0
 80057f8:	4626      	mov	r6, r4
 80057fa:	e7e1      	b.n	80057c0 <_dtoa_r+0x940>
 80057fc:	46c3      	mov	fp, r8
 80057fe:	4626      	mov	r6, r4
 8005800:	e59d      	b.n	800533e <_dtoa_r+0x4be>
 8005802:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005804:	2b00      	cmp	r3, #0
 8005806:	f000 80c8 	beq.w	800599a <_dtoa_r+0xb1a>
 800580a:	9b08      	ldr	r3, [sp, #32]
 800580c:	9306      	str	r3, [sp, #24]
 800580e:	2f00      	cmp	r7, #0
 8005810:	dd05      	ble.n	800581e <_dtoa_r+0x99e>
 8005812:	4631      	mov	r1, r6
 8005814:	463a      	mov	r2, r7
 8005816:	4628      	mov	r0, r5
 8005818:	f000 fc6a 	bl	80060f0 <__lshift>
 800581c:	4606      	mov	r6, r0
 800581e:	f1b8 0f00 	cmp.w	r8, #0
 8005822:	d05b      	beq.n	80058dc <_dtoa_r+0xa5c>
 8005824:	4628      	mov	r0, r5
 8005826:	6871      	ldr	r1, [r6, #4]
 8005828:	f000 fa0a 	bl	8005c40 <_Balloc>
 800582c:	4607      	mov	r7, r0
 800582e:	b928      	cbnz	r0, 800583c <_dtoa_r+0x9bc>
 8005830:	4602      	mov	r2, r0
 8005832:	f240 21ef 	movw	r1, #751	; 0x2ef
 8005836:	4b81      	ldr	r3, [pc, #516]	; (8005a3c <_dtoa_r+0xbbc>)
 8005838:	f7ff bb36 	b.w	8004ea8 <_dtoa_r+0x28>
 800583c:	6932      	ldr	r2, [r6, #16]
 800583e:	f106 010c 	add.w	r1, r6, #12
 8005842:	3202      	adds	r2, #2
 8005844:	0092      	lsls	r2, r2, #2
 8005846:	300c      	adds	r0, #12
 8005848:	f7ff fa7b 	bl	8004d42 <memcpy>
 800584c:	2201      	movs	r2, #1
 800584e:	4639      	mov	r1, r7
 8005850:	4628      	mov	r0, r5
 8005852:	f000 fc4d 	bl	80060f0 <__lshift>
 8005856:	46b0      	mov	r8, r6
 8005858:	4606      	mov	r6, r0
 800585a:	9b03      	ldr	r3, [sp, #12]
 800585c:	9a03      	ldr	r2, [sp, #12]
 800585e:	3301      	adds	r3, #1
 8005860:	9308      	str	r3, [sp, #32]
 8005862:	9b06      	ldr	r3, [sp, #24]
 8005864:	4413      	add	r3, r2
 8005866:	930b      	str	r3, [sp, #44]	; 0x2c
 8005868:	9b04      	ldr	r3, [sp, #16]
 800586a:	f003 0301 	and.w	r3, r3, #1
 800586e:	930a      	str	r3, [sp, #40]	; 0x28
 8005870:	9b08      	ldr	r3, [sp, #32]
 8005872:	4621      	mov	r1, r4
 8005874:	3b01      	subs	r3, #1
 8005876:	4650      	mov	r0, sl
 8005878:	9304      	str	r3, [sp, #16]
 800587a:	f7ff fa75 	bl	8004d68 <quorem>
 800587e:	4641      	mov	r1, r8
 8005880:	9006      	str	r0, [sp, #24]
 8005882:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005886:	4650      	mov	r0, sl
 8005888:	f000 fc9e 	bl	80061c8 <__mcmp>
 800588c:	4632      	mov	r2, r6
 800588e:	9009      	str	r0, [sp, #36]	; 0x24
 8005890:	4621      	mov	r1, r4
 8005892:	4628      	mov	r0, r5
 8005894:	f000 fcb4 	bl	8006200 <__mdiff>
 8005898:	68c2      	ldr	r2, [r0, #12]
 800589a:	4607      	mov	r7, r0
 800589c:	bb02      	cbnz	r2, 80058e0 <_dtoa_r+0xa60>
 800589e:	4601      	mov	r1, r0
 80058a0:	4650      	mov	r0, sl
 80058a2:	f000 fc91 	bl	80061c8 <__mcmp>
 80058a6:	4602      	mov	r2, r0
 80058a8:	4639      	mov	r1, r7
 80058aa:	4628      	mov	r0, r5
 80058ac:	920c      	str	r2, [sp, #48]	; 0x30
 80058ae:	f000 fa07 	bl	8005cc0 <_Bfree>
 80058b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80058b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80058b6:	9f08      	ldr	r7, [sp, #32]
 80058b8:	ea43 0102 	orr.w	r1, r3, r2
 80058bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058be:	4319      	orrs	r1, r3
 80058c0:	d110      	bne.n	80058e4 <_dtoa_r+0xa64>
 80058c2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80058c6:	d029      	beq.n	800591c <_dtoa_r+0xa9c>
 80058c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	dd02      	ble.n	80058d4 <_dtoa_r+0xa54>
 80058ce:	9b06      	ldr	r3, [sp, #24]
 80058d0:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80058d4:	9b04      	ldr	r3, [sp, #16]
 80058d6:	f883 9000 	strb.w	r9, [r3]
 80058da:	e777      	b.n	80057cc <_dtoa_r+0x94c>
 80058dc:	4630      	mov	r0, r6
 80058de:	e7ba      	b.n	8005856 <_dtoa_r+0x9d6>
 80058e0:	2201      	movs	r2, #1
 80058e2:	e7e1      	b.n	80058a8 <_dtoa_r+0xa28>
 80058e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	db04      	blt.n	80058f4 <_dtoa_r+0xa74>
 80058ea:	9922      	ldr	r1, [sp, #136]	; 0x88
 80058ec:	430b      	orrs	r3, r1
 80058ee:	990a      	ldr	r1, [sp, #40]	; 0x28
 80058f0:	430b      	orrs	r3, r1
 80058f2:	d120      	bne.n	8005936 <_dtoa_r+0xab6>
 80058f4:	2a00      	cmp	r2, #0
 80058f6:	dded      	ble.n	80058d4 <_dtoa_r+0xa54>
 80058f8:	4651      	mov	r1, sl
 80058fa:	2201      	movs	r2, #1
 80058fc:	4628      	mov	r0, r5
 80058fe:	f000 fbf7 	bl	80060f0 <__lshift>
 8005902:	4621      	mov	r1, r4
 8005904:	4682      	mov	sl, r0
 8005906:	f000 fc5f 	bl	80061c8 <__mcmp>
 800590a:	2800      	cmp	r0, #0
 800590c:	dc03      	bgt.n	8005916 <_dtoa_r+0xa96>
 800590e:	d1e1      	bne.n	80058d4 <_dtoa_r+0xa54>
 8005910:	f019 0f01 	tst.w	r9, #1
 8005914:	d0de      	beq.n	80058d4 <_dtoa_r+0xa54>
 8005916:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800591a:	d1d8      	bne.n	80058ce <_dtoa_r+0xa4e>
 800591c:	2339      	movs	r3, #57	; 0x39
 800591e:	9a04      	ldr	r2, [sp, #16]
 8005920:	7013      	strb	r3, [r2, #0]
 8005922:	463b      	mov	r3, r7
 8005924:	461f      	mov	r7, r3
 8005926:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800592a:	3b01      	subs	r3, #1
 800592c:	2a39      	cmp	r2, #57	; 0x39
 800592e:	d06b      	beq.n	8005a08 <_dtoa_r+0xb88>
 8005930:	3201      	adds	r2, #1
 8005932:	701a      	strb	r2, [r3, #0]
 8005934:	e74a      	b.n	80057cc <_dtoa_r+0x94c>
 8005936:	2a00      	cmp	r2, #0
 8005938:	dd07      	ble.n	800594a <_dtoa_r+0xaca>
 800593a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800593e:	d0ed      	beq.n	800591c <_dtoa_r+0xa9c>
 8005940:	9a04      	ldr	r2, [sp, #16]
 8005942:	f109 0301 	add.w	r3, r9, #1
 8005946:	7013      	strb	r3, [r2, #0]
 8005948:	e740      	b.n	80057cc <_dtoa_r+0x94c>
 800594a:	9b08      	ldr	r3, [sp, #32]
 800594c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800594e:	f803 9c01 	strb.w	r9, [r3, #-1]
 8005952:	4293      	cmp	r3, r2
 8005954:	d042      	beq.n	80059dc <_dtoa_r+0xb5c>
 8005956:	4651      	mov	r1, sl
 8005958:	2300      	movs	r3, #0
 800595a:	220a      	movs	r2, #10
 800595c:	4628      	mov	r0, r5
 800595e:	f000 f9d1 	bl	8005d04 <__multadd>
 8005962:	45b0      	cmp	r8, r6
 8005964:	4682      	mov	sl, r0
 8005966:	f04f 0300 	mov.w	r3, #0
 800596a:	f04f 020a 	mov.w	r2, #10
 800596e:	4641      	mov	r1, r8
 8005970:	4628      	mov	r0, r5
 8005972:	d107      	bne.n	8005984 <_dtoa_r+0xb04>
 8005974:	f000 f9c6 	bl	8005d04 <__multadd>
 8005978:	4680      	mov	r8, r0
 800597a:	4606      	mov	r6, r0
 800597c:	9b08      	ldr	r3, [sp, #32]
 800597e:	3301      	adds	r3, #1
 8005980:	9308      	str	r3, [sp, #32]
 8005982:	e775      	b.n	8005870 <_dtoa_r+0x9f0>
 8005984:	f000 f9be 	bl	8005d04 <__multadd>
 8005988:	4631      	mov	r1, r6
 800598a:	4680      	mov	r8, r0
 800598c:	2300      	movs	r3, #0
 800598e:	220a      	movs	r2, #10
 8005990:	4628      	mov	r0, r5
 8005992:	f000 f9b7 	bl	8005d04 <__multadd>
 8005996:	4606      	mov	r6, r0
 8005998:	e7f0      	b.n	800597c <_dtoa_r+0xafc>
 800599a:	9b08      	ldr	r3, [sp, #32]
 800599c:	9306      	str	r3, [sp, #24]
 800599e:	9f03      	ldr	r7, [sp, #12]
 80059a0:	4621      	mov	r1, r4
 80059a2:	4650      	mov	r0, sl
 80059a4:	f7ff f9e0 	bl	8004d68 <quorem>
 80059a8:	9b03      	ldr	r3, [sp, #12]
 80059aa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80059ae:	f807 9b01 	strb.w	r9, [r7], #1
 80059b2:	1afa      	subs	r2, r7, r3
 80059b4:	9b06      	ldr	r3, [sp, #24]
 80059b6:	4293      	cmp	r3, r2
 80059b8:	dd07      	ble.n	80059ca <_dtoa_r+0xb4a>
 80059ba:	4651      	mov	r1, sl
 80059bc:	2300      	movs	r3, #0
 80059be:	220a      	movs	r2, #10
 80059c0:	4628      	mov	r0, r5
 80059c2:	f000 f99f 	bl	8005d04 <__multadd>
 80059c6:	4682      	mov	sl, r0
 80059c8:	e7ea      	b.n	80059a0 <_dtoa_r+0xb20>
 80059ca:	9b06      	ldr	r3, [sp, #24]
 80059cc:	f04f 0800 	mov.w	r8, #0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	bfcc      	ite	gt
 80059d4:	461f      	movgt	r7, r3
 80059d6:	2701      	movle	r7, #1
 80059d8:	9b03      	ldr	r3, [sp, #12]
 80059da:	441f      	add	r7, r3
 80059dc:	4651      	mov	r1, sl
 80059de:	2201      	movs	r2, #1
 80059e0:	4628      	mov	r0, r5
 80059e2:	f000 fb85 	bl	80060f0 <__lshift>
 80059e6:	4621      	mov	r1, r4
 80059e8:	4682      	mov	sl, r0
 80059ea:	f000 fbed 	bl	80061c8 <__mcmp>
 80059ee:	2800      	cmp	r0, #0
 80059f0:	dc97      	bgt.n	8005922 <_dtoa_r+0xaa2>
 80059f2:	d102      	bne.n	80059fa <_dtoa_r+0xb7a>
 80059f4:	f019 0f01 	tst.w	r9, #1
 80059f8:	d193      	bne.n	8005922 <_dtoa_r+0xaa2>
 80059fa:	463b      	mov	r3, r7
 80059fc:	461f      	mov	r7, r3
 80059fe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005a02:	2a30      	cmp	r2, #48	; 0x30
 8005a04:	d0fa      	beq.n	80059fc <_dtoa_r+0xb7c>
 8005a06:	e6e1      	b.n	80057cc <_dtoa_r+0x94c>
 8005a08:	9a03      	ldr	r2, [sp, #12]
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d18a      	bne.n	8005924 <_dtoa_r+0xaa4>
 8005a0e:	2331      	movs	r3, #49	; 0x31
 8005a10:	f10b 0b01 	add.w	fp, fp, #1
 8005a14:	e797      	b.n	8005946 <_dtoa_r+0xac6>
 8005a16:	4b0a      	ldr	r3, [pc, #40]	; (8005a40 <_dtoa_r+0xbc0>)
 8005a18:	f7ff ba9f 	b.w	8004f5a <_dtoa_r+0xda>
 8005a1c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	f47f aa77 	bne.w	8004f12 <_dtoa_r+0x92>
 8005a24:	4b07      	ldr	r3, [pc, #28]	; (8005a44 <_dtoa_r+0xbc4>)
 8005a26:	f7ff ba98 	b.w	8004f5a <_dtoa_r+0xda>
 8005a2a:	9b06      	ldr	r3, [sp, #24]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	dcb6      	bgt.n	800599e <_dtoa_r+0xb1e>
 8005a30:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a32:	2b02      	cmp	r3, #2
 8005a34:	f73f aeb5 	bgt.w	80057a2 <_dtoa_r+0x922>
 8005a38:	e7b1      	b.n	800599e <_dtoa_r+0xb1e>
 8005a3a:	bf00      	nop
 8005a3c:	0800950d 	.word	0x0800950d
 8005a40:	080097f0 	.word	0x080097f0
 8005a44:	08009491 	.word	0x08009491

08005a48 <_free_r>:
 8005a48:	b538      	push	{r3, r4, r5, lr}
 8005a4a:	4605      	mov	r5, r0
 8005a4c:	2900      	cmp	r1, #0
 8005a4e:	d040      	beq.n	8005ad2 <_free_r+0x8a>
 8005a50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a54:	1f0c      	subs	r4, r1, #4
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	bfb8      	it	lt
 8005a5a:	18e4      	addlt	r4, r4, r3
 8005a5c:	f000 f8e4 	bl	8005c28 <__malloc_lock>
 8005a60:	4a1c      	ldr	r2, [pc, #112]	; (8005ad4 <_free_r+0x8c>)
 8005a62:	6813      	ldr	r3, [r2, #0]
 8005a64:	b933      	cbnz	r3, 8005a74 <_free_r+0x2c>
 8005a66:	6063      	str	r3, [r4, #4]
 8005a68:	6014      	str	r4, [r2, #0]
 8005a6a:	4628      	mov	r0, r5
 8005a6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a70:	f000 b8e0 	b.w	8005c34 <__malloc_unlock>
 8005a74:	42a3      	cmp	r3, r4
 8005a76:	d908      	bls.n	8005a8a <_free_r+0x42>
 8005a78:	6820      	ldr	r0, [r4, #0]
 8005a7a:	1821      	adds	r1, r4, r0
 8005a7c:	428b      	cmp	r3, r1
 8005a7e:	bf01      	itttt	eq
 8005a80:	6819      	ldreq	r1, [r3, #0]
 8005a82:	685b      	ldreq	r3, [r3, #4]
 8005a84:	1809      	addeq	r1, r1, r0
 8005a86:	6021      	streq	r1, [r4, #0]
 8005a88:	e7ed      	b.n	8005a66 <_free_r+0x1e>
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	b10b      	cbz	r3, 8005a94 <_free_r+0x4c>
 8005a90:	42a3      	cmp	r3, r4
 8005a92:	d9fa      	bls.n	8005a8a <_free_r+0x42>
 8005a94:	6811      	ldr	r1, [r2, #0]
 8005a96:	1850      	adds	r0, r2, r1
 8005a98:	42a0      	cmp	r0, r4
 8005a9a:	d10b      	bne.n	8005ab4 <_free_r+0x6c>
 8005a9c:	6820      	ldr	r0, [r4, #0]
 8005a9e:	4401      	add	r1, r0
 8005aa0:	1850      	adds	r0, r2, r1
 8005aa2:	4283      	cmp	r3, r0
 8005aa4:	6011      	str	r1, [r2, #0]
 8005aa6:	d1e0      	bne.n	8005a6a <_free_r+0x22>
 8005aa8:	6818      	ldr	r0, [r3, #0]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	4408      	add	r0, r1
 8005aae:	6010      	str	r0, [r2, #0]
 8005ab0:	6053      	str	r3, [r2, #4]
 8005ab2:	e7da      	b.n	8005a6a <_free_r+0x22>
 8005ab4:	d902      	bls.n	8005abc <_free_r+0x74>
 8005ab6:	230c      	movs	r3, #12
 8005ab8:	602b      	str	r3, [r5, #0]
 8005aba:	e7d6      	b.n	8005a6a <_free_r+0x22>
 8005abc:	6820      	ldr	r0, [r4, #0]
 8005abe:	1821      	adds	r1, r4, r0
 8005ac0:	428b      	cmp	r3, r1
 8005ac2:	bf01      	itttt	eq
 8005ac4:	6819      	ldreq	r1, [r3, #0]
 8005ac6:	685b      	ldreq	r3, [r3, #4]
 8005ac8:	1809      	addeq	r1, r1, r0
 8005aca:	6021      	streq	r1, [r4, #0]
 8005acc:	6063      	str	r3, [r4, #4]
 8005ace:	6054      	str	r4, [r2, #4]
 8005ad0:	e7cb      	b.n	8005a6a <_free_r+0x22>
 8005ad2:	bd38      	pop	{r3, r4, r5, pc}
 8005ad4:	20000838 	.word	0x20000838

08005ad8 <malloc>:
 8005ad8:	4b02      	ldr	r3, [pc, #8]	; (8005ae4 <malloc+0xc>)
 8005ada:	4601      	mov	r1, r0
 8005adc:	6818      	ldr	r0, [r3, #0]
 8005ade:	f000 b823 	b.w	8005b28 <_malloc_r>
 8005ae2:	bf00      	nop
 8005ae4:	20000064 	.word	0x20000064

08005ae8 <sbrk_aligned>:
 8005ae8:	b570      	push	{r4, r5, r6, lr}
 8005aea:	4e0e      	ldr	r6, [pc, #56]	; (8005b24 <sbrk_aligned+0x3c>)
 8005aec:	460c      	mov	r4, r1
 8005aee:	6831      	ldr	r1, [r6, #0]
 8005af0:	4605      	mov	r5, r0
 8005af2:	b911      	cbnz	r1, 8005afa <sbrk_aligned+0x12>
 8005af4:	f002 f982 	bl	8007dfc <_sbrk_r>
 8005af8:	6030      	str	r0, [r6, #0]
 8005afa:	4621      	mov	r1, r4
 8005afc:	4628      	mov	r0, r5
 8005afe:	f002 f97d 	bl	8007dfc <_sbrk_r>
 8005b02:	1c43      	adds	r3, r0, #1
 8005b04:	d00a      	beq.n	8005b1c <sbrk_aligned+0x34>
 8005b06:	1cc4      	adds	r4, r0, #3
 8005b08:	f024 0403 	bic.w	r4, r4, #3
 8005b0c:	42a0      	cmp	r0, r4
 8005b0e:	d007      	beq.n	8005b20 <sbrk_aligned+0x38>
 8005b10:	1a21      	subs	r1, r4, r0
 8005b12:	4628      	mov	r0, r5
 8005b14:	f002 f972 	bl	8007dfc <_sbrk_r>
 8005b18:	3001      	adds	r0, #1
 8005b1a:	d101      	bne.n	8005b20 <sbrk_aligned+0x38>
 8005b1c:	f04f 34ff 	mov.w	r4, #4294967295
 8005b20:	4620      	mov	r0, r4
 8005b22:	bd70      	pop	{r4, r5, r6, pc}
 8005b24:	2000083c 	.word	0x2000083c

08005b28 <_malloc_r>:
 8005b28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b2c:	1ccd      	adds	r5, r1, #3
 8005b2e:	f025 0503 	bic.w	r5, r5, #3
 8005b32:	3508      	adds	r5, #8
 8005b34:	2d0c      	cmp	r5, #12
 8005b36:	bf38      	it	cc
 8005b38:	250c      	movcc	r5, #12
 8005b3a:	2d00      	cmp	r5, #0
 8005b3c:	4607      	mov	r7, r0
 8005b3e:	db01      	blt.n	8005b44 <_malloc_r+0x1c>
 8005b40:	42a9      	cmp	r1, r5
 8005b42:	d905      	bls.n	8005b50 <_malloc_r+0x28>
 8005b44:	230c      	movs	r3, #12
 8005b46:	2600      	movs	r6, #0
 8005b48:	603b      	str	r3, [r7, #0]
 8005b4a:	4630      	mov	r0, r6
 8005b4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b50:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005c24 <_malloc_r+0xfc>
 8005b54:	f000 f868 	bl	8005c28 <__malloc_lock>
 8005b58:	f8d8 3000 	ldr.w	r3, [r8]
 8005b5c:	461c      	mov	r4, r3
 8005b5e:	bb5c      	cbnz	r4, 8005bb8 <_malloc_r+0x90>
 8005b60:	4629      	mov	r1, r5
 8005b62:	4638      	mov	r0, r7
 8005b64:	f7ff ffc0 	bl	8005ae8 <sbrk_aligned>
 8005b68:	1c43      	adds	r3, r0, #1
 8005b6a:	4604      	mov	r4, r0
 8005b6c:	d155      	bne.n	8005c1a <_malloc_r+0xf2>
 8005b6e:	f8d8 4000 	ldr.w	r4, [r8]
 8005b72:	4626      	mov	r6, r4
 8005b74:	2e00      	cmp	r6, #0
 8005b76:	d145      	bne.n	8005c04 <_malloc_r+0xdc>
 8005b78:	2c00      	cmp	r4, #0
 8005b7a:	d048      	beq.n	8005c0e <_malloc_r+0xe6>
 8005b7c:	6823      	ldr	r3, [r4, #0]
 8005b7e:	4631      	mov	r1, r6
 8005b80:	4638      	mov	r0, r7
 8005b82:	eb04 0903 	add.w	r9, r4, r3
 8005b86:	f002 f939 	bl	8007dfc <_sbrk_r>
 8005b8a:	4581      	cmp	r9, r0
 8005b8c:	d13f      	bne.n	8005c0e <_malloc_r+0xe6>
 8005b8e:	6821      	ldr	r1, [r4, #0]
 8005b90:	4638      	mov	r0, r7
 8005b92:	1a6d      	subs	r5, r5, r1
 8005b94:	4629      	mov	r1, r5
 8005b96:	f7ff ffa7 	bl	8005ae8 <sbrk_aligned>
 8005b9a:	3001      	adds	r0, #1
 8005b9c:	d037      	beq.n	8005c0e <_malloc_r+0xe6>
 8005b9e:	6823      	ldr	r3, [r4, #0]
 8005ba0:	442b      	add	r3, r5
 8005ba2:	6023      	str	r3, [r4, #0]
 8005ba4:	f8d8 3000 	ldr.w	r3, [r8]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d038      	beq.n	8005c1e <_malloc_r+0xf6>
 8005bac:	685a      	ldr	r2, [r3, #4]
 8005bae:	42a2      	cmp	r2, r4
 8005bb0:	d12b      	bne.n	8005c0a <_malloc_r+0xe2>
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	605a      	str	r2, [r3, #4]
 8005bb6:	e00f      	b.n	8005bd8 <_malloc_r+0xb0>
 8005bb8:	6822      	ldr	r2, [r4, #0]
 8005bba:	1b52      	subs	r2, r2, r5
 8005bbc:	d41f      	bmi.n	8005bfe <_malloc_r+0xd6>
 8005bbe:	2a0b      	cmp	r2, #11
 8005bc0:	d917      	bls.n	8005bf2 <_malloc_r+0xca>
 8005bc2:	1961      	adds	r1, r4, r5
 8005bc4:	42a3      	cmp	r3, r4
 8005bc6:	6025      	str	r5, [r4, #0]
 8005bc8:	bf18      	it	ne
 8005bca:	6059      	strne	r1, [r3, #4]
 8005bcc:	6863      	ldr	r3, [r4, #4]
 8005bce:	bf08      	it	eq
 8005bd0:	f8c8 1000 	streq.w	r1, [r8]
 8005bd4:	5162      	str	r2, [r4, r5]
 8005bd6:	604b      	str	r3, [r1, #4]
 8005bd8:	4638      	mov	r0, r7
 8005bda:	f104 060b 	add.w	r6, r4, #11
 8005bde:	f000 f829 	bl	8005c34 <__malloc_unlock>
 8005be2:	f026 0607 	bic.w	r6, r6, #7
 8005be6:	1d23      	adds	r3, r4, #4
 8005be8:	1af2      	subs	r2, r6, r3
 8005bea:	d0ae      	beq.n	8005b4a <_malloc_r+0x22>
 8005bec:	1b9b      	subs	r3, r3, r6
 8005bee:	50a3      	str	r3, [r4, r2]
 8005bf0:	e7ab      	b.n	8005b4a <_malloc_r+0x22>
 8005bf2:	42a3      	cmp	r3, r4
 8005bf4:	6862      	ldr	r2, [r4, #4]
 8005bf6:	d1dd      	bne.n	8005bb4 <_malloc_r+0x8c>
 8005bf8:	f8c8 2000 	str.w	r2, [r8]
 8005bfc:	e7ec      	b.n	8005bd8 <_malloc_r+0xb0>
 8005bfe:	4623      	mov	r3, r4
 8005c00:	6864      	ldr	r4, [r4, #4]
 8005c02:	e7ac      	b.n	8005b5e <_malloc_r+0x36>
 8005c04:	4634      	mov	r4, r6
 8005c06:	6876      	ldr	r6, [r6, #4]
 8005c08:	e7b4      	b.n	8005b74 <_malloc_r+0x4c>
 8005c0a:	4613      	mov	r3, r2
 8005c0c:	e7cc      	b.n	8005ba8 <_malloc_r+0x80>
 8005c0e:	230c      	movs	r3, #12
 8005c10:	4638      	mov	r0, r7
 8005c12:	603b      	str	r3, [r7, #0]
 8005c14:	f000 f80e 	bl	8005c34 <__malloc_unlock>
 8005c18:	e797      	b.n	8005b4a <_malloc_r+0x22>
 8005c1a:	6025      	str	r5, [r4, #0]
 8005c1c:	e7dc      	b.n	8005bd8 <_malloc_r+0xb0>
 8005c1e:	605b      	str	r3, [r3, #4]
 8005c20:	deff      	udf	#255	; 0xff
 8005c22:	bf00      	nop
 8005c24:	20000838 	.word	0x20000838

08005c28 <__malloc_lock>:
 8005c28:	4801      	ldr	r0, [pc, #4]	; (8005c30 <__malloc_lock+0x8>)
 8005c2a:	f7ff b87a 	b.w	8004d22 <__retarget_lock_acquire_recursive>
 8005c2e:	bf00      	nop
 8005c30:	20000834 	.word	0x20000834

08005c34 <__malloc_unlock>:
 8005c34:	4801      	ldr	r0, [pc, #4]	; (8005c3c <__malloc_unlock+0x8>)
 8005c36:	f7ff b875 	b.w	8004d24 <__retarget_lock_release_recursive>
 8005c3a:	bf00      	nop
 8005c3c:	20000834 	.word	0x20000834

08005c40 <_Balloc>:
 8005c40:	b570      	push	{r4, r5, r6, lr}
 8005c42:	69c6      	ldr	r6, [r0, #28]
 8005c44:	4604      	mov	r4, r0
 8005c46:	460d      	mov	r5, r1
 8005c48:	b976      	cbnz	r6, 8005c68 <_Balloc+0x28>
 8005c4a:	2010      	movs	r0, #16
 8005c4c:	f7ff ff44 	bl	8005ad8 <malloc>
 8005c50:	4602      	mov	r2, r0
 8005c52:	61e0      	str	r0, [r4, #28]
 8005c54:	b920      	cbnz	r0, 8005c60 <_Balloc+0x20>
 8005c56:	216b      	movs	r1, #107	; 0x6b
 8005c58:	4b17      	ldr	r3, [pc, #92]	; (8005cb8 <_Balloc+0x78>)
 8005c5a:	4818      	ldr	r0, [pc, #96]	; (8005cbc <_Balloc+0x7c>)
 8005c5c:	f002 f8e4 	bl	8007e28 <__assert_func>
 8005c60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005c64:	6006      	str	r6, [r0, #0]
 8005c66:	60c6      	str	r6, [r0, #12]
 8005c68:	69e6      	ldr	r6, [r4, #28]
 8005c6a:	68f3      	ldr	r3, [r6, #12]
 8005c6c:	b183      	cbz	r3, 8005c90 <_Balloc+0x50>
 8005c6e:	69e3      	ldr	r3, [r4, #28]
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005c76:	b9b8      	cbnz	r0, 8005ca8 <_Balloc+0x68>
 8005c78:	2101      	movs	r1, #1
 8005c7a:	fa01 f605 	lsl.w	r6, r1, r5
 8005c7e:	1d72      	adds	r2, r6, #5
 8005c80:	4620      	mov	r0, r4
 8005c82:	0092      	lsls	r2, r2, #2
 8005c84:	f002 f8ee 	bl	8007e64 <_calloc_r>
 8005c88:	b160      	cbz	r0, 8005ca4 <_Balloc+0x64>
 8005c8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005c8e:	e00e      	b.n	8005cae <_Balloc+0x6e>
 8005c90:	2221      	movs	r2, #33	; 0x21
 8005c92:	2104      	movs	r1, #4
 8005c94:	4620      	mov	r0, r4
 8005c96:	f002 f8e5 	bl	8007e64 <_calloc_r>
 8005c9a:	69e3      	ldr	r3, [r4, #28]
 8005c9c:	60f0      	str	r0, [r6, #12]
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d1e4      	bne.n	8005c6e <_Balloc+0x2e>
 8005ca4:	2000      	movs	r0, #0
 8005ca6:	bd70      	pop	{r4, r5, r6, pc}
 8005ca8:	6802      	ldr	r2, [r0, #0]
 8005caa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005cae:	2300      	movs	r3, #0
 8005cb0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005cb4:	e7f7      	b.n	8005ca6 <_Balloc+0x66>
 8005cb6:	bf00      	nop
 8005cb8:	0800949e 	.word	0x0800949e
 8005cbc:	0800951e 	.word	0x0800951e

08005cc0 <_Bfree>:
 8005cc0:	b570      	push	{r4, r5, r6, lr}
 8005cc2:	69c6      	ldr	r6, [r0, #28]
 8005cc4:	4605      	mov	r5, r0
 8005cc6:	460c      	mov	r4, r1
 8005cc8:	b976      	cbnz	r6, 8005ce8 <_Bfree+0x28>
 8005cca:	2010      	movs	r0, #16
 8005ccc:	f7ff ff04 	bl	8005ad8 <malloc>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	61e8      	str	r0, [r5, #28]
 8005cd4:	b920      	cbnz	r0, 8005ce0 <_Bfree+0x20>
 8005cd6:	218f      	movs	r1, #143	; 0x8f
 8005cd8:	4b08      	ldr	r3, [pc, #32]	; (8005cfc <_Bfree+0x3c>)
 8005cda:	4809      	ldr	r0, [pc, #36]	; (8005d00 <_Bfree+0x40>)
 8005cdc:	f002 f8a4 	bl	8007e28 <__assert_func>
 8005ce0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005ce4:	6006      	str	r6, [r0, #0]
 8005ce6:	60c6      	str	r6, [r0, #12]
 8005ce8:	b13c      	cbz	r4, 8005cfa <_Bfree+0x3a>
 8005cea:	69eb      	ldr	r3, [r5, #28]
 8005cec:	6862      	ldr	r2, [r4, #4]
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005cf4:	6021      	str	r1, [r4, #0]
 8005cf6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005cfa:	bd70      	pop	{r4, r5, r6, pc}
 8005cfc:	0800949e 	.word	0x0800949e
 8005d00:	0800951e 	.word	0x0800951e

08005d04 <__multadd>:
 8005d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d08:	4607      	mov	r7, r0
 8005d0a:	460c      	mov	r4, r1
 8005d0c:	461e      	mov	r6, r3
 8005d0e:	2000      	movs	r0, #0
 8005d10:	690d      	ldr	r5, [r1, #16]
 8005d12:	f101 0c14 	add.w	ip, r1, #20
 8005d16:	f8dc 3000 	ldr.w	r3, [ip]
 8005d1a:	3001      	adds	r0, #1
 8005d1c:	b299      	uxth	r1, r3
 8005d1e:	fb02 6101 	mla	r1, r2, r1, r6
 8005d22:	0c1e      	lsrs	r6, r3, #16
 8005d24:	0c0b      	lsrs	r3, r1, #16
 8005d26:	fb02 3306 	mla	r3, r2, r6, r3
 8005d2a:	b289      	uxth	r1, r1
 8005d2c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005d30:	4285      	cmp	r5, r0
 8005d32:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005d36:	f84c 1b04 	str.w	r1, [ip], #4
 8005d3a:	dcec      	bgt.n	8005d16 <__multadd+0x12>
 8005d3c:	b30e      	cbz	r6, 8005d82 <__multadd+0x7e>
 8005d3e:	68a3      	ldr	r3, [r4, #8]
 8005d40:	42ab      	cmp	r3, r5
 8005d42:	dc19      	bgt.n	8005d78 <__multadd+0x74>
 8005d44:	6861      	ldr	r1, [r4, #4]
 8005d46:	4638      	mov	r0, r7
 8005d48:	3101      	adds	r1, #1
 8005d4a:	f7ff ff79 	bl	8005c40 <_Balloc>
 8005d4e:	4680      	mov	r8, r0
 8005d50:	b928      	cbnz	r0, 8005d5e <__multadd+0x5a>
 8005d52:	4602      	mov	r2, r0
 8005d54:	21ba      	movs	r1, #186	; 0xba
 8005d56:	4b0c      	ldr	r3, [pc, #48]	; (8005d88 <__multadd+0x84>)
 8005d58:	480c      	ldr	r0, [pc, #48]	; (8005d8c <__multadd+0x88>)
 8005d5a:	f002 f865 	bl	8007e28 <__assert_func>
 8005d5e:	6922      	ldr	r2, [r4, #16]
 8005d60:	f104 010c 	add.w	r1, r4, #12
 8005d64:	3202      	adds	r2, #2
 8005d66:	0092      	lsls	r2, r2, #2
 8005d68:	300c      	adds	r0, #12
 8005d6a:	f7fe ffea 	bl	8004d42 <memcpy>
 8005d6e:	4621      	mov	r1, r4
 8005d70:	4638      	mov	r0, r7
 8005d72:	f7ff ffa5 	bl	8005cc0 <_Bfree>
 8005d76:	4644      	mov	r4, r8
 8005d78:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005d7c:	3501      	adds	r5, #1
 8005d7e:	615e      	str	r6, [r3, #20]
 8005d80:	6125      	str	r5, [r4, #16]
 8005d82:	4620      	mov	r0, r4
 8005d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d88:	0800950d 	.word	0x0800950d
 8005d8c:	0800951e 	.word	0x0800951e

08005d90 <__s2b>:
 8005d90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d94:	4615      	mov	r5, r2
 8005d96:	2209      	movs	r2, #9
 8005d98:	461f      	mov	r7, r3
 8005d9a:	3308      	adds	r3, #8
 8005d9c:	460c      	mov	r4, r1
 8005d9e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005da2:	4606      	mov	r6, r0
 8005da4:	2201      	movs	r2, #1
 8005da6:	2100      	movs	r1, #0
 8005da8:	429a      	cmp	r2, r3
 8005daa:	db09      	blt.n	8005dc0 <__s2b+0x30>
 8005dac:	4630      	mov	r0, r6
 8005dae:	f7ff ff47 	bl	8005c40 <_Balloc>
 8005db2:	b940      	cbnz	r0, 8005dc6 <__s2b+0x36>
 8005db4:	4602      	mov	r2, r0
 8005db6:	21d3      	movs	r1, #211	; 0xd3
 8005db8:	4b18      	ldr	r3, [pc, #96]	; (8005e1c <__s2b+0x8c>)
 8005dba:	4819      	ldr	r0, [pc, #100]	; (8005e20 <__s2b+0x90>)
 8005dbc:	f002 f834 	bl	8007e28 <__assert_func>
 8005dc0:	0052      	lsls	r2, r2, #1
 8005dc2:	3101      	adds	r1, #1
 8005dc4:	e7f0      	b.n	8005da8 <__s2b+0x18>
 8005dc6:	9b08      	ldr	r3, [sp, #32]
 8005dc8:	2d09      	cmp	r5, #9
 8005dca:	6143      	str	r3, [r0, #20]
 8005dcc:	f04f 0301 	mov.w	r3, #1
 8005dd0:	6103      	str	r3, [r0, #16]
 8005dd2:	dd16      	ble.n	8005e02 <__s2b+0x72>
 8005dd4:	f104 0909 	add.w	r9, r4, #9
 8005dd8:	46c8      	mov	r8, r9
 8005dda:	442c      	add	r4, r5
 8005ddc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005de0:	4601      	mov	r1, r0
 8005de2:	220a      	movs	r2, #10
 8005de4:	4630      	mov	r0, r6
 8005de6:	3b30      	subs	r3, #48	; 0x30
 8005de8:	f7ff ff8c 	bl	8005d04 <__multadd>
 8005dec:	45a0      	cmp	r8, r4
 8005dee:	d1f5      	bne.n	8005ddc <__s2b+0x4c>
 8005df0:	f1a5 0408 	sub.w	r4, r5, #8
 8005df4:	444c      	add	r4, r9
 8005df6:	1b2d      	subs	r5, r5, r4
 8005df8:	1963      	adds	r3, r4, r5
 8005dfa:	42bb      	cmp	r3, r7
 8005dfc:	db04      	blt.n	8005e08 <__s2b+0x78>
 8005dfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e02:	2509      	movs	r5, #9
 8005e04:	340a      	adds	r4, #10
 8005e06:	e7f6      	b.n	8005df6 <__s2b+0x66>
 8005e08:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005e0c:	4601      	mov	r1, r0
 8005e0e:	220a      	movs	r2, #10
 8005e10:	4630      	mov	r0, r6
 8005e12:	3b30      	subs	r3, #48	; 0x30
 8005e14:	f7ff ff76 	bl	8005d04 <__multadd>
 8005e18:	e7ee      	b.n	8005df8 <__s2b+0x68>
 8005e1a:	bf00      	nop
 8005e1c:	0800950d 	.word	0x0800950d
 8005e20:	0800951e 	.word	0x0800951e

08005e24 <__hi0bits>:
 8005e24:	0c02      	lsrs	r2, r0, #16
 8005e26:	0412      	lsls	r2, r2, #16
 8005e28:	4603      	mov	r3, r0
 8005e2a:	b9ca      	cbnz	r2, 8005e60 <__hi0bits+0x3c>
 8005e2c:	0403      	lsls	r3, r0, #16
 8005e2e:	2010      	movs	r0, #16
 8005e30:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005e34:	bf04      	itt	eq
 8005e36:	021b      	lsleq	r3, r3, #8
 8005e38:	3008      	addeq	r0, #8
 8005e3a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005e3e:	bf04      	itt	eq
 8005e40:	011b      	lsleq	r3, r3, #4
 8005e42:	3004      	addeq	r0, #4
 8005e44:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005e48:	bf04      	itt	eq
 8005e4a:	009b      	lsleq	r3, r3, #2
 8005e4c:	3002      	addeq	r0, #2
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	db05      	blt.n	8005e5e <__hi0bits+0x3a>
 8005e52:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005e56:	f100 0001 	add.w	r0, r0, #1
 8005e5a:	bf08      	it	eq
 8005e5c:	2020      	moveq	r0, #32
 8005e5e:	4770      	bx	lr
 8005e60:	2000      	movs	r0, #0
 8005e62:	e7e5      	b.n	8005e30 <__hi0bits+0xc>

08005e64 <__lo0bits>:
 8005e64:	6803      	ldr	r3, [r0, #0]
 8005e66:	4602      	mov	r2, r0
 8005e68:	f013 0007 	ands.w	r0, r3, #7
 8005e6c:	d00b      	beq.n	8005e86 <__lo0bits+0x22>
 8005e6e:	07d9      	lsls	r1, r3, #31
 8005e70:	d421      	bmi.n	8005eb6 <__lo0bits+0x52>
 8005e72:	0798      	lsls	r0, r3, #30
 8005e74:	bf49      	itett	mi
 8005e76:	085b      	lsrmi	r3, r3, #1
 8005e78:	089b      	lsrpl	r3, r3, #2
 8005e7a:	2001      	movmi	r0, #1
 8005e7c:	6013      	strmi	r3, [r2, #0]
 8005e7e:	bf5c      	itt	pl
 8005e80:	2002      	movpl	r0, #2
 8005e82:	6013      	strpl	r3, [r2, #0]
 8005e84:	4770      	bx	lr
 8005e86:	b299      	uxth	r1, r3
 8005e88:	b909      	cbnz	r1, 8005e8e <__lo0bits+0x2a>
 8005e8a:	2010      	movs	r0, #16
 8005e8c:	0c1b      	lsrs	r3, r3, #16
 8005e8e:	b2d9      	uxtb	r1, r3
 8005e90:	b909      	cbnz	r1, 8005e96 <__lo0bits+0x32>
 8005e92:	3008      	adds	r0, #8
 8005e94:	0a1b      	lsrs	r3, r3, #8
 8005e96:	0719      	lsls	r1, r3, #28
 8005e98:	bf04      	itt	eq
 8005e9a:	091b      	lsreq	r3, r3, #4
 8005e9c:	3004      	addeq	r0, #4
 8005e9e:	0799      	lsls	r1, r3, #30
 8005ea0:	bf04      	itt	eq
 8005ea2:	089b      	lsreq	r3, r3, #2
 8005ea4:	3002      	addeq	r0, #2
 8005ea6:	07d9      	lsls	r1, r3, #31
 8005ea8:	d403      	bmi.n	8005eb2 <__lo0bits+0x4e>
 8005eaa:	085b      	lsrs	r3, r3, #1
 8005eac:	f100 0001 	add.w	r0, r0, #1
 8005eb0:	d003      	beq.n	8005eba <__lo0bits+0x56>
 8005eb2:	6013      	str	r3, [r2, #0]
 8005eb4:	4770      	bx	lr
 8005eb6:	2000      	movs	r0, #0
 8005eb8:	4770      	bx	lr
 8005eba:	2020      	movs	r0, #32
 8005ebc:	4770      	bx	lr
	...

08005ec0 <__i2b>:
 8005ec0:	b510      	push	{r4, lr}
 8005ec2:	460c      	mov	r4, r1
 8005ec4:	2101      	movs	r1, #1
 8005ec6:	f7ff febb 	bl	8005c40 <_Balloc>
 8005eca:	4602      	mov	r2, r0
 8005ecc:	b928      	cbnz	r0, 8005eda <__i2b+0x1a>
 8005ece:	f240 1145 	movw	r1, #325	; 0x145
 8005ed2:	4b04      	ldr	r3, [pc, #16]	; (8005ee4 <__i2b+0x24>)
 8005ed4:	4804      	ldr	r0, [pc, #16]	; (8005ee8 <__i2b+0x28>)
 8005ed6:	f001 ffa7 	bl	8007e28 <__assert_func>
 8005eda:	2301      	movs	r3, #1
 8005edc:	6144      	str	r4, [r0, #20]
 8005ede:	6103      	str	r3, [r0, #16]
 8005ee0:	bd10      	pop	{r4, pc}
 8005ee2:	bf00      	nop
 8005ee4:	0800950d 	.word	0x0800950d
 8005ee8:	0800951e 	.word	0x0800951e

08005eec <__multiply>:
 8005eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ef0:	4691      	mov	r9, r2
 8005ef2:	690a      	ldr	r2, [r1, #16]
 8005ef4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005ef8:	460c      	mov	r4, r1
 8005efa:	429a      	cmp	r2, r3
 8005efc:	bfbe      	ittt	lt
 8005efe:	460b      	movlt	r3, r1
 8005f00:	464c      	movlt	r4, r9
 8005f02:	4699      	movlt	r9, r3
 8005f04:	6927      	ldr	r7, [r4, #16]
 8005f06:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005f0a:	68a3      	ldr	r3, [r4, #8]
 8005f0c:	6861      	ldr	r1, [r4, #4]
 8005f0e:	eb07 060a 	add.w	r6, r7, sl
 8005f12:	42b3      	cmp	r3, r6
 8005f14:	b085      	sub	sp, #20
 8005f16:	bfb8      	it	lt
 8005f18:	3101      	addlt	r1, #1
 8005f1a:	f7ff fe91 	bl	8005c40 <_Balloc>
 8005f1e:	b930      	cbnz	r0, 8005f2e <__multiply+0x42>
 8005f20:	4602      	mov	r2, r0
 8005f22:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8005f26:	4b43      	ldr	r3, [pc, #268]	; (8006034 <__multiply+0x148>)
 8005f28:	4843      	ldr	r0, [pc, #268]	; (8006038 <__multiply+0x14c>)
 8005f2a:	f001 ff7d 	bl	8007e28 <__assert_func>
 8005f2e:	f100 0514 	add.w	r5, r0, #20
 8005f32:	462b      	mov	r3, r5
 8005f34:	2200      	movs	r2, #0
 8005f36:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005f3a:	4543      	cmp	r3, r8
 8005f3c:	d321      	bcc.n	8005f82 <__multiply+0x96>
 8005f3e:	f104 0314 	add.w	r3, r4, #20
 8005f42:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005f46:	f109 0314 	add.w	r3, r9, #20
 8005f4a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005f4e:	9202      	str	r2, [sp, #8]
 8005f50:	1b3a      	subs	r2, r7, r4
 8005f52:	3a15      	subs	r2, #21
 8005f54:	f022 0203 	bic.w	r2, r2, #3
 8005f58:	3204      	adds	r2, #4
 8005f5a:	f104 0115 	add.w	r1, r4, #21
 8005f5e:	428f      	cmp	r7, r1
 8005f60:	bf38      	it	cc
 8005f62:	2204      	movcc	r2, #4
 8005f64:	9201      	str	r2, [sp, #4]
 8005f66:	9a02      	ldr	r2, [sp, #8]
 8005f68:	9303      	str	r3, [sp, #12]
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d80c      	bhi.n	8005f88 <__multiply+0x9c>
 8005f6e:	2e00      	cmp	r6, #0
 8005f70:	dd03      	ble.n	8005f7a <__multiply+0x8e>
 8005f72:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d05a      	beq.n	8006030 <__multiply+0x144>
 8005f7a:	6106      	str	r6, [r0, #16]
 8005f7c:	b005      	add	sp, #20
 8005f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f82:	f843 2b04 	str.w	r2, [r3], #4
 8005f86:	e7d8      	b.n	8005f3a <__multiply+0x4e>
 8005f88:	f8b3 a000 	ldrh.w	sl, [r3]
 8005f8c:	f1ba 0f00 	cmp.w	sl, #0
 8005f90:	d023      	beq.n	8005fda <__multiply+0xee>
 8005f92:	46a9      	mov	r9, r5
 8005f94:	f04f 0c00 	mov.w	ip, #0
 8005f98:	f104 0e14 	add.w	lr, r4, #20
 8005f9c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005fa0:	f8d9 1000 	ldr.w	r1, [r9]
 8005fa4:	fa1f fb82 	uxth.w	fp, r2
 8005fa8:	b289      	uxth	r1, r1
 8005faa:	fb0a 110b 	mla	r1, sl, fp, r1
 8005fae:	4461      	add	r1, ip
 8005fb0:	f8d9 c000 	ldr.w	ip, [r9]
 8005fb4:	0c12      	lsrs	r2, r2, #16
 8005fb6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005fba:	fb0a c202 	mla	r2, sl, r2, ip
 8005fbe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005fc2:	b289      	uxth	r1, r1
 8005fc4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005fc8:	4577      	cmp	r7, lr
 8005fca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005fce:	f849 1b04 	str.w	r1, [r9], #4
 8005fd2:	d8e3      	bhi.n	8005f9c <__multiply+0xb0>
 8005fd4:	9a01      	ldr	r2, [sp, #4]
 8005fd6:	f845 c002 	str.w	ip, [r5, r2]
 8005fda:	9a03      	ldr	r2, [sp, #12]
 8005fdc:	3304      	adds	r3, #4
 8005fde:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005fe2:	f1b9 0f00 	cmp.w	r9, #0
 8005fe6:	d021      	beq.n	800602c <__multiply+0x140>
 8005fe8:	46ae      	mov	lr, r5
 8005fea:	f04f 0a00 	mov.w	sl, #0
 8005fee:	6829      	ldr	r1, [r5, #0]
 8005ff0:	f104 0c14 	add.w	ip, r4, #20
 8005ff4:	f8bc b000 	ldrh.w	fp, [ip]
 8005ff8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005ffc:	b289      	uxth	r1, r1
 8005ffe:	fb09 220b 	mla	r2, r9, fp, r2
 8006002:	4452      	add	r2, sl
 8006004:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006008:	f84e 1b04 	str.w	r1, [lr], #4
 800600c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006010:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006014:	f8be 1000 	ldrh.w	r1, [lr]
 8006018:	4567      	cmp	r7, ip
 800601a:	fb09 110a 	mla	r1, r9, sl, r1
 800601e:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006022:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006026:	d8e5      	bhi.n	8005ff4 <__multiply+0x108>
 8006028:	9a01      	ldr	r2, [sp, #4]
 800602a:	50a9      	str	r1, [r5, r2]
 800602c:	3504      	adds	r5, #4
 800602e:	e79a      	b.n	8005f66 <__multiply+0x7a>
 8006030:	3e01      	subs	r6, #1
 8006032:	e79c      	b.n	8005f6e <__multiply+0x82>
 8006034:	0800950d 	.word	0x0800950d
 8006038:	0800951e 	.word	0x0800951e

0800603c <__pow5mult>:
 800603c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006040:	4615      	mov	r5, r2
 8006042:	f012 0203 	ands.w	r2, r2, #3
 8006046:	4606      	mov	r6, r0
 8006048:	460f      	mov	r7, r1
 800604a:	d007      	beq.n	800605c <__pow5mult+0x20>
 800604c:	4c25      	ldr	r4, [pc, #148]	; (80060e4 <__pow5mult+0xa8>)
 800604e:	3a01      	subs	r2, #1
 8006050:	2300      	movs	r3, #0
 8006052:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006056:	f7ff fe55 	bl	8005d04 <__multadd>
 800605a:	4607      	mov	r7, r0
 800605c:	10ad      	asrs	r5, r5, #2
 800605e:	d03d      	beq.n	80060dc <__pow5mult+0xa0>
 8006060:	69f4      	ldr	r4, [r6, #28]
 8006062:	b97c      	cbnz	r4, 8006084 <__pow5mult+0x48>
 8006064:	2010      	movs	r0, #16
 8006066:	f7ff fd37 	bl	8005ad8 <malloc>
 800606a:	4602      	mov	r2, r0
 800606c:	61f0      	str	r0, [r6, #28]
 800606e:	b928      	cbnz	r0, 800607c <__pow5mult+0x40>
 8006070:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006074:	4b1c      	ldr	r3, [pc, #112]	; (80060e8 <__pow5mult+0xac>)
 8006076:	481d      	ldr	r0, [pc, #116]	; (80060ec <__pow5mult+0xb0>)
 8006078:	f001 fed6 	bl	8007e28 <__assert_func>
 800607c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006080:	6004      	str	r4, [r0, #0]
 8006082:	60c4      	str	r4, [r0, #12]
 8006084:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006088:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800608c:	b94c      	cbnz	r4, 80060a2 <__pow5mult+0x66>
 800608e:	f240 2171 	movw	r1, #625	; 0x271
 8006092:	4630      	mov	r0, r6
 8006094:	f7ff ff14 	bl	8005ec0 <__i2b>
 8006098:	2300      	movs	r3, #0
 800609a:	4604      	mov	r4, r0
 800609c:	f8c8 0008 	str.w	r0, [r8, #8]
 80060a0:	6003      	str	r3, [r0, #0]
 80060a2:	f04f 0900 	mov.w	r9, #0
 80060a6:	07eb      	lsls	r3, r5, #31
 80060a8:	d50a      	bpl.n	80060c0 <__pow5mult+0x84>
 80060aa:	4639      	mov	r1, r7
 80060ac:	4622      	mov	r2, r4
 80060ae:	4630      	mov	r0, r6
 80060b0:	f7ff ff1c 	bl	8005eec <__multiply>
 80060b4:	4680      	mov	r8, r0
 80060b6:	4639      	mov	r1, r7
 80060b8:	4630      	mov	r0, r6
 80060ba:	f7ff fe01 	bl	8005cc0 <_Bfree>
 80060be:	4647      	mov	r7, r8
 80060c0:	106d      	asrs	r5, r5, #1
 80060c2:	d00b      	beq.n	80060dc <__pow5mult+0xa0>
 80060c4:	6820      	ldr	r0, [r4, #0]
 80060c6:	b938      	cbnz	r0, 80060d8 <__pow5mult+0x9c>
 80060c8:	4622      	mov	r2, r4
 80060ca:	4621      	mov	r1, r4
 80060cc:	4630      	mov	r0, r6
 80060ce:	f7ff ff0d 	bl	8005eec <__multiply>
 80060d2:	6020      	str	r0, [r4, #0]
 80060d4:	f8c0 9000 	str.w	r9, [r0]
 80060d8:	4604      	mov	r4, r0
 80060da:	e7e4      	b.n	80060a6 <__pow5mult+0x6a>
 80060dc:	4638      	mov	r0, r7
 80060de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060e2:	bf00      	nop
 80060e4:	08009668 	.word	0x08009668
 80060e8:	0800949e 	.word	0x0800949e
 80060ec:	0800951e 	.word	0x0800951e

080060f0 <__lshift>:
 80060f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060f4:	460c      	mov	r4, r1
 80060f6:	4607      	mov	r7, r0
 80060f8:	4691      	mov	r9, r2
 80060fa:	6923      	ldr	r3, [r4, #16]
 80060fc:	6849      	ldr	r1, [r1, #4]
 80060fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006102:	68a3      	ldr	r3, [r4, #8]
 8006104:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006108:	f108 0601 	add.w	r6, r8, #1
 800610c:	42b3      	cmp	r3, r6
 800610e:	db0b      	blt.n	8006128 <__lshift+0x38>
 8006110:	4638      	mov	r0, r7
 8006112:	f7ff fd95 	bl	8005c40 <_Balloc>
 8006116:	4605      	mov	r5, r0
 8006118:	b948      	cbnz	r0, 800612e <__lshift+0x3e>
 800611a:	4602      	mov	r2, r0
 800611c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006120:	4b27      	ldr	r3, [pc, #156]	; (80061c0 <__lshift+0xd0>)
 8006122:	4828      	ldr	r0, [pc, #160]	; (80061c4 <__lshift+0xd4>)
 8006124:	f001 fe80 	bl	8007e28 <__assert_func>
 8006128:	3101      	adds	r1, #1
 800612a:	005b      	lsls	r3, r3, #1
 800612c:	e7ee      	b.n	800610c <__lshift+0x1c>
 800612e:	2300      	movs	r3, #0
 8006130:	f100 0114 	add.w	r1, r0, #20
 8006134:	f100 0210 	add.w	r2, r0, #16
 8006138:	4618      	mov	r0, r3
 800613a:	4553      	cmp	r3, sl
 800613c:	db33      	blt.n	80061a6 <__lshift+0xb6>
 800613e:	6920      	ldr	r0, [r4, #16]
 8006140:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006144:	f104 0314 	add.w	r3, r4, #20
 8006148:	f019 091f 	ands.w	r9, r9, #31
 800614c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006150:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006154:	d02b      	beq.n	80061ae <__lshift+0xbe>
 8006156:	468a      	mov	sl, r1
 8006158:	2200      	movs	r2, #0
 800615a:	f1c9 0e20 	rsb	lr, r9, #32
 800615e:	6818      	ldr	r0, [r3, #0]
 8006160:	fa00 f009 	lsl.w	r0, r0, r9
 8006164:	4310      	orrs	r0, r2
 8006166:	f84a 0b04 	str.w	r0, [sl], #4
 800616a:	f853 2b04 	ldr.w	r2, [r3], #4
 800616e:	459c      	cmp	ip, r3
 8006170:	fa22 f20e 	lsr.w	r2, r2, lr
 8006174:	d8f3      	bhi.n	800615e <__lshift+0x6e>
 8006176:	ebac 0304 	sub.w	r3, ip, r4
 800617a:	3b15      	subs	r3, #21
 800617c:	f023 0303 	bic.w	r3, r3, #3
 8006180:	3304      	adds	r3, #4
 8006182:	f104 0015 	add.w	r0, r4, #21
 8006186:	4584      	cmp	ip, r0
 8006188:	bf38      	it	cc
 800618a:	2304      	movcc	r3, #4
 800618c:	50ca      	str	r2, [r1, r3]
 800618e:	b10a      	cbz	r2, 8006194 <__lshift+0xa4>
 8006190:	f108 0602 	add.w	r6, r8, #2
 8006194:	3e01      	subs	r6, #1
 8006196:	4638      	mov	r0, r7
 8006198:	4621      	mov	r1, r4
 800619a:	612e      	str	r6, [r5, #16]
 800619c:	f7ff fd90 	bl	8005cc0 <_Bfree>
 80061a0:	4628      	mov	r0, r5
 80061a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061a6:	f842 0f04 	str.w	r0, [r2, #4]!
 80061aa:	3301      	adds	r3, #1
 80061ac:	e7c5      	b.n	800613a <__lshift+0x4a>
 80061ae:	3904      	subs	r1, #4
 80061b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80061b4:	459c      	cmp	ip, r3
 80061b6:	f841 2f04 	str.w	r2, [r1, #4]!
 80061ba:	d8f9      	bhi.n	80061b0 <__lshift+0xc0>
 80061bc:	e7ea      	b.n	8006194 <__lshift+0xa4>
 80061be:	bf00      	nop
 80061c0:	0800950d 	.word	0x0800950d
 80061c4:	0800951e 	.word	0x0800951e

080061c8 <__mcmp>:
 80061c8:	4603      	mov	r3, r0
 80061ca:	690a      	ldr	r2, [r1, #16]
 80061cc:	6900      	ldr	r0, [r0, #16]
 80061ce:	b530      	push	{r4, r5, lr}
 80061d0:	1a80      	subs	r0, r0, r2
 80061d2:	d10d      	bne.n	80061f0 <__mcmp+0x28>
 80061d4:	3314      	adds	r3, #20
 80061d6:	3114      	adds	r1, #20
 80061d8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80061dc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80061e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80061e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80061e8:	4295      	cmp	r5, r2
 80061ea:	d002      	beq.n	80061f2 <__mcmp+0x2a>
 80061ec:	d304      	bcc.n	80061f8 <__mcmp+0x30>
 80061ee:	2001      	movs	r0, #1
 80061f0:	bd30      	pop	{r4, r5, pc}
 80061f2:	42a3      	cmp	r3, r4
 80061f4:	d3f4      	bcc.n	80061e0 <__mcmp+0x18>
 80061f6:	e7fb      	b.n	80061f0 <__mcmp+0x28>
 80061f8:	f04f 30ff 	mov.w	r0, #4294967295
 80061fc:	e7f8      	b.n	80061f0 <__mcmp+0x28>
	...

08006200 <__mdiff>:
 8006200:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006204:	460d      	mov	r5, r1
 8006206:	4607      	mov	r7, r0
 8006208:	4611      	mov	r1, r2
 800620a:	4628      	mov	r0, r5
 800620c:	4614      	mov	r4, r2
 800620e:	f7ff ffdb 	bl	80061c8 <__mcmp>
 8006212:	1e06      	subs	r6, r0, #0
 8006214:	d111      	bne.n	800623a <__mdiff+0x3a>
 8006216:	4631      	mov	r1, r6
 8006218:	4638      	mov	r0, r7
 800621a:	f7ff fd11 	bl	8005c40 <_Balloc>
 800621e:	4602      	mov	r2, r0
 8006220:	b928      	cbnz	r0, 800622e <__mdiff+0x2e>
 8006222:	f240 2137 	movw	r1, #567	; 0x237
 8006226:	4b3a      	ldr	r3, [pc, #232]	; (8006310 <__mdiff+0x110>)
 8006228:	483a      	ldr	r0, [pc, #232]	; (8006314 <__mdiff+0x114>)
 800622a:	f001 fdfd 	bl	8007e28 <__assert_func>
 800622e:	2301      	movs	r3, #1
 8006230:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006234:	4610      	mov	r0, r2
 8006236:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800623a:	bfa4      	itt	ge
 800623c:	4623      	movge	r3, r4
 800623e:	462c      	movge	r4, r5
 8006240:	4638      	mov	r0, r7
 8006242:	6861      	ldr	r1, [r4, #4]
 8006244:	bfa6      	itte	ge
 8006246:	461d      	movge	r5, r3
 8006248:	2600      	movge	r6, #0
 800624a:	2601      	movlt	r6, #1
 800624c:	f7ff fcf8 	bl	8005c40 <_Balloc>
 8006250:	4602      	mov	r2, r0
 8006252:	b918      	cbnz	r0, 800625c <__mdiff+0x5c>
 8006254:	f240 2145 	movw	r1, #581	; 0x245
 8006258:	4b2d      	ldr	r3, [pc, #180]	; (8006310 <__mdiff+0x110>)
 800625a:	e7e5      	b.n	8006228 <__mdiff+0x28>
 800625c:	f102 0814 	add.w	r8, r2, #20
 8006260:	46c2      	mov	sl, r8
 8006262:	f04f 0c00 	mov.w	ip, #0
 8006266:	6927      	ldr	r7, [r4, #16]
 8006268:	60c6      	str	r6, [r0, #12]
 800626a:	692e      	ldr	r6, [r5, #16]
 800626c:	f104 0014 	add.w	r0, r4, #20
 8006270:	f105 0914 	add.w	r9, r5, #20
 8006274:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006278:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800627c:	3410      	adds	r4, #16
 800627e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006282:	f859 3b04 	ldr.w	r3, [r9], #4
 8006286:	fa1f f18b 	uxth.w	r1, fp
 800628a:	4461      	add	r1, ip
 800628c:	fa1f fc83 	uxth.w	ip, r3
 8006290:	0c1b      	lsrs	r3, r3, #16
 8006292:	eba1 010c 	sub.w	r1, r1, ip
 8006296:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800629a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800629e:	b289      	uxth	r1, r1
 80062a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80062a4:	454e      	cmp	r6, r9
 80062a6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80062aa:	f84a 1b04 	str.w	r1, [sl], #4
 80062ae:	d8e6      	bhi.n	800627e <__mdiff+0x7e>
 80062b0:	1b73      	subs	r3, r6, r5
 80062b2:	3b15      	subs	r3, #21
 80062b4:	f023 0303 	bic.w	r3, r3, #3
 80062b8:	3515      	adds	r5, #21
 80062ba:	3304      	adds	r3, #4
 80062bc:	42ae      	cmp	r6, r5
 80062be:	bf38      	it	cc
 80062c0:	2304      	movcc	r3, #4
 80062c2:	4418      	add	r0, r3
 80062c4:	4443      	add	r3, r8
 80062c6:	461e      	mov	r6, r3
 80062c8:	4605      	mov	r5, r0
 80062ca:	4575      	cmp	r5, lr
 80062cc:	d30e      	bcc.n	80062ec <__mdiff+0xec>
 80062ce:	f10e 0103 	add.w	r1, lr, #3
 80062d2:	1a09      	subs	r1, r1, r0
 80062d4:	f021 0103 	bic.w	r1, r1, #3
 80062d8:	3803      	subs	r0, #3
 80062da:	4586      	cmp	lr, r0
 80062dc:	bf38      	it	cc
 80062de:	2100      	movcc	r1, #0
 80062e0:	440b      	add	r3, r1
 80062e2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80062e6:	b189      	cbz	r1, 800630c <__mdiff+0x10c>
 80062e8:	6117      	str	r7, [r2, #16]
 80062ea:	e7a3      	b.n	8006234 <__mdiff+0x34>
 80062ec:	f855 8b04 	ldr.w	r8, [r5], #4
 80062f0:	fa1f f188 	uxth.w	r1, r8
 80062f4:	4461      	add	r1, ip
 80062f6:	140c      	asrs	r4, r1, #16
 80062f8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80062fc:	b289      	uxth	r1, r1
 80062fe:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006302:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006306:	f846 1b04 	str.w	r1, [r6], #4
 800630a:	e7de      	b.n	80062ca <__mdiff+0xca>
 800630c:	3f01      	subs	r7, #1
 800630e:	e7e8      	b.n	80062e2 <__mdiff+0xe2>
 8006310:	0800950d 	.word	0x0800950d
 8006314:	0800951e 	.word	0x0800951e

08006318 <__ulp>:
 8006318:	4b0e      	ldr	r3, [pc, #56]	; (8006354 <__ulp+0x3c>)
 800631a:	400b      	ands	r3, r1
 800631c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006320:	2b00      	cmp	r3, #0
 8006322:	dc08      	bgt.n	8006336 <__ulp+0x1e>
 8006324:	425b      	negs	r3, r3
 8006326:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800632a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800632e:	da04      	bge.n	800633a <__ulp+0x22>
 8006330:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006334:	4113      	asrs	r3, r2
 8006336:	2200      	movs	r2, #0
 8006338:	e008      	b.n	800634c <__ulp+0x34>
 800633a:	f1a2 0314 	sub.w	r3, r2, #20
 800633e:	2b1e      	cmp	r3, #30
 8006340:	bfd6      	itet	le
 8006342:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8006346:	2201      	movgt	r2, #1
 8006348:	40da      	lsrle	r2, r3
 800634a:	2300      	movs	r3, #0
 800634c:	4619      	mov	r1, r3
 800634e:	4610      	mov	r0, r2
 8006350:	4770      	bx	lr
 8006352:	bf00      	nop
 8006354:	7ff00000 	.word	0x7ff00000

08006358 <__b2d>:
 8006358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800635a:	6905      	ldr	r5, [r0, #16]
 800635c:	f100 0714 	add.w	r7, r0, #20
 8006360:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8006364:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8006368:	1f2e      	subs	r6, r5, #4
 800636a:	4620      	mov	r0, r4
 800636c:	f7ff fd5a 	bl	8005e24 <__hi0bits>
 8006370:	f1c0 0220 	rsb	r2, r0, #32
 8006374:	280a      	cmp	r0, #10
 8006376:	4603      	mov	r3, r0
 8006378:	f8df c068 	ldr.w	ip, [pc, #104]	; 80063e4 <__b2d+0x8c>
 800637c:	600a      	str	r2, [r1, #0]
 800637e:	dc12      	bgt.n	80063a6 <__b2d+0x4e>
 8006380:	f1c0 0e0b 	rsb	lr, r0, #11
 8006384:	fa24 f20e 	lsr.w	r2, r4, lr
 8006388:	42b7      	cmp	r7, r6
 800638a:	ea42 010c 	orr.w	r1, r2, ip
 800638e:	bf2c      	ite	cs
 8006390:	2200      	movcs	r2, #0
 8006392:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8006396:	3315      	adds	r3, #21
 8006398:	fa04 f303 	lsl.w	r3, r4, r3
 800639c:	fa22 f20e 	lsr.w	r2, r2, lr
 80063a0:	431a      	orrs	r2, r3
 80063a2:	4610      	mov	r0, r2
 80063a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063a6:	42b7      	cmp	r7, r6
 80063a8:	bf2e      	itee	cs
 80063aa:	2200      	movcs	r2, #0
 80063ac:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 80063b0:	f1a5 0608 	subcc.w	r6, r5, #8
 80063b4:	3b0b      	subs	r3, #11
 80063b6:	d012      	beq.n	80063de <__b2d+0x86>
 80063b8:	f1c3 0520 	rsb	r5, r3, #32
 80063bc:	fa22 f105 	lsr.w	r1, r2, r5
 80063c0:	409c      	lsls	r4, r3
 80063c2:	430c      	orrs	r4, r1
 80063c4:	42be      	cmp	r6, r7
 80063c6:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 80063ca:	bf94      	ite	ls
 80063cc:	2400      	movls	r4, #0
 80063ce:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80063d2:	409a      	lsls	r2, r3
 80063d4:	40ec      	lsrs	r4, r5
 80063d6:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80063da:	4322      	orrs	r2, r4
 80063dc:	e7e1      	b.n	80063a2 <__b2d+0x4a>
 80063de:	ea44 010c 	orr.w	r1, r4, ip
 80063e2:	e7de      	b.n	80063a2 <__b2d+0x4a>
 80063e4:	3ff00000 	.word	0x3ff00000

080063e8 <__d2b>:
 80063e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80063ea:	2101      	movs	r1, #1
 80063ec:	4617      	mov	r7, r2
 80063ee:	461c      	mov	r4, r3
 80063f0:	9e08      	ldr	r6, [sp, #32]
 80063f2:	f7ff fc25 	bl	8005c40 <_Balloc>
 80063f6:	4605      	mov	r5, r0
 80063f8:	b930      	cbnz	r0, 8006408 <__d2b+0x20>
 80063fa:	4602      	mov	r2, r0
 80063fc:	f240 310f 	movw	r1, #783	; 0x30f
 8006400:	4b22      	ldr	r3, [pc, #136]	; (800648c <__d2b+0xa4>)
 8006402:	4823      	ldr	r0, [pc, #140]	; (8006490 <__d2b+0xa8>)
 8006404:	f001 fd10 	bl	8007e28 <__assert_func>
 8006408:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800640c:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006410:	bb24      	cbnz	r4, 800645c <__d2b+0x74>
 8006412:	2f00      	cmp	r7, #0
 8006414:	9301      	str	r3, [sp, #4]
 8006416:	d026      	beq.n	8006466 <__d2b+0x7e>
 8006418:	4668      	mov	r0, sp
 800641a:	9700      	str	r7, [sp, #0]
 800641c:	f7ff fd22 	bl	8005e64 <__lo0bits>
 8006420:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006424:	b1e8      	cbz	r0, 8006462 <__d2b+0x7a>
 8006426:	f1c0 0320 	rsb	r3, r0, #32
 800642a:	fa02 f303 	lsl.w	r3, r2, r3
 800642e:	430b      	orrs	r3, r1
 8006430:	40c2      	lsrs	r2, r0
 8006432:	616b      	str	r3, [r5, #20]
 8006434:	9201      	str	r2, [sp, #4]
 8006436:	9b01      	ldr	r3, [sp, #4]
 8006438:	2b00      	cmp	r3, #0
 800643a:	bf14      	ite	ne
 800643c:	2102      	movne	r1, #2
 800643e:	2101      	moveq	r1, #1
 8006440:	61ab      	str	r3, [r5, #24]
 8006442:	6129      	str	r1, [r5, #16]
 8006444:	b1bc      	cbz	r4, 8006476 <__d2b+0x8e>
 8006446:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800644a:	4404      	add	r4, r0
 800644c:	6034      	str	r4, [r6, #0]
 800644e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006452:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006454:	6018      	str	r0, [r3, #0]
 8006456:	4628      	mov	r0, r5
 8006458:	b003      	add	sp, #12
 800645a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800645c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006460:	e7d7      	b.n	8006412 <__d2b+0x2a>
 8006462:	6169      	str	r1, [r5, #20]
 8006464:	e7e7      	b.n	8006436 <__d2b+0x4e>
 8006466:	a801      	add	r0, sp, #4
 8006468:	f7ff fcfc 	bl	8005e64 <__lo0bits>
 800646c:	9b01      	ldr	r3, [sp, #4]
 800646e:	2101      	movs	r1, #1
 8006470:	616b      	str	r3, [r5, #20]
 8006472:	3020      	adds	r0, #32
 8006474:	e7e5      	b.n	8006442 <__d2b+0x5a>
 8006476:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800647a:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800647e:	6030      	str	r0, [r6, #0]
 8006480:	6918      	ldr	r0, [r3, #16]
 8006482:	f7ff fccf 	bl	8005e24 <__hi0bits>
 8006486:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800648a:	e7e2      	b.n	8006452 <__d2b+0x6a>
 800648c:	0800950d 	.word	0x0800950d
 8006490:	0800951e 	.word	0x0800951e

08006494 <__ratio>:
 8006494:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006498:	4688      	mov	r8, r1
 800649a:	4669      	mov	r1, sp
 800649c:	4681      	mov	r9, r0
 800649e:	f7ff ff5b 	bl	8006358 <__b2d>
 80064a2:	460f      	mov	r7, r1
 80064a4:	4604      	mov	r4, r0
 80064a6:	460d      	mov	r5, r1
 80064a8:	4640      	mov	r0, r8
 80064aa:	a901      	add	r1, sp, #4
 80064ac:	f7ff ff54 	bl	8006358 <__b2d>
 80064b0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80064b4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80064b8:	468b      	mov	fp, r1
 80064ba:	eba3 0c02 	sub.w	ip, r3, r2
 80064be:	e9dd 3200 	ldrd	r3, r2, [sp]
 80064c2:	1a9b      	subs	r3, r3, r2
 80064c4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	bfd5      	itete	le
 80064cc:	460a      	movle	r2, r1
 80064ce:	462a      	movgt	r2, r5
 80064d0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80064d4:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80064d8:	bfd8      	it	le
 80064da:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80064de:	465b      	mov	r3, fp
 80064e0:	4602      	mov	r2, r0
 80064e2:	4639      	mov	r1, r7
 80064e4:	4620      	mov	r0, r4
 80064e6:	f7fa f92b 	bl	8000740 <__aeabi_ddiv>
 80064ea:	b003      	add	sp, #12
 80064ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080064f0 <__copybits>:
 80064f0:	3901      	subs	r1, #1
 80064f2:	b570      	push	{r4, r5, r6, lr}
 80064f4:	1149      	asrs	r1, r1, #5
 80064f6:	6914      	ldr	r4, [r2, #16]
 80064f8:	3101      	adds	r1, #1
 80064fa:	f102 0314 	add.w	r3, r2, #20
 80064fe:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006502:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006506:	1f05      	subs	r5, r0, #4
 8006508:	42a3      	cmp	r3, r4
 800650a:	d30c      	bcc.n	8006526 <__copybits+0x36>
 800650c:	1aa3      	subs	r3, r4, r2
 800650e:	3b11      	subs	r3, #17
 8006510:	f023 0303 	bic.w	r3, r3, #3
 8006514:	3211      	adds	r2, #17
 8006516:	42a2      	cmp	r2, r4
 8006518:	bf88      	it	hi
 800651a:	2300      	movhi	r3, #0
 800651c:	4418      	add	r0, r3
 800651e:	2300      	movs	r3, #0
 8006520:	4288      	cmp	r0, r1
 8006522:	d305      	bcc.n	8006530 <__copybits+0x40>
 8006524:	bd70      	pop	{r4, r5, r6, pc}
 8006526:	f853 6b04 	ldr.w	r6, [r3], #4
 800652a:	f845 6f04 	str.w	r6, [r5, #4]!
 800652e:	e7eb      	b.n	8006508 <__copybits+0x18>
 8006530:	f840 3b04 	str.w	r3, [r0], #4
 8006534:	e7f4      	b.n	8006520 <__copybits+0x30>

08006536 <__any_on>:
 8006536:	f100 0214 	add.w	r2, r0, #20
 800653a:	6900      	ldr	r0, [r0, #16]
 800653c:	114b      	asrs	r3, r1, #5
 800653e:	4298      	cmp	r0, r3
 8006540:	b510      	push	{r4, lr}
 8006542:	db11      	blt.n	8006568 <__any_on+0x32>
 8006544:	dd0a      	ble.n	800655c <__any_on+0x26>
 8006546:	f011 011f 	ands.w	r1, r1, #31
 800654a:	d007      	beq.n	800655c <__any_on+0x26>
 800654c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006550:	fa24 f001 	lsr.w	r0, r4, r1
 8006554:	fa00 f101 	lsl.w	r1, r0, r1
 8006558:	428c      	cmp	r4, r1
 800655a:	d10b      	bne.n	8006574 <__any_on+0x3e>
 800655c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006560:	4293      	cmp	r3, r2
 8006562:	d803      	bhi.n	800656c <__any_on+0x36>
 8006564:	2000      	movs	r0, #0
 8006566:	bd10      	pop	{r4, pc}
 8006568:	4603      	mov	r3, r0
 800656a:	e7f7      	b.n	800655c <__any_on+0x26>
 800656c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006570:	2900      	cmp	r1, #0
 8006572:	d0f5      	beq.n	8006560 <__any_on+0x2a>
 8006574:	2001      	movs	r0, #1
 8006576:	e7f6      	b.n	8006566 <__any_on+0x30>

08006578 <sulp>:
 8006578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800657c:	460f      	mov	r7, r1
 800657e:	4690      	mov	r8, r2
 8006580:	f7ff feca 	bl	8006318 <__ulp>
 8006584:	4604      	mov	r4, r0
 8006586:	460d      	mov	r5, r1
 8006588:	f1b8 0f00 	cmp.w	r8, #0
 800658c:	d011      	beq.n	80065b2 <sulp+0x3a>
 800658e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006592:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006596:	2b00      	cmp	r3, #0
 8006598:	dd0b      	ble.n	80065b2 <sulp+0x3a>
 800659a:	2400      	movs	r4, #0
 800659c:	051b      	lsls	r3, r3, #20
 800659e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80065a2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80065a6:	4622      	mov	r2, r4
 80065a8:	462b      	mov	r3, r5
 80065aa:	f7f9 ff9f 	bl	80004ec <__aeabi_dmul>
 80065ae:	4604      	mov	r4, r0
 80065b0:	460d      	mov	r5, r1
 80065b2:	4620      	mov	r0, r4
 80065b4:	4629      	mov	r1, r5
 80065b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065ba:	0000      	movs	r0, r0
 80065bc:	0000      	movs	r0, r0
	...

080065c0 <_strtod_l>:
 80065c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065c4:	b09f      	sub	sp, #124	; 0x7c
 80065c6:	9217      	str	r2, [sp, #92]	; 0x5c
 80065c8:	2200      	movs	r2, #0
 80065ca:	4604      	mov	r4, r0
 80065cc:	921a      	str	r2, [sp, #104]	; 0x68
 80065ce:	460d      	mov	r5, r1
 80065d0:	f04f 0800 	mov.w	r8, #0
 80065d4:	f04f 0900 	mov.w	r9, #0
 80065d8:	460a      	mov	r2, r1
 80065da:	9219      	str	r2, [sp, #100]	; 0x64
 80065dc:	7811      	ldrb	r1, [r2, #0]
 80065de:	292b      	cmp	r1, #43	; 0x2b
 80065e0:	d04a      	beq.n	8006678 <_strtod_l+0xb8>
 80065e2:	d838      	bhi.n	8006656 <_strtod_l+0x96>
 80065e4:	290d      	cmp	r1, #13
 80065e6:	d832      	bhi.n	800664e <_strtod_l+0x8e>
 80065e8:	2908      	cmp	r1, #8
 80065ea:	d832      	bhi.n	8006652 <_strtod_l+0x92>
 80065ec:	2900      	cmp	r1, #0
 80065ee:	d03b      	beq.n	8006668 <_strtod_l+0xa8>
 80065f0:	2200      	movs	r2, #0
 80065f2:	920e      	str	r2, [sp, #56]	; 0x38
 80065f4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80065f6:	7832      	ldrb	r2, [r6, #0]
 80065f8:	2a30      	cmp	r2, #48	; 0x30
 80065fa:	f040 80b2 	bne.w	8006762 <_strtod_l+0x1a2>
 80065fe:	7872      	ldrb	r2, [r6, #1]
 8006600:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8006604:	2a58      	cmp	r2, #88	; 0x58
 8006606:	d16e      	bne.n	80066e6 <_strtod_l+0x126>
 8006608:	9302      	str	r3, [sp, #8]
 800660a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800660c:	4620      	mov	r0, r4
 800660e:	9301      	str	r3, [sp, #4]
 8006610:	ab1a      	add	r3, sp, #104	; 0x68
 8006612:	9300      	str	r3, [sp, #0]
 8006614:	4a8c      	ldr	r2, [pc, #560]	; (8006848 <_strtod_l+0x288>)
 8006616:	ab1b      	add	r3, sp, #108	; 0x6c
 8006618:	a919      	add	r1, sp, #100	; 0x64
 800661a:	f001 fc9f 	bl	8007f5c <__gethex>
 800661e:	f010 070f 	ands.w	r7, r0, #15
 8006622:	4605      	mov	r5, r0
 8006624:	d005      	beq.n	8006632 <_strtod_l+0x72>
 8006626:	2f06      	cmp	r7, #6
 8006628:	d128      	bne.n	800667c <_strtod_l+0xbc>
 800662a:	2300      	movs	r3, #0
 800662c:	3601      	adds	r6, #1
 800662e:	9619      	str	r6, [sp, #100]	; 0x64
 8006630:	930e      	str	r3, [sp, #56]	; 0x38
 8006632:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006634:	2b00      	cmp	r3, #0
 8006636:	f040 85a0 	bne.w	800717a <_strtod_l+0xbba>
 800663a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800663c:	b1cb      	cbz	r3, 8006672 <_strtod_l+0xb2>
 800663e:	4642      	mov	r2, r8
 8006640:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006644:	4610      	mov	r0, r2
 8006646:	4619      	mov	r1, r3
 8006648:	b01f      	add	sp, #124	; 0x7c
 800664a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800664e:	2920      	cmp	r1, #32
 8006650:	d1ce      	bne.n	80065f0 <_strtod_l+0x30>
 8006652:	3201      	adds	r2, #1
 8006654:	e7c1      	b.n	80065da <_strtod_l+0x1a>
 8006656:	292d      	cmp	r1, #45	; 0x2d
 8006658:	d1ca      	bne.n	80065f0 <_strtod_l+0x30>
 800665a:	2101      	movs	r1, #1
 800665c:	910e      	str	r1, [sp, #56]	; 0x38
 800665e:	1c51      	adds	r1, r2, #1
 8006660:	9119      	str	r1, [sp, #100]	; 0x64
 8006662:	7852      	ldrb	r2, [r2, #1]
 8006664:	2a00      	cmp	r2, #0
 8006666:	d1c5      	bne.n	80065f4 <_strtod_l+0x34>
 8006668:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800666a:	9519      	str	r5, [sp, #100]	; 0x64
 800666c:	2b00      	cmp	r3, #0
 800666e:	f040 8582 	bne.w	8007176 <_strtod_l+0xbb6>
 8006672:	4642      	mov	r2, r8
 8006674:	464b      	mov	r3, r9
 8006676:	e7e5      	b.n	8006644 <_strtod_l+0x84>
 8006678:	2100      	movs	r1, #0
 800667a:	e7ef      	b.n	800665c <_strtod_l+0x9c>
 800667c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800667e:	b13a      	cbz	r2, 8006690 <_strtod_l+0xd0>
 8006680:	2135      	movs	r1, #53	; 0x35
 8006682:	a81c      	add	r0, sp, #112	; 0x70
 8006684:	f7ff ff34 	bl	80064f0 <__copybits>
 8006688:	4620      	mov	r0, r4
 800668a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800668c:	f7ff fb18 	bl	8005cc0 <_Bfree>
 8006690:	3f01      	subs	r7, #1
 8006692:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006694:	2f04      	cmp	r7, #4
 8006696:	d806      	bhi.n	80066a6 <_strtod_l+0xe6>
 8006698:	e8df f007 	tbb	[pc, r7]
 800669c:	201d0314 	.word	0x201d0314
 80066a0:	14          	.byte	0x14
 80066a1:	00          	.byte	0x00
 80066a2:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80066a6:	05e9      	lsls	r1, r5, #23
 80066a8:	bf48      	it	mi
 80066aa:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80066ae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80066b2:	0d1b      	lsrs	r3, r3, #20
 80066b4:	051b      	lsls	r3, r3, #20
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d1bb      	bne.n	8006632 <_strtod_l+0x72>
 80066ba:	f7fe fb07 	bl	8004ccc <__errno>
 80066be:	2322      	movs	r3, #34	; 0x22
 80066c0:	6003      	str	r3, [r0, #0]
 80066c2:	e7b6      	b.n	8006632 <_strtod_l+0x72>
 80066c4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80066c8:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80066cc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80066d0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80066d4:	e7e7      	b.n	80066a6 <_strtod_l+0xe6>
 80066d6:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800684c <_strtod_l+0x28c>
 80066da:	e7e4      	b.n	80066a6 <_strtod_l+0xe6>
 80066dc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80066e0:	f04f 38ff 	mov.w	r8, #4294967295
 80066e4:	e7df      	b.n	80066a6 <_strtod_l+0xe6>
 80066e6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80066e8:	1c5a      	adds	r2, r3, #1
 80066ea:	9219      	str	r2, [sp, #100]	; 0x64
 80066ec:	785b      	ldrb	r3, [r3, #1]
 80066ee:	2b30      	cmp	r3, #48	; 0x30
 80066f0:	d0f9      	beq.n	80066e6 <_strtod_l+0x126>
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d09d      	beq.n	8006632 <_strtod_l+0x72>
 80066f6:	2301      	movs	r3, #1
 80066f8:	f04f 0a00 	mov.w	sl, #0
 80066fc:	220a      	movs	r2, #10
 80066fe:	46d3      	mov	fp, sl
 8006700:	9305      	str	r3, [sp, #20]
 8006702:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006704:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8006708:	930b      	str	r3, [sp, #44]	; 0x2c
 800670a:	9819      	ldr	r0, [sp, #100]	; 0x64
 800670c:	7806      	ldrb	r6, [r0, #0]
 800670e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006712:	b2d9      	uxtb	r1, r3
 8006714:	2909      	cmp	r1, #9
 8006716:	d926      	bls.n	8006766 <_strtod_l+0x1a6>
 8006718:	2201      	movs	r2, #1
 800671a:	494d      	ldr	r1, [pc, #308]	; (8006850 <_strtod_l+0x290>)
 800671c:	f001 fb5b 	bl	8007dd6 <strncmp>
 8006720:	2800      	cmp	r0, #0
 8006722:	d030      	beq.n	8006786 <_strtod_l+0x1c6>
 8006724:	2000      	movs	r0, #0
 8006726:	4632      	mov	r2, r6
 8006728:	4603      	mov	r3, r0
 800672a:	465e      	mov	r6, fp
 800672c:	9008      	str	r0, [sp, #32]
 800672e:	2a65      	cmp	r2, #101	; 0x65
 8006730:	d001      	beq.n	8006736 <_strtod_l+0x176>
 8006732:	2a45      	cmp	r2, #69	; 0x45
 8006734:	d113      	bne.n	800675e <_strtod_l+0x19e>
 8006736:	b91e      	cbnz	r6, 8006740 <_strtod_l+0x180>
 8006738:	9a05      	ldr	r2, [sp, #20]
 800673a:	4302      	orrs	r2, r0
 800673c:	d094      	beq.n	8006668 <_strtod_l+0xa8>
 800673e:	2600      	movs	r6, #0
 8006740:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8006742:	1c6a      	adds	r2, r5, #1
 8006744:	9219      	str	r2, [sp, #100]	; 0x64
 8006746:	786a      	ldrb	r2, [r5, #1]
 8006748:	2a2b      	cmp	r2, #43	; 0x2b
 800674a:	d074      	beq.n	8006836 <_strtod_l+0x276>
 800674c:	2a2d      	cmp	r2, #45	; 0x2d
 800674e:	d078      	beq.n	8006842 <_strtod_l+0x282>
 8006750:	f04f 0c00 	mov.w	ip, #0
 8006754:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006758:	2909      	cmp	r1, #9
 800675a:	d97f      	bls.n	800685c <_strtod_l+0x29c>
 800675c:	9519      	str	r5, [sp, #100]	; 0x64
 800675e:	2700      	movs	r7, #0
 8006760:	e09e      	b.n	80068a0 <_strtod_l+0x2e0>
 8006762:	2300      	movs	r3, #0
 8006764:	e7c8      	b.n	80066f8 <_strtod_l+0x138>
 8006766:	f1bb 0f08 	cmp.w	fp, #8
 800676a:	bfd8      	it	le
 800676c:	990a      	ldrle	r1, [sp, #40]	; 0x28
 800676e:	f100 0001 	add.w	r0, r0, #1
 8006772:	bfd6      	itet	le
 8006774:	fb02 3301 	mlale	r3, r2, r1, r3
 8006778:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800677c:	930a      	strle	r3, [sp, #40]	; 0x28
 800677e:	f10b 0b01 	add.w	fp, fp, #1
 8006782:	9019      	str	r0, [sp, #100]	; 0x64
 8006784:	e7c1      	b.n	800670a <_strtod_l+0x14a>
 8006786:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006788:	1c5a      	adds	r2, r3, #1
 800678a:	9219      	str	r2, [sp, #100]	; 0x64
 800678c:	785a      	ldrb	r2, [r3, #1]
 800678e:	f1bb 0f00 	cmp.w	fp, #0
 8006792:	d037      	beq.n	8006804 <_strtod_l+0x244>
 8006794:	465e      	mov	r6, fp
 8006796:	9008      	str	r0, [sp, #32]
 8006798:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800679c:	2b09      	cmp	r3, #9
 800679e:	d912      	bls.n	80067c6 <_strtod_l+0x206>
 80067a0:	2301      	movs	r3, #1
 80067a2:	e7c4      	b.n	800672e <_strtod_l+0x16e>
 80067a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80067a6:	3001      	adds	r0, #1
 80067a8:	1c5a      	adds	r2, r3, #1
 80067aa:	9219      	str	r2, [sp, #100]	; 0x64
 80067ac:	785a      	ldrb	r2, [r3, #1]
 80067ae:	2a30      	cmp	r2, #48	; 0x30
 80067b0:	d0f8      	beq.n	80067a4 <_strtod_l+0x1e4>
 80067b2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80067b6:	2b08      	cmp	r3, #8
 80067b8:	f200 84e4 	bhi.w	8007184 <_strtod_l+0xbc4>
 80067bc:	9008      	str	r0, [sp, #32]
 80067be:	2000      	movs	r0, #0
 80067c0:	4606      	mov	r6, r0
 80067c2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80067c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80067c6:	3a30      	subs	r2, #48	; 0x30
 80067c8:	f100 0301 	add.w	r3, r0, #1
 80067cc:	d014      	beq.n	80067f8 <_strtod_l+0x238>
 80067ce:	9908      	ldr	r1, [sp, #32]
 80067d0:	eb00 0c06 	add.w	ip, r0, r6
 80067d4:	4419      	add	r1, r3
 80067d6:	9108      	str	r1, [sp, #32]
 80067d8:	4633      	mov	r3, r6
 80067da:	210a      	movs	r1, #10
 80067dc:	4563      	cmp	r3, ip
 80067de:	d113      	bne.n	8006808 <_strtod_l+0x248>
 80067e0:	1833      	adds	r3, r6, r0
 80067e2:	2b08      	cmp	r3, #8
 80067e4:	f106 0601 	add.w	r6, r6, #1
 80067e8:	4406      	add	r6, r0
 80067ea:	dc1a      	bgt.n	8006822 <_strtod_l+0x262>
 80067ec:	230a      	movs	r3, #10
 80067ee:	990a      	ldr	r1, [sp, #40]	; 0x28
 80067f0:	fb03 2301 	mla	r3, r3, r1, r2
 80067f4:	930a      	str	r3, [sp, #40]	; 0x28
 80067f6:	2300      	movs	r3, #0
 80067f8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80067fa:	4618      	mov	r0, r3
 80067fc:	1c51      	adds	r1, r2, #1
 80067fe:	9119      	str	r1, [sp, #100]	; 0x64
 8006800:	7852      	ldrb	r2, [r2, #1]
 8006802:	e7c9      	b.n	8006798 <_strtod_l+0x1d8>
 8006804:	4658      	mov	r0, fp
 8006806:	e7d2      	b.n	80067ae <_strtod_l+0x1ee>
 8006808:	2b08      	cmp	r3, #8
 800680a:	f103 0301 	add.w	r3, r3, #1
 800680e:	dc03      	bgt.n	8006818 <_strtod_l+0x258>
 8006810:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006812:	434f      	muls	r7, r1
 8006814:	970a      	str	r7, [sp, #40]	; 0x28
 8006816:	e7e1      	b.n	80067dc <_strtod_l+0x21c>
 8006818:	2b10      	cmp	r3, #16
 800681a:	bfd8      	it	le
 800681c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8006820:	e7dc      	b.n	80067dc <_strtod_l+0x21c>
 8006822:	2e10      	cmp	r6, #16
 8006824:	bfdc      	itt	le
 8006826:	230a      	movle	r3, #10
 8006828:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800682c:	e7e3      	b.n	80067f6 <_strtod_l+0x236>
 800682e:	2300      	movs	r3, #0
 8006830:	9308      	str	r3, [sp, #32]
 8006832:	2301      	movs	r3, #1
 8006834:	e780      	b.n	8006738 <_strtod_l+0x178>
 8006836:	f04f 0c00 	mov.w	ip, #0
 800683a:	1caa      	adds	r2, r5, #2
 800683c:	9219      	str	r2, [sp, #100]	; 0x64
 800683e:	78aa      	ldrb	r2, [r5, #2]
 8006840:	e788      	b.n	8006754 <_strtod_l+0x194>
 8006842:	f04f 0c01 	mov.w	ip, #1
 8006846:	e7f8      	b.n	800683a <_strtod_l+0x27a>
 8006848:	08009678 	.word	0x08009678
 800684c:	7ff00000 	.word	0x7ff00000
 8006850:	08009674 	.word	0x08009674
 8006854:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006856:	1c51      	adds	r1, r2, #1
 8006858:	9119      	str	r1, [sp, #100]	; 0x64
 800685a:	7852      	ldrb	r2, [r2, #1]
 800685c:	2a30      	cmp	r2, #48	; 0x30
 800685e:	d0f9      	beq.n	8006854 <_strtod_l+0x294>
 8006860:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006864:	2908      	cmp	r1, #8
 8006866:	f63f af7a 	bhi.w	800675e <_strtod_l+0x19e>
 800686a:	3a30      	subs	r2, #48	; 0x30
 800686c:	9209      	str	r2, [sp, #36]	; 0x24
 800686e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006870:	920c      	str	r2, [sp, #48]	; 0x30
 8006872:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006874:	1c57      	adds	r7, r2, #1
 8006876:	9719      	str	r7, [sp, #100]	; 0x64
 8006878:	7852      	ldrb	r2, [r2, #1]
 800687a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800687e:	f1be 0f09 	cmp.w	lr, #9
 8006882:	d938      	bls.n	80068f6 <_strtod_l+0x336>
 8006884:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006886:	1a7f      	subs	r7, r7, r1
 8006888:	2f08      	cmp	r7, #8
 800688a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800688e:	dc03      	bgt.n	8006898 <_strtod_l+0x2d8>
 8006890:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006892:	428f      	cmp	r7, r1
 8006894:	bfa8      	it	ge
 8006896:	460f      	movge	r7, r1
 8006898:	f1bc 0f00 	cmp.w	ip, #0
 800689c:	d000      	beq.n	80068a0 <_strtod_l+0x2e0>
 800689e:	427f      	negs	r7, r7
 80068a0:	2e00      	cmp	r6, #0
 80068a2:	d14f      	bne.n	8006944 <_strtod_l+0x384>
 80068a4:	9905      	ldr	r1, [sp, #20]
 80068a6:	4301      	orrs	r1, r0
 80068a8:	f47f aec3 	bne.w	8006632 <_strtod_l+0x72>
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	f47f aedb 	bne.w	8006668 <_strtod_l+0xa8>
 80068b2:	2a69      	cmp	r2, #105	; 0x69
 80068b4:	d029      	beq.n	800690a <_strtod_l+0x34a>
 80068b6:	dc26      	bgt.n	8006906 <_strtod_l+0x346>
 80068b8:	2a49      	cmp	r2, #73	; 0x49
 80068ba:	d026      	beq.n	800690a <_strtod_l+0x34a>
 80068bc:	2a4e      	cmp	r2, #78	; 0x4e
 80068be:	f47f aed3 	bne.w	8006668 <_strtod_l+0xa8>
 80068c2:	499a      	ldr	r1, [pc, #616]	; (8006b2c <_strtod_l+0x56c>)
 80068c4:	a819      	add	r0, sp, #100	; 0x64
 80068c6:	f001 fd8b 	bl	80083e0 <__match>
 80068ca:	2800      	cmp	r0, #0
 80068cc:	f43f aecc 	beq.w	8006668 <_strtod_l+0xa8>
 80068d0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	2b28      	cmp	r3, #40	; 0x28
 80068d6:	d12f      	bne.n	8006938 <_strtod_l+0x378>
 80068d8:	4995      	ldr	r1, [pc, #596]	; (8006b30 <_strtod_l+0x570>)
 80068da:	aa1c      	add	r2, sp, #112	; 0x70
 80068dc:	a819      	add	r0, sp, #100	; 0x64
 80068de:	f001 fd93 	bl	8008408 <__hexnan>
 80068e2:	2805      	cmp	r0, #5
 80068e4:	d128      	bne.n	8006938 <_strtod_l+0x378>
 80068e6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80068e8:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80068ec:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80068f0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80068f4:	e69d      	b.n	8006632 <_strtod_l+0x72>
 80068f6:	210a      	movs	r1, #10
 80068f8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80068fa:	fb01 2107 	mla	r1, r1, r7, r2
 80068fe:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8006902:	9209      	str	r2, [sp, #36]	; 0x24
 8006904:	e7b5      	b.n	8006872 <_strtod_l+0x2b2>
 8006906:	2a6e      	cmp	r2, #110	; 0x6e
 8006908:	e7d9      	b.n	80068be <_strtod_l+0x2fe>
 800690a:	498a      	ldr	r1, [pc, #552]	; (8006b34 <_strtod_l+0x574>)
 800690c:	a819      	add	r0, sp, #100	; 0x64
 800690e:	f001 fd67 	bl	80083e0 <__match>
 8006912:	2800      	cmp	r0, #0
 8006914:	f43f aea8 	beq.w	8006668 <_strtod_l+0xa8>
 8006918:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800691a:	4987      	ldr	r1, [pc, #540]	; (8006b38 <_strtod_l+0x578>)
 800691c:	3b01      	subs	r3, #1
 800691e:	a819      	add	r0, sp, #100	; 0x64
 8006920:	9319      	str	r3, [sp, #100]	; 0x64
 8006922:	f001 fd5d 	bl	80083e0 <__match>
 8006926:	b910      	cbnz	r0, 800692e <_strtod_l+0x36e>
 8006928:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800692a:	3301      	adds	r3, #1
 800692c:	9319      	str	r3, [sp, #100]	; 0x64
 800692e:	f04f 0800 	mov.w	r8, #0
 8006932:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8006b3c <_strtod_l+0x57c>
 8006936:	e67c      	b.n	8006632 <_strtod_l+0x72>
 8006938:	4881      	ldr	r0, [pc, #516]	; (8006b40 <_strtod_l+0x580>)
 800693a:	f001 fa6f 	bl	8007e1c <nan>
 800693e:	4680      	mov	r8, r0
 8006940:	4689      	mov	r9, r1
 8006942:	e676      	b.n	8006632 <_strtod_l+0x72>
 8006944:	9b08      	ldr	r3, [sp, #32]
 8006946:	f1bb 0f00 	cmp.w	fp, #0
 800694a:	bf08      	it	eq
 800694c:	46b3      	moveq	fp, r6
 800694e:	1afb      	subs	r3, r7, r3
 8006950:	2e10      	cmp	r6, #16
 8006952:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006954:	4635      	mov	r5, r6
 8006956:	9309      	str	r3, [sp, #36]	; 0x24
 8006958:	bfa8      	it	ge
 800695a:	2510      	movge	r5, #16
 800695c:	f7f9 fd4c 	bl	80003f8 <__aeabi_ui2d>
 8006960:	2e09      	cmp	r6, #9
 8006962:	4680      	mov	r8, r0
 8006964:	4689      	mov	r9, r1
 8006966:	dd13      	ble.n	8006990 <_strtod_l+0x3d0>
 8006968:	4b76      	ldr	r3, [pc, #472]	; (8006b44 <_strtod_l+0x584>)
 800696a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800696e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006972:	f7f9 fdbb 	bl	80004ec <__aeabi_dmul>
 8006976:	4680      	mov	r8, r0
 8006978:	4650      	mov	r0, sl
 800697a:	4689      	mov	r9, r1
 800697c:	f7f9 fd3c 	bl	80003f8 <__aeabi_ui2d>
 8006980:	4602      	mov	r2, r0
 8006982:	460b      	mov	r3, r1
 8006984:	4640      	mov	r0, r8
 8006986:	4649      	mov	r1, r9
 8006988:	f7f9 fbfa 	bl	8000180 <__adddf3>
 800698c:	4680      	mov	r8, r0
 800698e:	4689      	mov	r9, r1
 8006990:	2e0f      	cmp	r6, #15
 8006992:	dc36      	bgt.n	8006a02 <_strtod_l+0x442>
 8006994:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006996:	2b00      	cmp	r3, #0
 8006998:	f43f ae4b 	beq.w	8006632 <_strtod_l+0x72>
 800699c:	dd22      	ble.n	80069e4 <_strtod_l+0x424>
 800699e:	2b16      	cmp	r3, #22
 80069a0:	dc09      	bgt.n	80069b6 <_strtod_l+0x3f6>
 80069a2:	4968      	ldr	r1, [pc, #416]	; (8006b44 <_strtod_l+0x584>)
 80069a4:	4642      	mov	r2, r8
 80069a6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80069aa:	464b      	mov	r3, r9
 80069ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069b0:	f7f9 fd9c 	bl	80004ec <__aeabi_dmul>
 80069b4:	e7c3      	b.n	800693e <_strtod_l+0x37e>
 80069b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069b8:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80069bc:	4293      	cmp	r3, r2
 80069be:	db20      	blt.n	8006a02 <_strtod_l+0x442>
 80069c0:	4c60      	ldr	r4, [pc, #384]	; (8006b44 <_strtod_l+0x584>)
 80069c2:	f1c6 060f 	rsb	r6, r6, #15
 80069c6:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80069ca:	4642      	mov	r2, r8
 80069cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069d0:	464b      	mov	r3, r9
 80069d2:	f7f9 fd8b 	bl	80004ec <__aeabi_dmul>
 80069d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069d8:	1b9e      	subs	r6, r3, r6
 80069da:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80069de:	e9d4 2300 	ldrd	r2, r3, [r4]
 80069e2:	e7e5      	b.n	80069b0 <_strtod_l+0x3f0>
 80069e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069e6:	3316      	adds	r3, #22
 80069e8:	db0b      	blt.n	8006a02 <_strtod_l+0x442>
 80069ea:	9b08      	ldr	r3, [sp, #32]
 80069ec:	4640      	mov	r0, r8
 80069ee:	1bdf      	subs	r7, r3, r7
 80069f0:	4b54      	ldr	r3, [pc, #336]	; (8006b44 <_strtod_l+0x584>)
 80069f2:	4649      	mov	r1, r9
 80069f4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80069f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069fc:	f7f9 fea0 	bl	8000740 <__aeabi_ddiv>
 8006a00:	e79d      	b.n	800693e <_strtod_l+0x37e>
 8006a02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a04:	1b75      	subs	r5, r6, r5
 8006a06:	441d      	add	r5, r3
 8006a08:	2d00      	cmp	r5, #0
 8006a0a:	dd70      	ble.n	8006aee <_strtod_l+0x52e>
 8006a0c:	f015 030f 	ands.w	r3, r5, #15
 8006a10:	d00a      	beq.n	8006a28 <_strtod_l+0x468>
 8006a12:	494c      	ldr	r1, [pc, #304]	; (8006b44 <_strtod_l+0x584>)
 8006a14:	4642      	mov	r2, r8
 8006a16:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006a1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a1e:	464b      	mov	r3, r9
 8006a20:	f7f9 fd64 	bl	80004ec <__aeabi_dmul>
 8006a24:	4680      	mov	r8, r0
 8006a26:	4689      	mov	r9, r1
 8006a28:	f035 050f 	bics.w	r5, r5, #15
 8006a2c:	d04d      	beq.n	8006aca <_strtod_l+0x50a>
 8006a2e:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8006a32:	dd22      	ble.n	8006a7a <_strtod_l+0x4ba>
 8006a34:	2600      	movs	r6, #0
 8006a36:	46b3      	mov	fp, r6
 8006a38:	960b      	str	r6, [sp, #44]	; 0x2c
 8006a3a:	9608      	str	r6, [sp, #32]
 8006a3c:	2322      	movs	r3, #34	; 0x22
 8006a3e:	f04f 0800 	mov.w	r8, #0
 8006a42:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8006b3c <_strtod_l+0x57c>
 8006a46:	6023      	str	r3, [r4, #0]
 8006a48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	f43f adf1 	beq.w	8006632 <_strtod_l+0x72>
 8006a50:	4620      	mov	r0, r4
 8006a52:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006a54:	f7ff f934 	bl	8005cc0 <_Bfree>
 8006a58:	4620      	mov	r0, r4
 8006a5a:	9908      	ldr	r1, [sp, #32]
 8006a5c:	f7ff f930 	bl	8005cc0 <_Bfree>
 8006a60:	4659      	mov	r1, fp
 8006a62:	4620      	mov	r0, r4
 8006a64:	f7ff f92c 	bl	8005cc0 <_Bfree>
 8006a68:	4620      	mov	r0, r4
 8006a6a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006a6c:	f7ff f928 	bl	8005cc0 <_Bfree>
 8006a70:	4631      	mov	r1, r6
 8006a72:	4620      	mov	r0, r4
 8006a74:	f7ff f924 	bl	8005cc0 <_Bfree>
 8006a78:	e5db      	b.n	8006632 <_strtod_l+0x72>
 8006a7a:	4b33      	ldr	r3, [pc, #204]	; (8006b48 <_strtod_l+0x588>)
 8006a7c:	4640      	mov	r0, r8
 8006a7e:	9305      	str	r3, [sp, #20]
 8006a80:	2300      	movs	r3, #0
 8006a82:	4649      	mov	r1, r9
 8006a84:	469a      	mov	sl, r3
 8006a86:	112d      	asrs	r5, r5, #4
 8006a88:	2d01      	cmp	r5, #1
 8006a8a:	dc21      	bgt.n	8006ad0 <_strtod_l+0x510>
 8006a8c:	b10b      	cbz	r3, 8006a92 <_strtod_l+0x4d2>
 8006a8e:	4680      	mov	r8, r0
 8006a90:	4689      	mov	r9, r1
 8006a92:	492d      	ldr	r1, [pc, #180]	; (8006b48 <_strtod_l+0x588>)
 8006a94:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8006a98:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006a9c:	4642      	mov	r2, r8
 8006a9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006aa2:	464b      	mov	r3, r9
 8006aa4:	f7f9 fd22 	bl	80004ec <__aeabi_dmul>
 8006aa8:	4b24      	ldr	r3, [pc, #144]	; (8006b3c <_strtod_l+0x57c>)
 8006aaa:	460a      	mov	r2, r1
 8006aac:	400b      	ands	r3, r1
 8006aae:	4927      	ldr	r1, [pc, #156]	; (8006b4c <_strtod_l+0x58c>)
 8006ab0:	4680      	mov	r8, r0
 8006ab2:	428b      	cmp	r3, r1
 8006ab4:	d8be      	bhi.n	8006a34 <_strtod_l+0x474>
 8006ab6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006aba:	428b      	cmp	r3, r1
 8006abc:	bf86      	itte	hi
 8006abe:	f04f 38ff 	movhi.w	r8, #4294967295
 8006ac2:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8006b50 <_strtod_l+0x590>
 8006ac6:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8006aca:	2300      	movs	r3, #0
 8006acc:	9305      	str	r3, [sp, #20]
 8006ace:	e07b      	b.n	8006bc8 <_strtod_l+0x608>
 8006ad0:	07ea      	lsls	r2, r5, #31
 8006ad2:	d505      	bpl.n	8006ae0 <_strtod_l+0x520>
 8006ad4:	9b05      	ldr	r3, [sp, #20]
 8006ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ada:	f7f9 fd07 	bl	80004ec <__aeabi_dmul>
 8006ade:	2301      	movs	r3, #1
 8006ae0:	9a05      	ldr	r2, [sp, #20]
 8006ae2:	f10a 0a01 	add.w	sl, sl, #1
 8006ae6:	3208      	adds	r2, #8
 8006ae8:	106d      	asrs	r5, r5, #1
 8006aea:	9205      	str	r2, [sp, #20]
 8006aec:	e7cc      	b.n	8006a88 <_strtod_l+0x4c8>
 8006aee:	d0ec      	beq.n	8006aca <_strtod_l+0x50a>
 8006af0:	426d      	negs	r5, r5
 8006af2:	f015 020f 	ands.w	r2, r5, #15
 8006af6:	d00a      	beq.n	8006b0e <_strtod_l+0x54e>
 8006af8:	4b12      	ldr	r3, [pc, #72]	; (8006b44 <_strtod_l+0x584>)
 8006afa:	4640      	mov	r0, r8
 8006afc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b00:	4649      	mov	r1, r9
 8006b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b06:	f7f9 fe1b 	bl	8000740 <__aeabi_ddiv>
 8006b0a:	4680      	mov	r8, r0
 8006b0c:	4689      	mov	r9, r1
 8006b0e:	112d      	asrs	r5, r5, #4
 8006b10:	d0db      	beq.n	8006aca <_strtod_l+0x50a>
 8006b12:	2d1f      	cmp	r5, #31
 8006b14:	dd1e      	ble.n	8006b54 <_strtod_l+0x594>
 8006b16:	2600      	movs	r6, #0
 8006b18:	46b3      	mov	fp, r6
 8006b1a:	960b      	str	r6, [sp, #44]	; 0x2c
 8006b1c:	9608      	str	r6, [sp, #32]
 8006b1e:	2322      	movs	r3, #34	; 0x22
 8006b20:	f04f 0800 	mov.w	r8, #0
 8006b24:	f04f 0900 	mov.w	r9, #0
 8006b28:	6023      	str	r3, [r4, #0]
 8006b2a:	e78d      	b.n	8006a48 <_strtod_l+0x488>
 8006b2c:	08009467 	.word	0x08009467
 8006b30:	0800968c 	.word	0x0800968c
 8006b34:	0800945f 	.word	0x0800945f
 8006b38:	08009494 	.word	0x08009494
 8006b3c:	7ff00000 	.word	0x7ff00000
 8006b40:	08009838 	.word	0x08009838
 8006b44:	080095a0 	.word	0x080095a0
 8006b48:	08009578 	.word	0x08009578
 8006b4c:	7ca00000 	.word	0x7ca00000
 8006b50:	7fefffff 	.word	0x7fefffff
 8006b54:	f015 0310 	ands.w	r3, r5, #16
 8006b58:	bf18      	it	ne
 8006b5a:	236a      	movne	r3, #106	; 0x6a
 8006b5c:	4640      	mov	r0, r8
 8006b5e:	9305      	str	r3, [sp, #20]
 8006b60:	4649      	mov	r1, r9
 8006b62:	2300      	movs	r3, #0
 8006b64:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8006e30 <_strtod_l+0x870>
 8006b68:	07ea      	lsls	r2, r5, #31
 8006b6a:	d504      	bpl.n	8006b76 <_strtod_l+0x5b6>
 8006b6c:	e9da 2300 	ldrd	r2, r3, [sl]
 8006b70:	f7f9 fcbc 	bl	80004ec <__aeabi_dmul>
 8006b74:	2301      	movs	r3, #1
 8006b76:	106d      	asrs	r5, r5, #1
 8006b78:	f10a 0a08 	add.w	sl, sl, #8
 8006b7c:	d1f4      	bne.n	8006b68 <_strtod_l+0x5a8>
 8006b7e:	b10b      	cbz	r3, 8006b84 <_strtod_l+0x5c4>
 8006b80:	4680      	mov	r8, r0
 8006b82:	4689      	mov	r9, r1
 8006b84:	9b05      	ldr	r3, [sp, #20]
 8006b86:	b1bb      	cbz	r3, 8006bb8 <_strtod_l+0x5f8>
 8006b88:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8006b8c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	4649      	mov	r1, r9
 8006b94:	dd10      	ble.n	8006bb8 <_strtod_l+0x5f8>
 8006b96:	2b1f      	cmp	r3, #31
 8006b98:	f340 8128 	ble.w	8006dec <_strtod_l+0x82c>
 8006b9c:	2b34      	cmp	r3, #52	; 0x34
 8006b9e:	bfd8      	it	le
 8006ba0:	f04f 33ff 	movle.w	r3, #4294967295
 8006ba4:	f04f 0800 	mov.w	r8, #0
 8006ba8:	bfcf      	iteee	gt
 8006baa:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8006bae:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006bb2:	4093      	lslle	r3, r2
 8006bb4:	ea03 0901 	andle.w	r9, r3, r1
 8006bb8:	2200      	movs	r2, #0
 8006bba:	2300      	movs	r3, #0
 8006bbc:	4640      	mov	r0, r8
 8006bbe:	4649      	mov	r1, r9
 8006bc0:	f7f9 fefc 	bl	80009bc <__aeabi_dcmpeq>
 8006bc4:	2800      	cmp	r0, #0
 8006bc6:	d1a6      	bne.n	8006b16 <_strtod_l+0x556>
 8006bc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bca:	465a      	mov	r2, fp
 8006bcc:	9300      	str	r3, [sp, #0]
 8006bce:	4620      	mov	r0, r4
 8006bd0:	4633      	mov	r3, r6
 8006bd2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006bd4:	f7ff f8dc 	bl	8005d90 <__s2b>
 8006bd8:	900b      	str	r0, [sp, #44]	; 0x2c
 8006bda:	2800      	cmp	r0, #0
 8006bdc:	f43f af2a 	beq.w	8006a34 <_strtod_l+0x474>
 8006be0:	2600      	movs	r6, #0
 8006be2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006be4:	9b08      	ldr	r3, [sp, #32]
 8006be6:	2a00      	cmp	r2, #0
 8006be8:	eba3 0307 	sub.w	r3, r3, r7
 8006bec:	bfa8      	it	ge
 8006bee:	2300      	movge	r3, #0
 8006bf0:	46b3      	mov	fp, r6
 8006bf2:	9312      	str	r3, [sp, #72]	; 0x48
 8006bf4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006bf8:	9316      	str	r3, [sp, #88]	; 0x58
 8006bfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bfc:	4620      	mov	r0, r4
 8006bfe:	6859      	ldr	r1, [r3, #4]
 8006c00:	f7ff f81e 	bl	8005c40 <_Balloc>
 8006c04:	9008      	str	r0, [sp, #32]
 8006c06:	2800      	cmp	r0, #0
 8006c08:	f43f af18 	beq.w	8006a3c <_strtod_l+0x47c>
 8006c0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c0e:	300c      	adds	r0, #12
 8006c10:	691a      	ldr	r2, [r3, #16]
 8006c12:	f103 010c 	add.w	r1, r3, #12
 8006c16:	3202      	adds	r2, #2
 8006c18:	0092      	lsls	r2, r2, #2
 8006c1a:	f7fe f892 	bl	8004d42 <memcpy>
 8006c1e:	ab1c      	add	r3, sp, #112	; 0x70
 8006c20:	9301      	str	r3, [sp, #4]
 8006c22:	ab1b      	add	r3, sp, #108	; 0x6c
 8006c24:	9300      	str	r3, [sp, #0]
 8006c26:	4642      	mov	r2, r8
 8006c28:	464b      	mov	r3, r9
 8006c2a:	4620      	mov	r0, r4
 8006c2c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8006c30:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8006c34:	f7ff fbd8 	bl	80063e8 <__d2b>
 8006c38:	901a      	str	r0, [sp, #104]	; 0x68
 8006c3a:	2800      	cmp	r0, #0
 8006c3c:	f43f aefe 	beq.w	8006a3c <_strtod_l+0x47c>
 8006c40:	2101      	movs	r1, #1
 8006c42:	4620      	mov	r0, r4
 8006c44:	f7ff f93c 	bl	8005ec0 <__i2b>
 8006c48:	4683      	mov	fp, r0
 8006c4a:	2800      	cmp	r0, #0
 8006c4c:	f43f aef6 	beq.w	8006a3c <_strtod_l+0x47c>
 8006c50:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8006c52:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006c54:	2f00      	cmp	r7, #0
 8006c56:	bfab      	itete	ge
 8006c58:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 8006c5a:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8006c5c:	eb07 0a03 	addge.w	sl, r7, r3
 8006c60:	1bdd      	sublt	r5, r3, r7
 8006c62:	9b05      	ldr	r3, [sp, #20]
 8006c64:	bfa8      	it	ge
 8006c66:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8006c68:	eba7 0703 	sub.w	r7, r7, r3
 8006c6c:	4417      	add	r7, r2
 8006c6e:	4b71      	ldr	r3, [pc, #452]	; (8006e34 <_strtod_l+0x874>)
 8006c70:	f107 37ff 	add.w	r7, r7, #4294967295
 8006c74:	bfb8      	it	lt
 8006c76:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 8006c7a:	429f      	cmp	r7, r3
 8006c7c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006c80:	f280 80c7 	bge.w	8006e12 <_strtod_l+0x852>
 8006c84:	1bdb      	subs	r3, r3, r7
 8006c86:	2b1f      	cmp	r3, #31
 8006c88:	f04f 0101 	mov.w	r1, #1
 8006c8c:	eba2 0203 	sub.w	r2, r2, r3
 8006c90:	f300 80b3 	bgt.w	8006dfa <_strtod_l+0x83a>
 8006c94:	fa01 f303 	lsl.w	r3, r1, r3
 8006c98:	9313      	str	r3, [sp, #76]	; 0x4c
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	9310      	str	r3, [sp, #64]	; 0x40
 8006c9e:	eb0a 0702 	add.w	r7, sl, r2
 8006ca2:	9b05      	ldr	r3, [sp, #20]
 8006ca4:	45ba      	cmp	sl, r7
 8006ca6:	4415      	add	r5, r2
 8006ca8:	441d      	add	r5, r3
 8006caa:	4653      	mov	r3, sl
 8006cac:	bfa8      	it	ge
 8006cae:	463b      	movge	r3, r7
 8006cb0:	42ab      	cmp	r3, r5
 8006cb2:	bfa8      	it	ge
 8006cb4:	462b      	movge	r3, r5
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	bfc2      	ittt	gt
 8006cba:	1aff      	subgt	r7, r7, r3
 8006cbc:	1aed      	subgt	r5, r5, r3
 8006cbe:	ebaa 0a03 	subgt.w	sl, sl, r3
 8006cc2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	dd17      	ble.n	8006cf8 <_strtod_l+0x738>
 8006cc8:	4659      	mov	r1, fp
 8006cca:	461a      	mov	r2, r3
 8006ccc:	4620      	mov	r0, r4
 8006cce:	f7ff f9b5 	bl	800603c <__pow5mult>
 8006cd2:	4683      	mov	fp, r0
 8006cd4:	2800      	cmp	r0, #0
 8006cd6:	f43f aeb1 	beq.w	8006a3c <_strtod_l+0x47c>
 8006cda:	4601      	mov	r1, r0
 8006cdc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006cde:	4620      	mov	r0, r4
 8006ce0:	f7ff f904 	bl	8005eec <__multiply>
 8006ce4:	900a      	str	r0, [sp, #40]	; 0x28
 8006ce6:	2800      	cmp	r0, #0
 8006ce8:	f43f aea8 	beq.w	8006a3c <_strtod_l+0x47c>
 8006cec:	4620      	mov	r0, r4
 8006cee:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006cf0:	f7fe ffe6 	bl	8005cc0 <_Bfree>
 8006cf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cf6:	931a      	str	r3, [sp, #104]	; 0x68
 8006cf8:	2f00      	cmp	r7, #0
 8006cfa:	f300 808f 	bgt.w	8006e1c <_strtod_l+0x85c>
 8006cfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	dd08      	ble.n	8006d16 <_strtod_l+0x756>
 8006d04:	4620      	mov	r0, r4
 8006d06:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006d08:	9908      	ldr	r1, [sp, #32]
 8006d0a:	f7ff f997 	bl	800603c <__pow5mult>
 8006d0e:	9008      	str	r0, [sp, #32]
 8006d10:	2800      	cmp	r0, #0
 8006d12:	f43f ae93 	beq.w	8006a3c <_strtod_l+0x47c>
 8006d16:	2d00      	cmp	r5, #0
 8006d18:	dd08      	ble.n	8006d2c <_strtod_l+0x76c>
 8006d1a:	462a      	mov	r2, r5
 8006d1c:	4620      	mov	r0, r4
 8006d1e:	9908      	ldr	r1, [sp, #32]
 8006d20:	f7ff f9e6 	bl	80060f0 <__lshift>
 8006d24:	9008      	str	r0, [sp, #32]
 8006d26:	2800      	cmp	r0, #0
 8006d28:	f43f ae88 	beq.w	8006a3c <_strtod_l+0x47c>
 8006d2c:	f1ba 0f00 	cmp.w	sl, #0
 8006d30:	dd08      	ble.n	8006d44 <_strtod_l+0x784>
 8006d32:	4659      	mov	r1, fp
 8006d34:	4652      	mov	r2, sl
 8006d36:	4620      	mov	r0, r4
 8006d38:	f7ff f9da 	bl	80060f0 <__lshift>
 8006d3c:	4683      	mov	fp, r0
 8006d3e:	2800      	cmp	r0, #0
 8006d40:	f43f ae7c 	beq.w	8006a3c <_strtod_l+0x47c>
 8006d44:	4620      	mov	r0, r4
 8006d46:	9a08      	ldr	r2, [sp, #32]
 8006d48:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006d4a:	f7ff fa59 	bl	8006200 <__mdiff>
 8006d4e:	4606      	mov	r6, r0
 8006d50:	2800      	cmp	r0, #0
 8006d52:	f43f ae73 	beq.w	8006a3c <_strtod_l+0x47c>
 8006d56:	2500      	movs	r5, #0
 8006d58:	68c3      	ldr	r3, [r0, #12]
 8006d5a:	4659      	mov	r1, fp
 8006d5c:	60c5      	str	r5, [r0, #12]
 8006d5e:	930a      	str	r3, [sp, #40]	; 0x28
 8006d60:	f7ff fa32 	bl	80061c8 <__mcmp>
 8006d64:	42a8      	cmp	r0, r5
 8006d66:	da6b      	bge.n	8006e40 <_strtod_l+0x880>
 8006d68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d6a:	ea53 0308 	orrs.w	r3, r3, r8
 8006d6e:	f040 808f 	bne.w	8006e90 <_strtod_l+0x8d0>
 8006d72:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	f040 808a 	bne.w	8006e90 <_strtod_l+0x8d0>
 8006d7c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006d80:	0d1b      	lsrs	r3, r3, #20
 8006d82:	051b      	lsls	r3, r3, #20
 8006d84:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006d88:	f240 8082 	bls.w	8006e90 <_strtod_l+0x8d0>
 8006d8c:	6973      	ldr	r3, [r6, #20]
 8006d8e:	b913      	cbnz	r3, 8006d96 <_strtod_l+0x7d6>
 8006d90:	6933      	ldr	r3, [r6, #16]
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	dd7c      	ble.n	8006e90 <_strtod_l+0x8d0>
 8006d96:	4631      	mov	r1, r6
 8006d98:	2201      	movs	r2, #1
 8006d9a:	4620      	mov	r0, r4
 8006d9c:	f7ff f9a8 	bl	80060f0 <__lshift>
 8006da0:	4659      	mov	r1, fp
 8006da2:	4606      	mov	r6, r0
 8006da4:	f7ff fa10 	bl	80061c8 <__mcmp>
 8006da8:	2800      	cmp	r0, #0
 8006daa:	dd71      	ble.n	8006e90 <_strtod_l+0x8d0>
 8006dac:	9905      	ldr	r1, [sp, #20]
 8006dae:	464b      	mov	r3, r9
 8006db0:	4a21      	ldr	r2, [pc, #132]	; (8006e38 <_strtod_l+0x878>)
 8006db2:	2900      	cmp	r1, #0
 8006db4:	f000 808d 	beq.w	8006ed2 <_strtod_l+0x912>
 8006db8:	ea02 0109 	and.w	r1, r2, r9
 8006dbc:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006dc0:	f300 8087 	bgt.w	8006ed2 <_strtod_l+0x912>
 8006dc4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006dc8:	f77f aea9 	ble.w	8006b1e <_strtod_l+0x55e>
 8006dcc:	4640      	mov	r0, r8
 8006dce:	4649      	mov	r1, r9
 8006dd0:	4b1a      	ldr	r3, [pc, #104]	; (8006e3c <_strtod_l+0x87c>)
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f7f9 fb8a 	bl	80004ec <__aeabi_dmul>
 8006dd8:	4b17      	ldr	r3, [pc, #92]	; (8006e38 <_strtod_l+0x878>)
 8006dda:	4680      	mov	r8, r0
 8006ddc:	400b      	ands	r3, r1
 8006dde:	4689      	mov	r9, r1
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	f47f ae35 	bne.w	8006a50 <_strtod_l+0x490>
 8006de6:	2322      	movs	r3, #34	; 0x22
 8006de8:	6023      	str	r3, [r4, #0]
 8006dea:	e631      	b.n	8006a50 <_strtod_l+0x490>
 8006dec:	f04f 32ff 	mov.w	r2, #4294967295
 8006df0:	fa02 f303 	lsl.w	r3, r2, r3
 8006df4:	ea03 0808 	and.w	r8, r3, r8
 8006df8:	e6de      	b.n	8006bb8 <_strtod_l+0x5f8>
 8006dfa:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 8006dfe:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 8006e02:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 8006e06:	37e2      	adds	r7, #226	; 0xe2
 8006e08:	fa01 f307 	lsl.w	r3, r1, r7
 8006e0c:	9310      	str	r3, [sp, #64]	; 0x40
 8006e0e:	9113      	str	r1, [sp, #76]	; 0x4c
 8006e10:	e745      	b.n	8006c9e <_strtod_l+0x6de>
 8006e12:	2300      	movs	r3, #0
 8006e14:	9310      	str	r3, [sp, #64]	; 0x40
 8006e16:	2301      	movs	r3, #1
 8006e18:	9313      	str	r3, [sp, #76]	; 0x4c
 8006e1a:	e740      	b.n	8006c9e <_strtod_l+0x6de>
 8006e1c:	463a      	mov	r2, r7
 8006e1e:	4620      	mov	r0, r4
 8006e20:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006e22:	f7ff f965 	bl	80060f0 <__lshift>
 8006e26:	901a      	str	r0, [sp, #104]	; 0x68
 8006e28:	2800      	cmp	r0, #0
 8006e2a:	f47f af68 	bne.w	8006cfe <_strtod_l+0x73e>
 8006e2e:	e605      	b.n	8006a3c <_strtod_l+0x47c>
 8006e30:	080096a0 	.word	0x080096a0
 8006e34:	fffffc02 	.word	0xfffffc02
 8006e38:	7ff00000 	.word	0x7ff00000
 8006e3c:	39500000 	.word	0x39500000
 8006e40:	46ca      	mov	sl, r9
 8006e42:	d165      	bne.n	8006f10 <_strtod_l+0x950>
 8006e44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e46:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006e4a:	b352      	cbz	r2, 8006ea2 <_strtod_l+0x8e2>
 8006e4c:	4a9e      	ldr	r2, [pc, #632]	; (80070c8 <_strtod_l+0xb08>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d12a      	bne.n	8006ea8 <_strtod_l+0x8e8>
 8006e52:	9b05      	ldr	r3, [sp, #20]
 8006e54:	4641      	mov	r1, r8
 8006e56:	b1fb      	cbz	r3, 8006e98 <_strtod_l+0x8d8>
 8006e58:	4b9c      	ldr	r3, [pc, #624]	; (80070cc <_strtod_l+0xb0c>)
 8006e5a:	f04f 32ff 	mov.w	r2, #4294967295
 8006e5e:	ea09 0303 	and.w	r3, r9, r3
 8006e62:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006e66:	d81a      	bhi.n	8006e9e <_strtod_l+0x8de>
 8006e68:	0d1b      	lsrs	r3, r3, #20
 8006e6a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e72:	4299      	cmp	r1, r3
 8006e74:	d118      	bne.n	8006ea8 <_strtod_l+0x8e8>
 8006e76:	4b96      	ldr	r3, [pc, #600]	; (80070d0 <_strtod_l+0xb10>)
 8006e78:	459a      	cmp	sl, r3
 8006e7a:	d102      	bne.n	8006e82 <_strtod_l+0x8c2>
 8006e7c:	3101      	adds	r1, #1
 8006e7e:	f43f addd 	beq.w	8006a3c <_strtod_l+0x47c>
 8006e82:	f04f 0800 	mov.w	r8, #0
 8006e86:	4b91      	ldr	r3, [pc, #580]	; (80070cc <_strtod_l+0xb0c>)
 8006e88:	ea0a 0303 	and.w	r3, sl, r3
 8006e8c:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8006e90:	9b05      	ldr	r3, [sp, #20]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d19a      	bne.n	8006dcc <_strtod_l+0x80c>
 8006e96:	e5db      	b.n	8006a50 <_strtod_l+0x490>
 8006e98:	f04f 33ff 	mov.w	r3, #4294967295
 8006e9c:	e7e9      	b.n	8006e72 <_strtod_l+0x8b2>
 8006e9e:	4613      	mov	r3, r2
 8006ea0:	e7e7      	b.n	8006e72 <_strtod_l+0x8b2>
 8006ea2:	ea53 0308 	orrs.w	r3, r3, r8
 8006ea6:	d081      	beq.n	8006dac <_strtod_l+0x7ec>
 8006ea8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006eaa:	b1e3      	cbz	r3, 8006ee6 <_strtod_l+0x926>
 8006eac:	ea13 0f0a 	tst.w	r3, sl
 8006eb0:	d0ee      	beq.n	8006e90 <_strtod_l+0x8d0>
 8006eb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006eb4:	4640      	mov	r0, r8
 8006eb6:	4649      	mov	r1, r9
 8006eb8:	9a05      	ldr	r2, [sp, #20]
 8006eba:	b1c3      	cbz	r3, 8006eee <_strtod_l+0x92e>
 8006ebc:	f7ff fb5c 	bl	8006578 <sulp>
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	460b      	mov	r3, r1
 8006ec4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006ec6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006ec8:	f7f9 f95a 	bl	8000180 <__adddf3>
 8006ecc:	4680      	mov	r8, r0
 8006ece:	4689      	mov	r9, r1
 8006ed0:	e7de      	b.n	8006e90 <_strtod_l+0x8d0>
 8006ed2:	4013      	ands	r3, r2
 8006ed4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006ed8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8006edc:	f04f 38ff 	mov.w	r8, #4294967295
 8006ee0:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8006ee4:	e7d4      	b.n	8006e90 <_strtod_l+0x8d0>
 8006ee6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006ee8:	ea13 0f08 	tst.w	r3, r8
 8006eec:	e7e0      	b.n	8006eb0 <_strtod_l+0x8f0>
 8006eee:	f7ff fb43 	bl	8006578 <sulp>
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	460b      	mov	r3, r1
 8006ef6:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006ef8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006efa:	f7f9 f93f 	bl	800017c <__aeabi_dsub>
 8006efe:	2200      	movs	r2, #0
 8006f00:	2300      	movs	r3, #0
 8006f02:	4680      	mov	r8, r0
 8006f04:	4689      	mov	r9, r1
 8006f06:	f7f9 fd59 	bl	80009bc <__aeabi_dcmpeq>
 8006f0a:	2800      	cmp	r0, #0
 8006f0c:	d0c0      	beq.n	8006e90 <_strtod_l+0x8d0>
 8006f0e:	e606      	b.n	8006b1e <_strtod_l+0x55e>
 8006f10:	4659      	mov	r1, fp
 8006f12:	4630      	mov	r0, r6
 8006f14:	f7ff fabe 	bl	8006494 <__ratio>
 8006f18:	4602      	mov	r2, r0
 8006f1a:	460b      	mov	r3, r1
 8006f1c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006f20:	2200      	movs	r2, #0
 8006f22:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006f26:	f7f9 fd5d 	bl	80009e4 <__aeabi_dcmple>
 8006f2a:	2800      	cmp	r0, #0
 8006f2c:	d06f      	beq.n	800700e <_strtod_l+0xa4e>
 8006f2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d17c      	bne.n	800702e <_strtod_l+0xa6e>
 8006f34:	f1b8 0f00 	cmp.w	r8, #0
 8006f38:	d159      	bne.n	8006fee <_strtod_l+0xa2e>
 8006f3a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d17b      	bne.n	800703a <_strtod_l+0xa7a>
 8006f42:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006f46:	2200      	movs	r2, #0
 8006f48:	4b62      	ldr	r3, [pc, #392]	; (80070d4 <_strtod_l+0xb14>)
 8006f4a:	f7f9 fd41 	bl	80009d0 <__aeabi_dcmplt>
 8006f4e:	2800      	cmp	r0, #0
 8006f50:	d15a      	bne.n	8007008 <_strtod_l+0xa48>
 8006f52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006f56:	2200      	movs	r2, #0
 8006f58:	4b5f      	ldr	r3, [pc, #380]	; (80070d8 <_strtod_l+0xb18>)
 8006f5a:	f7f9 fac7 	bl	80004ec <__aeabi_dmul>
 8006f5e:	4605      	mov	r5, r0
 8006f60:	460f      	mov	r7, r1
 8006f62:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8006f66:	9506      	str	r5, [sp, #24]
 8006f68:	9307      	str	r3, [sp, #28]
 8006f6a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006f6e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006f72:	4b56      	ldr	r3, [pc, #344]	; (80070cc <_strtod_l+0xb0c>)
 8006f74:	4a55      	ldr	r2, [pc, #340]	; (80070cc <_strtod_l+0xb0c>)
 8006f76:	ea0a 0303 	and.w	r3, sl, r3
 8006f7a:	9313      	str	r3, [sp, #76]	; 0x4c
 8006f7c:	4b57      	ldr	r3, [pc, #348]	; (80070dc <_strtod_l+0xb1c>)
 8006f7e:	ea0a 0202 	and.w	r2, sl, r2
 8006f82:	429a      	cmp	r2, r3
 8006f84:	f040 80b0 	bne.w	80070e8 <_strtod_l+0xb28>
 8006f88:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8006f8c:	4640      	mov	r0, r8
 8006f8e:	4649      	mov	r1, r9
 8006f90:	f7ff f9c2 	bl	8006318 <__ulp>
 8006f94:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006f98:	f7f9 faa8 	bl	80004ec <__aeabi_dmul>
 8006f9c:	4642      	mov	r2, r8
 8006f9e:	464b      	mov	r3, r9
 8006fa0:	f7f9 f8ee 	bl	8000180 <__adddf3>
 8006fa4:	f8df a124 	ldr.w	sl, [pc, #292]	; 80070cc <_strtod_l+0xb0c>
 8006fa8:	4a4d      	ldr	r2, [pc, #308]	; (80070e0 <_strtod_l+0xb20>)
 8006faa:	ea01 0a0a 	and.w	sl, r1, sl
 8006fae:	4592      	cmp	sl, r2
 8006fb0:	4680      	mov	r8, r0
 8006fb2:	d948      	bls.n	8007046 <_strtod_l+0xa86>
 8006fb4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006fb6:	4b46      	ldr	r3, [pc, #280]	; (80070d0 <_strtod_l+0xb10>)
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d103      	bne.n	8006fc4 <_strtod_l+0xa04>
 8006fbc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006fbe:	3301      	adds	r3, #1
 8006fc0:	f43f ad3c 	beq.w	8006a3c <_strtod_l+0x47c>
 8006fc4:	f04f 38ff 	mov.w	r8, #4294967295
 8006fc8:	f8df 9104 	ldr.w	r9, [pc, #260]	; 80070d0 <_strtod_l+0xb10>
 8006fcc:	4620      	mov	r0, r4
 8006fce:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006fd0:	f7fe fe76 	bl	8005cc0 <_Bfree>
 8006fd4:	4620      	mov	r0, r4
 8006fd6:	9908      	ldr	r1, [sp, #32]
 8006fd8:	f7fe fe72 	bl	8005cc0 <_Bfree>
 8006fdc:	4659      	mov	r1, fp
 8006fde:	4620      	mov	r0, r4
 8006fe0:	f7fe fe6e 	bl	8005cc0 <_Bfree>
 8006fe4:	4631      	mov	r1, r6
 8006fe6:	4620      	mov	r0, r4
 8006fe8:	f7fe fe6a 	bl	8005cc0 <_Bfree>
 8006fec:	e605      	b.n	8006bfa <_strtod_l+0x63a>
 8006fee:	f1b8 0f01 	cmp.w	r8, #1
 8006ff2:	d103      	bne.n	8006ffc <_strtod_l+0xa3c>
 8006ff4:	f1b9 0f00 	cmp.w	r9, #0
 8006ff8:	f43f ad91 	beq.w	8006b1e <_strtod_l+0x55e>
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	4b39      	ldr	r3, [pc, #228]	; (80070e4 <_strtod_l+0xb24>)
 8007000:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007002:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007006:	e016      	b.n	8007036 <_strtod_l+0xa76>
 8007008:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800700a:	4f33      	ldr	r7, [pc, #204]	; (80070d8 <_strtod_l+0xb18>)
 800700c:	e7a9      	b.n	8006f62 <_strtod_l+0x9a2>
 800700e:	4b32      	ldr	r3, [pc, #200]	; (80070d8 <_strtod_l+0xb18>)
 8007010:	2200      	movs	r2, #0
 8007012:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007016:	f7f9 fa69 	bl	80004ec <__aeabi_dmul>
 800701a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800701c:	4605      	mov	r5, r0
 800701e:	460f      	mov	r7, r1
 8007020:	2b00      	cmp	r3, #0
 8007022:	d09e      	beq.n	8006f62 <_strtod_l+0x9a2>
 8007024:	4602      	mov	r2, r0
 8007026:	460b      	mov	r3, r1
 8007028:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800702c:	e79d      	b.n	8006f6a <_strtod_l+0x9aa>
 800702e:	2200      	movs	r2, #0
 8007030:	4b28      	ldr	r3, [pc, #160]	; (80070d4 <_strtod_l+0xb14>)
 8007032:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007036:	4f27      	ldr	r7, [pc, #156]	; (80070d4 <_strtod_l+0xb14>)
 8007038:	e797      	b.n	8006f6a <_strtod_l+0x9aa>
 800703a:	2200      	movs	r2, #0
 800703c:	4b29      	ldr	r3, [pc, #164]	; (80070e4 <_strtod_l+0xb24>)
 800703e:	4645      	mov	r5, r8
 8007040:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007044:	e7f7      	b.n	8007036 <_strtod_l+0xa76>
 8007046:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 800704a:	9b05      	ldr	r3, [sp, #20]
 800704c:	46ca      	mov	sl, r9
 800704e:	2b00      	cmp	r3, #0
 8007050:	d1bc      	bne.n	8006fcc <_strtod_l+0xa0c>
 8007052:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007056:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007058:	0d1b      	lsrs	r3, r3, #20
 800705a:	051b      	lsls	r3, r3, #20
 800705c:	429a      	cmp	r2, r3
 800705e:	d1b5      	bne.n	8006fcc <_strtod_l+0xa0c>
 8007060:	4628      	mov	r0, r5
 8007062:	4639      	mov	r1, r7
 8007064:	f7f9 fd8a 	bl	8000b7c <__aeabi_d2lz>
 8007068:	f7f9 fa12 	bl	8000490 <__aeabi_l2d>
 800706c:	4602      	mov	r2, r0
 800706e:	460b      	mov	r3, r1
 8007070:	4628      	mov	r0, r5
 8007072:	4639      	mov	r1, r7
 8007074:	f7f9 f882 	bl	800017c <__aeabi_dsub>
 8007078:	460b      	mov	r3, r1
 800707a:	4602      	mov	r2, r0
 800707c:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8007080:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007084:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007086:	ea4a 0a08 	orr.w	sl, sl, r8
 800708a:	ea5a 0a03 	orrs.w	sl, sl, r3
 800708e:	d06c      	beq.n	800716a <_strtod_l+0xbaa>
 8007090:	a309      	add	r3, pc, #36	; (adr r3, 80070b8 <_strtod_l+0xaf8>)
 8007092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007096:	f7f9 fc9b 	bl	80009d0 <__aeabi_dcmplt>
 800709a:	2800      	cmp	r0, #0
 800709c:	f47f acd8 	bne.w	8006a50 <_strtod_l+0x490>
 80070a0:	a307      	add	r3, pc, #28	; (adr r3, 80070c0 <_strtod_l+0xb00>)
 80070a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80070aa:	f7f9 fcaf 	bl	8000a0c <__aeabi_dcmpgt>
 80070ae:	2800      	cmp	r0, #0
 80070b0:	d08c      	beq.n	8006fcc <_strtod_l+0xa0c>
 80070b2:	e4cd      	b.n	8006a50 <_strtod_l+0x490>
 80070b4:	f3af 8000 	nop.w
 80070b8:	94a03595 	.word	0x94a03595
 80070bc:	3fdfffff 	.word	0x3fdfffff
 80070c0:	35afe535 	.word	0x35afe535
 80070c4:	3fe00000 	.word	0x3fe00000
 80070c8:	000fffff 	.word	0x000fffff
 80070cc:	7ff00000 	.word	0x7ff00000
 80070d0:	7fefffff 	.word	0x7fefffff
 80070d4:	3ff00000 	.word	0x3ff00000
 80070d8:	3fe00000 	.word	0x3fe00000
 80070dc:	7fe00000 	.word	0x7fe00000
 80070e0:	7c9fffff 	.word	0x7c9fffff
 80070e4:	bff00000 	.word	0xbff00000
 80070e8:	9b05      	ldr	r3, [sp, #20]
 80070ea:	b333      	cbz	r3, 800713a <_strtod_l+0xb7a>
 80070ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80070ee:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80070f2:	d822      	bhi.n	800713a <_strtod_l+0xb7a>
 80070f4:	a328      	add	r3, pc, #160	; (adr r3, 8007198 <_strtod_l+0xbd8>)
 80070f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070fa:	4628      	mov	r0, r5
 80070fc:	4639      	mov	r1, r7
 80070fe:	f7f9 fc71 	bl	80009e4 <__aeabi_dcmple>
 8007102:	b1a0      	cbz	r0, 800712e <_strtod_l+0xb6e>
 8007104:	4639      	mov	r1, r7
 8007106:	4628      	mov	r0, r5
 8007108:	f7f9 fcc8 	bl	8000a9c <__aeabi_d2uiz>
 800710c:	2801      	cmp	r0, #1
 800710e:	bf38      	it	cc
 8007110:	2001      	movcc	r0, #1
 8007112:	f7f9 f971 	bl	80003f8 <__aeabi_ui2d>
 8007116:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007118:	4605      	mov	r5, r0
 800711a:	460f      	mov	r7, r1
 800711c:	bb03      	cbnz	r3, 8007160 <_strtod_l+0xba0>
 800711e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007122:	9014      	str	r0, [sp, #80]	; 0x50
 8007124:	9315      	str	r3, [sp, #84]	; 0x54
 8007126:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800712a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800712e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007130:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007132:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007136:	1a9b      	subs	r3, r3, r2
 8007138:	9311      	str	r3, [sp, #68]	; 0x44
 800713a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800713c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800713e:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 8007142:	f7ff f8e9 	bl	8006318 <__ulp>
 8007146:	4602      	mov	r2, r0
 8007148:	460b      	mov	r3, r1
 800714a:	4640      	mov	r0, r8
 800714c:	4649      	mov	r1, r9
 800714e:	f7f9 f9cd 	bl	80004ec <__aeabi_dmul>
 8007152:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007154:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007156:	f7f9 f813 	bl	8000180 <__adddf3>
 800715a:	4680      	mov	r8, r0
 800715c:	4689      	mov	r9, r1
 800715e:	e774      	b.n	800704a <_strtod_l+0xa8a>
 8007160:	4602      	mov	r2, r0
 8007162:	460b      	mov	r3, r1
 8007164:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8007168:	e7dd      	b.n	8007126 <_strtod_l+0xb66>
 800716a:	a30d      	add	r3, pc, #52	; (adr r3, 80071a0 <_strtod_l+0xbe0>)
 800716c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007170:	f7f9 fc2e 	bl	80009d0 <__aeabi_dcmplt>
 8007174:	e79b      	b.n	80070ae <_strtod_l+0xaee>
 8007176:	2300      	movs	r3, #0
 8007178:	930e      	str	r3, [sp, #56]	; 0x38
 800717a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800717c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800717e:	6013      	str	r3, [r2, #0]
 8007180:	f7ff ba5b 	b.w	800663a <_strtod_l+0x7a>
 8007184:	2a65      	cmp	r2, #101	; 0x65
 8007186:	f43f ab52 	beq.w	800682e <_strtod_l+0x26e>
 800718a:	2a45      	cmp	r2, #69	; 0x45
 800718c:	f43f ab4f 	beq.w	800682e <_strtod_l+0x26e>
 8007190:	2301      	movs	r3, #1
 8007192:	f7ff bb87 	b.w	80068a4 <_strtod_l+0x2e4>
 8007196:	bf00      	nop
 8007198:	ffc00000 	.word	0xffc00000
 800719c:	41dfffff 	.word	0x41dfffff
 80071a0:	94a03595 	.word	0x94a03595
 80071a4:	3fcfffff 	.word	0x3fcfffff

080071a8 <_strtod_r>:
 80071a8:	4b01      	ldr	r3, [pc, #4]	; (80071b0 <_strtod_r+0x8>)
 80071aa:	f7ff ba09 	b.w	80065c0 <_strtod_l>
 80071ae:	bf00      	nop
 80071b0:	20000068 	.word	0x20000068

080071b4 <_strtol_l.constprop.0>:
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071ba:	4686      	mov	lr, r0
 80071bc:	4690      	mov	r8, r2
 80071be:	d001      	beq.n	80071c4 <_strtol_l.constprop.0+0x10>
 80071c0:	2b24      	cmp	r3, #36	; 0x24
 80071c2:	d906      	bls.n	80071d2 <_strtol_l.constprop.0+0x1e>
 80071c4:	f7fd fd82 	bl	8004ccc <__errno>
 80071c8:	2316      	movs	r3, #22
 80071ca:	6003      	str	r3, [r0, #0]
 80071cc:	2000      	movs	r0, #0
 80071ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071d2:	460d      	mov	r5, r1
 80071d4:	4835      	ldr	r0, [pc, #212]	; (80072ac <_strtol_l.constprop.0+0xf8>)
 80071d6:	462a      	mov	r2, r5
 80071d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80071dc:	5d06      	ldrb	r6, [r0, r4]
 80071de:	f016 0608 	ands.w	r6, r6, #8
 80071e2:	d1f8      	bne.n	80071d6 <_strtol_l.constprop.0+0x22>
 80071e4:	2c2d      	cmp	r4, #45	; 0x2d
 80071e6:	d12e      	bne.n	8007246 <_strtol_l.constprop.0+0x92>
 80071e8:	2601      	movs	r6, #1
 80071ea:	782c      	ldrb	r4, [r5, #0]
 80071ec:	1c95      	adds	r5, r2, #2
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d057      	beq.n	80072a2 <_strtol_l.constprop.0+0xee>
 80071f2:	2b10      	cmp	r3, #16
 80071f4:	d109      	bne.n	800720a <_strtol_l.constprop.0+0x56>
 80071f6:	2c30      	cmp	r4, #48	; 0x30
 80071f8:	d107      	bne.n	800720a <_strtol_l.constprop.0+0x56>
 80071fa:	782a      	ldrb	r2, [r5, #0]
 80071fc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007200:	2a58      	cmp	r2, #88	; 0x58
 8007202:	d149      	bne.n	8007298 <_strtol_l.constprop.0+0xe4>
 8007204:	2310      	movs	r3, #16
 8007206:	786c      	ldrb	r4, [r5, #1]
 8007208:	3502      	adds	r5, #2
 800720a:	2200      	movs	r2, #0
 800720c:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8007210:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007214:	fbbc f9f3 	udiv	r9, ip, r3
 8007218:	4610      	mov	r0, r2
 800721a:	fb03 ca19 	mls	sl, r3, r9, ip
 800721e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8007222:	2f09      	cmp	r7, #9
 8007224:	d814      	bhi.n	8007250 <_strtol_l.constprop.0+0x9c>
 8007226:	463c      	mov	r4, r7
 8007228:	42a3      	cmp	r3, r4
 800722a:	dd20      	ble.n	800726e <_strtol_l.constprop.0+0xba>
 800722c:	1c57      	adds	r7, r2, #1
 800722e:	d007      	beq.n	8007240 <_strtol_l.constprop.0+0x8c>
 8007230:	4581      	cmp	r9, r0
 8007232:	d319      	bcc.n	8007268 <_strtol_l.constprop.0+0xb4>
 8007234:	d101      	bne.n	800723a <_strtol_l.constprop.0+0x86>
 8007236:	45a2      	cmp	sl, r4
 8007238:	db16      	blt.n	8007268 <_strtol_l.constprop.0+0xb4>
 800723a:	2201      	movs	r2, #1
 800723c:	fb00 4003 	mla	r0, r0, r3, r4
 8007240:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007244:	e7eb      	b.n	800721e <_strtol_l.constprop.0+0x6a>
 8007246:	2c2b      	cmp	r4, #43	; 0x2b
 8007248:	bf04      	itt	eq
 800724a:	782c      	ldrbeq	r4, [r5, #0]
 800724c:	1c95      	addeq	r5, r2, #2
 800724e:	e7ce      	b.n	80071ee <_strtol_l.constprop.0+0x3a>
 8007250:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007254:	2f19      	cmp	r7, #25
 8007256:	d801      	bhi.n	800725c <_strtol_l.constprop.0+0xa8>
 8007258:	3c37      	subs	r4, #55	; 0x37
 800725a:	e7e5      	b.n	8007228 <_strtol_l.constprop.0+0x74>
 800725c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8007260:	2f19      	cmp	r7, #25
 8007262:	d804      	bhi.n	800726e <_strtol_l.constprop.0+0xba>
 8007264:	3c57      	subs	r4, #87	; 0x57
 8007266:	e7df      	b.n	8007228 <_strtol_l.constprop.0+0x74>
 8007268:	f04f 32ff 	mov.w	r2, #4294967295
 800726c:	e7e8      	b.n	8007240 <_strtol_l.constprop.0+0x8c>
 800726e:	1c53      	adds	r3, r2, #1
 8007270:	d108      	bne.n	8007284 <_strtol_l.constprop.0+0xd0>
 8007272:	2322      	movs	r3, #34	; 0x22
 8007274:	4660      	mov	r0, ip
 8007276:	f8ce 3000 	str.w	r3, [lr]
 800727a:	f1b8 0f00 	cmp.w	r8, #0
 800727e:	d0a6      	beq.n	80071ce <_strtol_l.constprop.0+0x1a>
 8007280:	1e69      	subs	r1, r5, #1
 8007282:	e006      	b.n	8007292 <_strtol_l.constprop.0+0xde>
 8007284:	b106      	cbz	r6, 8007288 <_strtol_l.constprop.0+0xd4>
 8007286:	4240      	negs	r0, r0
 8007288:	f1b8 0f00 	cmp.w	r8, #0
 800728c:	d09f      	beq.n	80071ce <_strtol_l.constprop.0+0x1a>
 800728e:	2a00      	cmp	r2, #0
 8007290:	d1f6      	bne.n	8007280 <_strtol_l.constprop.0+0xcc>
 8007292:	f8c8 1000 	str.w	r1, [r8]
 8007296:	e79a      	b.n	80071ce <_strtol_l.constprop.0+0x1a>
 8007298:	2430      	movs	r4, #48	; 0x30
 800729a:	2b00      	cmp	r3, #0
 800729c:	d1b5      	bne.n	800720a <_strtol_l.constprop.0+0x56>
 800729e:	2308      	movs	r3, #8
 80072a0:	e7b3      	b.n	800720a <_strtol_l.constprop.0+0x56>
 80072a2:	2c30      	cmp	r4, #48	; 0x30
 80072a4:	d0a9      	beq.n	80071fa <_strtol_l.constprop.0+0x46>
 80072a6:	230a      	movs	r3, #10
 80072a8:	e7af      	b.n	800720a <_strtol_l.constprop.0+0x56>
 80072aa:	bf00      	nop
 80072ac:	080096c9 	.word	0x080096c9

080072b0 <_strtol_r>:
 80072b0:	f7ff bf80 	b.w	80071b4 <_strtol_l.constprop.0>

080072b4 <__ssputs_r>:
 80072b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072b8:	461f      	mov	r7, r3
 80072ba:	688e      	ldr	r6, [r1, #8]
 80072bc:	4682      	mov	sl, r0
 80072be:	42be      	cmp	r6, r7
 80072c0:	460c      	mov	r4, r1
 80072c2:	4690      	mov	r8, r2
 80072c4:	680b      	ldr	r3, [r1, #0]
 80072c6:	d82c      	bhi.n	8007322 <__ssputs_r+0x6e>
 80072c8:	898a      	ldrh	r2, [r1, #12]
 80072ca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80072ce:	d026      	beq.n	800731e <__ssputs_r+0x6a>
 80072d0:	6965      	ldr	r5, [r4, #20]
 80072d2:	6909      	ldr	r1, [r1, #16]
 80072d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80072d8:	eba3 0901 	sub.w	r9, r3, r1
 80072dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80072e0:	1c7b      	adds	r3, r7, #1
 80072e2:	444b      	add	r3, r9
 80072e4:	106d      	asrs	r5, r5, #1
 80072e6:	429d      	cmp	r5, r3
 80072e8:	bf38      	it	cc
 80072ea:	461d      	movcc	r5, r3
 80072ec:	0553      	lsls	r3, r2, #21
 80072ee:	d527      	bpl.n	8007340 <__ssputs_r+0x8c>
 80072f0:	4629      	mov	r1, r5
 80072f2:	f7fe fc19 	bl	8005b28 <_malloc_r>
 80072f6:	4606      	mov	r6, r0
 80072f8:	b360      	cbz	r0, 8007354 <__ssputs_r+0xa0>
 80072fa:	464a      	mov	r2, r9
 80072fc:	6921      	ldr	r1, [r4, #16]
 80072fe:	f7fd fd20 	bl	8004d42 <memcpy>
 8007302:	89a3      	ldrh	r3, [r4, #12]
 8007304:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800730c:	81a3      	strh	r3, [r4, #12]
 800730e:	6126      	str	r6, [r4, #16]
 8007310:	444e      	add	r6, r9
 8007312:	6026      	str	r6, [r4, #0]
 8007314:	463e      	mov	r6, r7
 8007316:	6165      	str	r5, [r4, #20]
 8007318:	eba5 0509 	sub.w	r5, r5, r9
 800731c:	60a5      	str	r5, [r4, #8]
 800731e:	42be      	cmp	r6, r7
 8007320:	d900      	bls.n	8007324 <__ssputs_r+0x70>
 8007322:	463e      	mov	r6, r7
 8007324:	4632      	mov	r2, r6
 8007326:	4641      	mov	r1, r8
 8007328:	6820      	ldr	r0, [r4, #0]
 800732a:	f7fd fc62 	bl	8004bf2 <memmove>
 800732e:	2000      	movs	r0, #0
 8007330:	68a3      	ldr	r3, [r4, #8]
 8007332:	1b9b      	subs	r3, r3, r6
 8007334:	60a3      	str	r3, [r4, #8]
 8007336:	6823      	ldr	r3, [r4, #0]
 8007338:	4433      	add	r3, r6
 800733a:	6023      	str	r3, [r4, #0]
 800733c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007340:	462a      	mov	r2, r5
 8007342:	f001 f90e 	bl	8008562 <_realloc_r>
 8007346:	4606      	mov	r6, r0
 8007348:	2800      	cmp	r0, #0
 800734a:	d1e0      	bne.n	800730e <__ssputs_r+0x5a>
 800734c:	4650      	mov	r0, sl
 800734e:	6921      	ldr	r1, [r4, #16]
 8007350:	f7fe fb7a 	bl	8005a48 <_free_r>
 8007354:	230c      	movs	r3, #12
 8007356:	f8ca 3000 	str.w	r3, [sl]
 800735a:	89a3      	ldrh	r3, [r4, #12]
 800735c:	f04f 30ff 	mov.w	r0, #4294967295
 8007360:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007364:	81a3      	strh	r3, [r4, #12]
 8007366:	e7e9      	b.n	800733c <__ssputs_r+0x88>

08007368 <_svfiprintf_r>:
 8007368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800736c:	4698      	mov	r8, r3
 800736e:	898b      	ldrh	r3, [r1, #12]
 8007370:	4607      	mov	r7, r0
 8007372:	061b      	lsls	r3, r3, #24
 8007374:	460d      	mov	r5, r1
 8007376:	4614      	mov	r4, r2
 8007378:	b09d      	sub	sp, #116	; 0x74
 800737a:	d50e      	bpl.n	800739a <_svfiprintf_r+0x32>
 800737c:	690b      	ldr	r3, [r1, #16]
 800737e:	b963      	cbnz	r3, 800739a <_svfiprintf_r+0x32>
 8007380:	2140      	movs	r1, #64	; 0x40
 8007382:	f7fe fbd1 	bl	8005b28 <_malloc_r>
 8007386:	6028      	str	r0, [r5, #0]
 8007388:	6128      	str	r0, [r5, #16]
 800738a:	b920      	cbnz	r0, 8007396 <_svfiprintf_r+0x2e>
 800738c:	230c      	movs	r3, #12
 800738e:	603b      	str	r3, [r7, #0]
 8007390:	f04f 30ff 	mov.w	r0, #4294967295
 8007394:	e0d0      	b.n	8007538 <_svfiprintf_r+0x1d0>
 8007396:	2340      	movs	r3, #64	; 0x40
 8007398:	616b      	str	r3, [r5, #20]
 800739a:	2300      	movs	r3, #0
 800739c:	9309      	str	r3, [sp, #36]	; 0x24
 800739e:	2320      	movs	r3, #32
 80073a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80073a4:	2330      	movs	r3, #48	; 0x30
 80073a6:	f04f 0901 	mov.w	r9, #1
 80073aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80073ae:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8007550 <_svfiprintf_r+0x1e8>
 80073b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80073b6:	4623      	mov	r3, r4
 80073b8:	469a      	mov	sl, r3
 80073ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80073be:	b10a      	cbz	r2, 80073c4 <_svfiprintf_r+0x5c>
 80073c0:	2a25      	cmp	r2, #37	; 0x25
 80073c2:	d1f9      	bne.n	80073b8 <_svfiprintf_r+0x50>
 80073c4:	ebba 0b04 	subs.w	fp, sl, r4
 80073c8:	d00b      	beq.n	80073e2 <_svfiprintf_r+0x7a>
 80073ca:	465b      	mov	r3, fp
 80073cc:	4622      	mov	r2, r4
 80073ce:	4629      	mov	r1, r5
 80073d0:	4638      	mov	r0, r7
 80073d2:	f7ff ff6f 	bl	80072b4 <__ssputs_r>
 80073d6:	3001      	adds	r0, #1
 80073d8:	f000 80a9 	beq.w	800752e <_svfiprintf_r+0x1c6>
 80073dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80073de:	445a      	add	r2, fp
 80073e0:	9209      	str	r2, [sp, #36]	; 0x24
 80073e2:	f89a 3000 	ldrb.w	r3, [sl]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	f000 80a1 	beq.w	800752e <_svfiprintf_r+0x1c6>
 80073ec:	2300      	movs	r3, #0
 80073ee:	f04f 32ff 	mov.w	r2, #4294967295
 80073f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073f6:	f10a 0a01 	add.w	sl, sl, #1
 80073fa:	9304      	str	r3, [sp, #16]
 80073fc:	9307      	str	r3, [sp, #28]
 80073fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007402:	931a      	str	r3, [sp, #104]	; 0x68
 8007404:	4654      	mov	r4, sl
 8007406:	2205      	movs	r2, #5
 8007408:	f814 1b01 	ldrb.w	r1, [r4], #1
 800740c:	4850      	ldr	r0, [pc, #320]	; (8007550 <_svfiprintf_r+0x1e8>)
 800740e:	f7fd fc8a 	bl	8004d26 <memchr>
 8007412:	9a04      	ldr	r2, [sp, #16]
 8007414:	b9d8      	cbnz	r0, 800744e <_svfiprintf_r+0xe6>
 8007416:	06d0      	lsls	r0, r2, #27
 8007418:	bf44      	itt	mi
 800741a:	2320      	movmi	r3, #32
 800741c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007420:	0711      	lsls	r1, r2, #28
 8007422:	bf44      	itt	mi
 8007424:	232b      	movmi	r3, #43	; 0x2b
 8007426:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800742a:	f89a 3000 	ldrb.w	r3, [sl]
 800742e:	2b2a      	cmp	r3, #42	; 0x2a
 8007430:	d015      	beq.n	800745e <_svfiprintf_r+0xf6>
 8007432:	4654      	mov	r4, sl
 8007434:	2000      	movs	r0, #0
 8007436:	f04f 0c0a 	mov.w	ip, #10
 800743a:	9a07      	ldr	r2, [sp, #28]
 800743c:	4621      	mov	r1, r4
 800743e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007442:	3b30      	subs	r3, #48	; 0x30
 8007444:	2b09      	cmp	r3, #9
 8007446:	d94d      	bls.n	80074e4 <_svfiprintf_r+0x17c>
 8007448:	b1b0      	cbz	r0, 8007478 <_svfiprintf_r+0x110>
 800744a:	9207      	str	r2, [sp, #28]
 800744c:	e014      	b.n	8007478 <_svfiprintf_r+0x110>
 800744e:	eba0 0308 	sub.w	r3, r0, r8
 8007452:	fa09 f303 	lsl.w	r3, r9, r3
 8007456:	4313      	orrs	r3, r2
 8007458:	46a2      	mov	sl, r4
 800745a:	9304      	str	r3, [sp, #16]
 800745c:	e7d2      	b.n	8007404 <_svfiprintf_r+0x9c>
 800745e:	9b03      	ldr	r3, [sp, #12]
 8007460:	1d19      	adds	r1, r3, #4
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	9103      	str	r1, [sp, #12]
 8007466:	2b00      	cmp	r3, #0
 8007468:	bfbb      	ittet	lt
 800746a:	425b      	neglt	r3, r3
 800746c:	f042 0202 	orrlt.w	r2, r2, #2
 8007470:	9307      	strge	r3, [sp, #28]
 8007472:	9307      	strlt	r3, [sp, #28]
 8007474:	bfb8      	it	lt
 8007476:	9204      	strlt	r2, [sp, #16]
 8007478:	7823      	ldrb	r3, [r4, #0]
 800747a:	2b2e      	cmp	r3, #46	; 0x2e
 800747c:	d10c      	bne.n	8007498 <_svfiprintf_r+0x130>
 800747e:	7863      	ldrb	r3, [r4, #1]
 8007480:	2b2a      	cmp	r3, #42	; 0x2a
 8007482:	d134      	bne.n	80074ee <_svfiprintf_r+0x186>
 8007484:	9b03      	ldr	r3, [sp, #12]
 8007486:	3402      	adds	r4, #2
 8007488:	1d1a      	adds	r2, r3, #4
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	9203      	str	r2, [sp, #12]
 800748e:	2b00      	cmp	r3, #0
 8007490:	bfb8      	it	lt
 8007492:	f04f 33ff 	movlt.w	r3, #4294967295
 8007496:	9305      	str	r3, [sp, #20]
 8007498:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8007554 <_svfiprintf_r+0x1ec>
 800749c:	2203      	movs	r2, #3
 800749e:	4650      	mov	r0, sl
 80074a0:	7821      	ldrb	r1, [r4, #0]
 80074a2:	f7fd fc40 	bl	8004d26 <memchr>
 80074a6:	b138      	cbz	r0, 80074b8 <_svfiprintf_r+0x150>
 80074a8:	2240      	movs	r2, #64	; 0x40
 80074aa:	9b04      	ldr	r3, [sp, #16]
 80074ac:	eba0 000a 	sub.w	r0, r0, sl
 80074b0:	4082      	lsls	r2, r0
 80074b2:	4313      	orrs	r3, r2
 80074b4:	3401      	adds	r4, #1
 80074b6:	9304      	str	r3, [sp, #16]
 80074b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074bc:	2206      	movs	r2, #6
 80074be:	4826      	ldr	r0, [pc, #152]	; (8007558 <_svfiprintf_r+0x1f0>)
 80074c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80074c4:	f7fd fc2f 	bl	8004d26 <memchr>
 80074c8:	2800      	cmp	r0, #0
 80074ca:	d038      	beq.n	800753e <_svfiprintf_r+0x1d6>
 80074cc:	4b23      	ldr	r3, [pc, #140]	; (800755c <_svfiprintf_r+0x1f4>)
 80074ce:	bb1b      	cbnz	r3, 8007518 <_svfiprintf_r+0x1b0>
 80074d0:	9b03      	ldr	r3, [sp, #12]
 80074d2:	3307      	adds	r3, #7
 80074d4:	f023 0307 	bic.w	r3, r3, #7
 80074d8:	3308      	adds	r3, #8
 80074da:	9303      	str	r3, [sp, #12]
 80074dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074de:	4433      	add	r3, r6
 80074e0:	9309      	str	r3, [sp, #36]	; 0x24
 80074e2:	e768      	b.n	80073b6 <_svfiprintf_r+0x4e>
 80074e4:	460c      	mov	r4, r1
 80074e6:	2001      	movs	r0, #1
 80074e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80074ec:	e7a6      	b.n	800743c <_svfiprintf_r+0xd4>
 80074ee:	2300      	movs	r3, #0
 80074f0:	f04f 0c0a 	mov.w	ip, #10
 80074f4:	4619      	mov	r1, r3
 80074f6:	3401      	adds	r4, #1
 80074f8:	9305      	str	r3, [sp, #20]
 80074fa:	4620      	mov	r0, r4
 80074fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007500:	3a30      	subs	r2, #48	; 0x30
 8007502:	2a09      	cmp	r2, #9
 8007504:	d903      	bls.n	800750e <_svfiprintf_r+0x1a6>
 8007506:	2b00      	cmp	r3, #0
 8007508:	d0c6      	beq.n	8007498 <_svfiprintf_r+0x130>
 800750a:	9105      	str	r1, [sp, #20]
 800750c:	e7c4      	b.n	8007498 <_svfiprintf_r+0x130>
 800750e:	4604      	mov	r4, r0
 8007510:	2301      	movs	r3, #1
 8007512:	fb0c 2101 	mla	r1, ip, r1, r2
 8007516:	e7f0      	b.n	80074fa <_svfiprintf_r+0x192>
 8007518:	ab03      	add	r3, sp, #12
 800751a:	9300      	str	r3, [sp, #0]
 800751c:	462a      	mov	r2, r5
 800751e:	4638      	mov	r0, r7
 8007520:	4b0f      	ldr	r3, [pc, #60]	; (8007560 <_svfiprintf_r+0x1f8>)
 8007522:	a904      	add	r1, sp, #16
 8007524:	f7fc fc44 	bl	8003db0 <_printf_float>
 8007528:	1c42      	adds	r2, r0, #1
 800752a:	4606      	mov	r6, r0
 800752c:	d1d6      	bne.n	80074dc <_svfiprintf_r+0x174>
 800752e:	89ab      	ldrh	r3, [r5, #12]
 8007530:	065b      	lsls	r3, r3, #25
 8007532:	f53f af2d 	bmi.w	8007390 <_svfiprintf_r+0x28>
 8007536:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007538:	b01d      	add	sp, #116	; 0x74
 800753a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800753e:	ab03      	add	r3, sp, #12
 8007540:	9300      	str	r3, [sp, #0]
 8007542:	462a      	mov	r2, r5
 8007544:	4638      	mov	r0, r7
 8007546:	4b06      	ldr	r3, [pc, #24]	; (8007560 <_svfiprintf_r+0x1f8>)
 8007548:	a904      	add	r1, sp, #16
 800754a:	f7fc fed1 	bl	80042f0 <_printf_i>
 800754e:	e7eb      	b.n	8007528 <_svfiprintf_r+0x1c0>
 8007550:	080097c9 	.word	0x080097c9
 8007554:	080097cf 	.word	0x080097cf
 8007558:	080097d3 	.word	0x080097d3
 800755c:	08003db1 	.word	0x08003db1
 8007560:	080072b5 	.word	0x080072b5

08007564 <_sungetc_r>:
 8007564:	b538      	push	{r3, r4, r5, lr}
 8007566:	1c4b      	adds	r3, r1, #1
 8007568:	4614      	mov	r4, r2
 800756a:	d103      	bne.n	8007574 <_sungetc_r+0x10>
 800756c:	f04f 35ff 	mov.w	r5, #4294967295
 8007570:	4628      	mov	r0, r5
 8007572:	bd38      	pop	{r3, r4, r5, pc}
 8007574:	8993      	ldrh	r3, [r2, #12]
 8007576:	b2cd      	uxtb	r5, r1
 8007578:	f023 0320 	bic.w	r3, r3, #32
 800757c:	8193      	strh	r3, [r2, #12]
 800757e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007580:	6852      	ldr	r2, [r2, #4]
 8007582:	b18b      	cbz	r3, 80075a8 <_sungetc_r+0x44>
 8007584:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007586:	4293      	cmp	r3, r2
 8007588:	dd08      	ble.n	800759c <_sungetc_r+0x38>
 800758a:	6823      	ldr	r3, [r4, #0]
 800758c:	1e5a      	subs	r2, r3, #1
 800758e:	6022      	str	r2, [r4, #0]
 8007590:	f803 5c01 	strb.w	r5, [r3, #-1]
 8007594:	6863      	ldr	r3, [r4, #4]
 8007596:	3301      	adds	r3, #1
 8007598:	6063      	str	r3, [r4, #4]
 800759a:	e7e9      	b.n	8007570 <_sungetc_r+0xc>
 800759c:	4621      	mov	r1, r4
 800759e:	f000 fbe2 	bl	8007d66 <__submore>
 80075a2:	2800      	cmp	r0, #0
 80075a4:	d0f1      	beq.n	800758a <_sungetc_r+0x26>
 80075a6:	e7e1      	b.n	800756c <_sungetc_r+0x8>
 80075a8:	6921      	ldr	r1, [r4, #16]
 80075aa:	6823      	ldr	r3, [r4, #0]
 80075ac:	b151      	cbz	r1, 80075c4 <_sungetc_r+0x60>
 80075ae:	4299      	cmp	r1, r3
 80075b0:	d208      	bcs.n	80075c4 <_sungetc_r+0x60>
 80075b2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80075b6:	42a9      	cmp	r1, r5
 80075b8:	d104      	bne.n	80075c4 <_sungetc_r+0x60>
 80075ba:	3b01      	subs	r3, #1
 80075bc:	3201      	adds	r2, #1
 80075be:	6023      	str	r3, [r4, #0]
 80075c0:	6062      	str	r2, [r4, #4]
 80075c2:	e7d5      	b.n	8007570 <_sungetc_r+0xc>
 80075c4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80075c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80075cc:	6363      	str	r3, [r4, #52]	; 0x34
 80075ce:	2303      	movs	r3, #3
 80075d0:	63a3      	str	r3, [r4, #56]	; 0x38
 80075d2:	4623      	mov	r3, r4
 80075d4:	f803 5f46 	strb.w	r5, [r3, #70]!
 80075d8:	6023      	str	r3, [r4, #0]
 80075da:	2301      	movs	r3, #1
 80075dc:	e7dc      	b.n	8007598 <_sungetc_r+0x34>

080075de <__ssrefill_r>:
 80075de:	b510      	push	{r4, lr}
 80075e0:	460c      	mov	r4, r1
 80075e2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80075e4:	b169      	cbz	r1, 8007602 <__ssrefill_r+0x24>
 80075e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80075ea:	4299      	cmp	r1, r3
 80075ec:	d001      	beq.n	80075f2 <__ssrefill_r+0x14>
 80075ee:	f7fe fa2b 	bl	8005a48 <_free_r>
 80075f2:	2000      	movs	r0, #0
 80075f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80075f6:	6360      	str	r0, [r4, #52]	; 0x34
 80075f8:	6063      	str	r3, [r4, #4]
 80075fa:	b113      	cbz	r3, 8007602 <__ssrefill_r+0x24>
 80075fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80075fe:	6023      	str	r3, [r4, #0]
 8007600:	bd10      	pop	{r4, pc}
 8007602:	6923      	ldr	r3, [r4, #16]
 8007604:	f04f 30ff 	mov.w	r0, #4294967295
 8007608:	6023      	str	r3, [r4, #0]
 800760a:	2300      	movs	r3, #0
 800760c:	6063      	str	r3, [r4, #4]
 800760e:	89a3      	ldrh	r3, [r4, #12]
 8007610:	f043 0320 	orr.w	r3, r3, #32
 8007614:	81a3      	strh	r3, [r4, #12]
 8007616:	e7f3      	b.n	8007600 <__ssrefill_r+0x22>

08007618 <__ssvfiscanf_r>:
 8007618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800761c:	460c      	mov	r4, r1
 800761e:	2100      	movs	r1, #0
 8007620:	4606      	mov	r6, r0
 8007622:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8007626:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800762a:	49a6      	ldr	r1, [pc, #664]	; (80078c4 <__ssvfiscanf_r+0x2ac>)
 800762c:	f10d 0804 	add.w	r8, sp, #4
 8007630:	91a0      	str	r1, [sp, #640]	; 0x280
 8007632:	49a5      	ldr	r1, [pc, #660]	; (80078c8 <__ssvfiscanf_r+0x2b0>)
 8007634:	4fa5      	ldr	r7, [pc, #660]	; (80078cc <__ssvfiscanf_r+0x2b4>)
 8007636:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80078d0 <__ssvfiscanf_r+0x2b8>
 800763a:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800763e:	91a1      	str	r1, [sp, #644]	; 0x284
 8007640:	9300      	str	r3, [sp, #0]
 8007642:	7813      	ldrb	r3, [r2, #0]
 8007644:	2b00      	cmp	r3, #0
 8007646:	f000 815a 	beq.w	80078fe <__ssvfiscanf_r+0x2e6>
 800764a:	5cf9      	ldrb	r1, [r7, r3]
 800764c:	1c55      	adds	r5, r2, #1
 800764e:	f011 0108 	ands.w	r1, r1, #8
 8007652:	d019      	beq.n	8007688 <__ssvfiscanf_r+0x70>
 8007654:	6863      	ldr	r3, [r4, #4]
 8007656:	2b00      	cmp	r3, #0
 8007658:	dd0f      	ble.n	800767a <__ssvfiscanf_r+0x62>
 800765a:	6823      	ldr	r3, [r4, #0]
 800765c:	781a      	ldrb	r2, [r3, #0]
 800765e:	5cba      	ldrb	r2, [r7, r2]
 8007660:	0712      	lsls	r2, r2, #28
 8007662:	d401      	bmi.n	8007668 <__ssvfiscanf_r+0x50>
 8007664:	462a      	mov	r2, r5
 8007666:	e7ec      	b.n	8007642 <__ssvfiscanf_r+0x2a>
 8007668:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800766a:	3301      	adds	r3, #1
 800766c:	3201      	adds	r2, #1
 800766e:	9245      	str	r2, [sp, #276]	; 0x114
 8007670:	6862      	ldr	r2, [r4, #4]
 8007672:	6023      	str	r3, [r4, #0]
 8007674:	3a01      	subs	r2, #1
 8007676:	6062      	str	r2, [r4, #4]
 8007678:	e7ec      	b.n	8007654 <__ssvfiscanf_r+0x3c>
 800767a:	4621      	mov	r1, r4
 800767c:	4630      	mov	r0, r6
 800767e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007680:	4798      	blx	r3
 8007682:	2800      	cmp	r0, #0
 8007684:	d0e9      	beq.n	800765a <__ssvfiscanf_r+0x42>
 8007686:	e7ed      	b.n	8007664 <__ssvfiscanf_r+0x4c>
 8007688:	2b25      	cmp	r3, #37	; 0x25
 800768a:	d012      	beq.n	80076b2 <__ssvfiscanf_r+0x9a>
 800768c:	469a      	mov	sl, r3
 800768e:	6863      	ldr	r3, [r4, #4]
 8007690:	2b00      	cmp	r3, #0
 8007692:	f340 8092 	ble.w	80077ba <__ssvfiscanf_r+0x1a2>
 8007696:	6822      	ldr	r2, [r4, #0]
 8007698:	7813      	ldrb	r3, [r2, #0]
 800769a:	4553      	cmp	r3, sl
 800769c:	f040 812f 	bne.w	80078fe <__ssvfiscanf_r+0x2e6>
 80076a0:	6863      	ldr	r3, [r4, #4]
 80076a2:	3201      	adds	r2, #1
 80076a4:	3b01      	subs	r3, #1
 80076a6:	6063      	str	r3, [r4, #4]
 80076a8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80076aa:	6022      	str	r2, [r4, #0]
 80076ac:	3301      	adds	r3, #1
 80076ae:	9345      	str	r3, [sp, #276]	; 0x114
 80076b0:	e7d8      	b.n	8007664 <__ssvfiscanf_r+0x4c>
 80076b2:	9141      	str	r1, [sp, #260]	; 0x104
 80076b4:	9143      	str	r1, [sp, #268]	; 0x10c
 80076b6:	7853      	ldrb	r3, [r2, #1]
 80076b8:	2b2a      	cmp	r3, #42	; 0x2a
 80076ba:	bf04      	itt	eq
 80076bc:	2310      	moveq	r3, #16
 80076be:	1c95      	addeq	r5, r2, #2
 80076c0:	f04f 020a 	mov.w	r2, #10
 80076c4:	bf08      	it	eq
 80076c6:	9341      	streq	r3, [sp, #260]	; 0x104
 80076c8:	46aa      	mov	sl, r5
 80076ca:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80076ce:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80076d2:	2b09      	cmp	r3, #9
 80076d4:	d91c      	bls.n	8007710 <__ssvfiscanf_r+0xf8>
 80076d6:	2203      	movs	r2, #3
 80076d8:	487d      	ldr	r0, [pc, #500]	; (80078d0 <__ssvfiscanf_r+0x2b8>)
 80076da:	f7fd fb24 	bl	8004d26 <memchr>
 80076de:	b138      	cbz	r0, 80076f0 <__ssvfiscanf_r+0xd8>
 80076e0:	2301      	movs	r3, #1
 80076e2:	4655      	mov	r5, sl
 80076e4:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80076e6:	eba0 0009 	sub.w	r0, r0, r9
 80076ea:	4083      	lsls	r3, r0
 80076ec:	4313      	orrs	r3, r2
 80076ee:	9341      	str	r3, [sp, #260]	; 0x104
 80076f0:	f815 3b01 	ldrb.w	r3, [r5], #1
 80076f4:	2b78      	cmp	r3, #120	; 0x78
 80076f6:	d806      	bhi.n	8007706 <__ssvfiscanf_r+0xee>
 80076f8:	2b57      	cmp	r3, #87	; 0x57
 80076fa:	d810      	bhi.n	800771e <__ssvfiscanf_r+0x106>
 80076fc:	2b25      	cmp	r3, #37	; 0x25
 80076fe:	d0c5      	beq.n	800768c <__ssvfiscanf_r+0x74>
 8007700:	d856      	bhi.n	80077b0 <__ssvfiscanf_r+0x198>
 8007702:	2b00      	cmp	r3, #0
 8007704:	d064      	beq.n	80077d0 <__ssvfiscanf_r+0x1b8>
 8007706:	2303      	movs	r3, #3
 8007708:	9347      	str	r3, [sp, #284]	; 0x11c
 800770a:	230a      	movs	r3, #10
 800770c:	9342      	str	r3, [sp, #264]	; 0x108
 800770e:	e075      	b.n	80077fc <__ssvfiscanf_r+0x1e4>
 8007710:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8007712:	4655      	mov	r5, sl
 8007714:	fb02 1103 	mla	r1, r2, r3, r1
 8007718:	3930      	subs	r1, #48	; 0x30
 800771a:	9143      	str	r1, [sp, #268]	; 0x10c
 800771c:	e7d4      	b.n	80076c8 <__ssvfiscanf_r+0xb0>
 800771e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8007722:	2a20      	cmp	r2, #32
 8007724:	d8ef      	bhi.n	8007706 <__ssvfiscanf_r+0xee>
 8007726:	a101      	add	r1, pc, #4	; (adr r1, 800772c <__ssvfiscanf_r+0x114>)
 8007728:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800772c:	080077df 	.word	0x080077df
 8007730:	08007707 	.word	0x08007707
 8007734:	08007707 	.word	0x08007707
 8007738:	0800783d 	.word	0x0800783d
 800773c:	08007707 	.word	0x08007707
 8007740:	08007707 	.word	0x08007707
 8007744:	08007707 	.word	0x08007707
 8007748:	08007707 	.word	0x08007707
 800774c:	08007707 	.word	0x08007707
 8007750:	08007707 	.word	0x08007707
 8007754:	08007707 	.word	0x08007707
 8007758:	08007853 	.word	0x08007853
 800775c:	08007839 	.word	0x08007839
 8007760:	080077b7 	.word	0x080077b7
 8007764:	080077b7 	.word	0x080077b7
 8007768:	080077b7 	.word	0x080077b7
 800776c:	08007707 	.word	0x08007707
 8007770:	080077f5 	.word	0x080077f5
 8007774:	08007707 	.word	0x08007707
 8007778:	08007707 	.word	0x08007707
 800777c:	08007707 	.word	0x08007707
 8007780:	08007707 	.word	0x08007707
 8007784:	08007863 	.word	0x08007863
 8007788:	08007831 	.word	0x08007831
 800778c:	080077d7 	.word	0x080077d7
 8007790:	08007707 	.word	0x08007707
 8007794:	08007707 	.word	0x08007707
 8007798:	0800785f 	.word	0x0800785f
 800779c:	08007707 	.word	0x08007707
 80077a0:	08007839 	.word	0x08007839
 80077a4:	08007707 	.word	0x08007707
 80077a8:	08007707 	.word	0x08007707
 80077ac:	080077df 	.word	0x080077df
 80077b0:	3b45      	subs	r3, #69	; 0x45
 80077b2:	2b02      	cmp	r3, #2
 80077b4:	d8a7      	bhi.n	8007706 <__ssvfiscanf_r+0xee>
 80077b6:	2305      	movs	r3, #5
 80077b8:	e01f      	b.n	80077fa <__ssvfiscanf_r+0x1e2>
 80077ba:	4621      	mov	r1, r4
 80077bc:	4630      	mov	r0, r6
 80077be:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80077c0:	4798      	blx	r3
 80077c2:	2800      	cmp	r0, #0
 80077c4:	f43f af67 	beq.w	8007696 <__ssvfiscanf_r+0x7e>
 80077c8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80077ca:	2800      	cmp	r0, #0
 80077cc:	f040 808d 	bne.w	80078ea <__ssvfiscanf_r+0x2d2>
 80077d0:	f04f 30ff 	mov.w	r0, #4294967295
 80077d4:	e08f      	b.n	80078f6 <__ssvfiscanf_r+0x2de>
 80077d6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80077d8:	f042 0220 	orr.w	r2, r2, #32
 80077dc:	9241      	str	r2, [sp, #260]	; 0x104
 80077de:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80077e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077e4:	9241      	str	r2, [sp, #260]	; 0x104
 80077e6:	2210      	movs	r2, #16
 80077e8:	2b6f      	cmp	r3, #111	; 0x6f
 80077ea:	bf34      	ite	cc
 80077ec:	2303      	movcc	r3, #3
 80077ee:	2304      	movcs	r3, #4
 80077f0:	9242      	str	r2, [sp, #264]	; 0x108
 80077f2:	e002      	b.n	80077fa <__ssvfiscanf_r+0x1e2>
 80077f4:	2300      	movs	r3, #0
 80077f6:	9342      	str	r3, [sp, #264]	; 0x108
 80077f8:	2303      	movs	r3, #3
 80077fa:	9347      	str	r3, [sp, #284]	; 0x11c
 80077fc:	6863      	ldr	r3, [r4, #4]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	dd3d      	ble.n	800787e <__ssvfiscanf_r+0x266>
 8007802:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007804:	0659      	lsls	r1, r3, #25
 8007806:	d404      	bmi.n	8007812 <__ssvfiscanf_r+0x1fa>
 8007808:	6823      	ldr	r3, [r4, #0]
 800780a:	781a      	ldrb	r2, [r3, #0]
 800780c:	5cba      	ldrb	r2, [r7, r2]
 800780e:	0712      	lsls	r2, r2, #28
 8007810:	d43c      	bmi.n	800788c <__ssvfiscanf_r+0x274>
 8007812:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8007814:	2b02      	cmp	r3, #2
 8007816:	dc4b      	bgt.n	80078b0 <__ssvfiscanf_r+0x298>
 8007818:	466b      	mov	r3, sp
 800781a:	4622      	mov	r2, r4
 800781c:	4630      	mov	r0, r6
 800781e:	a941      	add	r1, sp, #260	; 0x104
 8007820:	f000 f872 	bl	8007908 <_scanf_chars>
 8007824:	2801      	cmp	r0, #1
 8007826:	d06a      	beq.n	80078fe <__ssvfiscanf_r+0x2e6>
 8007828:	2802      	cmp	r0, #2
 800782a:	f47f af1b 	bne.w	8007664 <__ssvfiscanf_r+0x4c>
 800782e:	e7cb      	b.n	80077c8 <__ssvfiscanf_r+0x1b0>
 8007830:	2308      	movs	r3, #8
 8007832:	9342      	str	r3, [sp, #264]	; 0x108
 8007834:	2304      	movs	r3, #4
 8007836:	e7e0      	b.n	80077fa <__ssvfiscanf_r+0x1e2>
 8007838:	220a      	movs	r2, #10
 800783a:	e7d5      	b.n	80077e8 <__ssvfiscanf_r+0x1d0>
 800783c:	4629      	mov	r1, r5
 800783e:	4640      	mov	r0, r8
 8007840:	f000 fa58 	bl	8007cf4 <__sccl>
 8007844:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007846:	4605      	mov	r5, r0
 8007848:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800784c:	9341      	str	r3, [sp, #260]	; 0x104
 800784e:	2301      	movs	r3, #1
 8007850:	e7d3      	b.n	80077fa <__ssvfiscanf_r+0x1e2>
 8007852:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007854:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007858:	9341      	str	r3, [sp, #260]	; 0x104
 800785a:	2300      	movs	r3, #0
 800785c:	e7cd      	b.n	80077fa <__ssvfiscanf_r+0x1e2>
 800785e:	2302      	movs	r3, #2
 8007860:	e7cb      	b.n	80077fa <__ssvfiscanf_r+0x1e2>
 8007862:	9841      	ldr	r0, [sp, #260]	; 0x104
 8007864:	06c3      	lsls	r3, r0, #27
 8007866:	f53f aefd 	bmi.w	8007664 <__ssvfiscanf_r+0x4c>
 800786a:	9b00      	ldr	r3, [sp, #0]
 800786c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800786e:	1d19      	adds	r1, r3, #4
 8007870:	9100      	str	r1, [sp, #0]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	07c0      	lsls	r0, r0, #31
 8007876:	bf4c      	ite	mi
 8007878:	801a      	strhmi	r2, [r3, #0]
 800787a:	601a      	strpl	r2, [r3, #0]
 800787c:	e6f2      	b.n	8007664 <__ssvfiscanf_r+0x4c>
 800787e:	4621      	mov	r1, r4
 8007880:	4630      	mov	r0, r6
 8007882:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007884:	4798      	blx	r3
 8007886:	2800      	cmp	r0, #0
 8007888:	d0bb      	beq.n	8007802 <__ssvfiscanf_r+0x1ea>
 800788a:	e79d      	b.n	80077c8 <__ssvfiscanf_r+0x1b0>
 800788c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800788e:	3201      	adds	r2, #1
 8007890:	9245      	str	r2, [sp, #276]	; 0x114
 8007892:	6862      	ldr	r2, [r4, #4]
 8007894:	3a01      	subs	r2, #1
 8007896:	2a00      	cmp	r2, #0
 8007898:	6062      	str	r2, [r4, #4]
 800789a:	dd02      	ble.n	80078a2 <__ssvfiscanf_r+0x28a>
 800789c:	3301      	adds	r3, #1
 800789e:	6023      	str	r3, [r4, #0]
 80078a0:	e7b2      	b.n	8007808 <__ssvfiscanf_r+0x1f0>
 80078a2:	4621      	mov	r1, r4
 80078a4:	4630      	mov	r0, r6
 80078a6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80078a8:	4798      	blx	r3
 80078aa:	2800      	cmp	r0, #0
 80078ac:	d0ac      	beq.n	8007808 <__ssvfiscanf_r+0x1f0>
 80078ae:	e78b      	b.n	80077c8 <__ssvfiscanf_r+0x1b0>
 80078b0:	2b04      	cmp	r3, #4
 80078b2:	dc0f      	bgt.n	80078d4 <__ssvfiscanf_r+0x2bc>
 80078b4:	466b      	mov	r3, sp
 80078b6:	4622      	mov	r2, r4
 80078b8:	4630      	mov	r0, r6
 80078ba:	a941      	add	r1, sp, #260	; 0x104
 80078bc:	f000 f87e 	bl	80079bc <_scanf_i>
 80078c0:	e7b0      	b.n	8007824 <__ssvfiscanf_r+0x20c>
 80078c2:	bf00      	nop
 80078c4:	08007565 	.word	0x08007565
 80078c8:	080075df 	.word	0x080075df
 80078cc:	080096c9 	.word	0x080096c9
 80078d0:	080097cf 	.word	0x080097cf
 80078d4:	4b0b      	ldr	r3, [pc, #44]	; (8007904 <__ssvfiscanf_r+0x2ec>)
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	f43f aec4 	beq.w	8007664 <__ssvfiscanf_r+0x4c>
 80078dc:	466b      	mov	r3, sp
 80078de:	4622      	mov	r2, r4
 80078e0:	4630      	mov	r0, r6
 80078e2:	a941      	add	r1, sp, #260	; 0x104
 80078e4:	f7fc fe26 	bl	8004534 <_scanf_float>
 80078e8:	e79c      	b.n	8007824 <__ssvfiscanf_r+0x20c>
 80078ea:	89a3      	ldrh	r3, [r4, #12]
 80078ec:	f013 0f40 	tst.w	r3, #64	; 0x40
 80078f0:	bf18      	it	ne
 80078f2:	f04f 30ff 	movne.w	r0, #4294967295
 80078f6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80078fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078fe:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007900:	e7f9      	b.n	80078f6 <__ssvfiscanf_r+0x2de>
 8007902:	bf00      	nop
 8007904:	08004535 	.word	0x08004535

08007908 <_scanf_chars>:
 8007908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800790c:	4615      	mov	r5, r2
 800790e:	688a      	ldr	r2, [r1, #8]
 8007910:	4680      	mov	r8, r0
 8007912:	460c      	mov	r4, r1
 8007914:	b932      	cbnz	r2, 8007924 <_scanf_chars+0x1c>
 8007916:	698a      	ldr	r2, [r1, #24]
 8007918:	2a00      	cmp	r2, #0
 800791a:	bf0c      	ite	eq
 800791c:	2201      	moveq	r2, #1
 800791e:	f04f 32ff 	movne.w	r2, #4294967295
 8007922:	608a      	str	r2, [r1, #8]
 8007924:	2700      	movs	r7, #0
 8007926:	6822      	ldr	r2, [r4, #0]
 8007928:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80079b8 <_scanf_chars+0xb0>
 800792c:	06d1      	lsls	r1, r2, #27
 800792e:	bf5f      	itttt	pl
 8007930:	681a      	ldrpl	r2, [r3, #0]
 8007932:	1d11      	addpl	r1, r2, #4
 8007934:	6019      	strpl	r1, [r3, #0]
 8007936:	6816      	ldrpl	r6, [r2, #0]
 8007938:	69a0      	ldr	r0, [r4, #24]
 800793a:	b188      	cbz	r0, 8007960 <_scanf_chars+0x58>
 800793c:	2801      	cmp	r0, #1
 800793e:	d107      	bne.n	8007950 <_scanf_chars+0x48>
 8007940:	682b      	ldr	r3, [r5, #0]
 8007942:	781a      	ldrb	r2, [r3, #0]
 8007944:	6963      	ldr	r3, [r4, #20]
 8007946:	5c9b      	ldrb	r3, [r3, r2]
 8007948:	b953      	cbnz	r3, 8007960 <_scanf_chars+0x58>
 800794a:	2f00      	cmp	r7, #0
 800794c:	d031      	beq.n	80079b2 <_scanf_chars+0xaa>
 800794e:	e022      	b.n	8007996 <_scanf_chars+0x8e>
 8007950:	2802      	cmp	r0, #2
 8007952:	d120      	bne.n	8007996 <_scanf_chars+0x8e>
 8007954:	682b      	ldr	r3, [r5, #0]
 8007956:	781b      	ldrb	r3, [r3, #0]
 8007958:	f819 3003 	ldrb.w	r3, [r9, r3]
 800795c:	071b      	lsls	r3, r3, #28
 800795e:	d41a      	bmi.n	8007996 <_scanf_chars+0x8e>
 8007960:	6823      	ldr	r3, [r4, #0]
 8007962:	3701      	adds	r7, #1
 8007964:	06da      	lsls	r2, r3, #27
 8007966:	bf5e      	ittt	pl
 8007968:	682b      	ldrpl	r3, [r5, #0]
 800796a:	781b      	ldrbpl	r3, [r3, #0]
 800796c:	f806 3b01 	strbpl.w	r3, [r6], #1
 8007970:	682a      	ldr	r2, [r5, #0]
 8007972:	686b      	ldr	r3, [r5, #4]
 8007974:	3201      	adds	r2, #1
 8007976:	602a      	str	r2, [r5, #0]
 8007978:	68a2      	ldr	r2, [r4, #8]
 800797a:	3b01      	subs	r3, #1
 800797c:	3a01      	subs	r2, #1
 800797e:	606b      	str	r3, [r5, #4]
 8007980:	60a2      	str	r2, [r4, #8]
 8007982:	b142      	cbz	r2, 8007996 <_scanf_chars+0x8e>
 8007984:	2b00      	cmp	r3, #0
 8007986:	dcd7      	bgt.n	8007938 <_scanf_chars+0x30>
 8007988:	4629      	mov	r1, r5
 800798a:	4640      	mov	r0, r8
 800798c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007990:	4798      	blx	r3
 8007992:	2800      	cmp	r0, #0
 8007994:	d0d0      	beq.n	8007938 <_scanf_chars+0x30>
 8007996:	6823      	ldr	r3, [r4, #0]
 8007998:	f013 0310 	ands.w	r3, r3, #16
 800799c:	d105      	bne.n	80079aa <_scanf_chars+0xa2>
 800799e:	68e2      	ldr	r2, [r4, #12]
 80079a0:	3201      	adds	r2, #1
 80079a2:	60e2      	str	r2, [r4, #12]
 80079a4:	69a2      	ldr	r2, [r4, #24]
 80079a6:	b102      	cbz	r2, 80079aa <_scanf_chars+0xa2>
 80079a8:	7033      	strb	r3, [r6, #0]
 80079aa:	2000      	movs	r0, #0
 80079ac:	6923      	ldr	r3, [r4, #16]
 80079ae:	443b      	add	r3, r7
 80079b0:	6123      	str	r3, [r4, #16]
 80079b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079b6:	bf00      	nop
 80079b8:	080096c9 	.word	0x080096c9

080079bc <_scanf_i>:
 80079bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079c0:	460c      	mov	r4, r1
 80079c2:	4698      	mov	r8, r3
 80079c4:	4b72      	ldr	r3, [pc, #456]	; (8007b90 <_scanf_i+0x1d4>)
 80079c6:	b087      	sub	sp, #28
 80079c8:	4682      	mov	sl, r0
 80079ca:	4616      	mov	r6, r2
 80079cc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80079d0:	ab03      	add	r3, sp, #12
 80079d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80079d6:	4b6f      	ldr	r3, [pc, #444]	; (8007b94 <_scanf_i+0x1d8>)
 80079d8:	69a1      	ldr	r1, [r4, #24]
 80079da:	4a6f      	ldr	r2, [pc, #444]	; (8007b98 <_scanf_i+0x1dc>)
 80079dc:	4627      	mov	r7, r4
 80079de:	2903      	cmp	r1, #3
 80079e0:	bf18      	it	ne
 80079e2:	461a      	movne	r2, r3
 80079e4:	68a3      	ldr	r3, [r4, #8]
 80079e6:	9201      	str	r2, [sp, #4]
 80079e8:	1e5a      	subs	r2, r3, #1
 80079ea:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80079ee:	bf81      	itttt	hi
 80079f0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80079f4:	eb03 0905 	addhi.w	r9, r3, r5
 80079f8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80079fc:	60a3      	strhi	r3, [r4, #8]
 80079fe:	f857 3b1c 	ldr.w	r3, [r7], #28
 8007a02:	bf98      	it	ls
 8007a04:	f04f 0900 	movls.w	r9, #0
 8007a08:	463d      	mov	r5, r7
 8007a0a:	f04f 0b00 	mov.w	fp, #0
 8007a0e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8007a12:	6023      	str	r3, [r4, #0]
 8007a14:	6831      	ldr	r1, [r6, #0]
 8007a16:	ab03      	add	r3, sp, #12
 8007a18:	2202      	movs	r2, #2
 8007a1a:	7809      	ldrb	r1, [r1, #0]
 8007a1c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8007a20:	f7fd f981 	bl	8004d26 <memchr>
 8007a24:	b328      	cbz	r0, 8007a72 <_scanf_i+0xb6>
 8007a26:	f1bb 0f01 	cmp.w	fp, #1
 8007a2a:	d159      	bne.n	8007ae0 <_scanf_i+0x124>
 8007a2c:	6862      	ldr	r2, [r4, #4]
 8007a2e:	b92a      	cbnz	r2, 8007a3c <_scanf_i+0x80>
 8007a30:	2308      	movs	r3, #8
 8007a32:	6822      	ldr	r2, [r4, #0]
 8007a34:	6063      	str	r3, [r4, #4]
 8007a36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a3a:	6022      	str	r2, [r4, #0]
 8007a3c:	6822      	ldr	r2, [r4, #0]
 8007a3e:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8007a42:	6022      	str	r2, [r4, #0]
 8007a44:	68a2      	ldr	r2, [r4, #8]
 8007a46:	1e51      	subs	r1, r2, #1
 8007a48:	60a1      	str	r1, [r4, #8]
 8007a4a:	b192      	cbz	r2, 8007a72 <_scanf_i+0xb6>
 8007a4c:	6832      	ldr	r2, [r6, #0]
 8007a4e:	1c51      	adds	r1, r2, #1
 8007a50:	6031      	str	r1, [r6, #0]
 8007a52:	7812      	ldrb	r2, [r2, #0]
 8007a54:	f805 2b01 	strb.w	r2, [r5], #1
 8007a58:	6872      	ldr	r2, [r6, #4]
 8007a5a:	3a01      	subs	r2, #1
 8007a5c:	2a00      	cmp	r2, #0
 8007a5e:	6072      	str	r2, [r6, #4]
 8007a60:	dc07      	bgt.n	8007a72 <_scanf_i+0xb6>
 8007a62:	4631      	mov	r1, r6
 8007a64:	4650      	mov	r0, sl
 8007a66:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8007a6a:	4790      	blx	r2
 8007a6c:	2800      	cmp	r0, #0
 8007a6e:	f040 8085 	bne.w	8007b7c <_scanf_i+0x1c0>
 8007a72:	f10b 0b01 	add.w	fp, fp, #1
 8007a76:	f1bb 0f03 	cmp.w	fp, #3
 8007a7a:	d1cb      	bne.n	8007a14 <_scanf_i+0x58>
 8007a7c:	6863      	ldr	r3, [r4, #4]
 8007a7e:	b90b      	cbnz	r3, 8007a84 <_scanf_i+0xc8>
 8007a80:	230a      	movs	r3, #10
 8007a82:	6063      	str	r3, [r4, #4]
 8007a84:	6863      	ldr	r3, [r4, #4]
 8007a86:	4945      	ldr	r1, [pc, #276]	; (8007b9c <_scanf_i+0x1e0>)
 8007a88:	6960      	ldr	r0, [r4, #20]
 8007a8a:	1ac9      	subs	r1, r1, r3
 8007a8c:	f000 f932 	bl	8007cf4 <__sccl>
 8007a90:	f04f 0b00 	mov.w	fp, #0
 8007a94:	68a3      	ldr	r3, [r4, #8]
 8007a96:	6822      	ldr	r2, [r4, #0]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d03d      	beq.n	8007b18 <_scanf_i+0x15c>
 8007a9c:	6831      	ldr	r1, [r6, #0]
 8007a9e:	6960      	ldr	r0, [r4, #20]
 8007aa0:	f891 c000 	ldrb.w	ip, [r1]
 8007aa4:	f810 000c 	ldrb.w	r0, [r0, ip]
 8007aa8:	2800      	cmp	r0, #0
 8007aaa:	d035      	beq.n	8007b18 <_scanf_i+0x15c>
 8007aac:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8007ab0:	d124      	bne.n	8007afc <_scanf_i+0x140>
 8007ab2:	0510      	lsls	r0, r2, #20
 8007ab4:	d522      	bpl.n	8007afc <_scanf_i+0x140>
 8007ab6:	f10b 0b01 	add.w	fp, fp, #1
 8007aba:	f1b9 0f00 	cmp.w	r9, #0
 8007abe:	d003      	beq.n	8007ac8 <_scanf_i+0x10c>
 8007ac0:	3301      	adds	r3, #1
 8007ac2:	f109 39ff 	add.w	r9, r9, #4294967295
 8007ac6:	60a3      	str	r3, [r4, #8]
 8007ac8:	6873      	ldr	r3, [r6, #4]
 8007aca:	3b01      	subs	r3, #1
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	6073      	str	r3, [r6, #4]
 8007ad0:	dd1b      	ble.n	8007b0a <_scanf_i+0x14e>
 8007ad2:	6833      	ldr	r3, [r6, #0]
 8007ad4:	3301      	adds	r3, #1
 8007ad6:	6033      	str	r3, [r6, #0]
 8007ad8:	68a3      	ldr	r3, [r4, #8]
 8007ada:	3b01      	subs	r3, #1
 8007adc:	60a3      	str	r3, [r4, #8]
 8007ade:	e7d9      	b.n	8007a94 <_scanf_i+0xd8>
 8007ae0:	f1bb 0f02 	cmp.w	fp, #2
 8007ae4:	d1ae      	bne.n	8007a44 <_scanf_i+0x88>
 8007ae6:	6822      	ldr	r2, [r4, #0]
 8007ae8:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8007aec:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8007af0:	d1bf      	bne.n	8007a72 <_scanf_i+0xb6>
 8007af2:	2310      	movs	r3, #16
 8007af4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007af8:	6063      	str	r3, [r4, #4]
 8007afa:	e7a2      	b.n	8007a42 <_scanf_i+0x86>
 8007afc:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8007b00:	6022      	str	r2, [r4, #0]
 8007b02:	780b      	ldrb	r3, [r1, #0]
 8007b04:	f805 3b01 	strb.w	r3, [r5], #1
 8007b08:	e7de      	b.n	8007ac8 <_scanf_i+0x10c>
 8007b0a:	4631      	mov	r1, r6
 8007b0c:	4650      	mov	r0, sl
 8007b0e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007b12:	4798      	blx	r3
 8007b14:	2800      	cmp	r0, #0
 8007b16:	d0df      	beq.n	8007ad8 <_scanf_i+0x11c>
 8007b18:	6823      	ldr	r3, [r4, #0]
 8007b1a:	05d9      	lsls	r1, r3, #23
 8007b1c:	d50d      	bpl.n	8007b3a <_scanf_i+0x17e>
 8007b1e:	42bd      	cmp	r5, r7
 8007b20:	d909      	bls.n	8007b36 <_scanf_i+0x17a>
 8007b22:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007b26:	4632      	mov	r2, r6
 8007b28:	4650      	mov	r0, sl
 8007b2a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007b2e:	f105 39ff 	add.w	r9, r5, #4294967295
 8007b32:	4798      	blx	r3
 8007b34:	464d      	mov	r5, r9
 8007b36:	42bd      	cmp	r5, r7
 8007b38:	d028      	beq.n	8007b8c <_scanf_i+0x1d0>
 8007b3a:	6822      	ldr	r2, [r4, #0]
 8007b3c:	f012 0210 	ands.w	r2, r2, #16
 8007b40:	d113      	bne.n	8007b6a <_scanf_i+0x1ae>
 8007b42:	702a      	strb	r2, [r5, #0]
 8007b44:	4639      	mov	r1, r7
 8007b46:	6863      	ldr	r3, [r4, #4]
 8007b48:	4650      	mov	r0, sl
 8007b4a:	9e01      	ldr	r6, [sp, #4]
 8007b4c:	47b0      	blx	r6
 8007b4e:	f8d8 3000 	ldr.w	r3, [r8]
 8007b52:	6821      	ldr	r1, [r4, #0]
 8007b54:	1d1a      	adds	r2, r3, #4
 8007b56:	f8c8 2000 	str.w	r2, [r8]
 8007b5a:	f011 0f20 	tst.w	r1, #32
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	d00f      	beq.n	8007b82 <_scanf_i+0x1c6>
 8007b62:	6018      	str	r0, [r3, #0]
 8007b64:	68e3      	ldr	r3, [r4, #12]
 8007b66:	3301      	adds	r3, #1
 8007b68:	60e3      	str	r3, [r4, #12]
 8007b6a:	2000      	movs	r0, #0
 8007b6c:	6923      	ldr	r3, [r4, #16]
 8007b6e:	1bed      	subs	r5, r5, r7
 8007b70:	445d      	add	r5, fp
 8007b72:	442b      	add	r3, r5
 8007b74:	6123      	str	r3, [r4, #16]
 8007b76:	b007      	add	sp, #28
 8007b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b7c:	f04f 0b00 	mov.w	fp, #0
 8007b80:	e7ca      	b.n	8007b18 <_scanf_i+0x15c>
 8007b82:	07ca      	lsls	r2, r1, #31
 8007b84:	bf4c      	ite	mi
 8007b86:	8018      	strhmi	r0, [r3, #0]
 8007b88:	6018      	strpl	r0, [r3, #0]
 8007b8a:	e7eb      	b.n	8007b64 <_scanf_i+0x1a8>
 8007b8c:	2001      	movs	r0, #1
 8007b8e:	e7f2      	b.n	8007b76 <_scanf_i+0x1ba>
 8007b90:	08008cac 	.word	0x08008cac
 8007b94:	080086a5 	.word	0x080086a5
 8007b98:	080072b1 	.word	0x080072b1
 8007b9c:	080097ea 	.word	0x080097ea

08007ba0 <__sflush_r>:
 8007ba0:	898a      	ldrh	r2, [r1, #12]
 8007ba2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ba4:	4605      	mov	r5, r0
 8007ba6:	0710      	lsls	r0, r2, #28
 8007ba8:	460c      	mov	r4, r1
 8007baa:	d457      	bmi.n	8007c5c <__sflush_r+0xbc>
 8007bac:	684b      	ldr	r3, [r1, #4]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	dc04      	bgt.n	8007bbc <__sflush_r+0x1c>
 8007bb2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	dc01      	bgt.n	8007bbc <__sflush_r+0x1c>
 8007bb8:	2000      	movs	r0, #0
 8007bba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007bbe:	2e00      	cmp	r6, #0
 8007bc0:	d0fa      	beq.n	8007bb8 <__sflush_r+0x18>
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007bc8:	682f      	ldr	r7, [r5, #0]
 8007bca:	6a21      	ldr	r1, [r4, #32]
 8007bcc:	602b      	str	r3, [r5, #0]
 8007bce:	d032      	beq.n	8007c36 <__sflush_r+0x96>
 8007bd0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007bd2:	89a3      	ldrh	r3, [r4, #12]
 8007bd4:	075a      	lsls	r2, r3, #29
 8007bd6:	d505      	bpl.n	8007be4 <__sflush_r+0x44>
 8007bd8:	6863      	ldr	r3, [r4, #4]
 8007bda:	1ac0      	subs	r0, r0, r3
 8007bdc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007bde:	b10b      	cbz	r3, 8007be4 <__sflush_r+0x44>
 8007be0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007be2:	1ac0      	subs	r0, r0, r3
 8007be4:	2300      	movs	r3, #0
 8007be6:	4602      	mov	r2, r0
 8007be8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007bea:	4628      	mov	r0, r5
 8007bec:	6a21      	ldr	r1, [r4, #32]
 8007bee:	47b0      	blx	r6
 8007bf0:	1c43      	adds	r3, r0, #1
 8007bf2:	89a3      	ldrh	r3, [r4, #12]
 8007bf4:	d106      	bne.n	8007c04 <__sflush_r+0x64>
 8007bf6:	6829      	ldr	r1, [r5, #0]
 8007bf8:	291d      	cmp	r1, #29
 8007bfa:	d82b      	bhi.n	8007c54 <__sflush_r+0xb4>
 8007bfc:	4a28      	ldr	r2, [pc, #160]	; (8007ca0 <__sflush_r+0x100>)
 8007bfe:	410a      	asrs	r2, r1
 8007c00:	07d6      	lsls	r6, r2, #31
 8007c02:	d427      	bmi.n	8007c54 <__sflush_r+0xb4>
 8007c04:	2200      	movs	r2, #0
 8007c06:	6062      	str	r2, [r4, #4]
 8007c08:	6922      	ldr	r2, [r4, #16]
 8007c0a:	04d9      	lsls	r1, r3, #19
 8007c0c:	6022      	str	r2, [r4, #0]
 8007c0e:	d504      	bpl.n	8007c1a <__sflush_r+0x7a>
 8007c10:	1c42      	adds	r2, r0, #1
 8007c12:	d101      	bne.n	8007c18 <__sflush_r+0x78>
 8007c14:	682b      	ldr	r3, [r5, #0]
 8007c16:	b903      	cbnz	r3, 8007c1a <__sflush_r+0x7a>
 8007c18:	6560      	str	r0, [r4, #84]	; 0x54
 8007c1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c1c:	602f      	str	r7, [r5, #0]
 8007c1e:	2900      	cmp	r1, #0
 8007c20:	d0ca      	beq.n	8007bb8 <__sflush_r+0x18>
 8007c22:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c26:	4299      	cmp	r1, r3
 8007c28:	d002      	beq.n	8007c30 <__sflush_r+0x90>
 8007c2a:	4628      	mov	r0, r5
 8007c2c:	f7fd ff0c 	bl	8005a48 <_free_r>
 8007c30:	2000      	movs	r0, #0
 8007c32:	6360      	str	r0, [r4, #52]	; 0x34
 8007c34:	e7c1      	b.n	8007bba <__sflush_r+0x1a>
 8007c36:	2301      	movs	r3, #1
 8007c38:	4628      	mov	r0, r5
 8007c3a:	47b0      	blx	r6
 8007c3c:	1c41      	adds	r1, r0, #1
 8007c3e:	d1c8      	bne.n	8007bd2 <__sflush_r+0x32>
 8007c40:	682b      	ldr	r3, [r5, #0]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d0c5      	beq.n	8007bd2 <__sflush_r+0x32>
 8007c46:	2b1d      	cmp	r3, #29
 8007c48:	d001      	beq.n	8007c4e <__sflush_r+0xae>
 8007c4a:	2b16      	cmp	r3, #22
 8007c4c:	d101      	bne.n	8007c52 <__sflush_r+0xb2>
 8007c4e:	602f      	str	r7, [r5, #0]
 8007c50:	e7b2      	b.n	8007bb8 <__sflush_r+0x18>
 8007c52:	89a3      	ldrh	r3, [r4, #12]
 8007c54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c58:	81a3      	strh	r3, [r4, #12]
 8007c5a:	e7ae      	b.n	8007bba <__sflush_r+0x1a>
 8007c5c:	690f      	ldr	r7, [r1, #16]
 8007c5e:	2f00      	cmp	r7, #0
 8007c60:	d0aa      	beq.n	8007bb8 <__sflush_r+0x18>
 8007c62:	0793      	lsls	r3, r2, #30
 8007c64:	bf18      	it	ne
 8007c66:	2300      	movne	r3, #0
 8007c68:	680e      	ldr	r6, [r1, #0]
 8007c6a:	bf08      	it	eq
 8007c6c:	694b      	ldreq	r3, [r1, #20]
 8007c6e:	1bf6      	subs	r6, r6, r7
 8007c70:	600f      	str	r7, [r1, #0]
 8007c72:	608b      	str	r3, [r1, #8]
 8007c74:	2e00      	cmp	r6, #0
 8007c76:	dd9f      	ble.n	8007bb8 <__sflush_r+0x18>
 8007c78:	4633      	mov	r3, r6
 8007c7a:	463a      	mov	r2, r7
 8007c7c:	4628      	mov	r0, r5
 8007c7e:	6a21      	ldr	r1, [r4, #32]
 8007c80:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007c84:	47e0      	blx	ip
 8007c86:	2800      	cmp	r0, #0
 8007c88:	dc06      	bgt.n	8007c98 <__sflush_r+0xf8>
 8007c8a:	89a3      	ldrh	r3, [r4, #12]
 8007c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c94:	81a3      	strh	r3, [r4, #12]
 8007c96:	e790      	b.n	8007bba <__sflush_r+0x1a>
 8007c98:	4407      	add	r7, r0
 8007c9a:	1a36      	subs	r6, r6, r0
 8007c9c:	e7ea      	b.n	8007c74 <__sflush_r+0xd4>
 8007c9e:	bf00      	nop
 8007ca0:	dfbffffe 	.word	0xdfbffffe

08007ca4 <_fflush_r>:
 8007ca4:	b538      	push	{r3, r4, r5, lr}
 8007ca6:	690b      	ldr	r3, [r1, #16]
 8007ca8:	4605      	mov	r5, r0
 8007caa:	460c      	mov	r4, r1
 8007cac:	b913      	cbnz	r3, 8007cb4 <_fflush_r+0x10>
 8007cae:	2500      	movs	r5, #0
 8007cb0:	4628      	mov	r0, r5
 8007cb2:	bd38      	pop	{r3, r4, r5, pc}
 8007cb4:	b118      	cbz	r0, 8007cbe <_fflush_r+0x1a>
 8007cb6:	6a03      	ldr	r3, [r0, #32]
 8007cb8:	b90b      	cbnz	r3, 8007cbe <_fflush_r+0x1a>
 8007cba:	f7fc fed5 	bl	8004a68 <__sinit>
 8007cbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d0f3      	beq.n	8007cae <_fflush_r+0xa>
 8007cc6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007cc8:	07d0      	lsls	r0, r2, #31
 8007cca:	d404      	bmi.n	8007cd6 <_fflush_r+0x32>
 8007ccc:	0599      	lsls	r1, r3, #22
 8007cce:	d402      	bmi.n	8007cd6 <_fflush_r+0x32>
 8007cd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007cd2:	f7fd f826 	bl	8004d22 <__retarget_lock_acquire_recursive>
 8007cd6:	4628      	mov	r0, r5
 8007cd8:	4621      	mov	r1, r4
 8007cda:	f7ff ff61 	bl	8007ba0 <__sflush_r>
 8007cde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ce0:	4605      	mov	r5, r0
 8007ce2:	07da      	lsls	r2, r3, #31
 8007ce4:	d4e4      	bmi.n	8007cb0 <_fflush_r+0xc>
 8007ce6:	89a3      	ldrh	r3, [r4, #12]
 8007ce8:	059b      	lsls	r3, r3, #22
 8007cea:	d4e1      	bmi.n	8007cb0 <_fflush_r+0xc>
 8007cec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007cee:	f7fd f819 	bl	8004d24 <__retarget_lock_release_recursive>
 8007cf2:	e7dd      	b.n	8007cb0 <_fflush_r+0xc>

08007cf4 <__sccl>:
 8007cf4:	b570      	push	{r4, r5, r6, lr}
 8007cf6:	780b      	ldrb	r3, [r1, #0]
 8007cf8:	4604      	mov	r4, r0
 8007cfa:	2b5e      	cmp	r3, #94	; 0x5e
 8007cfc:	bf0b      	itete	eq
 8007cfe:	784b      	ldrbeq	r3, [r1, #1]
 8007d00:	1c4a      	addne	r2, r1, #1
 8007d02:	1c8a      	addeq	r2, r1, #2
 8007d04:	2100      	movne	r1, #0
 8007d06:	bf08      	it	eq
 8007d08:	2101      	moveq	r1, #1
 8007d0a:	3801      	subs	r0, #1
 8007d0c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8007d10:	f800 1f01 	strb.w	r1, [r0, #1]!
 8007d14:	42a8      	cmp	r0, r5
 8007d16:	d1fb      	bne.n	8007d10 <__sccl+0x1c>
 8007d18:	b90b      	cbnz	r3, 8007d1e <__sccl+0x2a>
 8007d1a:	1e50      	subs	r0, r2, #1
 8007d1c:	bd70      	pop	{r4, r5, r6, pc}
 8007d1e:	f081 0101 	eor.w	r1, r1, #1
 8007d22:	4610      	mov	r0, r2
 8007d24:	54e1      	strb	r1, [r4, r3]
 8007d26:	4602      	mov	r2, r0
 8007d28:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007d2c:	2d2d      	cmp	r5, #45	; 0x2d
 8007d2e:	d005      	beq.n	8007d3c <__sccl+0x48>
 8007d30:	2d5d      	cmp	r5, #93	; 0x5d
 8007d32:	d016      	beq.n	8007d62 <__sccl+0x6e>
 8007d34:	2d00      	cmp	r5, #0
 8007d36:	d0f1      	beq.n	8007d1c <__sccl+0x28>
 8007d38:	462b      	mov	r3, r5
 8007d3a:	e7f2      	b.n	8007d22 <__sccl+0x2e>
 8007d3c:	7846      	ldrb	r6, [r0, #1]
 8007d3e:	2e5d      	cmp	r6, #93	; 0x5d
 8007d40:	d0fa      	beq.n	8007d38 <__sccl+0x44>
 8007d42:	42b3      	cmp	r3, r6
 8007d44:	dcf8      	bgt.n	8007d38 <__sccl+0x44>
 8007d46:	461a      	mov	r2, r3
 8007d48:	3002      	adds	r0, #2
 8007d4a:	3201      	adds	r2, #1
 8007d4c:	4296      	cmp	r6, r2
 8007d4e:	54a1      	strb	r1, [r4, r2]
 8007d50:	dcfb      	bgt.n	8007d4a <__sccl+0x56>
 8007d52:	1af2      	subs	r2, r6, r3
 8007d54:	3a01      	subs	r2, #1
 8007d56:	42b3      	cmp	r3, r6
 8007d58:	bfa8      	it	ge
 8007d5a:	2200      	movge	r2, #0
 8007d5c:	1c5d      	adds	r5, r3, #1
 8007d5e:	18ab      	adds	r3, r5, r2
 8007d60:	e7e1      	b.n	8007d26 <__sccl+0x32>
 8007d62:	4610      	mov	r0, r2
 8007d64:	e7da      	b.n	8007d1c <__sccl+0x28>

08007d66 <__submore>:
 8007d66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d6a:	460c      	mov	r4, r1
 8007d6c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007d6e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d72:	4299      	cmp	r1, r3
 8007d74:	d11b      	bne.n	8007dae <__submore+0x48>
 8007d76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007d7a:	f7fd fed5 	bl	8005b28 <_malloc_r>
 8007d7e:	b918      	cbnz	r0, 8007d88 <__submore+0x22>
 8007d80:	f04f 30ff 	mov.w	r0, #4294967295
 8007d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d8c:	63a3      	str	r3, [r4, #56]	; 0x38
 8007d8e:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8007d92:	6360      	str	r0, [r4, #52]	; 0x34
 8007d94:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8007d98:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007d9c:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8007da0:	7043      	strb	r3, [r0, #1]
 8007da2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007da6:	7003      	strb	r3, [r0, #0]
 8007da8:	6020      	str	r0, [r4, #0]
 8007daa:	2000      	movs	r0, #0
 8007dac:	e7ea      	b.n	8007d84 <__submore+0x1e>
 8007dae:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8007db0:	0077      	lsls	r7, r6, #1
 8007db2:	463a      	mov	r2, r7
 8007db4:	f000 fbd5 	bl	8008562 <_realloc_r>
 8007db8:	4605      	mov	r5, r0
 8007dba:	2800      	cmp	r0, #0
 8007dbc:	d0e0      	beq.n	8007d80 <__submore+0x1a>
 8007dbe:	eb00 0806 	add.w	r8, r0, r6
 8007dc2:	4601      	mov	r1, r0
 8007dc4:	4632      	mov	r2, r6
 8007dc6:	4640      	mov	r0, r8
 8007dc8:	f7fc ffbb 	bl	8004d42 <memcpy>
 8007dcc:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8007dd0:	f8c4 8000 	str.w	r8, [r4]
 8007dd4:	e7e9      	b.n	8007daa <__submore+0x44>

08007dd6 <strncmp>:
 8007dd6:	b510      	push	{r4, lr}
 8007dd8:	b16a      	cbz	r2, 8007df6 <strncmp+0x20>
 8007dda:	3901      	subs	r1, #1
 8007ddc:	1884      	adds	r4, r0, r2
 8007dde:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007de2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007de6:	429a      	cmp	r2, r3
 8007de8:	d103      	bne.n	8007df2 <strncmp+0x1c>
 8007dea:	42a0      	cmp	r0, r4
 8007dec:	d001      	beq.n	8007df2 <strncmp+0x1c>
 8007dee:	2a00      	cmp	r2, #0
 8007df0:	d1f5      	bne.n	8007dde <strncmp+0x8>
 8007df2:	1ad0      	subs	r0, r2, r3
 8007df4:	bd10      	pop	{r4, pc}
 8007df6:	4610      	mov	r0, r2
 8007df8:	e7fc      	b.n	8007df4 <strncmp+0x1e>
	...

08007dfc <_sbrk_r>:
 8007dfc:	b538      	push	{r3, r4, r5, lr}
 8007dfe:	2300      	movs	r3, #0
 8007e00:	4d05      	ldr	r5, [pc, #20]	; (8007e18 <_sbrk_r+0x1c>)
 8007e02:	4604      	mov	r4, r0
 8007e04:	4608      	mov	r0, r1
 8007e06:	602b      	str	r3, [r5, #0]
 8007e08:	f7f9 fcc6 	bl	8001798 <_sbrk>
 8007e0c:	1c43      	adds	r3, r0, #1
 8007e0e:	d102      	bne.n	8007e16 <_sbrk_r+0x1a>
 8007e10:	682b      	ldr	r3, [r5, #0]
 8007e12:	b103      	cbz	r3, 8007e16 <_sbrk_r+0x1a>
 8007e14:	6023      	str	r3, [r4, #0]
 8007e16:	bd38      	pop	{r3, r4, r5, pc}
 8007e18:	20000830 	.word	0x20000830

08007e1c <nan>:
 8007e1c:	2000      	movs	r0, #0
 8007e1e:	4901      	ldr	r1, [pc, #4]	; (8007e24 <nan+0x8>)
 8007e20:	4770      	bx	lr
 8007e22:	bf00      	nop
 8007e24:	7ff80000 	.word	0x7ff80000

08007e28 <__assert_func>:
 8007e28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007e2a:	4614      	mov	r4, r2
 8007e2c:	461a      	mov	r2, r3
 8007e2e:	4b09      	ldr	r3, [pc, #36]	; (8007e54 <__assert_func+0x2c>)
 8007e30:	4605      	mov	r5, r0
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	68d8      	ldr	r0, [r3, #12]
 8007e36:	b14c      	cbz	r4, 8007e4c <__assert_func+0x24>
 8007e38:	4b07      	ldr	r3, [pc, #28]	; (8007e58 <__assert_func+0x30>)
 8007e3a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007e3e:	9100      	str	r1, [sp, #0]
 8007e40:	462b      	mov	r3, r5
 8007e42:	4906      	ldr	r1, [pc, #24]	; (8007e5c <__assert_func+0x34>)
 8007e44:	f000 fc3e 	bl	80086c4 <fiprintf>
 8007e48:	f000 fc4e 	bl	80086e8 <abort>
 8007e4c:	4b04      	ldr	r3, [pc, #16]	; (8007e60 <__assert_func+0x38>)
 8007e4e:	461c      	mov	r4, r3
 8007e50:	e7f3      	b.n	8007e3a <__assert_func+0x12>
 8007e52:	bf00      	nop
 8007e54:	20000064 	.word	0x20000064
 8007e58:	080097fd 	.word	0x080097fd
 8007e5c:	0800980a 	.word	0x0800980a
 8007e60:	08009838 	.word	0x08009838

08007e64 <_calloc_r>:
 8007e64:	b570      	push	{r4, r5, r6, lr}
 8007e66:	fba1 5402 	umull	r5, r4, r1, r2
 8007e6a:	b934      	cbnz	r4, 8007e7a <_calloc_r+0x16>
 8007e6c:	4629      	mov	r1, r5
 8007e6e:	f7fd fe5b 	bl	8005b28 <_malloc_r>
 8007e72:	4606      	mov	r6, r0
 8007e74:	b928      	cbnz	r0, 8007e82 <_calloc_r+0x1e>
 8007e76:	4630      	mov	r0, r6
 8007e78:	bd70      	pop	{r4, r5, r6, pc}
 8007e7a:	220c      	movs	r2, #12
 8007e7c:	2600      	movs	r6, #0
 8007e7e:	6002      	str	r2, [r0, #0]
 8007e80:	e7f9      	b.n	8007e76 <_calloc_r+0x12>
 8007e82:	462a      	mov	r2, r5
 8007e84:	4621      	mov	r1, r4
 8007e86:	f7fc fece 	bl	8004c26 <memset>
 8007e8a:	e7f4      	b.n	8007e76 <_calloc_r+0x12>

08007e8c <rshift>:
 8007e8c:	6903      	ldr	r3, [r0, #16]
 8007e8e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007e92:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007e96:	f100 0414 	add.w	r4, r0, #20
 8007e9a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007e9e:	dd46      	ble.n	8007f2e <rshift+0xa2>
 8007ea0:	f011 011f 	ands.w	r1, r1, #31
 8007ea4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007ea8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007eac:	d10c      	bne.n	8007ec8 <rshift+0x3c>
 8007eae:	4629      	mov	r1, r5
 8007eb0:	f100 0710 	add.w	r7, r0, #16
 8007eb4:	42b1      	cmp	r1, r6
 8007eb6:	d335      	bcc.n	8007f24 <rshift+0x98>
 8007eb8:	1a9b      	subs	r3, r3, r2
 8007eba:	009b      	lsls	r3, r3, #2
 8007ebc:	1eea      	subs	r2, r5, #3
 8007ebe:	4296      	cmp	r6, r2
 8007ec0:	bf38      	it	cc
 8007ec2:	2300      	movcc	r3, #0
 8007ec4:	4423      	add	r3, r4
 8007ec6:	e015      	b.n	8007ef4 <rshift+0x68>
 8007ec8:	46a1      	mov	r9, r4
 8007eca:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007ece:	f1c1 0820 	rsb	r8, r1, #32
 8007ed2:	40cf      	lsrs	r7, r1
 8007ed4:	f105 0e04 	add.w	lr, r5, #4
 8007ed8:	4576      	cmp	r6, lr
 8007eda:	46f4      	mov	ip, lr
 8007edc:	d816      	bhi.n	8007f0c <rshift+0x80>
 8007ede:	1a9a      	subs	r2, r3, r2
 8007ee0:	0092      	lsls	r2, r2, #2
 8007ee2:	3a04      	subs	r2, #4
 8007ee4:	3501      	adds	r5, #1
 8007ee6:	42ae      	cmp	r6, r5
 8007ee8:	bf38      	it	cc
 8007eea:	2200      	movcc	r2, #0
 8007eec:	18a3      	adds	r3, r4, r2
 8007eee:	50a7      	str	r7, [r4, r2]
 8007ef0:	b107      	cbz	r7, 8007ef4 <rshift+0x68>
 8007ef2:	3304      	adds	r3, #4
 8007ef4:	42a3      	cmp	r3, r4
 8007ef6:	eba3 0204 	sub.w	r2, r3, r4
 8007efa:	bf08      	it	eq
 8007efc:	2300      	moveq	r3, #0
 8007efe:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007f02:	6102      	str	r2, [r0, #16]
 8007f04:	bf08      	it	eq
 8007f06:	6143      	streq	r3, [r0, #20]
 8007f08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f0c:	f8dc c000 	ldr.w	ip, [ip]
 8007f10:	fa0c fc08 	lsl.w	ip, ip, r8
 8007f14:	ea4c 0707 	orr.w	r7, ip, r7
 8007f18:	f849 7b04 	str.w	r7, [r9], #4
 8007f1c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007f20:	40cf      	lsrs	r7, r1
 8007f22:	e7d9      	b.n	8007ed8 <rshift+0x4c>
 8007f24:	f851 cb04 	ldr.w	ip, [r1], #4
 8007f28:	f847 cf04 	str.w	ip, [r7, #4]!
 8007f2c:	e7c2      	b.n	8007eb4 <rshift+0x28>
 8007f2e:	4623      	mov	r3, r4
 8007f30:	e7e0      	b.n	8007ef4 <rshift+0x68>

08007f32 <__hexdig_fun>:
 8007f32:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007f36:	2b09      	cmp	r3, #9
 8007f38:	d802      	bhi.n	8007f40 <__hexdig_fun+0xe>
 8007f3a:	3820      	subs	r0, #32
 8007f3c:	b2c0      	uxtb	r0, r0
 8007f3e:	4770      	bx	lr
 8007f40:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007f44:	2b05      	cmp	r3, #5
 8007f46:	d801      	bhi.n	8007f4c <__hexdig_fun+0x1a>
 8007f48:	3847      	subs	r0, #71	; 0x47
 8007f4a:	e7f7      	b.n	8007f3c <__hexdig_fun+0xa>
 8007f4c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007f50:	2b05      	cmp	r3, #5
 8007f52:	d801      	bhi.n	8007f58 <__hexdig_fun+0x26>
 8007f54:	3827      	subs	r0, #39	; 0x27
 8007f56:	e7f1      	b.n	8007f3c <__hexdig_fun+0xa>
 8007f58:	2000      	movs	r0, #0
 8007f5a:	4770      	bx	lr

08007f5c <__gethex>:
 8007f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f60:	4681      	mov	r9, r0
 8007f62:	468a      	mov	sl, r1
 8007f64:	4617      	mov	r7, r2
 8007f66:	680a      	ldr	r2, [r1, #0]
 8007f68:	b085      	sub	sp, #20
 8007f6a:	f102 0b02 	add.w	fp, r2, #2
 8007f6e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007f72:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007f76:	9302      	str	r3, [sp, #8]
 8007f78:	32fe      	adds	r2, #254	; 0xfe
 8007f7a:	eb02 030b 	add.w	r3, r2, fp
 8007f7e:	46d8      	mov	r8, fp
 8007f80:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8007f84:	9301      	str	r3, [sp, #4]
 8007f86:	2830      	cmp	r0, #48	; 0x30
 8007f88:	d0f7      	beq.n	8007f7a <__gethex+0x1e>
 8007f8a:	f7ff ffd2 	bl	8007f32 <__hexdig_fun>
 8007f8e:	4604      	mov	r4, r0
 8007f90:	2800      	cmp	r0, #0
 8007f92:	d138      	bne.n	8008006 <__gethex+0xaa>
 8007f94:	2201      	movs	r2, #1
 8007f96:	4640      	mov	r0, r8
 8007f98:	49a7      	ldr	r1, [pc, #668]	; (8008238 <__gethex+0x2dc>)
 8007f9a:	f7ff ff1c 	bl	8007dd6 <strncmp>
 8007f9e:	4606      	mov	r6, r0
 8007fa0:	2800      	cmp	r0, #0
 8007fa2:	d169      	bne.n	8008078 <__gethex+0x11c>
 8007fa4:	f898 0001 	ldrb.w	r0, [r8, #1]
 8007fa8:	465d      	mov	r5, fp
 8007faa:	f7ff ffc2 	bl	8007f32 <__hexdig_fun>
 8007fae:	2800      	cmp	r0, #0
 8007fb0:	d064      	beq.n	800807c <__gethex+0x120>
 8007fb2:	465a      	mov	r2, fp
 8007fb4:	7810      	ldrb	r0, [r2, #0]
 8007fb6:	4690      	mov	r8, r2
 8007fb8:	2830      	cmp	r0, #48	; 0x30
 8007fba:	f102 0201 	add.w	r2, r2, #1
 8007fbe:	d0f9      	beq.n	8007fb4 <__gethex+0x58>
 8007fc0:	f7ff ffb7 	bl	8007f32 <__hexdig_fun>
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	fab0 f480 	clz	r4, r0
 8007fca:	465e      	mov	r6, fp
 8007fcc:	0964      	lsrs	r4, r4, #5
 8007fce:	9301      	str	r3, [sp, #4]
 8007fd0:	4642      	mov	r2, r8
 8007fd2:	4615      	mov	r5, r2
 8007fd4:	7828      	ldrb	r0, [r5, #0]
 8007fd6:	3201      	adds	r2, #1
 8007fd8:	f7ff ffab 	bl	8007f32 <__hexdig_fun>
 8007fdc:	2800      	cmp	r0, #0
 8007fde:	d1f8      	bne.n	8007fd2 <__gethex+0x76>
 8007fe0:	2201      	movs	r2, #1
 8007fe2:	4628      	mov	r0, r5
 8007fe4:	4994      	ldr	r1, [pc, #592]	; (8008238 <__gethex+0x2dc>)
 8007fe6:	f7ff fef6 	bl	8007dd6 <strncmp>
 8007fea:	b978      	cbnz	r0, 800800c <__gethex+0xb0>
 8007fec:	b946      	cbnz	r6, 8008000 <__gethex+0xa4>
 8007fee:	1c6e      	adds	r6, r5, #1
 8007ff0:	4632      	mov	r2, r6
 8007ff2:	4615      	mov	r5, r2
 8007ff4:	7828      	ldrb	r0, [r5, #0]
 8007ff6:	3201      	adds	r2, #1
 8007ff8:	f7ff ff9b 	bl	8007f32 <__hexdig_fun>
 8007ffc:	2800      	cmp	r0, #0
 8007ffe:	d1f8      	bne.n	8007ff2 <__gethex+0x96>
 8008000:	1b73      	subs	r3, r6, r5
 8008002:	009e      	lsls	r6, r3, #2
 8008004:	e004      	b.n	8008010 <__gethex+0xb4>
 8008006:	2400      	movs	r4, #0
 8008008:	4626      	mov	r6, r4
 800800a:	e7e1      	b.n	8007fd0 <__gethex+0x74>
 800800c:	2e00      	cmp	r6, #0
 800800e:	d1f7      	bne.n	8008000 <__gethex+0xa4>
 8008010:	782b      	ldrb	r3, [r5, #0]
 8008012:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008016:	2b50      	cmp	r3, #80	; 0x50
 8008018:	d13d      	bne.n	8008096 <__gethex+0x13a>
 800801a:	786b      	ldrb	r3, [r5, #1]
 800801c:	2b2b      	cmp	r3, #43	; 0x2b
 800801e:	d02f      	beq.n	8008080 <__gethex+0x124>
 8008020:	2b2d      	cmp	r3, #45	; 0x2d
 8008022:	d031      	beq.n	8008088 <__gethex+0x12c>
 8008024:	f04f 0b00 	mov.w	fp, #0
 8008028:	1c69      	adds	r1, r5, #1
 800802a:	7808      	ldrb	r0, [r1, #0]
 800802c:	f7ff ff81 	bl	8007f32 <__hexdig_fun>
 8008030:	1e42      	subs	r2, r0, #1
 8008032:	b2d2      	uxtb	r2, r2
 8008034:	2a18      	cmp	r2, #24
 8008036:	d82e      	bhi.n	8008096 <__gethex+0x13a>
 8008038:	f1a0 0210 	sub.w	r2, r0, #16
 800803c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008040:	f7ff ff77 	bl	8007f32 <__hexdig_fun>
 8008044:	f100 3cff 	add.w	ip, r0, #4294967295
 8008048:	fa5f fc8c 	uxtb.w	ip, ip
 800804c:	f1bc 0f18 	cmp.w	ip, #24
 8008050:	d91d      	bls.n	800808e <__gethex+0x132>
 8008052:	f1bb 0f00 	cmp.w	fp, #0
 8008056:	d000      	beq.n	800805a <__gethex+0xfe>
 8008058:	4252      	negs	r2, r2
 800805a:	4416      	add	r6, r2
 800805c:	f8ca 1000 	str.w	r1, [sl]
 8008060:	b1dc      	cbz	r4, 800809a <__gethex+0x13e>
 8008062:	9b01      	ldr	r3, [sp, #4]
 8008064:	2b00      	cmp	r3, #0
 8008066:	bf14      	ite	ne
 8008068:	f04f 0800 	movne.w	r8, #0
 800806c:	f04f 0806 	moveq.w	r8, #6
 8008070:	4640      	mov	r0, r8
 8008072:	b005      	add	sp, #20
 8008074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008078:	4645      	mov	r5, r8
 800807a:	4626      	mov	r6, r4
 800807c:	2401      	movs	r4, #1
 800807e:	e7c7      	b.n	8008010 <__gethex+0xb4>
 8008080:	f04f 0b00 	mov.w	fp, #0
 8008084:	1ca9      	adds	r1, r5, #2
 8008086:	e7d0      	b.n	800802a <__gethex+0xce>
 8008088:	f04f 0b01 	mov.w	fp, #1
 800808c:	e7fa      	b.n	8008084 <__gethex+0x128>
 800808e:	230a      	movs	r3, #10
 8008090:	fb03 0002 	mla	r0, r3, r2, r0
 8008094:	e7d0      	b.n	8008038 <__gethex+0xdc>
 8008096:	4629      	mov	r1, r5
 8008098:	e7e0      	b.n	800805c <__gethex+0x100>
 800809a:	4621      	mov	r1, r4
 800809c:	eba5 0308 	sub.w	r3, r5, r8
 80080a0:	3b01      	subs	r3, #1
 80080a2:	2b07      	cmp	r3, #7
 80080a4:	dc0a      	bgt.n	80080bc <__gethex+0x160>
 80080a6:	4648      	mov	r0, r9
 80080a8:	f7fd fdca 	bl	8005c40 <_Balloc>
 80080ac:	4604      	mov	r4, r0
 80080ae:	b940      	cbnz	r0, 80080c2 <__gethex+0x166>
 80080b0:	4602      	mov	r2, r0
 80080b2:	21e4      	movs	r1, #228	; 0xe4
 80080b4:	4b61      	ldr	r3, [pc, #388]	; (800823c <__gethex+0x2e0>)
 80080b6:	4862      	ldr	r0, [pc, #392]	; (8008240 <__gethex+0x2e4>)
 80080b8:	f7ff feb6 	bl	8007e28 <__assert_func>
 80080bc:	3101      	adds	r1, #1
 80080be:	105b      	asrs	r3, r3, #1
 80080c0:	e7ef      	b.n	80080a2 <__gethex+0x146>
 80080c2:	2300      	movs	r3, #0
 80080c4:	469b      	mov	fp, r3
 80080c6:	f100 0a14 	add.w	sl, r0, #20
 80080ca:	f8cd a004 	str.w	sl, [sp, #4]
 80080ce:	45a8      	cmp	r8, r5
 80080d0:	d344      	bcc.n	800815c <__gethex+0x200>
 80080d2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80080d6:	4658      	mov	r0, fp
 80080d8:	f848 bb04 	str.w	fp, [r8], #4
 80080dc:	eba8 080a 	sub.w	r8, r8, sl
 80080e0:	ea4f 02a8 	mov.w	r2, r8, asr #2
 80080e4:	6122      	str	r2, [r4, #16]
 80080e6:	ea4f 1842 	mov.w	r8, r2, lsl #5
 80080ea:	f7fd fe9b 	bl	8005e24 <__hi0bits>
 80080ee:	683d      	ldr	r5, [r7, #0]
 80080f0:	eba8 0800 	sub.w	r8, r8, r0
 80080f4:	45a8      	cmp	r8, r5
 80080f6:	dd59      	ble.n	80081ac <__gethex+0x250>
 80080f8:	eba8 0805 	sub.w	r8, r8, r5
 80080fc:	4641      	mov	r1, r8
 80080fe:	4620      	mov	r0, r4
 8008100:	f7fe fa19 	bl	8006536 <__any_on>
 8008104:	4683      	mov	fp, r0
 8008106:	b1b8      	cbz	r0, 8008138 <__gethex+0x1dc>
 8008108:	f04f 0b01 	mov.w	fp, #1
 800810c:	f108 33ff 	add.w	r3, r8, #4294967295
 8008110:	1159      	asrs	r1, r3, #5
 8008112:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008116:	f003 021f 	and.w	r2, r3, #31
 800811a:	fa0b f202 	lsl.w	r2, fp, r2
 800811e:	420a      	tst	r2, r1
 8008120:	d00a      	beq.n	8008138 <__gethex+0x1dc>
 8008122:	455b      	cmp	r3, fp
 8008124:	dd06      	ble.n	8008134 <__gethex+0x1d8>
 8008126:	4620      	mov	r0, r4
 8008128:	f1a8 0102 	sub.w	r1, r8, #2
 800812c:	f7fe fa03 	bl	8006536 <__any_on>
 8008130:	2800      	cmp	r0, #0
 8008132:	d138      	bne.n	80081a6 <__gethex+0x24a>
 8008134:	f04f 0b02 	mov.w	fp, #2
 8008138:	4641      	mov	r1, r8
 800813a:	4620      	mov	r0, r4
 800813c:	f7ff fea6 	bl	8007e8c <rshift>
 8008140:	4446      	add	r6, r8
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	42b3      	cmp	r3, r6
 8008146:	da41      	bge.n	80081cc <__gethex+0x270>
 8008148:	4621      	mov	r1, r4
 800814a:	4648      	mov	r0, r9
 800814c:	f7fd fdb8 	bl	8005cc0 <_Bfree>
 8008150:	2300      	movs	r3, #0
 8008152:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008154:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8008158:	6013      	str	r3, [r2, #0]
 800815a:	e789      	b.n	8008070 <__gethex+0x114>
 800815c:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8008160:	2a2e      	cmp	r2, #46	; 0x2e
 8008162:	d014      	beq.n	800818e <__gethex+0x232>
 8008164:	2b20      	cmp	r3, #32
 8008166:	d106      	bne.n	8008176 <__gethex+0x21a>
 8008168:	9b01      	ldr	r3, [sp, #4]
 800816a:	f843 bb04 	str.w	fp, [r3], #4
 800816e:	f04f 0b00 	mov.w	fp, #0
 8008172:	9301      	str	r3, [sp, #4]
 8008174:	465b      	mov	r3, fp
 8008176:	7828      	ldrb	r0, [r5, #0]
 8008178:	9303      	str	r3, [sp, #12]
 800817a:	f7ff feda 	bl	8007f32 <__hexdig_fun>
 800817e:	9b03      	ldr	r3, [sp, #12]
 8008180:	f000 000f 	and.w	r0, r0, #15
 8008184:	4098      	lsls	r0, r3
 8008186:	ea4b 0b00 	orr.w	fp, fp, r0
 800818a:	3304      	adds	r3, #4
 800818c:	e79f      	b.n	80080ce <__gethex+0x172>
 800818e:	45a8      	cmp	r8, r5
 8008190:	d8e8      	bhi.n	8008164 <__gethex+0x208>
 8008192:	2201      	movs	r2, #1
 8008194:	4628      	mov	r0, r5
 8008196:	4928      	ldr	r1, [pc, #160]	; (8008238 <__gethex+0x2dc>)
 8008198:	9303      	str	r3, [sp, #12]
 800819a:	f7ff fe1c 	bl	8007dd6 <strncmp>
 800819e:	9b03      	ldr	r3, [sp, #12]
 80081a0:	2800      	cmp	r0, #0
 80081a2:	d1df      	bne.n	8008164 <__gethex+0x208>
 80081a4:	e793      	b.n	80080ce <__gethex+0x172>
 80081a6:	f04f 0b03 	mov.w	fp, #3
 80081aa:	e7c5      	b.n	8008138 <__gethex+0x1dc>
 80081ac:	da0b      	bge.n	80081c6 <__gethex+0x26a>
 80081ae:	eba5 0808 	sub.w	r8, r5, r8
 80081b2:	4621      	mov	r1, r4
 80081b4:	4642      	mov	r2, r8
 80081b6:	4648      	mov	r0, r9
 80081b8:	f7fd ff9a 	bl	80060f0 <__lshift>
 80081bc:	4604      	mov	r4, r0
 80081be:	eba6 0608 	sub.w	r6, r6, r8
 80081c2:	f100 0a14 	add.w	sl, r0, #20
 80081c6:	f04f 0b00 	mov.w	fp, #0
 80081ca:	e7ba      	b.n	8008142 <__gethex+0x1e6>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	42b3      	cmp	r3, r6
 80081d0:	dd74      	ble.n	80082bc <__gethex+0x360>
 80081d2:	1b9e      	subs	r6, r3, r6
 80081d4:	42b5      	cmp	r5, r6
 80081d6:	dc35      	bgt.n	8008244 <__gethex+0x2e8>
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2b02      	cmp	r3, #2
 80081dc:	d023      	beq.n	8008226 <__gethex+0x2ca>
 80081de:	2b03      	cmp	r3, #3
 80081e0:	d025      	beq.n	800822e <__gethex+0x2d2>
 80081e2:	2b01      	cmp	r3, #1
 80081e4:	d115      	bne.n	8008212 <__gethex+0x2b6>
 80081e6:	42b5      	cmp	r5, r6
 80081e8:	d113      	bne.n	8008212 <__gethex+0x2b6>
 80081ea:	2d01      	cmp	r5, #1
 80081ec:	d10b      	bne.n	8008206 <__gethex+0x2aa>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	9a02      	ldr	r2, [sp, #8]
 80081f2:	f04f 0862 	mov.w	r8, #98	; 0x62
 80081f6:	6013      	str	r3, [r2, #0]
 80081f8:	2301      	movs	r3, #1
 80081fa:	6123      	str	r3, [r4, #16]
 80081fc:	f8ca 3000 	str.w	r3, [sl]
 8008200:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008202:	601c      	str	r4, [r3, #0]
 8008204:	e734      	b.n	8008070 <__gethex+0x114>
 8008206:	4620      	mov	r0, r4
 8008208:	1e69      	subs	r1, r5, #1
 800820a:	f7fe f994 	bl	8006536 <__any_on>
 800820e:	2800      	cmp	r0, #0
 8008210:	d1ed      	bne.n	80081ee <__gethex+0x292>
 8008212:	4621      	mov	r1, r4
 8008214:	4648      	mov	r0, r9
 8008216:	f7fd fd53 	bl	8005cc0 <_Bfree>
 800821a:	2300      	movs	r3, #0
 800821c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800821e:	f04f 0850 	mov.w	r8, #80	; 0x50
 8008222:	6013      	str	r3, [r2, #0]
 8008224:	e724      	b.n	8008070 <__gethex+0x114>
 8008226:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008228:	2b00      	cmp	r3, #0
 800822a:	d1f2      	bne.n	8008212 <__gethex+0x2b6>
 800822c:	e7df      	b.n	80081ee <__gethex+0x292>
 800822e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008230:	2b00      	cmp	r3, #0
 8008232:	d1dc      	bne.n	80081ee <__gethex+0x292>
 8008234:	e7ed      	b.n	8008212 <__gethex+0x2b6>
 8008236:	bf00      	nop
 8008238:	08009674 	.word	0x08009674
 800823c:	0800950d 	.word	0x0800950d
 8008240:	08009839 	.word	0x08009839
 8008244:	f106 38ff 	add.w	r8, r6, #4294967295
 8008248:	f1bb 0f00 	cmp.w	fp, #0
 800824c:	d133      	bne.n	80082b6 <__gethex+0x35a>
 800824e:	f1b8 0f00 	cmp.w	r8, #0
 8008252:	d004      	beq.n	800825e <__gethex+0x302>
 8008254:	4641      	mov	r1, r8
 8008256:	4620      	mov	r0, r4
 8008258:	f7fe f96d 	bl	8006536 <__any_on>
 800825c:	4683      	mov	fp, r0
 800825e:	2301      	movs	r3, #1
 8008260:	ea4f 1268 	mov.w	r2, r8, asr #5
 8008264:	f008 081f 	and.w	r8, r8, #31
 8008268:	fa03 f308 	lsl.w	r3, r3, r8
 800826c:	f04f 0802 	mov.w	r8, #2
 8008270:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008274:	4631      	mov	r1, r6
 8008276:	4213      	tst	r3, r2
 8008278:	4620      	mov	r0, r4
 800827a:	bf18      	it	ne
 800827c:	f04b 0b02 	orrne.w	fp, fp, #2
 8008280:	1bad      	subs	r5, r5, r6
 8008282:	f7ff fe03 	bl	8007e8c <rshift>
 8008286:	687e      	ldr	r6, [r7, #4]
 8008288:	f1bb 0f00 	cmp.w	fp, #0
 800828c:	d04a      	beq.n	8008324 <__gethex+0x3c8>
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2b02      	cmp	r3, #2
 8008292:	d016      	beq.n	80082c2 <__gethex+0x366>
 8008294:	2b03      	cmp	r3, #3
 8008296:	d018      	beq.n	80082ca <__gethex+0x36e>
 8008298:	2b01      	cmp	r3, #1
 800829a:	d109      	bne.n	80082b0 <__gethex+0x354>
 800829c:	f01b 0f02 	tst.w	fp, #2
 80082a0:	d006      	beq.n	80082b0 <__gethex+0x354>
 80082a2:	f8da 3000 	ldr.w	r3, [sl]
 80082a6:	ea4b 0b03 	orr.w	fp, fp, r3
 80082aa:	f01b 0f01 	tst.w	fp, #1
 80082ae:	d10f      	bne.n	80082d0 <__gethex+0x374>
 80082b0:	f048 0810 	orr.w	r8, r8, #16
 80082b4:	e036      	b.n	8008324 <__gethex+0x3c8>
 80082b6:	f04f 0b01 	mov.w	fp, #1
 80082ba:	e7d0      	b.n	800825e <__gethex+0x302>
 80082bc:	f04f 0801 	mov.w	r8, #1
 80082c0:	e7e2      	b.n	8008288 <__gethex+0x32c>
 80082c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80082c4:	f1c3 0301 	rsb	r3, r3, #1
 80082c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80082ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d0ef      	beq.n	80082b0 <__gethex+0x354>
 80082d0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80082d4:	f104 0214 	add.w	r2, r4, #20
 80082d8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80082dc:	9301      	str	r3, [sp, #4]
 80082de:	2300      	movs	r3, #0
 80082e0:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80082e4:	4694      	mov	ip, r2
 80082e6:	f852 1b04 	ldr.w	r1, [r2], #4
 80082ea:	f1b1 3fff 	cmp.w	r1, #4294967295
 80082ee:	d01e      	beq.n	800832e <__gethex+0x3d2>
 80082f0:	3101      	adds	r1, #1
 80082f2:	f8cc 1000 	str.w	r1, [ip]
 80082f6:	f1b8 0f02 	cmp.w	r8, #2
 80082fa:	f104 0214 	add.w	r2, r4, #20
 80082fe:	d13d      	bne.n	800837c <__gethex+0x420>
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	3b01      	subs	r3, #1
 8008304:	42ab      	cmp	r3, r5
 8008306:	d10b      	bne.n	8008320 <__gethex+0x3c4>
 8008308:	2301      	movs	r3, #1
 800830a:	1169      	asrs	r1, r5, #5
 800830c:	f005 051f 	and.w	r5, r5, #31
 8008310:	fa03 f505 	lsl.w	r5, r3, r5
 8008314:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008318:	421d      	tst	r5, r3
 800831a:	bf18      	it	ne
 800831c:	f04f 0801 	movne.w	r8, #1
 8008320:	f048 0820 	orr.w	r8, r8, #32
 8008324:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008326:	601c      	str	r4, [r3, #0]
 8008328:	9b02      	ldr	r3, [sp, #8]
 800832a:	601e      	str	r6, [r3, #0]
 800832c:	e6a0      	b.n	8008070 <__gethex+0x114>
 800832e:	4290      	cmp	r0, r2
 8008330:	f842 3c04 	str.w	r3, [r2, #-4]
 8008334:	d8d6      	bhi.n	80082e4 <__gethex+0x388>
 8008336:	68a2      	ldr	r2, [r4, #8]
 8008338:	4593      	cmp	fp, r2
 800833a:	db17      	blt.n	800836c <__gethex+0x410>
 800833c:	6861      	ldr	r1, [r4, #4]
 800833e:	4648      	mov	r0, r9
 8008340:	3101      	adds	r1, #1
 8008342:	f7fd fc7d 	bl	8005c40 <_Balloc>
 8008346:	4682      	mov	sl, r0
 8008348:	b918      	cbnz	r0, 8008352 <__gethex+0x3f6>
 800834a:	4602      	mov	r2, r0
 800834c:	2184      	movs	r1, #132	; 0x84
 800834e:	4b1a      	ldr	r3, [pc, #104]	; (80083b8 <__gethex+0x45c>)
 8008350:	e6b1      	b.n	80080b6 <__gethex+0x15a>
 8008352:	6922      	ldr	r2, [r4, #16]
 8008354:	f104 010c 	add.w	r1, r4, #12
 8008358:	3202      	adds	r2, #2
 800835a:	0092      	lsls	r2, r2, #2
 800835c:	300c      	adds	r0, #12
 800835e:	f7fc fcf0 	bl	8004d42 <memcpy>
 8008362:	4621      	mov	r1, r4
 8008364:	4648      	mov	r0, r9
 8008366:	f7fd fcab 	bl	8005cc0 <_Bfree>
 800836a:	4654      	mov	r4, sl
 800836c:	6922      	ldr	r2, [r4, #16]
 800836e:	1c51      	adds	r1, r2, #1
 8008370:	6121      	str	r1, [r4, #16]
 8008372:	2101      	movs	r1, #1
 8008374:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008378:	6151      	str	r1, [r2, #20]
 800837a:	e7bc      	b.n	80082f6 <__gethex+0x39a>
 800837c:	6921      	ldr	r1, [r4, #16]
 800837e:	4559      	cmp	r1, fp
 8008380:	dd0b      	ble.n	800839a <__gethex+0x43e>
 8008382:	2101      	movs	r1, #1
 8008384:	4620      	mov	r0, r4
 8008386:	f7ff fd81 	bl	8007e8c <rshift>
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	3601      	adds	r6, #1
 800838e:	42b3      	cmp	r3, r6
 8008390:	f6ff aeda 	blt.w	8008148 <__gethex+0x1ec>
 8008394:	f04f 0801 	mov.w	r8, #1
 8008398:	e7c2      	b.n	8008320 <__gethex+0x3c4>
 800839a:	f015 051f 	ands.w	r5, r5, #31
 800839e:	d0f9      	beq.n	8008394 <__gethex+0x438>
 80083a0:	9b01      	ldr	r3, [sp, #4]
 80083a2:	f1c5 0520 	rsb	r5, r5, #32
 80083a6:	441a      	add	r2, r3
 80083a8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80083ac:	f7fd fd3a 	bl	8005e24 <__hi0bits>
 80083b0:	42a8      	cmp	r0, r5
 80083b2:	dbe6      	blt.n	8008382 <__gethex+0x426>
 80083b4:	e7ee      	b.n	8008394 <__gethex+0x438>
 80083b6:	bf00      	nop
 80083b8:	0800950d 	.word	0x0800950d

080083bc <L_shift>:
 80083bc:	f1c2 0208 	rsb	r2, r2, #8
 80083c0:	0092      	lsls	r2, r2, #2
 80083c2:	b570      	push	{r4, r5, r6, lr}
 80083c4:	f1c2 0620 	rsb	r6, r2, #32
 80083c8:	6843      	ldr	r3, [r0, #4]
 80083ca:	6804      	ldr	r4, [r0, #0]
 80083cc:	fa03 f506 	lsl.w	r5, r3, r6
 80083d0:	432c      	orrs	r4, r5
 80083d2:	40d3      	lsrs	r3, r2
 80083d4:	6004      	str	r4, [r0, #0]
 80083d6:	f840 3f04 	str.w	r3, [r0, #4]!
 80083da:	4288      	cmp	r0, r1
 80083dc:	d3f4      	bcc.n	80083c8 <L_shift+0xc>
 80083de:	bd70      	pop	{r4, r5, r6, pc}

080083e0 <__match>:
 80083e0:	b530      	push	{r4, r5, lr}
 80083e2:	6803      	ldr	r3, [r0, #0]
 80083e4:	3301      	adds	r3, #1
 80083e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083ea:	b914      	cbnz	r4, 80083f2 <__match+0x12>
 80083ec:	6003      	str	r3, [r0, #0]
 80083ee:	2001      	movs	r0, #1
 80083f0:	bd30      	pop	{r4, r5, pc}
 80083f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083f6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80083fa:	2d19      	cmp	r5, #25
 80083fc:	bf98      	it	ls
 80083fe:	3220      	addls	r2, #32
 8008400:	42a2      	cmp	r2, r4
 8008402:	d0f0      	beq.n	80083e6 <__match+0x6>
 8008404:	2000      	movs	r0, #0
 8008406:	e7f3      	b.n	80083f0 <__match+0x10>

08008408 <__hexnan>:
 8008408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800840c:	2500      	movs	r5, #0
 800840e:	680b      	ldr	r3, [r1, #0]
 8008410:	4682      	mov	sl, r0
 8008412:	115e      	asrs	r6, r3, #5
 8008414:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008418:	f013 031f 	ands.w	r3, r3, #31
 800841c:	bf18      	it	ne
 800841e:	3604      	addne	r6, #4
 8008420:	1f37      	subs	r7, r6, #4
 8008422:	4690      	mov	r8, r2
 8008424:	46b9      	mov	r9, r7
 8008426:	463c      	mov	r4, r7
 8008428:	46ab      	mov	fp, r5
 800842a:	b087      	sub	sp, #28
 800842c:	6801      	ldr	r1, [r0, #0]
 800842e:	9301      	str	r3, [sp, #4]
 8008430:	f846 5c04 	str.w	r5, [r6, #-4]
 8008434:	9502      	str	r5, [sp, #8]
 8008436:	784a      	ldrb	r2, [r1, #1]
 8008438:	1c4b      	adds	r3, r1, #1
 800843a:	9303      	str	r3, [sp, #12]
 800843c:	b342      	cbz	r2, 8008490 <__hexnan+0x88>
 800843e:	4610      	mov	r0, r2
 8008440:	9105      	str	r1, [sp, #20]
 8008442:	9204      	str	r2, [sp, #16]
 8008444:	f7ff fd75 	bl	8007f32 <__hexdig_fun>
 8008448:	2800      	cmp	r0, #0
 800844a:	d14f      	bne.n	80084ec <__hexnan+0xe4>
 800844c:	9a04      	ldr	r2, [sp, #16]
 800844e:	9905      	ldr	r1, [sp, #20]
 8008450:	2a20      	cmp	r2, #32
 8008452:	d818      	bhi.n	8008486 <__hexnan+0x7e>
 8008454:	9b02      	ldr	r3, [sp, #8]
 8008456:	459b      	cmp	fp, r3
 8008458:	dd13      	ble.n	8008482 <__hexnan+0x7a>
 800845a:	454c      	cmp	r4, r9
 800845c:	d206      	bcs.n	800846c <__hexnan+0x64>
 800845e:	2d07      	cmp	r5, #7
 8008460:	dc04      	bgt.n	800846c <__hexnan+0x64>
 8008462:	462a      	mov	r2, r5
 8008464:	4649      	mov	r1, r9
 8008466:	4620      	mov	r0, r4
 8008468:	f7ff ffa8 	bl	80083bc <L_shift>
 800846c:	4544      	cmp	r4, r8
 800846e:	d950      	bls.n	8008512 <__hexnan+0x10a>
 8008470:	2300      	movs	r3, #0
 8008472:	f1a4 0904 	sub.w	r9, r4, #4
 8008476:	f844 3c04 	str.w	r3, [r4, #-4]
 800847a:	461d      	mov	r5, r3
 800847c:	464c      	mov	r4, r9
 800847e:	f8cd b008 	str.w	fp, [sp, #8]
 8008482:	9903      	ldr	r1, [sp, #12]
 8008484:	e7d7      	b.n	8008436 <__hexnan+0x2e>
 8008486:	2a29      	cmp	r2, #41	; 0x29
 8008488:	d155      	bne.n	8008536 <__hexnan+0x12e>
 800848a:	3102      	adds	r1, #2
 800848c:	f8ca 1000 	str.w	r1, [sl]
 8008490:	f1bb 0f00 	cmp.w	fp, #0
 8008494:	d04f      	beq.n	8008536 <__hexnan+0x12e>
 8008496:	454c      	cmp	r4, r9
 8008498:	d206      	bcs.n	80084a8 <__hexnan+0xa0>
 800849a:	2d07      	cmp	r5, #7
 800849c:	dc04      	bgt.n	80084a8 <__hexnan+0xa0>
 800849e:	462a      	mov	r2, r5
 80084a0:	4649      	mov	r1, r9
 80084a2:	4620      	mov	r0, r4
 80084a4:	f7ff ff8a 	bl	80083bc <L_shift>
 80084a8:	4544      	cmp	r4, r8
 80084aa:	d934      	bls.n	8008516 <__hexnan+0x10e>
 80084ac:	4623      	mov	r3, r4
 80084ae:	f1a8 0204 	sub.w	r2, r8, #4
 80084b2:	f853 1b04 	ldr.w	r1, [r3], #4
 80084b6:	429f      	cmp	r7, r3
 80084b8:	f842 1f04 	str.w	r1, [r2, #4]!
 80084bc:	d2f9      	bcs.n	80084b2 <__hexnan+0xaa>
 80084be:	1b3b      	subs	r3, r7, r4
 80084c0:	f023 0303 	bic.w	r3, r3, #3
 80084c4:	3304      	adds	r3, #4
 80084c6:	3e03      	subs	r6, #3
 80084c8:	3401      	adds	r4, #1
 80084ca:	42a6      	cmp	r6, r4
 80084cc:	bf38      	it	cc
 80084ce:	2304      	movcc	r3, #4
 80084d0:	2200      	movs	r2, #0
 80084d2:	4443      	add	r3, r8
 80084d4:	f843 2b04 	str.w	r2, [r3], #4
 80084d8:	429f      	cmp	r7, r3
 80084da:	d2fb      	bcs.n	80084d4 <__hexnan+0xcc>
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	b91b      	cbnz	r3, 80084e8 <__hexnan+0xe0>
 80084e0:	4547      	cmp	r7, r8
 80084e2:	d126      	bne.n	8008532 <__hexnan+0x12a>
 80084e4:	2301      	movs	r3, #1
 80084e6:	603b      	str	r3, [r7, #0]
 80084e8:	2005      	movs	r0, #5
 80084ea:	e025      	b.n	8008538 <__hexnan+0x130>
 80084ec:	3501      	adds	r5, #1
 80084ee:	2d08      	cmp	r5, #8
 80084f0:	f10b 0b01 	add.w	fp, fp, #1
 80084f4:	dd06      	ble.n	8008504 <__hexnan+0xfc>
 80084f6:	4544      	cmp	r4, r8
 80084f8:	d9c3      	bls.n	8008482 <__hexnan+0x7a>
 80084fa:	2300      	movs	r3, #0
 80084fc:	2501      	movs	r5, #1
 80084fe:	f844 3c04 	str.w	r3, [r4, #-4]
 8008502:	3c04      	subs	r4, #4
 8008504:	6822      	ldr	r2, [r4, #0]
 8008506:	f000 000f 	and.w	r0, r0, #15
 800850a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800850e:	6020      	str	r0, [r4, #0]
 8008510:	e7b7      	b.n	8008482 <__hexnan+0x7a>
 8008512:	2508      	movs	r5, #8
 8008514:	e7b5      	b.n	8008482 <__hexnan+0x7a>
 8008516:	9b01      	ldr	r3, [sp, #4]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d0df      	beq.n	80084dc <__hexnan+0xd4>
 800851c:	f04f 32ff 	mov.w	r2, #4294967295
 8008520:	f1c3 0320 	rsb	r3, r3, #32
 8008524:	40da      	lsrs	r2, r3
 8008526:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800852a:	4013      	ands	r3, r2
 800852c:	f846 3c04 	str.w	r3, [r6, #-4]
 8008530:	e7d4      	b.n	80084dc <__hexnan+0xd4>
 8008532:	3f04      	subs	r7, #4
 8008534:	e7d2      	b.n	80084dc <__hexnan+0xd4>
 8008536:	2004      	movs	r0, #4
 8008538:	b007      	add	sp, #28
 800853a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800853e <__ascii_mbtowc>:
 800853e:	b082      	sub	sp, #8
 8008540:	b901      	cbnz	r1, 8008544 <__ascii_mbtowc+0x6>
 8008542:	a901      	add	r1, sp, #4
 8008544:	b142      	cbz	r2, 8008558 <__ascii_mbtowc+0x1a>
 8008546:	b14b      	cbz	r3, 800855c <__ascii_mbtowc+0x1e>
 8008548:	7813      	ldrb	r3, [r2, #0]
 800854a:	600b      	str	r3, [r1, #0]
 800854c:	7812      	ldrb	r2, [r2, #0]
 800854e:	1e10      	subs	r0, r2, #0
 8008550:	bf18      	it	ne
 8008552:	2001      	movne	r0, #1
 8008554:	b002      	add	sp, #8
 8008556:	4770      	bx	lr
 8008558:	4610      	mov	r0, r2
 800855a:	e7fb      	b.n	8008554 <__ascii_mbtowc+0x16>
 800855c:	f06f 0001 	mvn.w	r0, #1
 8008560:	e7f8      	b.n	8008554 <__ascii_mbtowc+0x16>

08008562 <_realloc_r>:
 8008562:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008566:	4680      	mov	r8, r0
 8008568:	4614      	mov	r4, r2
 800856a:	460e      	mov	r6, r1
 800856c:	b921      	cbnz	r1, 8008578 <_realloc_r+0x16>
 800856e:	4611      	mov	r1, r2
 8008570:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008574:	f7fd bad8 	b.w	8005b28 <_malloc_r>
 8008578:	b92a      	cbnz	r2, 8008586 <_realloc_r+0x24>
 800857a:	f7fd fa65 	bl	8005a48 <_free_r>
 800857e:	4625      	mov	r5, r4
 8008580:	4628      	mov	r0, r5
 8008582:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008586:	f000 f8b6 	bl	80086f6 <_malloc_usable_size_r>
 800858a:	4284      	cmp	r4, r0
 800858c:	4607      	mov	r7, r0
 800858e:	d802      	bhi.n	8008596 <_realloc_r+0x34>
 8008590:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008594:	d812      	bhi.n	80085bc <_realloc_r+0x5a>
 8008596:	4621      	mov	r1, r4
 8008598:	4640      	mov	r0, r8
 800859a:	f7fd fac5 	bl	8005b28 <_malloc_r>
 800859e:	4605      	mov	r5, r0
 80085a0:	2800      	cmp	r0, #0
 80085a2:	d0ed      	beq.n	8008580 <_realloc_r+0x1e>
 80085a4:	42bc      	cmp	r4, r7
 80085a6:	4622      	mov	r2, r4
 80085a8:	4631      	mov	r1, r6
 80085aa:	bf28      	it	cs
 80085ac:	463a      	movcs	r2, r7
 80085ae:	f7fc fbc8 	bl	8004d42 <memcpy>
 80085b2:	4631      	mov	r1, r6
 80085b4:	4640      	mov	r0, r8
 80085b6:	f7fd fa47 	bl	8005a48 <_free_r>
 80085ba:	e7e1      	b.n	8008580 <_realloc_r+0x1e>
 80085bc:	4635      	mov	r5, r6
 80085be:	e7df      	b.n	8008580 <_realloc_r+0x1e>

080085c0 <_strtoul_l.constprop.0>:
 80085c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80085c4:	4686      	mov	lr, r0
 80085c6:	460d      	mov	r5, r1
 80085c8:	4f35      	ldr	r7, [pc, #212]	; (80086a0 <_strtoul_l.constprop.0+0xe0>)
 80085ca:	4628      	mov	r0, r5
 80085cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80085d0:	5d3e      	ldrb	r6, [r7, r4]
 80085d2:	f016 0608 	ands.w	r6, r6, #8
 80085d6:	d1f8      	bne.n	80085ca <_strtoul_l.constprop.0+0xa>
 80085d8:	2c2d      	cmp	r4, #45	; 0x2d
 80085da:	d130      	bne.n	800863e <_strtoul_l.constprop.0+0x7e>
 80085dc:	2601      	movs	r6, #1
 80085de:	782c      	ldrb	r4, [r5, #0]
 80085e0:	1c85      	adds	r5, r0, #2
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d057      	beq.n	8008696 <_strtoul_l.constprop.0+0xd6>
 80085e6:	2b10      	cmp	r3, #16
 80085e8:	d109      	bne.n	80085fe <_strtoul_l.constprop.0+0x3e>
 80085ea:	2c30      	cmp	r4, #48	; 0x30
 80085ec:	d107      	bne.n	80085fe <_strtoul_l.constprop.0+0x3e>
 80085ee:	7828      	ldrb	r0, [r5, #0]
 80085f0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80085f4:	2858      	cmp	r0, #88	; 0x58
 80085f6:	d149      	bne.n	800868c <_strtoul_l.constprop.0+0xcc>
 80085f8:	2310      	movs	r3, #16
 80085fa:	786c      	ldrb	r4, [r5, #1]
 80085fc:	3502      	adds	r5, #2
 80085fe:	f04f 38ff 	mov.w	r8, #4294967295
 8008602:	fbb8 f8f3 	udiv	r8, r8, r3
 8008606:	2700      	movs	r7, #0
 8008608:	fb03 f908 	mul.w	r9, r3, r8
 800860c:	4638      	mov	r0, r7
 800860e:	ea6f 0909 	mvn.w	r9, r9
 8008612:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008616:	f1bc 0f09 	cmp.w	ip, #9
 800861a:	d815      	bhi.n	8008648 <_strtoul_l.constprop.0+0x88>
 800861c:	4664      	mov	r4, ip
 800861e:	42a3      	cmp	r3, r4
 8008620:	dd23      	ble.n	800866a <_strtoul_l.constprop.0+0xaa>
 8008622:	f1b7 3fff 	cmp.w	r7, #4294967295
 8008626:	d007      	beq.n	8008638 <_strtoul_l.constprop.0+0x78>
 8008628:	4580      	cmp	r8, r0
 800862a:	d31b      	bcc.n	8008664 <_strtoul_l.constprop.0+0xa4>
 800862c:	d101      	bne.n	8008632 <_strtoul_l.constprop.0+0x72>
 800862e:	45a1      	cmp	r9, r4
 8008630:	db18      	blt.n	8008664 <_strtoul_l.constprop.0+0xa4>
 8008632:	2701      	movs	r7, #1
 8008634:	fb00 4003 	mla	r0, r0, r3, r4
 8008638:	f815 4b01 	ldrb.w	r4, [r5], #1
 800863c:	e7e9      	b.n	8008612 <_strtoul_l.constprop.0+0x52>
 800863e:	2c2b      	cmp	r4, #43	; 0x2b
 8008640:	bf04      	itt	eq
 8008642:	782c      	ldrbeq	r4, [r5, #0]
 8008644:	1c85      	addeq	r5, r0, #2
 8008646:	e7cc      	b.n	80085e2 <_strtoul_l.constprop.0+0x22>
 8008648:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800864c:	f1bc 0f19 	cmp.w	ip, #25
 8008650:	d801      	bhi.n	8008656 <_strtoul_l.constprop.0+0x96>
 8008652:	3c37      	subs	r4, #55	; 0x37
 8008654:	e7e3      	b.n	800861e <_strtoul_l.constprop.0+0x5e>
 8008656:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800865a:	f1bc 0f19 	cmp.w	ip, #25
 800865e:	d804      	bhi.n	800866a <_strtoul_l.constprop.0+0xaa>
 8008660:	3c57      	subs	r4, #87	; 0x57
 8008662:	e7dc      	b.n	800861e <_strtoul_l.constprop.0+0x5e>
 8008664:	f04f 37ff 	mov.w	r7, #4294967295
 8008668:	e7e6      	b.n	8008638 <_strtoul_l.constprop.0+0x78>
 800866a:	1c7b      	adds	r3, r7, #1
 800866c:	d106      	bne.n	800867c <_strtoul_l.constprop.0+0xbc>
 800866e:	2322      	movs	r3, #34	; 0x22
 8008670:	4638      	mov	r0, r7
 8008672:	f8ce 3000 	str.w	r3, [lr]
 8008676:	b932      	cbnz	r2, 8008686 <_strtoul_l.constprop.0+0xc6>
 8008678:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800867c:	b106      	cbz	r6, 8008680 <_strtoul_l.constprop.0+0xc0>
 800867e:	4240      	negs	r0, r0
 8008680:	2a00      	cmp	r2, #0
 8008682:	d0f9      	beq.n	8008678 <_strtoul_l.constprop.0+0xb8>
 8008684:	b107      	cbz	r7, 8008688 <_strtoul_l.constprop.0+0xc8>
 8008686:	1e69      	subs	r1, r5, #1
 8008688:	6011      	str	r1, [r2, #0]
 800868a:	e7f5      	b.n	8008678 <_strtoul_l.constprop.0+0xb8>
 800868c:	2430      	movs	r4, #48	; 0x30
 800868e:	2b00      	cmp	r3, #0
 8008690:	d1b5      	bne.n	80085fe <_strtoul_l.constprop.0+0x3e>
 8008692:	2308      	movs	r3, #8
 8008694:	e7b3      	b.n	80085fe <_strtoul_l.constprop.0+0x3e>
 8008696:	2c30      	cmp	r4, #48	; 0x30
 8008698:	d0a9      	beq.n	80085ee <_strtoul_l.constprop.0+0x2e>
 800869a:	230a      	movs	r3, #10
 800869c:	e7af      	b.n	80085fe <_strtoul_l.constprop.0+0x3e>
 800869e:	bf00      	nop
 80086a0:	080096c9 	.word	0x080096c9

080086a4 <_strtoul_r>:
 80086a4:	f7ff bf8c 	b.w	80085c0 <_strtoul_l.constprop.0>

080086a8 <__ascii_wctomb>:
 80086a8:	4603      	mov	r3, r0
 80086aa:	4608      	mov	r0, r1
 80086ac:	b141      	cbz	r1, 80086c0 <__ascii_wctomb+0x18>
 80086ae:	2aff      	cmp	r2, #255	; 0xff
 80086b0:	d904      	bls.n	80086bc <__ascii_wctomb+0x14>
 80086b2:	228a      	movs	r2, #138	; 0x8a
 80086b4:	f04f 30ff 	mov.w	r0, #4294967295
 80086b8:	601a      	str	r2, [r3, #0]
 80086ba:	4770      	bx	lr
 80086bc:	2001      	movs	r0, #1
 80086be:	700a      	strb	r2, [r1, #0]
 80086c0:	4770      	bx	lr
	...

080086c4 <fiprintf>:
 80086c4:	b40e      	push	{r1, r2, r3}
 80086c6:	b503      	push	{r0, r1, lr}
 80086c8:	4601      	mov	r1, r0
 80086ca:	ab03      	add	r3, sp, #12
 80086cc:	4805      	ldr	r0, [pc, #20]	; (80086e4 <fiprintf+0x20>)
 80086ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80086d2:	6800      	ldr	r0, [r0, #0]
 80086d4:	9301      	str	r3, [sp, #4]
 80086d6:	f000 f83d 	bl	8008754 <_vfiprintf_r>
 80086da:	b002      	add	sp, #8
 80086dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80086e0:	b003      	add	sp, #12
 80086e2:	4770      	bx	lr
 80086e4:	20000064 	.word	0x20000064

080086e8 <abort>:
 80086e8:	2006      	movs	r0, #6
 80086ea:	b508      	push	{r3, lr}
 80086ec:	f000 fa0a 	bl	8008b04 <raise>
 80086f0:	2001      	movs	r0, #1
 80086f2:	f7f8 ffde 	bl	80016b2 <_exit>

080086f6 <_malloc_usable_size_r>:
 80086f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086fa:	1f18      	subs	r0, r3, #4
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	bfbc      	itt	lt
 8008700:	580b      	ldrlt	r3, [r1, r0]
 8008702:	18c0      	addlt	r0, r0, r3
 8008704:	4770      	bx	lr

08008706 <__sfputc_r>:
 8008706:	6893      	ldr	r3, [r2, #8]
 8008708:	b410      	push	{r4}
 800870a:	3b01      	subs	r3, #1
 800870c:	2b00      	cmp	r3, #0
 800870e:	6093      	str	r3, [r2, #8]
 8008710:	da07      	bge.n	8008722 <__sfputc_r+0x1c>
 8008712:	6994      	ldr	r4, [r2, #24]
 8008714:	42a3      	cmp	r3, r4
 8008716:	db01      	blt.n	800871c <__sfputc_r+0x16>
 8008718:	290a      	cmp	r1, #10
 800871a:	d102      	bne.n	8008722 <__sfputc_r+0x1c>
 800871c:	bc10      	pop	{r4}
 800871e:	f000 b933 	b.w	8008988 <__swbuf_r>
 8008722:	6813      	ldr	r3, [r2, #0]
 8008724:	1c58      	adds	r0, r3, #1
 8008726:	6010      	str	r0, [r2, #0]
 8008728:	7019      	strb	r1, [r3, #0]
 800872a:	4608      	mov	r0, r1
 800872c:	bc10      	pop	{r4}
 800872e:	4770      	bx	lr

08008730 <__sfputs_r>:
 8008730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008732:	4606      	mov	r6, r0
 8008734:	460f      	mov	r7, r1
 8008736:	4614      	mov	r4, r2
 8008738:	18d5      	adds	r5, r2, r3
 800873a:	42ac      	cmp	r4, r5
 800873c:	d101      	bne.n	8008742 <__sfputs_r+0x12>
 800873e:	2000      	movs	r0, #0
 8008740:	e007      	b.n	8008752 <__sfputs_r+0x22>
 8008742:	463a      	mov	r2, r7
 8008744:	4630      	mov	r0, r6
 8008746:	f814 1b01 	ldrb.w	r1, [r4], #1
 800874a:	f7ff ffdc 	bl	8008706 <__sfputc_r>
 800874e:	1c43      	adds	r3, r0, #1
 8008750:	d1f3      	bne.n	800873a <__sfputs_r+0xa>
 8008752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008754 <_vfiprintf_r>:
 8008754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008758:	460d      	mov	r5, r1
 800875a:	4614      	mov	r4, r2
 800875c:	4698      	mov	r8, r3
 800875e:	4606      	mov	r6, r0
 8008760:	b09d      	sub	sp, #116	; 0x74
 8008762:	b118      	cbz	r0, 800876c <_vfiprintf_r+0x18>
 8008764:	6a03      	ldr	r3, [r0, #32]
 8008766:	b90b      	cbnz	r3, 800876c <_vfiprintf_r+0x18>
 8008768:	f7fc f97e 	bl	8004a68 <__sinit>
 800876c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800876e:	07d9      	lsls	r1, r3, #31
 8008770:	d405      	bmi.n	800877e <_vfiprintf_r+0x2a>
 8008772:	89ab      	ldrh	r3, [r5, #12]
 8008774:	059a      	lsls	r2, r3, #22
 8008776:	d402      	bmi.n	800877e <_vfiprintf_r+0x2a>
 8008778:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800877a:	f7fc fad2 	bl	8004d22 <__retarget_lock_acquire_recursive>
 800877e:	89ab      	ldrh	r3, [r5, #12]
 8008780:	071b      	lsls	r3, r3, #28
 8008782:	d501      	bpl.n	8008788 <_vfiprintf_r+0x34>
 8008784:	692b      	ldr	r3, [r5, #16]
 8008786:	b99b      	cbnz	r3, 80087b0 <_vfiprintf_r+0x5c>
 8008788:	4629      	mov	r1, r5
 800878a:	4630      	mov	r0, r6
 800878c:	f000 f93a 	bl	8008a04 <__swsetup_r>
 8008790:	b170      	cbz	r0, 80087b0 <_vfiprintf_r+0x5c>
 8008792:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008794:	07dc      	lsls	r4, r3, #31
 8008796:	d504      	bpl.n	80087a2 <_vfiprintf_r+0x4e>
 8008798:	f04f 30ff 	mov.w	r0, #4294967295
 800879c:	b01d      	add	sp, #116	; 0x74
 800879e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087a2:	89ab      	ldrh	r3, [r5, #12]
 80087a4:	0598      	lsls	r0, r3, #22
 80087a6:	d4f7      	bmi.n	8008798 <_vfiprintf_r+0x44>
 80087a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087aa:	f7fc fabb 	bl	8004d24 <__retarget_lock_release_recursive>
 80087ae:	e7f3      	b.n	8008798 <_vfiprintf_r+0x44>
 80087b0:	2300      	movs	r3, #0
 80087b2:	9309      	str	r3, [sp, #36]	; 0x24
 80087b4:	2320      	movs	r3, #32
 80087b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80087ba:	2330      	movs	r3, #48	; 0x30
 80087bc:	f04f 0901 	mov.w	r9, #1
 80087c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80087c4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8008974 <_vfiprintf_r+0x220>
 80087c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80087cc:	4623      	mov	r3, r4
 80087ce:	469a      	mov	sl, r3
 80087d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087d4:	b10a      	cbz	r2, 80087da <_vfiprintf_r+0x86>
 80087d6:	2a25      	cmp	r2, #37	; 0x25
 80087d8:	d1f9      	bne.n	80087ce <_vfiprintf_r+0x7a>
 80087da:	ebba 0b04 	subs.w	fp, sl, r4
 80087de:	d00b      	beq.n	80087f8 <_vfiprintf_r+0xa4>
 80087e0:	465b      	mov	r3, fp
 80087e2:	4622      	mov	r2, r4
 80087e4:	4629      	mov	r1, r5
 80087e6:	4630      	mov	r0, r6
 80087e8:	f7ff ffa2 	bl	8008730 <__sfputs_r>
 80087ec:	3001      	adds	r0, #1
 80087ee:	f000 80a9 	beq.w	8008944 <_vfiprintf_r+0x1f0>
 80087f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087f4:	445a      	add	r2, fp
 80087f6:	9209      	str	r2, [sp, #36]	; 0x24
 80087f8:	f89a 3000 	ldrb.w	r3, [sl]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	f000 80a1 	beq.w	8008944 <_vfiprintf_r+0x1f0>
 8008802:	2300      	movs	r3, #0
 8008804:	f04f 32ff 	mov.w	r2, #4294967295
 8008808:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800880c:	f10a 0a01 	add.w	sl, sl, #1
 8008810:	9304      	str	r3, [sp, #16]
 8008812:	9307      	str	r3, [sp, #28]
 8008814:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008818:	931a      	str	r3, [sp, #104]	; 0x68
 800881a:	4654      	mov	r4, sl
 800881c:	2205      	movs	r2, #5
 800881e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008822:	4854      	ldr	r0, [pc, #336]	; (8008974 <_vfiprintf_r+0x220>)
 8008824:	f7fc fa7f 	bl	8004d26 <memchr>
 8008828:	9a04      	ldr	r2, [sp, #16]
 800882a:	b9d8      	cbnz	r0, 8008864 <_vfiprintf_r+0x110>
 800882c:	06d1      	lsls	r1, r2, #27
 800882e:	bf44      	itt	mi
 8008830:	2320      	movmi	r3, #32
 8008832:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008836:	0713      	lsls	r3, r2, #28
 8008838:	bf44      	itt	mi
 800883a:	232b      	movmi	r3, #43	; 0x2b
 800883c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008840:	f89a 3000 	ldrb.w	r3, [sl]
 8008844:	2b2a      	cmp	r3, #42	; 0x2a
 8008846:	d015      	beq.n	8008874 <_vfiprintf_r+0x120>
 8008848:	4654      	mov	r4, sl
 800884a:	2000      	movs	r0, #0
 800884c:	f04f 0c0a 	mov.w	ip, #10
 8008850:	9a07      	ldr	r2, [sp, #28]
 8008852:	4621      	mov	r1, r4
 8008854:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008858:	3b30      	subs	r3, #48	; 0x30
 800885a:	2b09      	cmp	r3, #9
 800885c:	d94d      	bls.n	80088fa <_vfiprintf_r+0x1a6>
 800885e:	b1b0      	cbz	r0, 800888e <_vfiprintf_r+0x13a>
 8008860:	9207      	str	r2, [sp, #28]
 8008862:	e014      	b.n	800888e <_vfiprintf_r+0x13a>
 8008864:	eba0 0308 	sub.w	r3, r0, r8
 8008868:	fa09 f303 	lsl.w	r3, r9, r3
 800886c:	4313      	orrs	r3, r2
 800886e:	46a2      	mov	sl, r4
 8008870:	9304      	str	r3, [sp, #16]
 8008872:	e7d2      	b.n	800881a <_vfiprintf_r+0xc6>
 8008874:	9b03      	ldr	r3, [sp, #12]
 8008876:	1d19      	adds	r1, r3, #4
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	9103      	str	r1, [sp, #12]
 800887c:	2b00      	cmp	r3, #0
 800887e:	bfbb      	ittet	lt
 8008880:	425b      	neglt	r3, r3
 8008882:	f042 0202 	orrlt.w	r2, r2, #2
 8008886:	9307      	strge	r3, [sp, #28]
 8008888:	9307      	strlt	r3, [sp, #28]
 800888a:	bfb8      	it	lt
 800888c:	9204      	strlt	r2, [sp, #16]
 800888e:	7823      	ldrb	r3, [r4, #0]
 8008890:	2b2e      	cmp	r3, #46	; 0x2e
 8008892:	d10c      	bne.n	80088ae <_vfiprintf_r+0x15a>
 8008894:	7863      	ldrb	r3, [r4, #1]
 8008896:	2b2a      	cmp	r3, #42	; 0x2a
 8008898:	d134      	bne.n	8008904 <_vfiprintf_r+0x1b0>
 800889a:	9b03      	ldr	r3, [sp, #12]
 800889c:	3402      	adds	r4, #2
 800889e:	1d1a      	adds	r2, r3, #4
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	9203      	str	r2, [sp, #12]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	bfb8      	it	lt
 80088a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80088ac:	9305      	str	r3, [sp, #20]
 80088ae:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008978 <_vfiprintf_r+0x224>
 80088b2:	2203      	movs	r2, #3
 80088b4:	4650      	mov	r0, sl
 80088b6:	7821      	ldrb	r1, [r4, #0]
 80088b8:	f7fc fa35 	bl	8004d26 <memchr>
 80088bc:	b138      	cbz	r0, 80088ce <_vfiprintf_r+0x17a>
 80088be:	2240      	movs	r2, #64	; 0x40
 80088c0:	9b04      	ldr	r3, [sp, #16]
 80088c2:	eba0 000a 	sub.w	r0, r0, sl
 80088c6:	4082      	lsls	r2, r0
 80088c8:	4313      	orrs	r3, r2
 80088ca:	3401      	adds	r4, #1
 80088cc:	9304      	str	r3, [sp, #16]
 80088ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088d2:	2206      	movs	r2, #6
 80088d4:	4829      	ldr	r0, [pc, #164]	; (800897c <_vfiprintf_r+0x228>)
 80088d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80088da:	f7fc fa24 	bl	8004d26 <memchr>
 80088de:	2800      	cmp	r0, #0
 80088e0:	d03f      	beq.n	8008962 <_vfiprintf_r+0x20e>
 80088e2:	4b27      	ldr	r3, [pc, #156]	; (8008980 <_vfiprintf_r+0x22c>)
 80088e4:	bb1b      	cbnz	r3, 800892e <_vfiprintf_r+0x1da>
 80088e6:	9b03      	ldr	r3, [sp, #12]
 80088e8:	3307      	adds	r3, #7
 80088ea:	f023 0307 	bic.w	r3, r3, #7
 80088ee:	3308      	adds	r3, #8
 80088f0:	9303      	str	r3, [sp, #12]
 80088f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088f4:	443b      	add	r3, r7
 80088f6:	9309      	str	r3, [sp, #36]	; 0x24
 80088f8:	e768      	b.n	80087cc <_vfiprintf_r+0x78>
 80088fa:	460c      	mov	r4, r1
 80088fc:	2001      	movs	r0, #1
 80088fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8008902:	e7a6      	b.n	8008852 <_vfiprintf_r+0xfe>
 8008904:	2300      	movs	r3, #0
 8008906:	f04f 0c0a 	mov.w	ip, #10
 800890a:	4619      	mov	r1, r3
 800890c:	3401      	adds	r4, #1
 800890e:	9305      	str	r3, [sp, #20]
 8008910:	4620      	mov	r0, r4
 8008912:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008916:	3a30      	subs	r2, #48	; 0x30
 8008918:	2a09      	cmp	r2, #9
 800891a:	d903      	bls.n	8008924 <_vfiprintf_r+0x1d0>
 800891c:	2b00      	cmp	r3, #0
 800891e:	d0c6      	beq.n	80088ae <_vfiprintf_r+0x15a>
 8008920:	9105      	str	r1, [sp, #20]
 8008922:	e7c4      	b.n	80088ae <_vfiprintf_r+0x15a>
 8008924:	4604      	mov	r4, r0
 8008926:	2301      	movs	r3, #1
 8008928:	fb0c 2101 	mla	r1, ip, r1, r2
 800892c:	e7f0      	b.n	8008910 <_vfiprintf_r+0x1bc>
 800892e:	ab03      	add	r3, sp, #12
 8008930:	9300      	str	r3, [sp, #0]
 8008932:	462a      	mov	r2, r5
 8008934:	4630      	mov	r0, r6
 8008936:	4b13      	ldr	r3, [pc, #76]	; (8008984 <_vfiprintf_r+0x230>)
 8008938:	a904      	add	r1, sp, #16
 800893a:	f7fb fa39 	bl	8003db0 <_printf_float>
 800893e:	4607      	mov	r7, r0
 8008940:	1c78      	adds	r0, r7, #1
 8008942:	d1d6      	bne.n	80088f2 <_vfiprintf_r+0x19e>
 8008944:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008946:	07d9      	lsls	r1, r3, #31
 8008948:	d405      	bmi.n	8008956 <_vfiprintf_r+0x202>
 800894a:	89ab      	ldrh	r3, [r5, #12]
 800894c:	059a      	lsls	r2, r3, #22
 800894e:	d402      	bmi.n	8008956 <_vfiprintf_r+0x202>
 8008950:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008952:	f7fc f9e7 	bl	8004d24 <__retarget_lock_release_recursive>
 8008956:	89ab      	ldrh	r3, [r5, #12]
 8008958:	065b      	lsls	r3, r3, #25
 800895a:	f53f af1d 	bmi.w	8008798 <_vfiprintf_r+0x44>
 800895e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008960:	e71c      	b.n	800879c <_vfiprintf_r+0x48>
 8008962:	ab03      	add	r3, sp, #12
 8008964:	9300      	str	r3, [sp, #0]
 8008966:	462a      	mov	r2, r5
 8008968:	4630      	mov	r0, r6
 800896a:	4b06      	ldr	r3, [pc, #24]	; (8008984 <_vfiprintf_r+0x230>)
 800896c:	a904      	add	r1, sp, #16
 800896e:	f7fb fcbf 	bl	80042f0 <_printf_i>
 8008972:	e7e4      	b.n	800893e <_vfiprintf_r+0x1ea>
 8008974:	080097c9 	.word	0x080097c9
 8008978:	080097cf 	.word	0x080097cf
 800897c:	080097d3 	.word	0x080097d3
 8008980:	08003db1 	.word	0x08003db1
 8008984:	08008731 	.word	0x08008731

08008988 <__swbuf_r>:
 8008988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800898a:	460e      	mov	r6, r1
 800898c:	4614      	mov	r4, r2
 800898e:	4605      	mov	r5, r0
 8008990:	b118      	cbz	r0, 800899a <__swbuf_r+0x12>
 8008992:	6a03      	ldr	r3, [r0, #32]
 8008994:	b90b      	cbnz	r3, 800899a <__swbuf_r+0x12>
 8008996:	f7fc f867 	bl	8004a68 <__sinit>
 800899a:	69a3      	ldr	r3, [r4, #24]
 800899c:	60a3      	str	r3, [r4, #8]
 800899e:	89a3      	ldrh	r3, [r4, #12]
 80089a0:	071a      	lsls	r2, r3, #28
 80089a2:	d525      	bpl.n	80089f0 <__swbuf_r+0x68>
 80089a4:	6923      	ldr	r3, [r4, #16]
 80089a6:	b31b      	cbz	r3, 80089f0 <__swbuf_r+0x68>
 80089a8:	6823      	ldr	r3, [r4, #0]
 80089aa:	6922      	ldr	r2, [r4, #16]
 80089ac:	b2f6      	uxtb	r6, r6
 80089ae:	1a98      	subs	r0, r3, r2
 80089b0:	6963      	ldr	r3, [r4, #20]
 80089b2:	4637      	mov	r7, r6
 80089b4:	4283      	cmp	r3, r0
 80089b6:	dc04      	bgt.n	80089c2 <__swbuf_r+0x3a>
 80089b8:	4621      	mov	r1, r4
 80089ba:	4628      	mov	r0, r5
 80089bc:	f7ff f972 	bl	8007ca4 <_fflush_r>
 80089c0:	b9e0      	cbnz	r0, 80089fc <__swbuf_r+0x74>
 80089c2:	68a3      	ldr	r3, [r4, #8]
 80089c4:	3b01      	subs	r3, #1
 80089c6:	60a3      	str	r3, [r4, #8]
 80089c8:	6823      	ldr	r3, [r4, #0]
 80089ca:	1c5a      	adds	r2, r3, #1
 80089cc:	6022      	str	r2, [r4, #0]
 80089ce:	701e      	strb	r6, [r3, #0]
 80089d0:	6962      	ldr	r2, [r4, #20]
 80089d2:	1c43      	adds	r3, r0, #1
 80089d4:	429a      	cmp	r2, r3
 80089d6:	d004      	beq.n	80089e2 <__swbuf_r+0x5a>
 80089d8:	89a3      	ldrh	r3, [r4, #12]
 80089da:	07db      	lsls	r3, r3, #31
 80089dc:	d506      	bpl.n	80089ec <__swbuf_r+0x64>
 80089de:	2e0a      	cmp	r6, #10
 80089e0:	d104      	bne.n	80089ec <__swbuf_r+0x64>
 80089e2:	4621      	mov	r1, r4
 80089e4:	4628      	mov	r0, r5
 80089e6:	f7ff f95d 	bl	8007ca4 <_fflush_r>
 80089ea:	b938      	cbnz	r0, 80089fc <__swbuf_r+0x74>
 80089ec:	4638      	mov	r0, r7
 80089ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089f0:	4621      	mov	r1, r4
 80089f2:	4628      	mov	r0, r5
 80089f4:	f000 f806 	bl	8008a04 <__swsetup_r>
 80089f8:	2800      	cmp	r0, #0
 80089fa:	d0d5      	beq.n	80089a8 <__swbuf_r+0x20>
 80089fc:	f04f 37ff 	mov.w	r7, #4294967295
 8008a00:	e7f4      	b.n	80089ec <__swbuf_r+0x64>
	...

08008a04 <__swsetup_r>:
 8008a04:	b538      	push	{r3, r4, r5, lr}
 8008a06:	4b2a      	ldr	r3, [pc, #168]	; (8008ab0 <__swsetup_r+0xac>)
 8008a08:	4605      	mov	r5, r0
 8008a0a:	6818      	ldr	r0, [r3, #0]
 8008a0c:	460c      	mov	r4, r1
 8008a0e:	b118      	cbz	r0, 8008a18 <__swsetup_r+0x14>
 8008a10:	6a03      	ldr	r3, [r0, #32]
 8008a12:	b90b      	cbnz	r3, 8008a18 <__swsetup_r+0x14>
 8008a14:	f7fc f828 	bl	8004a68 <__sinit>
 8008a18:	89a3      	ldrh	r3, [r4, #12]
 8008a1a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008a1e:	0718      	lsls	r0, r3, #28
 8008a20:	d422      	bmi.n	8008a68 <__swsetup_r+0x64>
 8008a22:	06d9      	lsls	r1, r3, #27
 8008a24:	d407      	bmi.n	8008a36 <__swsetup_r+0x32>
 8008a26:	2309      	movs	r3, #9
 8008a28:	602b      	str	r3, [r5, #0]
 8008a2a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008a2e:	f04f 30ff 	mov.w	r0, #4294967295
 8008a32:	81a3      	strh	r3, [r4, #12]
 8008a34:	e034      	b.n	8008aa0 <__swsetup_r+0x9c>
 8008a36:	0758      	lsls	r0, r3, #29
 8008a38:	d512      	bpl.n	8008a60 <__swsetup_r+0x5c>
 8008a3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a3c:	b141      	cbz	r1, 8008a50 <__swsetup_r+0x4c>
 8008a3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a42:	4299      	cmp	r1, r3
 8008a44:	d002      	beq.n	8008a4c <__swsetup_r+0x48>
 8008a46:	4628      	mov	r0, r5
 8008a48:	f7fc fffe 	bl	8005a48 <_free_r>
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	6363      	str	r3, [r4, #52]	; 0x34
 8008a50:	89a3      	ldrh	r3, [r4, #12]
 8008a52:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008a56:	81a3      	strh	r3, [r4, #12]
 8008a58:	2300      	movs	r3, #0
 8008a5a:	6063      	str	r3, [r4, #4]
 8008a5c:	6923      	ldr	r3, [r4, #16]
 8008a5e:	6023      	str	r3, [r4, #0]
 8008a60:	89a3      	ldrh	r3, [r4, #12]
 8008a62:	f043 0308 	orr.w	r3, r3, #8
 8008a66:	81a3      	strh	r3, [r4, #12]
 8008a68:	6923      	ldr	r3, [r4, #16]
 8008a6a:	b94b      	cbnz	r3, 8008a80 <__swsetup_r+0x7c>
 8008a6c:	89a3      	ldrh	r3, [r4, #12]
 8008a6e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008a72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a76:	d003      	beq.n	8008a80 <__swsetup_r+0x7c>
 8008a78:	4621      	mov	r1, r4
 8008a7a:	4628      	mov	r0, r5
 8008a7c:	f000 f883 	bl	8008b86 <__smakebuf_r>
 8008a80:	89a0      	ldrh	r0, [r4, #12]
 8008a82:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008a86:	f010 0301 	ands.w	r3, r0, #1
 8008a8a:	d00a      	beq.n	8008aa2 <__swsetup_r+0x9e>
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	60a3      	str	r3, [r4, #8]
 8008a90:	6963      	ldr	r3, [r4, #20]
 8008a92:	425b      	negs	r3, r3
 8008a94:	61a3      	str	r3, [r4, #24]
 8008a96:	6923      	ldr	r3, [r4, #16]
 8008a98:	b943      	cbnz	r3, 8008aac <__swsetup_r+0xa8>
 8008a9a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008a9e:	d1c4      	bne.n	8008a2a <__swsetup_r+0x26>
 8008aa0:	bd38      	pop	{r3, r4, r5, pc}
 8008aa2:	0781      	lsls	r1, r0, #30
 8008aa4:	bf58      	it	pl
 8008aa6:	6963      	ldrpl	r3, [r4, #20]
 8008aa8:	60a3      	str	r3, [r4, #8]
 8008aaa:	e7f4      	b.n	8008a96 <__swsetup_r+0x92>
 8008aac:	2000      	movs	r0, #0
 8008aae:	e7f7      	b.n	8008aa0 <__swsetup_r+0x9c>
 8008ab0:	20000064 	.word	0x20000064

08008ab4 <_raise_r>:
 8008ab4:	291f      	cmp	r1, #31
 8008ab6:	b538      	push	{r3, r4, r5, lr}
 8008ab8:	4604      	mov	r4, r0
 8008aba:	460d      	mov	r5, r1
 8008abc:	d904      	bls.n	8008ac8 <_raise_r+0x14>
 8008abe:	2316      	movs	r3, #22
 8008ac0:	6003      	str	r3, [r0, #0]
 8008ac2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ac6:	bd38      	pop	{r3, r4, r5, pc}
 8008ac8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008aca:	b112      	cbz	r2, 8008ad2 <_raise_r+0x1e>
 8008acc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008ad0:	b94b      	cbnz	r3, 8008ae6 <_raise_r+0x32>
 8008ad2:	4620      	mov	r0, r4
 8008ad4:	f000 f830 	bl	8008b38 <_getpid_r>
 8008ad8:	462a      	mov	r2, r5
 8008ada:	4601      	mov	r1, r0
 8008adc:	4620      	mov	r0, r4
 8008ade:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ae2:	f000 b817 	b.w	8008b14 <_kill_r>
 8008ae6:	2b01      	cmp	r3, #1
 8008ae8:	d00a      	beq.n	8008b00 <_raise_r+0x4c>
 8008aea:	1c59      	adds	r1, r3, #1
 8008aec:	d103      	bne.n	8008af6 <_raise_r+0x42>
 8008aee:	2316      	movs	r3, #22
 8008af0:	6003      	str	r3, [r0, #0]
 8008af2:	2001      	movs	r0, #1
 8008af4:	e7e7      	b.n	8008ac6 <_raise_r+0x12>
 8008af6:	2400      	movs	r4, #0
 8008af8:	4628      	mov	r0, r5
 8008afa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008afe:	4798      	blx	r3
 8008b00:	2000      	movs	r0, #0
 8008b02:	e7e0      	b.n	8008ac6 <_raise_r+0x12>

08008b04 <raise>:
 8008b04:	4b02      	ldr	r3, [pc, #8]	; (8008b10 <raise+0xc>)
 8008b06:	4601      	mov	r1, r0
 8008b08:	6818      	ldr	r0, [r3, #0]
 8008b0a:	f7ff bfd3 	b.w	8008ab4 <_raise_r>
 8008b0e:	bf00      	nop
 8008b10:	20000064 	.word	0x20000064

08008b14 <_kill_r>:
 8008b14:	b538      	push	{r3, r4, r5, lr}
 8008b16:	2300      	movs	r3, #0
 8008b18:	4d06      	ldr	r5, [pc, #24]	; (8008b34 <_kill_r+0x20>)
 8008b1a:	4604      	mov	r4, r0
 8008b1c:	4608      	mov	r0, r1
 8008b1e:	4611      	mov	r1, r2
 8008b20:	602b      	str	r3, [r5, #0]
 8008b22:	f7f8 fdb6 	bl	8001692 <_kill>
 8008b26:	1c43      	adds	r3, r0, #1
 8008b28:	d102      	bne.n	8008b30 <_kill_r+0x1c>
 8008b2a:	682b      	ldr	r3, [r5, #0]
 8008b2c:	b103      	cbz	r3, 8008b30 <_kill_r+0x1c>
 8008b2e:	6023      	str	r3, [r4, #0]
 8008b30:	bd38      	pop	{r3, r4, r5, pc}
 8008b32:	bf00      	nop
 8008b34:	20000830 	.word	0x20000830

08008b38 <_getpid_r>:
 8008b38:	f7f8 bda4 	b.w	8001684 <_getpid>

08008b3c <__swhatbuf_r>:
 8008b3c:	b570      	push	{r4, r5, r6, lr}
 8008b3e:	460c      	mov	r4, r1
 8008b40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b44:	4615      	mov	r5, r2
 8008b46:	2900      	cmp	r1, #0
 8008b48:	461e      	mov	r6, r3
 8008b4a:	b096      	sub	sp, #88	; 0x58
 8008b4c:	da0c      	bge.n	8008b68 <__swhatbuf_r+0x2c>
 8008b4e:	89a3      	ldrh	r3, [r4, #12]
 8008b50:	2100      	movs	r1, #0
 8008b52:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008b56:	bf0c      	ite	eq
 8008b58:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008b5c:	2340      	movne	r3, #64	; 0x40
 8008b5e:	2000      	movs	r0, #0
 8008b60:	6031      	str	r1, [r6, #0]
 8008b62:	602b      	str	r3, [r5, #0]
 8008b64:	b016      	add	sp, #88	; 0x58
 8008b66:	bd70      	pop	{r4, r5, r6, pc}
 8008b68:	466a      	mov	r2, sp
 8008b6a:	f000 f849 	bl	8008c00 <_fstat_r>
 8008b6e:	2800      	cmp	r0, #0
 8008b70:	dbed      	blt.n	8008b4e <__swhatbuf_r+0x12>
 8008b72:	9901      	ldr	r1, [sp, #4]
 8008b74:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008b78:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008b7c:	4259      	negs	r1, r3
 8008b7e:	4159      	adcs	r1, r3
 8008b80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b84:	e7eb      	b.n	8008b5e <__swhatbuf_r+0x22>

08008b86 <__smakebuf_r>:
 8008b86:	898b      	ldrh	r3, [r1, #12]
 8008b88:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008b8a:	079d      	lsls	r5, r3, #30
 8008b8c:	4606      	mov	r6, r0
 8008b8e:	460c      	mov	r4, r1
 8008b90:	d507      	bpl.n	8008ba2 <__smakebuf_r+0x1c>
 8008b92:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008b96:	6023      	str	r3, [r4, #0]
 8008b98:	6123      	str	r3, [r4, #16]
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	6163      	str	r3, [r4, #20]
 8008b9e:	b002      	add	sp, #8
 8008ba0:	bd70      	pop	{r4, r5, r6, pc}
 8008ba2:	466a      	mov	r2, sp
 8008ba4:	ab01      	add	r3, sp, #4
 8008ba6:	f7ff ffc9 	bl	8008b3c <__swhatbuf_r>
 8008baa:	9900      	ldr	r1, [sp, #0]
 8008bac:	4605      	mov	r5, r0
 8008bae:	4630      	mov	r0, r6
 8008bb0:	f7fc ffba 	bl	8005b28 <_malloc_r>
 8008bb4:	b948      	cbnz	r0, 8008bca <__smakebuf_r+0x44>
 8008bb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bba:	059a      	lsls	r2, r3, #22
 8008bbc:	d4ef      	bmi.n	8008b9e <__smakebuf_r+0x18>
 8008bbe:	f023 0303 	bic.w	r3, r3, #3
 8008bc2:	f043 0302 	orr.w	r3, r3, #2
 8008bc6:	81a3      	strh	r3, [r4, #12]
 8008bc8:	e7e3      	b.n	8008b92 <__smakebuf_r+0xc>
 8008bca:	89a3      	ldrh	r3, [r4, #12]
 8008bcc:	6020      	str	r0, [r4, #0]
 8008bce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bd2:	81a3      	strh	r3, [r4, #12]
 8008bd4:	9b00      	ldr	r3, [sp, #0]
 8008bd6:	6120      	str	r0, [r4, #16]
 8008bd8:	6163      	str	r3, [r4, #20]
 8008bda:	9b01      	ldr	r3, [sp, #4]
 8008bdc:	b15b      	cbz	r3, 8008bf6 <__smakebuf_r+0x70>
 8008bde:	4630      	mov	r0, r6
 8008be0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008be4:	f000 f81e 	bl	8008c24 <_isatty_r>
 8008be8:	b128      	cbz	r0, 8008bf6 <__smakebuf_r+0x70>
 8008bea:	89a3      	ldrh	r3, [r4, #12]
 8008bec:	f023 0303 	bic.w	r3, r3, #3
 8008bf0:	f043 0301 	orr.w	r3, r3, #1
 8008bf4:	81a3      	strh	r3, [r4, #12]
 8008bf6:	89a3      	ldrh	r3, [r4, #12]
 8008bf8:	431d      	orrs	r5, r3
 8008bfa:	81a5      	strh	r5, [r4, #12]
 8008bfc:	e7cf      	b.n	8008b9e <__smakebuf_r+0x18>
	...

08008c00 <_fstat_r>:
 8008c00:	b538      	push	{r3, r4, r5, lr}
 8008c02:	2300      	movs	r3, #0
 8008c04:	4d06      	ldr	r5, [pc, #24]	; (8008c20 <_fstat_r+0x20>)
 8008c06:	4604      	mov	r4, r0
 8008c08:	4608      	mov	r0, r1
 8008c0a:	4611      	mov	r1, r2
 8008c0c:	602b      	str	r3, [r5, #0]
 8008c0e:	f7f8 fd9e 	bl	800174e <_fstat>
 8008c12:	1c43      	adds	r3, r0, #1
 8008c14:	d102      	bne.n	8008c1c <_fstat_r+0x1c>
 8008c16:	682b      	ldr	r3, [r5, #0]
 8008c18:	b103      	cbz	r3, 8008c1c <_fstat_r+0x1c>
 8008c1a:	6023      	str	r3, [r4, #0]
 8008c1c:	bd38      	pop	{r3, r4, r5, pc}
 8008c1e:	bf00      	nop
 8008c20:	20000830 	.word	0x20000830

08008c24 <_isatty_r>:
 8008c24:	b538      	push	{r3, r4, r5, lr}
 8008c26:	2300      	movs	r3, #0
 8008c28:	4d05      	ldr	r5, [pc, #20]	; (8008c40 <_isatty_r+0x1c>)
 8008c2a:	4604      	mov	r4, r0
 8008c2c:	4608      	mov	r0, r1
 8008c2e:	602b      	str	r3, [r5, #0]
 8008c30:	f7f8 fd9c 	bl	800176c <_isatty>
 8008c34:	1c43      	adds	r3, r0, #1
 8008c36:	d102      	bne.n	8008c3e <_isatty_r+0x1a>
 8008c38:	682b      	ldr	r3, [r5, #0]
 8008c3a:	b103      	cbz	r3, 8008c3e <_isatty_r+0x1a>
 8008c3c:	6023      	str	r3, [r4, #0]
 8008c3e:	bd38      	pop	{r3, r4, r5, pc}
 8008c40:	20000830 	.word	0x20000830

08008c44 <_init>:
 8008c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c46:	bf00      	nop
 8008c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c4a:	bc08      	pop	{r3}
 8008c4c:	469e      	mov	lr, r3
 8008c4e:	4770      	bx	lr

08008c50 <_fini>:
 8008c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c52:	bf00      	nop
 8008c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c56:	bc08      	pop	{r3}
 8008c58:	469e      	mov	lr, r3
 8008c5a:	4770      	bx	lr
